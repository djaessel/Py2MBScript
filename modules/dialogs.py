# This Python file uses the following encoding: utf-8

import sys
sys.path.append("./data_objects/")

from dialog import Dialog



start_close_window = Dialog("anyone", "{!}Warning: This line is never displayed. It is just for storing conversation variables.", starting_state="start", ending_state="close_window")
def condition():
    _g_talk_troop = store_conversation_troop()
    _g_talk_agent = store_conversation_agent()
    _g_talk_x_troop_faction = store_faction_of_troop(_g_talk_troop)
    troop_get_player_relation(_g_talk_troop)
    _g_talk_troop_relation = reg0
    skill_lvl_001 = store_skill_level(skl.persuasion,trp.player)
    _g_talk_troop_effective_relation = _g_talk_troop_relation
    _g_talk_troop_effective_relation += skill_lvl_001
    if _g_talk_troop_effective_relation > 0:
        var002 = 10 + skill_lvl_001
        _g_talk_troop_effective_relation *= var002
        _g_talk_troop_effective_relation /= 10
    elif _g_talk_troop_effective_relation < 0:
        var002 = 20 - skill_lvl_001
        _g_talk_troop_effective_relation *= var002
        _g_talk_troop_effective_relation /= 20
    #end
    val_clamp(_g_talk_troop_effective_relation,-100,101)
    if _cheat_mode == 1:
        reg3 = _g_talk_troop_effective_relation
        print(gstr.test_effective_relation_equals_reg3)
    #end
    if is_between(_g_talk_troop,trp.village_1_elder,trp.merchants_end) or is_between(_g_talk_troop,trp.town_1_mayor,trp.village_1_elder):
        _g_talk_troop_relation = party_get_slot(_current_town,26)
    #end
    _g_talk_x_troop_faction_relation = store_relation(_g_talk_x_troop_faction,fac.player_faction)
    _g_talk_troop_party = _g_encountered_party
    if troop_slot_ge(_g_talk_troop,10,1):
        _g_talk_troop_party = troop_get_slot(_g_talk_troop,10)
    #end
    _g_current_hours = store_current_hours()
    _g_talk_troop_last_talk_time = troop_get_slot(_g_talk_troop,4)
    troop_set_slot(_g_talk_troop,4,_g_current_hours)
    _g_time_since_last_talk = _g_current_hours - _g_talk_troop_last_talk_time
    _g_talk_troop_met = troop_get_slot(_g_talk_troop,5)
    val_min(_g_talk_troop_met,1)
    if troop_slot_eq(_g_talk_troop,5,0):
        troop_set_slot(_g_talk_troop,5,1)
        if is_between(_g_talk_troop,trp.knight_1_1_wife,trp.heroes_end):
            pass
        #end
    #end
    if True:
        party_calculate_strength(p.collective_enemy,0)
        _g_enemy_strength = reg0
        party_calculate_strength(p.main_party,0)
        _g_ally_strength = reg0
        _g_strength_ratio = _g_ally_strength * 100
        var003 = _g_enemy_strength
        val_max(var003,1)
        _g_strength_ratio /= var003
    #end
    _g_comment_found = 0
    _g_comment_has_rejoinder = 0
    _g_romantic_comment_made = 0
    _skip_lord_assumes_argument = 0
    _bypass_female_vassal_explanation = 0
    _g_done_wedding_comment = 0
    if troop_is_hero(_g_talk_troop):
        talk_info_show(1)
        setup_talk_info()
    #end
    _g_last_comment_copied_to_s42 = 0
    if troop_slot_eq(_g_talk_troop,2,2):
        get_relevant_comment_to_s42()
        _g_comment_found = reg0
    #end
    reg65 = troop_get_type(_g_talk_troop)
    if faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop):
        s64 = str_store_string("@{reg65?my Lady:my Lord}")
        s65 = str_store_string("@{reg65?my Lady:my Lord}")
        s66 = str_store_string("@{reg65?My Lady:My Lord}")
        s67 = str_store_string("@{reg65?My Lady:My Lord}")
    else:
        s64 = str_store_string("@{reg65?madame:sir}")
        s65 = str_store_string("@{reg65?madame:sir}")
        s66 = str_store_string("@{reg65?Madame:Sir}")
        s67 = str_store_string("@{reg65?Madame:Sir}")
    #end
    if _cheat_mode > 0:
        reg4 = _talk_context
        print("@{!}DEBUG -- Talk context: {reg4}")
    #end
    if _cheat_mode > 0:
        reg4 = _g_time_since_last_talk
        print("@{!}DEBUG -- Time since last talk: {reg4}")
    #end
    if _cheat_mode == 0:
        partner_quest_004 = store_partner_quest()
        if partner_quest_004 >= 0:
            s4 = str_store_quest_name(partner_quest_004)
        #end
    #end
    eq(1, 0)
start_close_window.conditionBlock = condition


member_chat_close_window = Dialog("anyone", "{!}Warning: This line is never displayed. It is just for storing conversation variables.", starting_state="member_chat", ending_state="close_window")
def condition():
    _g_talk_troop = store_conversation_troop()
    if is_between(_g_talk_troop,trp.npc1,trp.kingdom_1_lord):
        talk_info_show(1)
        setup_talk_info_companions()
    elif is_between(_g_talk_troop,trp.kingdom_1_pretender,trp.knight_1_1_wife):
        talk_info_show(1)
        setup_talk_info()
    #end
    reg65 = troop_get_type(_g_talk_troop)
    reg65 = troop_get_type(_g_talk_troop)
    if faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop):
        s64 = str_store_string("@{reg65?my Lady:my Lord}")
        s65 = str_store_string("@{reg65?my Lady:my Lord}")
        s66 = str_store_string("@{reg65?My Lady:My Lord}")
    else:
        s64 = str_store_string("@{reg65?madame:sir}")
        s65 = str_store_string("@{reg65?madame:sir}")
        s66 = str_store_string("@{reg65?Madame:Sir}")
    #end
    _g_current_hours = store_current_hours()
    eq(1,0)
    troop_set_slot(_g_talk_troop,4,_g_current_hours)
member_chat_close_window.conditionBlock = condition


event_triggered_close_window = Dialog("anyone", "{!}Warning: This line is never displayed. It is just for storing conversation variables.", starting_state="event_triggered", ending_state="close_window")
def condition():
    _g_talk_troop = store_conversation_troop()
    if is_between(_g_talk_troop,trp.npc1,trp.kingdom_1_lord):
        talk_info_show(1)
        setup_talk_info_companions()
    #end
    reg65 = troop_get_type(_g_talk_troop)
    if faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop):
        s64 = str_store_string("@{reg65?my Lady:my Lord}")
        s65 = str_store_string("@{reg65?my Lady:my Lord}")
        s66 = str_store_string("@{reg65?My Lady:My Lord}")
    else:
        s64 = str_store_string("@{reg65?madame:sir}")
        s65 = str_store_string("@{reg65?madame:sir}")
        s66 = str_store_string("@{reg65?Madame:Sir}")
    #end
    eq(1,0)
event_triggered_close_window.conditionBlock = condition


event_triggered_award_fief_to_vassal = Dialog("anyone", "{!}{s5}", starting_state="event_triggered", ending_state="award_fief_to_vassal")
def condition():
    if _talk_context == 20:
        var001 = 0
        var002 = trp.knight_1_1_wife
        for troop_id_003 in range(trp.npc1, var002):
            if troop_slot_eq(troop_id_003,2,2) and trp.player != troop_id_003:
                troop_faction_004 = store_faction_of_troop(troop_id_003)
                if troop_faction_004 == fac.player_supporters_faction:
                    var001 += 1
                    var002 = 0
                #end
            #end
        #end
    #end
    if var001 > 0:
        s2 = str_store_string(gstr.do_you_wish_to_award_it_to_one_of_your_vassals)
    else:
        s2 = str_store_string(gstr.who_do_you_wish_to_give_it_to)
    #end
    s1 = str_store_party_name(_g_center_taken_by_player_faction)
    s5 = str_store_string(gstr.sire_my_lady_we_have_taken_s1_s2)
event_triggered_award_fief_to_vassal.conditionBlock = condition


award_fief_to_vassal_award_fief_to_vassal_defer = Dialog("anyone|plyr", "I wish to defer the appointment of a lord, until I take the counsel of my subjects", starting_state="award_fief_to_vassal", ending_state="award_fief_to_vassal_defer")
def condition():
    if is_between(_g_player_court,p.town_1,p.salt_mine):
        if party_faction_001 == fac.player_supporters_faction:
            party_faction_001 = store_faction_of_party(_g_player_court)
award_fief_to_vassal_award_fief_to_vassal_defer.conditionBlock = condition


award_fief_to_vassal_defer_close_window = Dialog("anyone", "As you wish, {sire/my lady}. You may decide this matter at a later date.", starting_state="award_fief_to_vassal_defer", ending_state="close_window")
def code():
    if faction_slot_eq(_players_kingdom,64,-1):
        faction_set_slot(_players_kingdom,64,_g_center_taken_by_player_faction)
    #end
    give_center_to_lord(_g_center_taken_by_player_faction,-1,0)
    _g_center_taken_by_player_faction = -1
    if _g_next_menu == mnu.castle_taken:
        jump_to_menu(_g_next_menu)
    #end
award_fief_to_vassal_defer_close_window.codeBlock = code


award_fief_to_vassal_award_fief_to_vassal_2 = Dialog("anyone|repeat_for_troops|plyr", "{!}{s11} {s1}.", starting_state="award_fief_to_vassal", ending_state="award_fief_to_vassal_2")
def condition():
    troop_id_001 = store_repeat_object()
    if troop_slot_eq(troop_id_001,2,2) and trp.player != troop_id_001:
        troop_faction_002 = store_faction_of_troop(troop_id_001)
        if troop_faction_002 == fac.player_supporters_faction:
            s11 = str_store_troop_name(troop_id_001)
            print_troop_owned_centers_in_numbers_to_s0(troop_id_001)
            if troop_slot_eq(_g_talk_troop,53,3):
                s12 = str_store_string(gstr._promised_fief)
            else:
                str_clear(12)
            #end
        #end
    #end
    if reg0 == 0:
        s1 = str_store_string(gstr.no_fiefss12)
    else:
        s1 = str_store_string(gstr.fiefs_s0s12)
    #end
award_fief_to_vassal_award_fief_to_vassal_2.conditionBlock = condition
def code():
    _temp = store_repeat_object()
award_fief_to_vassal_award_fief_to_vassal_2.codeBlock = code


award_fief_to_vassal_award_fief_to_vassal_2_1 = Dialog("anyone|plyr", "{!}{s5}", starting_state="award_fief_to_vassal", ending_state="award_fief_to_vassal_2")
def condition():
    print_troop_owned_centers_in_numbers_to_s0(trp.player)
    s1 = str_store_party_name(_g_center_taken_by_player_faction)
    if is_between(_g_talk_troop,trp.kingdom_1_pretender,trp.knight_1_1_wife):
        s12 = str_store_string(gstr.please_s65_)
    else:
        str_clear(12)
    #end
    var001 = 0
    var002 = trp.knight_1_1_wife
    for troop_id_003 in range(trp.npc1, var002):
        if troop_slot_eq(troop_id_003,2,2) and trp.player != troop_id_003:
            troop_faction_004 = store_faction_of_troop(troop_id_003)
            if troop_faction_004 == fac.player_supporters_faction:
                var001 += 1
                var002 = 0
            #end
        #end
    #end
    if var001 > 0:
        s2 = str_store_string(gstr.fiefs_s0)
    else:
        str_clear(2)
    #end
    s5 = str_store_string(gstr.s12i_want_to_have_s1_for_myself)
award_fief_to_vassal_award_fief_to_vassal_2_1.conditionBlock = condition
def code():
    _temp = trp.player
award_fief_to_vassal_award_fief_to_vassal_2_1.codeBlock = code


award_fief_to_vassal_2_close_window = Dialog("anyone", "As you wish, {sire/my lady}. {reg6?I:{reg7?You:{s11}}} will be the new {reg3?lady:lord} of {s1}.", starting_state="award_fief_to_vassal_2", ending_state="close_window")
def code():
    troop_id_001 = _temp
    give_center_to_lord(_g_center_taken_by_player_faction,troop_id_001,0)
    if faction_slot_eq(_players_kingdom,64,_g_center_taken_by_player_faction):
        faction_set_slot(_players_kingdom,64,-1)
    #end
    reg6 = 0
    reg7 = 0
    if troop_id_001 == _g_talk_troop:
        reg6 = 1
    elif troop_id_001 == trp.player:
        reg7 = 1
    else:
        s11 = str_store_troop_name(troop_id_001)
    #end
    s1 = str_store_party_name(_g_center_taken_by_player_faction)
    reg3 = troop_get_type(troop_id_001)
    _g_center_taken_by_player_faction = -1
    if _g_next_menu == mnu.castle_taken:
        jump_to_menu(_g_next_menu)
    #end
award_fief_to_vassal_2_close_window.codeBlock = code


event_triggered_center_captured_rebellion = Dialog("anyone", "{s1} is not being managed by anyone. Whom shall I put in charge?", starting_state="event_triggered", ending_state="center_captured_rebellion")
def condition():
    if faction_slot_eq(fac.player_supporters_faction,11,_g_talk_troop) and _g_center_taken_by_player_faction >= 0:
        s1 = str_store_party_name(_g_center_taken_by_player_faction)
event_triggered_center_captured_rebellion.conditionBlock = condition


center_captured_rebellion_center_captured_rebellion_2 = Dialog("anyone|repeat_for_troops|plyr", "{s11}. {s1}", starting_state="center_captured_rebellion", ending_state="center_captured_rebellion_2")
def condition():
    troop_id_001 = store_repeat_object()
    if troop_slot_eq(troop_id_001,2,2) and _g_talk_troop != troop_id_001 and trp.player != troop_id_001:
        troop_faction_002 = store_faction_of_troop(troop_id_001)
        if troop_faction_002 == fac.player_supporters_faction:
            s11 = str_store_troop_name(troop_id_001)
            print_troop_owned_centers_in_numbers_to_s0(troop_id_001)
            if reg0 == 0:
                s1 = str_store_string("@[[[no fiefs]]]")
            else:
                s1 = str_store_string("@[[[fiefs: {s0}]]]")
            #end
        #end
    #end
center_captured_rebellion_center_captured_rebellion_2.conditionBlock = condition
def code():
    _temp = store_repeat_object()
center_captured_rebellion_center_captured_rebellion_2.codeBlock = code


center_captured_rebellion_center_captured_rebellion_2_1 = Dialog("anyone|plyr", "Please {s65}, I want to have {s1} for myself. (fiefs: {s0})", starting_state="center_captured_rebellion", ending_state="center_captured_rebellion_2")
def condition():
    print_troop_owned_centers_in_numbers_to_s0(trp.player)
    s1 = str_store_party_name(_g_center_taken_by_player_faction)
center_captured_rebellion_center_captured_rebellion_2_1.conditionBlock = condition
def code():
    _temp = trp.player
center_captured_rebellion_center_captured_rebellion_2_1.codeBlock = code


center_captured_rebellion_center_captured_rebellion_2_2 = Dialog("anyone|plyr", "{s66}, you should have {s1} for yourself. (fiefs: {s0})", starting_state="center_captured_rebellion", ending_state="center_captured_rebellion_2")
def condition():
    print_troop_owned_centers_in_numbers_to_s0(_g_talk_troop)
    s1 = str_store_party_name(_g_center_taken_by_player_faction)
center_captured_rebellion_center_captured_rebellion_2_2.conditionBlock = condition
def code():
    _temp = _g_talk_troop
center_captured_rebellion_center_captured_rebellion_2_2.codeBlock = code


center_captured_rebellion_2_close_window = Dialog("anyone", "Hmmm. All right, {playername}. I value your counsel highly. {reg6?I:{reg7?You:{s11}}} will be the new {reg3?lady:lord} of {s1}.", starting_state="center_captured_rebellion_2", ending_state="close_window")
def code():
    troop_id_001 = _temp
    calculate_troop_score_for_center(troop_id_001,_g_center_taken_by_player_faction)
    var002 = reg0
    assign(var003,0)
    for trp_004 in range(trp.npc1, trp.knight_1_1_wife):
        if troop_slot_eq(trp_004,2,2):
            troop_faction_005 = store_faction_of_troop(trp_004)
            if troop_faction_005 == fac.player_supporters_faction and trp_004 != troop_id_001 and not troop_slot_eq(trp_004,154,troop_id_001):
                troop_get_relation_with_troop(trp_004,troop_id_001)
                if reg0 < 25:
                    calculate_troop_score_for_center(trp_004,_g_center_taken_by_player_faction)
                    var006 = reg0
                    if var006 > var002:
                        var007 = var006 - var002
                        random_x_008 = store_random_in_range(0,var007)
                        random_x_008 /= 1000
                        if random_x_008 > 0:
                            var003 += random_x_008
                            random_x_008 *= -1
                            change_player_relation_with_troop(trp_004,random_x_008)
                        #end
                    #end
                #end
            #end
        #end
    #end
    var003 *= 2
    var003 /= 3
    var003 += 5
    if troop_id_001 != trp.player:
        val_min(var003,30)
        change_player_relation_with_troop(troop_id_001,var003)
    #end
    give_center_to_lord(_g_center_taken_by_player_faction,troop_id_001,0)
    if faction_slot_eq(_players_kingdom,64,_g_center_taken_by_player_faction):
        faction_set_slot(_players_kingdom,64,-1)
    #end
    reg6 = 0
    reg7 = 0
    if troop_id_001 == _g_talk_troop:
        reg6 = 1
    elif troop_id_001 == trp.player:
        reg7 = 1
    else:
        s11 = str_store_troop_name(troop_id_001)
    #end
    s1 = str_store_party_name(_g_center_taken_by_player_faction)
    reg3 = troop_get_type(troop_id_001)
    _g_center_taken_by_player_faction = -1
    if _g_next_menu == mnu.castle_taken:
        jump_to_menu(_g_next_menu)
    #end
center_captured_rebellion_2_close_window.codeBlock = code


start_fighter_talk = Dialog("anyone", "Hello there. We are polishing off our combat skills here with a bit of sparring practice. You look like you could use a bit of training. Why don't you join us, and we can show you a few tricks. And if you need explanation of any combat concepts, just ask, and I will do my best to fill you in.", starting_state="start", ending_state="fighter_talk")
def condition():
    if is_between(_g_talk_troop,trp.tutorial_fighter_1,trp.tutorial_archer_1) and _g_tutorial_training_ground_conversation_state == 0 and _g_tutorial_fighter_talk_before == 0:
        pass
start_fighter_talk.conditionBlock = condition
def code():
    if _g_tutorial_training_ground_intro_message_being_displayed == 1:
        _g_tutorial_training_ground_intro_message_being_displayed = 0
        tutorial_message(-1)
    #end
    _g_tutorial_fighter_talk_before = 1
start_fighter_talk.codeBlock = code


start_fighter_talk_1 = Dialog("anyone", "What do you want to practice?", starting_state="start", ending_state="fighter_talk")
def condition():
    if is_between(_g_talk_troop,trp.tutorial_fighter_1,trp.tutorial_archer_1) and _g_tutorial_training_ground_conversation_state == 0:
        pass
start_fighter_talk_1.conditionBlock = condition


fighter_pretalk_fighter_talk = Dialog("anyone", "Tell me what kind of practice you want.", starting_state="fighter_pretalk", ending_state="fighter_talk")


fighter_talk_fighter_talk_train_attack = Dialog("anyone|plyr", "I want to practice attacking.", starting_state="fighter_talk", ending_state="fighter_talk_train_attack")


fighter_talk_fighter_talk_train_parry = Dialog("anyone|plyr", "I want to practice blocking with my weapon.", starting_state="fighter_talk", ending_state="fighter_talk_train_parry")


fighter_talk_fighter_talk_train_combat = Dialog("anyone|plyr", "Let's do some sparring practice.", starting_state="fighter_talk", ending_state="fighter_talk_train_combat")


fighter_talk_fighter_talk_train_chamber = Dialog("anyone|plyr", "{!}TODO: Let's train chamber blocking.", starting_state="fighter_talk", ending_state="fighter_talk_train_chamber")
def condition():
    if 1 == 0:
        pass
fighter_talk_fighter_talk_train_chamber.conditionBlock = condition


fighter_talk_close_window = Dialog("anyone|plyr", "[Leave]", starting_state="fighter_talk", ending_state="close_window")


fighter_talk_train_attack_fighter_talk_train_attack_2 = Dialog("anyone", "All right. There are four principle directions for attacking. These are overhead swing, right swing, left swing and thrust. Now, I will tell you which direction to attack from and you must try to do the correct attack. ^^(Move your mouse while you press the left mouse button to specify attack direction. For example, to execute an overhead attack, move the mouse up at the instant you press the left mouse button. The icons on your screen will help you do the correct action.)", starting_state="fighter_talk_train_attack", ending_state="fighter_talk_train_attack_2")
def condition():
    if agent_has_item_equipped(agent_no_001,itm.practice_sword):
        agent_no_001 = get_player_agent_no()
fighter_talk_train_attack_fighter_talk_train_attack_2.conditionBlock = condition


fighter_talk_train_attack_2_close_window = Dialog("anyone|plyr", "Let's begin then. I am ready.", starting_state="fighter_talk_train_attack_2", ending_state="close_window")
def code():
    _g_tutorial_training_ground_melee_trainer_attack = _g_talk_troop
    _g_tutorial_training_ground_melee_state = 0
    _g_tutorial_training_ground_melee_trainer_action_state = 0
    _g_tutorial_training_ground_current_score = 0
    _g_tutorial_training_ground_current_score_2 = 0
    _g_tutorial_update_mouse_presentation = 0
fighter_talk_train_attack_2_close_window.codeBlock = code


fighter_talk_train_attack_2_fighter_pretalk = Dialog("anyone|plyr", "Actually I want to do something else.", starting_state="fighter_talk_train_attack_2", ending_state="fighter_pretalk")


fighter_talk_train_attack_close_window = Dialog("anyone", "{!}{s3}", starting_state="fighter_talk_train_attack", ending_state="close_window")
def condition():
    s3 = str_store_string(gstr.tutorial_training_ground_warning_no_weapon)
fighter_talk_train_attack_close_window.conditionBlock = condition


fighter_talk_train_parry_fighter_talk_train_parry_2 = Dialog("anyone", "Unlike a shield, blocking with a weapon can only stop attacks coming from one direction. For example if you block up, you'll deflect overhead attacks, but you can still be hit by side swings or thrust attacks. ^^(You must press and hold down the right mouse button to block.)", starting_state="fighter_talk_train_parry", ending_state="fighter_talk_train_parry_2")
def condition():
    if agent_has_item_equipped(agent_no_001,itm.practice_sword):
        agent_no_001 = get_player_agent_no()
fighter_talk_train_parry_fighter_talk_train_parry_2.conditionBlock = condition


fighter_talk_train_parry_2_fighter_talk_train_parry_3 = Dialog("anyone", "I'll now attack you with different types of strokes, and I will wait until you do the correct block before attacking. Try to do the correct block as soon as you can. ^^(This practice is easy to do with the 'automatic block direction' setting which is the default. If you go to the Options menu and change defend direction control to 'mouse movement' or 'keyboard', you'll need to manually choose block direction. This is much more challenging, but makes the game much more interesting. This practice can be very useful if you use manual blocking.)", starting_state="fighter_talk_train_parry_2", ending_state="fighter_talk_train_parry_3")


fighter_talk_train_parry_3_close_window = Dialog("anyone|plyr", "Let's begin then. I am ready.", starting_state="fighter_talk_train_parry_3", ending_state="close_window")
def code():
    _g_tutorial_training_ground_melee_trainer_parry = _g_talk_troop
    _g_tutorial_training_ground_melee_state = 0
    _g_tutorial_training_ground_melee_trainer_action_state = 0
    _g_tutorial_training_ground_current_score = 0
fighter_talk_train_parry_3_close_window.codeBlock = code


fighter_talk_train_parry_3_fighter_pretalk = Dialog("anyone|plyr", "Actually I want to do something else.", starting_state="fighter_talk_train_parry_3", ending_state="fighter_pretalk")


fighter_talk_train_parry_close_window = Dialog("anyone", "{!}{s3}", starting_state="fighter_talk_train_parry", ending_state="close_window")
def condition():
    s3 = str_store_string(gstr.tutorial_training_ground_warning_no_weapon)
fighter_talk_train_parry_close_window.conditionBlock = condition


fighter_talk_train_chamber_close_window = Dialog("anyone", "{!}TODO: OK.", starting_state="fighter_talk_train_chamber", ending_state="close_window")
def condition():
    if agent_has_item_equipped(agent_no_001,itm.practice_sword):
        agent_no_001 = get_player_agent_no()
fighter_talk_train_chamber_close_window.conditionBlock = condition
def code():
    _g_tutorial_training_ground_melee_trainer_chamber = _g_talk_troop
    _g_tutorial_training_ground_melee_state = 0
    _g_tutorial_training_ground_melee_trainer_action_state = 0
    _g_tutorial_training_ground_current_score = 0
fighter_talk_train_chamber_close_window.codeBlock = code


fighter_talk_train_chamber_close_window_1 = Dialog("anyone", "{!}{s3}", starting_state="fighter_talk_train_chamber", ending_state="close_window")
def condition():
    s3 = str_store_string(gstr.tutorial_training_ground_warning_no_weapon)
fighter_talk_train_chamber_close_window_1.conditionBlock = condition


fighter_talk_train_combat_fighter_talk_train_combat_2 = Dialog("anyone", "Sparring is an excellent way to prepare for actual combat. We'll fight each other with non-lethal weapons now, until one of us falls to the ground. You can get some bruises of course, but better that than being cut down in the real thing.", starting_state="fighter_talk_train_combat", ending_state="fighter_talk_train_combat_2")
def condition():
    if agent_has_item_equipped(agent_no_001,itm.practice_sword):
        agent_no_001 = get_player_agent_no()
fighter_talk_train_combat_fighter_talk_train_combat_2.conditionBlock = condition


fighter_talk_train_combat_2_close_window = Dialog("anyone|plyr", "Let's begin then. I am ready.", starting_state="fighter_talk_train_combat_2", ending_state="close_window")
def code():
    _g_tutorial_training_ground_melee_trainer_combat = _g_talk_troop
    _g_tutorial_training_ground_melee_state = 0
    _g_tutorial_training_ground_melee_trainer_action_state = 0
fighter_talk_train_combat_2_close_window.codeBlock = code


fighter_talk_train_combat_2_fighter_pretalk = Dialog("anyone|plyr", "Actually I want to do something else.", starting_state="fighter_talk_train_combat_2", ending_state="fighter_pretalk")


fighter_talk_train_combat_close_window = Dialog("anyone", "{!}{s3}", starting_state="fighter_talk_train_combat", ending_state="close_window")
def condition():
    s3 = str_store_string(gstr.tutorial_training_ground_warning_no_weapon)
fighter_talk_train_combat_close_window.conditionBlock = condition


start_fighter_parry_try_again = Dialog("anyone", "Good. You were able to block my attacks successfully. You may repeat this practice and try to get faster each time, until you are confident of your defense skills. Do you want to have another go?", starting_state="start", ending_state="fighter_parry_try_again")
def condition():
    if is_between(_g_talk_troop,trp.tutorial_fighter_1,trp.tutorial_archer_1) and _g_tutorial_training_ground_conversation_state == 1:
        pass
start_fighter_parry_try_again.conditionBlock = condition
def code():
    _g_tutorial_training_ground_conversation_state = 0
start_fighter_parry_try_again.codeBlock = code


start_fighter_parry_try_again_1 = Dialog("anyone", "Well that didn't go too well, did it? (Remember, you must press and hold down the right mouse button to keep your block effective.) Do you want to try again?", starting_state="start", ending_state="fighter_parry_try_again")
def condition():
    if is_between(_g_talk_troop,trp.tutorial_fighter_1,trp.tutorial_archer_1) and _g_tutorial_training_ground_conversation_state == 2:
        pass
start_fighter_parry_try_again_1.conditionBlock = condition
def code():
    _g_tutorial_training_ground_conversation_state = 0
start_fighter_parry_try_again_1.codeBlock = code


fighter_parry_try_again_fighter_talk_train_parry = Dialog("anyone|plyr", "Yes. Let's try again.", starting_state="fighter_parry_try_again", ending_state="fighter_talk_train_parry")


fighter_parry_try_again_fighter_talk_leave_parry = Dialog("anyone|plyr", "No, I think I am done for now.", starting_state="fighter_parry_try_again", ending_state="fighter_talk_leave_parry")


start_fighter_parry_warn = Dialog("anyone", "Hey! We are doing a blocking practice, mate! You are supposed to block my attacks, not attack me back.", starting_state="start", ending_state="fighter_parry_warn")
def condition():
    if is_between(_g_talk_troop,trp.tutorial_fighter_1,trp.tutorial_archer_1) and _g_tutorial_training_ground_conversation_state == 3:
        pass
start_fighter_parry_warn.conditionBlock = condition
def code():
    _g_tutorial_training_ground_conversation_state = 0
start_fighter_parry_warn.codeBlock = code


fighter_parry_warn_fighter_talk_train_parry = Dialog("anyone|plyr", "I am sorry. Let's try once again.", starting_state="fighter_parry_warn", ending_state="fighter_talk_train_parry")


fighter_parry_warn_fighter_talk_leave_parry = Dialog("anyone|plyr", "Sorry. I must leave this practice now.", starting_state="fighter_parry_warn", ending_state="fighter_talk_leave_parry")


fighter_talk_leave_parry_close_window = Dialog("anyone", "All right. As you wish.", starting_state="fighter_talk_leave_parry", ending_state="close_window")


start_fighter_combat_try_again = Dialog("anyone", "Well that didn't go too well, did it?  Don't feel bad, and try not to do same mistakes next time. Do you want to have a go again?", starting_state="start", ending_state="fighter_combat_try_again")
def condition():
    if is_between(_g_talk_troop,trp.tutorial_fighter_1,trp.tutorial_archer_1) and _g_tutorial_training_ground_conversation_state == 4:
        pass
start_fighter_combat_try_again.conditionBlock = condition
def code():
    _g_tutorial_training_ground_conversation_state = 0
start_fighter_combat_try_again.codeBlock = code


fighter_combat_try_again_fighter_talk_train_combat = Dialog("anyone|plyr", "Yes. Let's do another round.", starting_state="fighter_combat_try_again", ending_state="fighter_talk_train_combat")


fighter_combat_try_again_fighter_talk_leave_combat = Dialog("anyone|plyr", "No. That was enough for me.", starting_state="fighter_combat_try_again", ending_state="fighter_talk_leave_combat")


fighter_talk_leave_combat_close_window = Dialog("anyone", "Well, all right. Talk to me again if you change your mind.", starting_state="fighter_talk_leave_combat", ending_state="close_window")


start_fighter_combat_try_again_1 = Dialog("anyone", "Hey, that was good sparring. You defeated me, but next time I'll be more careful. Do you want to have a go again?", starting_state="start", ending_state="fighter_combat_try_again")
def condition():
    if is_between(_g_talk_troop,trp.tutorial_fighter_1,trp.tutorial_archer_1) and _g_tutorial_training_ground_conversation_state == 5:
        pass
start_fighter_combat_try_again_1.conditionBlock = condition
def code():
    _g_tutorial_training_ground_conversation_state = 0
start_fighter_combat_try_again_1.codeBlock = code


start_fighter_chamber_warn = Dialog("anyone", "{!}TODO: What are you doing? Don't attack me except while chambering!", starting_state="start", ending_state="fighter_chamber_warn")
def condition():
    if is_between(_g_talk_troop,trp.tutorial_fighter_1,trp.tutorial_archer_1) and _g_tutorial_training_ground_conversation_state == 8:
        pass
start_fighter_chamber_warn.conditionBlock = condition
def code():
    _g_tutorial_training_ground_conversation_state = 0
start_fighter_chamber_warn.codeBlock = code


start_fighter_talk_2 = Dialog("anyone", "Very good. You have learned how to attack from any direction you want. If you like we can try this again or move to a different exercise.", starting_state="start", ending_state="fighter_talk")
def condition():
    if is_between(_g_talk_troop,trp.tutorial_fighter_1,trp.tutorial_archer_1) and _g_tutorial_training_ground_conversation_state == 9:
        pass
start_fighter_talk_2.conditionBlock = condition
def code():
    _g_tutorial_training_ground_conversation_state = 0
start_fighter_talk_2.codeBlock = code


fighter_chamber_warn_fighter_talk_train_chamber = Dialog("anyone|plyr", "{!}TODO: Sorry, let's try once again.", starting_state="fighter_chamber_warn", ending_state="fighter_talk_train_chamber")


fighter_chamber_warn_close_window = Dialog("anyone|plyr", "{!}TODO: Sorry. I want to leave the exercise.", starting_state="fighter_chamber_warn", ending_state="close_window")


start_tutorial_troop_default = Dialog("auto_proceed|trp_tutorial_archer_1", "{!}.", starting_state="start", ending_state="tutorial_troop_default")


start_archer_challenge_2 = Dialog("trp_tutorial_master_archer", "Not bad. Not bad at all! You seem to have grasped the basics of archery. Now, try to do the same thing with a crossbow. Take the crossbow and the bolts over there and shoot those three targets. The crossbow is much easier to shoot with compared with the bow, but you need to reload it after each shot.", starting_state="start", ending_state="archer_challenge_2")
def condition():
    if _g_tutorial_training_ground_archer_trainer_completed_chapters == 1:
        pass
start_archer_challenge_2.conditionBlock = condition


start_archer_challenge_2_1 = Dialog("trp_tutorial_master_archer", "Good. You didn't have too much difficulty using the crossbow either. Next you will learn to use throwing weapons. Pick up the javelins you see over there and try to hit those three targets. ", starting_state="start", ending_state="archer_challenge_2")
def condition():
    if _g_tutorial_training_ground_archer_trainer_completed_chapters == 2:
        pass
start_archer_challenge_2_1.conditionBlock = condition


start_ranged_end = Dialog("trp_tutorial_master_archer", "Well, with that you have recevied the basic skills to use all three types of ranged weapons. The rest will come with practice. Train each and every day, and in time you will be as good as the best marksmen in Calradia.", starting_state="start", ending_state="ranged_end")
def condition():
    if _g_tutorial_training_ground_archer_trainer_completed_chapters == 3:
        pass
start_ranged_end.conditionBlock = condition


ranged_end_close_window = Dialog("trp_tutorial_master_archer", "Now, you can go talk with the melee fighters or the horsemanship trainer if you haven't already done so. They can teach you important skills too.", starting_state="ranged_end", ending_state="close_window")


start_archer_talk = Dialog("trp_tutorial_master_archer", "Good day to you, young fellow. I spend my days teaching about ranged weapons to anyone that is willing to learn. If you need a tutor, let me know and I'll teach you how to use the bow, the crossbow and the javelin.", starting_state="start", ending_state="archer_talk")
def condition():
    if _g_tutorial_training_ground_intro_message_being_displayed == 1:
        _g_tutorial_training_ground_intro_message_being_displayed = 0
        tutorial_message(-1)
    #end
start_archer_talk.conditionBlock = condition


archer_talk_archer_challenge = Dialog("anyone|plyr", "Yes, show me how to use ranged weapons.", starting_state="archer_talk", ending_state="archer_challenge")
def condition():
    if _g_tutorial_training_ground_archer_trainer_completed_chapters == 0:
        pass
archer_talk_archer_challenge.conditionBlock = condition


archer_talk_close_window = Dialog("anyone|plyr", "No, not now.", starting_state="archer_talk", ending_state="close_window")


archer_challenge_archer_challenge_2 = Dialog("trp_tutorial_master_archer", "All right. Your first training will be in bowmanship. The bow is a difficult weapon to master. But once you are sufficiently good at it, you can shoot quickly and with great power. Go pick up the bow and arrows you see over there now and shoot those targets.", starting_state="archer_challenge", ending_state="archer_challenge_2")
def condition():
    if _g_tutorial_training_ground_archer_trainer_completed_chapters == 0:
        pass
archer_challenge_archer_challenge_2.conditionBlock = condition


archer_challenge_2_close_window = Dialog("anyone|plyr", "All right. I am ready.", starting_state="archer_challenge_2", ending_state="close_window")
def code():
    _g_tutorial_training_ground_archer_trainer_state = 1
    if _g_tutorial_training_ground_archer_trainer_completed_chapters == 0:
        _g_tutorial_training_ground_archer_trainer_item_1 = itm.practice_bow
        _g_tutorial_training_ground_archer_trainer_item_2 = itm.practice_arrows
    elif _g_tutorial_training_ground_archer_trainer_completed_chapters == 1:
        _g_tutorial_training_ground_archer_trainer_item_1 = itm.practice_crossbow
        _g_tutorial_training_ground_archer_trainer_item_2 = itm.practice_bolts
    else:
        _g_tutorial_training_ground_archer_trainer_item_1 = itm.practice_javelin
        _g_tutorial_training_ground_archer_trainer_item_2 = -1
    #end
archer_challenge_2_close_window.codeBlock = code


archer_challenge_2_close_window_1 = Dialog("anyone|plyr", "Just a minute. I want to do something else first.", starting_state="archer_challenge_2", ending_state="close_window")


start_horseman_melee_challenge_2 = Dialog("trp_tutorial_master_horseman", "I hope you enjoyed the ride. Now we move on to something a bit more difficult. Grab the lance you see over there and ride around the course hitting each target at least once.", starting_state="start", ending_state="horseman_melee_challenge_2")
def condition():
    if _g_tutorial_training_ground_horseman_trainer_completed_chapters == 1:
        pass
start_horseman_melee_challenge_2.conditionBlock = condition


start_horseman_melee_challenge_2_1 = Dialog("trp_tutorial_master_horseman", "Good! You have been able to hit all targets on horseback. That's no easy feat for a starter. Your next challange will be using a bow and arrows to shoot at the archery targets by the road. You need to put an arrow to each target to consider yourself successful.", starting_state="start", ending_state="horseman_melee_challenge_2")
def condition():
    if _g_tutorial_training_ground_horseman_trainer_completed_chapters == 2:
        pass
start_horseman_melee_challenge_2_1.conditionBlock = condition


start_horsemanship_end = Dialog("trp_tutorial_master_horseman", "Very good. You were able to shoot all targets from horseback. Keep riding and practicing each day and in time you will be an expert horseman.", starting_state="start", ending_state="horsemanship_end")
def condition():
    if _g_tutorial_training_ground_horseman_trainer_completed_chapters == 3:
        pass
start_horsemanship_end.conditionBlock = condition


horsemanship_end_close_window = Dialog("trp_tutorial_master_horseman", "Now, you can go talk with the melee fighters or the archery trainer if you haven't already done so. You need to learn everything you can to be prepared when you have to defend yourself.", starting_state="horsemanship_end", ending_state="close_window")


start_horseman_talk = Dialog("trp_tutorial_master_horseman", "Good day! I have come here for some riding practice, but my old bones are aching badly so I decided to give myself a rest today. If you would like to practice your horsemanship, you can take my horse here. The exercise would be good for her.", starting_state="start", ending_state="horseman_talk")
def condition():
    if _g_tutorial_training_ground_intro_message_being_displayed == 1:
        _g_tutorial_training_ground_intro_message_being_displayed = 0
        tutorial_message(-1)
    #end
start_horseman_talk.conditionBlock = condition


horseman_talk_horseman_challenge = Dialog("anyone|plyr", "Yes, I would like to practice riding.", starting_state="horseman_talk", ending_state="horseman_challenge")


horseman_talk_close_window = Dialog("anyone|plyr", "Uhm. Maybe later.", starting_state="horseman_talk", ending_state="close_window")


horseman_challenge_horseman_melee_challenge_2 = Dialog("trp_tutorial_master_horseman", "Good. Now, I will give you a few exercises that'll teach you riding and horseback weapon use. Your first assignment is simple. Just take your horse for a ride around the course. Go as slow or as fast as you like. Come back when you feel confident as a rider and I'll give you some tougher exercises.", starting_state="horseman_challenge", ending_state="horseman_melee_challenge_2")
def condition():
    if _g_tutorial_training_ground_horseman_trainer_completed_chapters == 0:
        pass
horseman_challenge_horseman_melee_challenge_2.conditionBlock = condition


horseman_melee_challenge_2_close_window = Dialog("anyone|plyr", "All right. I am ready.", starting_state="horseman_melee_challenge_2", ending_state="close_window")
def code():
    _g_tutorial_training_ground_horseman_trainer_state = 1
    if _g_tutorial_training_ground_horseman_trainer_completed_chapters == 0:
        _g_tutorial_training_ground_horseman_trainer_item_1 = -1
        _g_tutorial_training_ground_horseman_trainer_item_2 = -1
    elif _g_tutorial_training_ground_horseman_trainer_completed_chapters == 1:
        _g_tutorial_training_ground_horseman_trainer_item_1 = itm.arena_lance
        _g_tutorial_training_ground_horseman_trainer_item_2 = -1
    else:
        _g_tutorial_training_ground_horseman_trainer_item_1 = itm.practice_bow_2
        _g_tutorial_training_ground_horseman_trainer_item_2 = itm.practice_arrows_2
    #end
horseman_melee_challenge_2_close_window.codeBlock = code


horseman_melee_challenge_2_close_window_1 = Dialog("anyone|plyr", "Just a minute. I need to do something else first.", starting_state="horseman_melee_challenge_2", ending_state="close_window")


start_tutorial_troop_default_1 = Dialog("auto_proceed|trp_tutorial_rider_1", "{!}Warning: This line is never displayed.", starting_state="start", ending_state="tutorial_troop_default")


start_tutorial_troop_default_2 = Dialog("auto_proceed|trp_tutorial_rider_2", "{!}Warning: This line is never displayed.", starting_state="start", ending_state="tutorial_troop_default")


tutorial_troop_default_close_window = Dialog("anyone", "Hey, I am trying to practice here. Go, talk with the archery trainer if you need guidance about ranged weapons.", starting_state="tutorial_troop_default", ending_state="close_window")
def condition():
    if _g_tutorial_training_ground_intro_message_being_displayed == 1:
        _g_tutorial_training_ground_intro_message_being_displayed = 0
        tutorial_message(-1)
    #end
tutorial_troop_default_close_window.conditionBlock = condition


start_lord_prison_break_confirm_3 = Dialog("anyone", "Is there a change of plans?", starting_state="start", ending_state="lord_prison_break_confirm_3")
def condition():
    if _talk_context == 18 and troop_slot_eq(_g_talk_troop,8,_g_encountered_party) and troop_slot_ge(_g_talk_troop,149,1):
        pass
start_lord_prison_break_confirm_3.conditionBlock = condition


start_lord_prison_break = Dialog("anyone", "What's going on?", starting_state="start", ending_state="lord_prison_break")
def condition():
    if _talk_context == 18:
        if _cheat_mode == 1:
            reg0 = _g_talk_troop
            reg1 = _g_encountered_party
            reg2 = troop_get_slot(_g_talk_troop,8)
            print("@{!}g talk troop = {reg0} ;;; g encountered party = {reg1} ;;; slot value = {reg2}")
            if troop_slot_eq(_g_talk_troop,8,_g_encountered_party):
                pass
            #end
        #end
    #end
start_lord_prison_break.conditionBlock = condition


start_drunk_response = Dialog("anyone", "What are you looking at?", starting_state="start", ending_state="drunk_response")
def condition():
    if _g_talk_troop == trp.belligerent_drunk:
        pass
start_drunk_response.conditionBlock = condition
def code():
    if _g_main_attacker_agent == 0:
        activate_tavern_attackers()
    #end
    mission_disable_talk()
start_drunk_response.codeBlock = code


start_drunk_response_1 = Dialog("anyone", "Are you looking at me?", starting_state="start", ending_state="drunk_response")
def condition():
    if _g_talk_troop == trp.hired_assassin:
        pass
start_drunk_response_1.conditionBlock = condition
def code():
    if _g_main_attacker_agent == 0:
        activate_tavern_attackers()
    #end
    mission_disable_talk()
start_drunk_response_1.codeBlock = code


start_close_window_1 = Dialog("anyone", "{!}Added to match dialog ids with translations.", starting_state="start", ending_state="close_window")
def condition():
    if _g_talk_troop == trp.hired_assassin and 1 == 0:
        pass
start_close_window_1.conditionBlock = condition


start_player_duel_response = Dialog("anyone", "{!}{s9}", starting_state="start", ending_state="player_duel_response")
def condition():
    if is_between(_g_talk_troop,trp.town_1_tavernkeeper,trp.town_1_merchant) and _g_main_attacker_agent > 0 and not agent_is_alive(_g_main_attacker_agent):
        if not agent_is_alive(_g_main_attacker_agent):
            troop_id_001 = agent_get_troop_id(_g_main_attacker_agent)
            if troop_id_001 == trp.hired_assassin:
                s9 = str_store_string(gstr.strange_that_one_didnt_seem_like_your_ordenary_troublemaker_he_didnt_drink_all_that_much__he_just_stood_there_quietly_and_watched_the_door_you_may_wish_to_consider_whether_you_have_any_enemies_who_know_you_are_in_town_a_pity_that_blood_had_to_be_spilled_in_my_establishment)
                _g_main_attacker_agent = 0
                troop_add_gold(trp.player,50)
                troop_add_item(trp.player,itm.sword_viking_1,0)
            elif _g_attacker_drawn_weapon < itm.tutorial_spear:
                s9 = str_store_string(gstr.you_never_let_him_draw_his_weapon_still_it_looked_like_he_was_going_to_kill_you_take_his_sword_and_purse_i_suppose_he_was_trouble_but_its_not_good_for_an_establishment_to_get_a_name_as_a_place_where_men_are_killed)
                _g_main_attacker_agent = 0
                troop_add_gold(trp.player,50)
                troop_add_item(trp.player,itm.sword_viking_1,0)
                troop_change_relation_with_troop(trp.player,_g_talk_troop,-1)
            elif not agent_is_alive(_g_main_attacker_agent):
                s9 = str_store_string(gstr.well_id_say_that_he_started_it_that_entitles_you_to_his_sword_and_purse_i_suppose_have_a_drink_on_the_house_as_i_daresay_youve_saved_a_patron_or_two_a_broken_skull_still_i_hope_he_still_has_a_pulse_its_not_good_for_an_establishment_to_get_a_name_as_a_place_where_men_are_killed)
                _g_main_attacker_agent = 0
                troop_add_gold(trp.player,50)
                troop_add_item(trp.player,itm.sword_viking_1,0)
                troop_change_relation_with_troop(trp.player,_g_talk_troop,1)
            #end
        #end
    #end
    troop_set_slot(trp.hired_assassin,12,-1)
start_player_duel_response.conditionBlock = condition


start_close_window_2 = Dialog("anyone", "{!}{s9}", starting_state="start", ending_state="close_window")
def condition():
    if is_between(_g_talk_troop,trp.town_1_tavernkeeper,trp.town_1_merchant) and _g_main_attacker_agent > 0:
        if True:
            agent_no_001 = get_player_agent_no()
            agent_wieled_item_002 = agent_get_wielded_item(agent_no_001,0)
            if is_between(agent_wieled_item_002,itm.darts,itm.torch) and agent_wieled_item_002 != itm.javelin_melee and agent_wieled_item_002 != itm.throwing_spear_melee and agent_wieled_item_002 != itm.jarid_melee and agent_wieled_item_002 != itm.light_throwing_axes_melee and agent_wieled_item_002 != itm.throwing_axes_melee and agent_wieled_item_002 != itm.heavy_throwing_axes_melee:
                s9 = str_store_string(gstr.stop_no_shooting_no_shooting)
                var003 = -1
                troop_inv_capacity_004 = troop_get_inventory_capacity(trp.player)
                for inventory_slot_no_005 in range(0, troop_inv_capacity_004):
                    troop_inv_slot_006 = troop_get_inventory_slot(trp.player,inventory_slot_no_005)
                    if is_between(troop_inv_slot_006,itm.wooden_stick,itm.wooden_shield) and not is_between(troop_inv_slot_006,itm.darts,itm.torch):
                        var003 = troop_inv_slot_006
                        troop_inv_capacity_004 = 0
                    #end
                #end
            #end
        #end
        agent_set_wielded_item(agent_no_001,var003)
    else:
        s9 = str_store_string(gstr.em_ill_stay_out_of_this)
    #end
start_close_window_2.conditionBlock = condition


player_duel_response_close_window = Dialog("anyone|plyr", "Such a waste...", starting_state="player_duel_response", ending_state="close_window")


player_duel_response_close_window_1 = Dialog("anyone|plyr", "Better him than me", starting_state="player_duel_response", ending_state="close_window")


drunk_response_drunk_fight_start = Dialog("anyone|plyr", "I'm not sure... Some sort of animal, clearly", starting_state="drunk_response", ending_state="drunk_fight_start")


drunk_response_drunk_fight_start_1 = Dialog("anyone|plyr", "Excuse me -- please accept my apologies", starting_state="drunk_response", ending_state="drunk_fight_start")


drunk_fight_start_close_window = Dialog("anyone", "I'll wipe that smirk right off your face!", starting_state="drunk_fight_start", ending_state="close_window")
def code():
    troop_set_slot(trp.belligerent_drunk,12,0)
drunk_fight_start_close_window.codeBlock = code


drunk_response_drunk_player_high_renown = Dialog("anyone|plyr", "Do you have any idea who I am?", starting_state="drunk_response", ending_state="drunk_player_high_renown")
def condition():
    if troop_slot_ge(trp.player,7,150):
        pass
drunk_response_drunk_player_high_renown.conditionBlock = condition


drunk_player_high_renown_drunk_fight_start = Dialog("anyone", "Do I care?", starting_state="drunk_player_high_renown", ending_state="drunk_fight_start")
def condition():
    if _g_talk_troop == trp.hired_assassin:
        pass
drunk_player_high_renown_drunk_fight_start.conditionBlock = condition


drunk_player_high_renown_drunk_player_high_renown = Dialog("anyone", "Emmm... Actually... Yes, yes, I do know who you are, {sir/madame}. Please forgive me, your grace -- it must be the drink. I'll be leaving, now...", starting_state="drunk_player_high_renown", ending_state="drunk_player_high_renown")


drunk_player_high_renown_drunk_fight_start_1 = Dialog("anyone|plyr", "Why, if you want a fight, you shall have one!", starting_state="drunk_player_high_renown", ending_state="drunk_fight_start")


drunk_player_high_renown_close_window = Dialog("anyone|plyr", "I thought as much. Now, remove yourself from here", starting_state="drunk_player_high_renown", ending_state="close_window")
def code():
    _drunks_dont_pick_fights = 1
    troop_set_slot(trp.belligerent_drunk,12,0)
    deactivate_tavern_attackers()
    _g_belligerent_drunk_leaving = _g_main_attacker_agent
    mission_enable_talk()
    for cur_agent in __all_agents__:
        if agent_is_alive(cur_agent):
            pos4 = agent_get_position(cur_agent)
            agent_set_scripted_destination(cur_agent,4)
        #end
    #end
    pos1 = entry_point_get_position(0)
    agent_set_scripted_destination(_g_main_attacker_agent,1)
    _g_main_attacker_agent = 0
drunk_player_high_renown_close_window.codeBlock = code


start_fistfight_response = Dialog("anyone", "You look like a {fellow/lady} who can take a few hard knocks -- and deal them out, too. I have a business proposition for you.", starting_state="start", ending_state="fistfight_response")
def condition():
    if _g_talk_troop == trp.fight_promoter:
        pass
start_fistfight_response.conditionBlock = condition


fistfight_response_fistfight_response_2 = Dialog("anyone|plyr", "How's that?", starting_state="fistfight_response", ending_state="fistfight_response_2")


fistfight_response_2_fistfight_response_2a = Dialog("anyone", "Good -- I'm glad you're interested. Here's the plan... It's a little complicated, so listen well. ", starting_state="fistfight_response_2", ending_state="fistfight_response_2a")


fistfight_response_2a_fistfight_response_3 = Dialog("anyone", "You and this other fellow will start up a fight here. No weapons, no armor -- I'll sit back and take bets, and split the profits with the winner. If we make a loss, then I'll cover it. You've got nothing to lose -- except a bit of blood, of course.", starting_state="fistfight_response_2a", ending_state="fistfight_response_3")


fistfight_response_3_fistfight_response_4 = Dialog("anyone", "However, we can't organize this like one of those nice arena bouts, where everyone places their bets beforehand. People will walk in, drawn by the noise, and put a denar or two on whichever one of your two they think is winning. I'll give 'em even odds -- anything else is going to be too tricky for someone who's already on his third flagon of ale.", starting_state="fistfight_response_3", ending_state="fistfight_response_4")


fistfight_response_4_fistfight_response_4a = Dialog("anyone", "So, as you can see, the trick is to stretch things out for as long as possible where it looks like you're losing, and people bet against you -- and then come back fast, and win, before the betting can turn. The best way to make money is for you to be battered almost to the floor, and then jump back off your feet and take the other guy down. However, you have to win in the end in order for me, and you, to make money. ", starting_state="fistfight_response_4", ending_state="fistfight_response_4a")


fistfight_response_4a_fistfight_response_5 = Dialog("anyone", "Also, you can't stretch the fight out too long, or people will suspect a fix. So, one of you has to take a punch every so often. I don't care whose blood is spilled, but there has to be some blood.", starting_state="fistfight_response_4a", ending_state="fistfight_response_5")


fistfight_response_5_fistfight_response_5a = Dialog("anyone", "And one other thing -- my mate, your opponent, he doesn't take to well to complexity. So he's just going to come straight at you. It's up to you to supply the artistry.", starting_state="fistfight_response_5", ending_state="fistfight_response_5a")


fistfight_response_5a_fistfight_response_confirm = Dialog("anyone", "So, what do you think?", starting_state="fistfight_response_5a", ending_state="fistfight_response_confirm")


fistfight_response_confirm_close_window = Dialog("anyone|plyr", "{!}[Yes -- not yet implemented]", starting_state="fistfight_response_confirm", ending_state="close_window")


fistfight_response_confirm_close_window_1 = Dialog("anyone|plyr", "I have better things to do", starting_state="fistfight_response_confirm", ending_state="close_window")


start_ramun_introduce_1 = Dialog("trp_ramun_the_slave_trader", "Good day to you, {young man/lassie}.", starting_state="start", ending_state="ramun_introduce_1")
def condition():
    if troop_slot_eq(_g_talk_troop,80,0):
        pass
start_ramun_introduce_1.conditionBlock = condition


ramun_introduce_1_ramun_introduce_2 = Dialog("plyr|trp_ramun_the_slave_trader", "Forgive me, you look like a trader, but I see none of your merchandise.", starting_state="ramun_introduce_1", ending_state="ramun_introduce_2")
def code():
    troop_set_slot(_g_talk_troop,80,1)
ramun_introduce_1_ramun_introduce_2.codeBlock = code


ramun_introduce_1_close_window = Dialog("plyr|trp_ramun_the_slave_trader", "Never mind.", starting_state="ramun_introduce_1", ending_state="close_window")


ramun_introduce_2_ramun_introduce_3 = Dialog("trp_ramun_the_slave_trader", "A trader? Oh, aye, I certainly am that. My merchandise is a bit different from most, however. It has to be fed and watered twice a day and tries to run away if I turn my back.", starting_state="ramun_introduce_2", ending_state="ramun_introduce_3")


ramun_introduce_3_ramun_introduce_4 = Dialog("plyr|trp_ramun_the_slave_trader", "Livestock?", starting_state="ramun_introduce_3", ending_state="ramun_introduce_4")


ramun_introduce_4_ramun_introduce_5 = Dialog("trp_ramun_the_slave_trader", "Close enough. I like to call myself the man who keeps every boat on this ocean moving. Boats are driven by oars, you see, and oars need men to pull them or they stop. That's where I come in.", starting_state="ramun_introduce_4", ending_state="ramun_introduce_5")


ramun_introduce_5_ramun_introduce_6 = Dialog("plyr|trp_ramun_the_slave_trader", "Galley slaves.", starting_state="ramun_introduce_5", ending_state="ramun_introduce_6")


ramun_introduce_6_ramun_introduce_7 = Dialog("trp_ramun_the_slave_trader", "Now you're catching on! A trading port like this couldn't survive without them. The ships lose a few hands on every voyage, so there's always a high demand. The captains come to me and they pay well.", starting_state="ramun_introduce_6", ending_state="ramun_introduce_7")


ramun_introduce_7_ramun_introduce_8 = Dialog("plyr|trp_ramun_the_slave_trader", "Where do the slaves come from?", starting_state="ramun_introduce_7", ending_state="ramun_introduce_8")


ramun_introduce_8_ramun_introduce_9 = Dialog("trp_ramun_the_slave_trader", "Mostly I deal in convicted criminals bought from the authorities. Others are prisoners of war from various nations, brought to me because I offer the best prices. However, on occasion I'll buy from privateers and other . . . 'individuals'. You can't be picky about your suppliers in this line of work. You wouldn't happen to have any prisoners with you, would you?", starting_state="ramun_introduce_8", ending_state="ramun_introduce_9")


ramun_introduce_9_ramun_introduce_10 = Dialog("plyr|trp_ramun_the_slave_trader", "Me? ", starting_state="ramun_introduce_9", ending_state="ramun_introduce_10")


ramun_introduce_10_ramun_introduce_11 = Dialog("trp_ramun_the_slave_trader", "Why not? If you intend to set foot outside this town, you're going to cross swords with someone sooner or later. And, God willing, you'll come out on top. Why not make some extra money off the whole thing? Take them alive, bring them back to me, and I'll pay you fifty denars for each head. Don't much care who they are or where they come from.", starting_state="ramun_introduce_10", ending_state="ramun_introduce_11")


ramun_introduce_11_ramun_introduce_12 = Dialog("plyr|trp_ramun_the_slave_trader", "Hmm. I'll think about it.", starting_state="ramun_introduce_11", ending_state="ramun_introduce_12")


ramun_introduce_12_close_window = Dialog("trp_ramun_the_slave_trader", "Do think about it! There's a lot of silver to be made, no mistake. More than enough for the both of us.", starting_state="ramun_introduce_12", ending_state="close_window")


start_ramun_talk = Dialog("trp_ramun_the_slave_trader", "Hello, {playername}.", starting_state="start", ending_state="ramun_talk")


ramun_pre_talk_ramun_talk = Dialog("trp_ramun_the_slave_trader", "Anything else?", starting_state="ramun_pre_talk", ending_state="ramun_talk")


ramun_talk_ramun_sell_prisoners = Dialog("plyr|trp_ramun_the_slave_trader", "I've brought you some prisoners, Ramun. Would you like a look?", starting_state="ramun_talk", ending_state="ramun_sell_prisoners")
def condition():
    if reg0 >= 1:
        reg0 = store_num_regular_prisoners()
ramun_talk_ramun_sell_prisoners.conditionBlock = condition


ramun_sell_prisoners_ramun_sell_prisoners_2 = Dialog("trp_ramun_the_slave_trader", "Let me see what you have...", starting_state="ramun_sell_prisoners", ending_state="ramun_sell_prisoners_2")
def code():
    change_screen_trade_prisoners()
ramun_sell_prisoners_ramun_sell_prisoners_2.codeBlock = code


ramun_sell_prisoners_2_close_window = Dialog("trp_ramun_the_slave_trader", "A pleasure doing business with you.", starting_state="ramun_sell_prisoners_2", ending_state="close_window")


ramun_talk_ramun_ask_about_capturing = Dialog("plyr|trp_ramun_the_slave_trader", "How do I take somebody as prisoner?", starting_state="ramun_talk", ending_state="ramun_ask_about_capturing")
def condition():
    if not troop_slot_ge(_g_talk_troop,80,1):
        pass
ramun_talk_ramun_ask_about_capturing.conditionBlock = condition


ramun_talk_ramun_ask_about_capturing_1 = Dialog("plyr|trp_ramun_the_slave_trader", "Can you tell me again about capturing prisoners?", starting_state="ramun_talk", ending_state="ramun_ask_about_capturing")
def condition():
    if troop_slot_ge(_g_talk_troop,80,1):
        pass
ramun_talk_ramun_ask_about_capturing_1.conditionBlock = condition
def code():
    troop_set_slot(_g_talk_troop,80,2)
ramun_talk_ramun_ask_about_capturing_1.codeBlock = code


ramun_ask_about_capturing_ramun_have_blunt_weapon = Dialog("trp_ramun_the_slave_trader", "You're new to this, aren't you? Let me explain it in simple terms. The basic rule of taking someone prisoner is knocking him down with a blunt weapon, like a mace or a club, rather than cutting him open with a sword. That way he goes to sleep for a little while rather than bleeding to death, you see? I'm assuming you have a blunt weapon with you . . .", starting_state="ramun_ask_about_capturing", ending_state="ramun_have_blunt_weapon")
def condition():
    if not troop_slot_ge(_g_talk_troop,80,1):
        pass
ramun_ask_about_capturing_ramun_have_blunt_weapon.conditionBlock = condition


ramun_have_blunt_weapon_ramun_have_blunt_weapon_yes = Dialog("plyr|trp_ramun_the_slave_trader", "Of course.", starting_state="ramun_have_blunt_weapon", ending_state="ramun_have_blunt_weapon_yes")


ramun_have_blunt_weapon_ramun_have_blunt_weapon_no = Dialog("plyr|trp_ramun_the_slave_trader", "As a matter of fact, I don't.", starting_state="ramun_have_blunt_weapon", ending_state="ramun_have_blunt_weapon_no")


ramun_have_blunt_weapon_yes_ramun_ask_about_capturing_2 = Dialog("trp_ramun_the_slave_trader", "Good. Then all you need to do is beat the bugger down with your weapon, and when the fighting's over you clap him in irons. It's a bit different for nobles and such, they tend to be protected enough that it won't matter what kind of weapon you use, but your average rabble-rouser will bleed like a stuck pig if you get him with something sharp. I don't have many requirements in my merchandise, but I do insist they be breathing when I buy them.", starting_state="ramun_have_blunt_weapon_yes", ending_state="ramun_ask_about_capturing_2")


ramun_have_blunt_weapon_no_ramun_have_blunt_weapon_no_2 = Dialog("trp_ramun_the_slave_trader", "No? Heh, well, this must be your lucky day. I've got an old club lying around that I was going to throw away. It a bit battered, but still good enough bash someone until he stops moving. Here, have it.", starting_state="ramun_have_blunt_weapon_no", ending_state="ramun_have_blunt_weapon_no_2")
def code():
    troop_add_item(trp.player,itm.club,1)
ramun_have_blunt_weapon_no_ramun_have_blunt_weapon_no_2.codeBlock = code


ramun_have_blunt_weapon_no_2_ramun_have_blunt_weapon_yes = Dialog("plyr|trp_ramun_the_slave_trader", "Thanks, Ramun. Perhaps I may try my hand at it.", starting_state="ramun_have_blunt_weapon_no_2", ending_state="ramun_have_blunt_weapon_yes")


ramun_ask_about_capturing_ramun_ask_about_capturing_2 = Dialog("trp_ramun_the_slave_trader", "Alright, I'll try and expain it again in simple terms. The basic rule of taking someone prisoner is knocking him down with a blunt weapon, like a mace or a club, rather than cutting him open with a sword. That way he goes to sleep for a little while rather than bleeding to death, you see? It's a bit different for nobles and such, they tend to be protected enough that it won't matter what kind of weapon you use, but your average rabble-rouser will bleed like a stuck pig if you get him with something sharp.", starting_state="ramun_ask_about_capturing", ending_state="ramun_ask_about_capturing_2")


ramun_ask_about_capturing_2_ramun_ask_about_capturing_3 = Dialog("plyr|trp_ramun_the_slave_trader", "Alright, I think I understand. Anything else?", starting_state="ramun_ask_about_capturing_2", ending_state="ramun_ask_about_capturing_3")


ramun_ask_about_capturing_3_ramun_ask_about_capturing_4 = Dialog("trp_ramun_the_slave_trader", "Well, it's not as simple as all that. Blunt weapons don't do as much damage as sharp ones, so they won't bring your enemies down as quickly. And trust me, given the chance, most of the scum you run across would just as soon kill you as look at you, so don't expect any courtesy when you pull out a club instead of a sword. Moreover, having to drag prisoners to and fro will slow down your party, which is why some people simply set their prisoners free after the fighting's done. It's madness. How could anyone turn down all that silver, eh?", starting_state="ramun_ask_about_capturing_3", ending_state="ramun_ask_about_capturing_4")


ramun_ask_about_capturing_4_ramun_ask_about_capturing_5 = Dialog("plyr|trp_ramun_the_slave_trader", "Is that everything?", starting_state="ramun_ask_about_capturing_4", ending_state="ramun_ask_about_capturing_5")


ramun_ask_about_capturing_5_ramun_ask_about_capturing_7 = Dialog("trp_ramun_the_slave_trader", "Just one final thing. Managing prisoners safely is not an easy thing to do, you could call it a skill in itself. If you want to capture a lot of prisoners, you should try and learn the tricks of it yourself, or you won't be able to hang on to a single man you catch.", starting_state="ramun_ask_about_capturing_5", ending_state="ramun_ask_about_capturing_7")


ramun_ask_about_capturing_7_ramun_pre_talk = Dialog("plyr|trp_ramun_the_slave_trader", "Thanks, I'll keep it in mind.", starting_state="ramun_ask_about_capturing_7", ending_state="ramun_pre_talk")


ramun_talk_ramun_leave = Dialog("plyr|trp_ramun_the_slave_trader", "I'd better be going.", starting_state="ramun_talk", ending_state="ramun_leave")


ramun_leave_close_window = Dialog("trp_ramun_the_slave_trader", "Remember, any prisoners you've got, bring them to me. I'll pay you good silver for every one.", starting_state="ramun_leave", ending_state="close_window")


start_close_window_3 = Dialog("trp_nurse_for_lady", "I humbly request that your lordship keeps his hands where I can see them.", starting_state="start", ending_state="close_window")


start_manhunter_talk_b = Dialog("party_tpl|pt_manhunters", "Hey, you there! You seen any outlaws around here?", starting_state="start", ending_state="manhunter_talk_b")
def condition():
    if _talk_context == 2:
        pass
start_manhunter_talk_b.conditionBlock = condition


manhunter_talk_b_manhunter_talk_b1 = Dialog("plyr|party_tpl|pt_manhunters", "Yes, they went this way about an hour ago.", starting_state="manhunter_talk_b", ending_state="manhunter_talk_b1")


manhunter_talk_b1_close_window = Dialog("party_tpl|pt_manhunters", "I knew it! Come on, lads, lets go get these bastards! Thanks a lot, friend.", starting_state="manhunter_talk_b1", ending_state="close_window")
def code():
    _g_leave_encounter = 1
manhunter_talk_b1_close_window.codeBlock = code


manhunter_talk_b_manhunter_talk_b2 = Dialog("plyr|party_tpl|pt_manhunters", "No, haven't seen any outlaws lately.", starting_state="manhunter_talk_b", ending_state="manhunter_talk_b2")


manhunter_talk_b2_close_window = Dialog("party_tpl|pt_manhunters", "Bah. They're holed up in this country like rats, but we'll smoke them out yet. Sooner or later.", starting_state="manhunter_talk_b2", ending_state="close_window")
def code():
    _g_leave_encounter = 1
manhunter_talk_b2_close_window.codeBlock = code


start_looters_1 = Dialog("party_tpl|auto_proceed|pt_looters", "{!}Warning: This line should never be displayed.", starting_state="start", ending_state="looters_1")
def condition():
    if _talk_context == 2 and encountered_party_is_attacker():
        pass
start_looters_1.conditionBlock = condition
def code():
    s11 = str_store_string("@It's your money or your life;;; {mate/girlie}. No sudden moves or we'll run you through.")
    s12 = str_store_string("@Lucky for you;;; you caught me in a good mood. Give us all your coin and I might just let you live.")
    s13 = str_store_string("@This a robbery;;; eh? I givin' you one chance to hand over everythin' you got;;; or me and my mates'll kill you. Understand?")
    random_x_001 = store_random_in_range(11,14)
    s4 = str_store_string_reg(random_x_001)
    play_sound(snd.encounter_looters)
start_looters_1.codeBlock = code


looters_1_looters_2 = Dialog("party_tpl|pt_looters", "{s4}", starting_state="looters_1", ending_state="looters_2")


looters_2_close_window = Dialog("plyr|party_tpl|pt_looters", "I'm not afraid of you lot. Fight me if you dare!", starting_state="looters_2", ending_state="close_window")
def condition():
    if reg1 < 4:
        reg1 = store_character_level(trp.player)
looters_2_close_window.conditionBlock = condition
def code():
    encounter_attack()
looters_2_close_window.codeBlock = code


looters_2_close_window_1 = Dialog("plyr|party_tpl|pt_looters", "You'll have nothing of mine but cold steel, scum.", starting_state="looters_2", ending_state="close_window")
def condition():
    if reg1 >= 4:
        reg1 = store_character_level(trp.player)
looters_2_close_window_1.conditionBlock = condition
def code():
    encounter_attack()
looters_2_close_window_1.codeBlock = code


start_village_farmer_talk = Dialog("party_tpl|pt_village_farmers", " My {lord/lady}, we're only poor farmers from the village of {s11}. {reg1?We are taking our products to the market at {s12}.:We are returning from the market at {s12} back to our village.}", starting_state="start", ending_state="village_farmer_talk")
def condition():
    if _talk_context == 2:
        agent_play_sound(_g_talk_agent,snd.encounter_farmers)
start_village_farmer_talk.conditionBlock = condition
def code():
    party_slot_001 = party_get_slot(_g_encountered_party,5)
    party_slot_002 = party_get_slot(_g_encountered_party,123)
    party_slot_003 = party_get_slot(party_slot_002,121)
    s11 = str_store_party_name(party_slot_002)
    s12 = str_store_party_name(party_slot_003)
    reg1 = 1
    if party_slot_eq(party_slot_001,0,4):
        reg1 = 0
    #end
start_village_farmer_talk.codeBlock = code


village_farmer_talk_farmer_bandit_information = Dialog("anyone|plyr", "I am hunting a group of bandits with the following description... Have you seen them?", starting_state="village_farmer_talk", ending_state="farmer_bandit_information")
def condition():
    if check_quest_active(qst.track_down_bandits) and not check_quest_succeeded(qst.track_down_bandits):
        pass
village_farmer_talk_farmer_bandit_information.conditionBlock = condition


farmer_bandit_information_village_farmer_talk = Dialog("anyone", "{s15}", starting_state="farmer_bandit_information", ending_state="village_farmer_talk")
def condition():
    get_manhunt_information_to_s15(qst.track_down_bandits)
farmer_bandit_information_village_farmer_talk.conditionBlock = condition


village_farmer_talk_close_window = Dialog("anyone|plyr", "We'll see how poor you are after I take what you've got!", starting_state="village_farmer_talk", ending_state="close_window")
def condition():
    if party_faction_001 != _players_kingdom and party_faction_001 != fac.player_supporters_faction:
        party_faction_001 = store_faction_of_party(_g_encountered_party)
village_farmer_talk_close_window.conditionBlock = condition
def code():
    party_slot_001 = party_get_slot(_g_encountered_party,123)
    party_slot_002 = party_get_slot(party_slot_001,121)
    party_slot_003 = party_get_slot(party_slot_001,7)
    change_player_relation_with_center(party_slot_001,-4)
    change_player_relation_with_center(party_slot_002,-2)
    change_player_relation_with_troop(party_slot_003,-2)
    diplomacy_party_attacks_neutral(p.main_party,_g_encountered_party)
    faction_relation_004 = store_relation(_g_encountered_party_faction,fac.player_supporters_faction)
    if faction_relation_004 > 0:
        faction_relation_004 -= 5
    #end
    faction_relation_004 -= 3
    set_player_relation_with_faction(_g_encountered_party_faction,faction_relation_004)
    _encountered_party_hostile = 1
    _encountered_party_friendly = 0
village_farmer_talk_close_window.codeBlock = code


village_farmer_talk_close_window_1 = Dialog("anyone|plyr", "Carry on, then. Farewell.", starting_state="village_farmer_talk", ending_state="close_window")
def code():
    _g_leave_encounter = 1
village_farmer_talk_close_window_1.codeBlock = code


start_minister_issues = Dialog("anyone", "I am at your service, {sire/my lady}", starting_state="start", ending_state="minister_issues")
def condition():
    if _g_talk_troop > 0 and _g_talk_troop == _g_player_minister and not troop_slot_eq(trp.player,30,_g_talk_troop):
        pass
start_minister_issues.conditionBlock = condition


start_close_window_4 = Dialog("anyone", "It has been an honor to serve you, {sire/my lady}", starting_state="start", ending_state="close_window")
def condition():
    if _g_talk_troop == trp.temporary_minister and _g_talk_troop != _g_player_minister:
        pass
start_close_window_4.conditionBlock = condition


start_member_castellan_talk = Dialog("anyone", "Yes, {playername}? What can I do for you?", starting_state="start", ending_state="member_castellan_talk")
def condition():
    if troop_slot_eq(_g_talk_troop,2,5) and party_slot_eq(_g_encountered_party,0,2):
        party_num_companions_stacks_001 = party_get_num_companion_stacks(_g_encountered_party)
        if party_num_companions_stacks_001 >= 1:
            if troop_id_002 == _g_talk_troop and _talk_context == 0:
                troop_id_002 = party_stack_get_troop_id(_g_encountered_party,0)
start_member_castellan_talk.conditionBlock = condition


member_castellan_pretalk_member_castellan_talk = Dialog("anyone", "Anything else?", starting_state="member_castellan_pretalk", ending_state="member_castellan_talk")


member_castellan_talk_member_review_castle_garrison = Dialog("anyone|plyr", "I want to review the castle garrison.", starting_state="member_castellan_talk", ending_state="member_review_castle_garrison")


member_review_castle_garrison_member_castellan_pretalk = Dialog("anyone", "Of course. Here are our lists, let me know of any changes you require...", starting_state="member_review_castle_garrison", ending_state="member_castellan_pretalk")
def code():
    change_screen_exchange_members(0)
member_review_castle_garrison_member_castellan_pretalk.codeBlock = code


member_castellan_talk_member_review_castellan_equipment = Dialog("anyone|plyr", "Let me see your equipment.", starting_state="member_castellan_talk", ending_state="member_review_castellan_equipment")


member_review_castellan_equipment_member_castellan_pretalk = Dialog("anyone", "Very well, it's all here...", starting_state="member_review_castellan_equipment", ending_state="member_castellan_pretalk")
def code():
    change_screen_equip_other()
member_review_castellan_equipment_member_castellan_pretalk.codeBlock = code


member_castellan_talk_member_castellan_join = Dialog("anyone|plyr", "I want you to abandon the castle and join my party.", starting_state="member_castellan_talk", ending_state="member_castellan_join")


member_castellan_join_close_window = Dialog("anyone", "I've grown quite fond of the place... But if it is your wish, {playername}, I'll come with you.", starting_state="member_castellan_join", ending_state="close_window")
def condition():
    if party_can_join_party(_g_encountered_party,p.main_party):
        pass
member_castellan_join_close_window.conditionBlock = condition
def code():
    _g_move_heroes = 1
    party_add_party(p.main_party,_g_encountered_party)
    party_clear(_g_encountered_party)
member_castellan_join_close_window.codeBlock = code


member_castellan_join_member_castellan_pretalk = Dialog("anyone", "And where would we sleep? You're dragging a whole army with you, {playername}, there's no more room for all of us.", starting_state="member_castellan_join", ending_state="member_castellan_pretalk")


member_castellan_talk_close_window = Dialog("anyone|plyr", "[Leave]", starting_state="member_castellan_talk", ending_state="close_window")


start_close_window_5 = Dialog("anyone", "{!}Do you want me to rejoin you?", starting_state="start", ending_state="close_window")
def condition():
    if troop_slot_eq(_g_talk_troop,2,5) and not main_party_has_troop(_g_talk_troop) and _talk_context == 2:
        pass
start_close_window_5.conditionBlock = condition


start_close_window_6 = Dialog("anyone", "{!}Do you want me to rejoin you?", starting_state="start", ending_state="close_window")
def condition():
    if not main_party_has_troop(_g_talk_troop) and _g_encountered_party == p.four_ways_inn:
        pass
start_close_window_6.conditionBlock = condition


member_chat_kidnapped_girl_chat_1 = Dialog("trp_kidnapped_girl", "Are we home yet?", starting_state="member_chat", ending_state="kidnapped_girl_chat_1")


kidnapped_girl_chat_1_kidnapped_girl_chat_2 = Dialog("plyr|trp_kidnapped_girl", "Not yet.", starting_state="kidnapped_girl_chat_1", ending_state="kidnapped_girl_chat_2")


kidnapped_girl_chat_2_close_window = Dialog("trp_kidnapped_girl", "I can't wait to get back. I've missed my family so much, I'd give anything to see them again.", starting_state="kidnapped_girl_chat_2", ending_state="close_window")


member_chat_member_lady_1 = Dialog("anyone", "{playername}, when do you think we can reach our destination?", starting_state="member_chat", ending_state="member_lady_1")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6):
        pass
member_chat_member_lady_1.conditionBlock = condition


member_lady_1_member_lady_2a = Dialog("anyone|plyr", "We still have a long way ahead of us.", starting_state="member_lady_1", ending_state="member_lady_2a")


member_lady_1_member_lady_2b = Dialog("anyone|plyr", "Very soon. We're almost there.", starting_state="member_lady_1", ending_state="member_lady_2b")


member_lady_2a_close_window = Dialog("anyone", "Ah, I am going to enjoy the road for a while longer then. I won't complain. I find riding out in the open so much more pleasant than sitting in the castle all day. You know, I envy you. You can live like this all the time.", starting_state="member_lady_2a", ending_state="close_window")


member_lady_2b_close_window = Dialog("anyone", "That's good news. Not that I don't like your company, but I did miss my little luxuries. Still I am sorry that I'll leave you soon. You must promise me, you'll come visit me when you can.", starting_state="member_lady_2b", ending_state="close_window")


member_chat_supported_pretender_talk = Dialog("anyone", "Greetings, {playername}, my first and foremost vassal. I await your counsel.", starting_state="member_chat", ending_state="supported_pretender_talk")
def condition():
    if is_between(_g_talk_troop,trp.kingdom_1_pretender,trp.knight_1_1_wife):
        pass
member_chat_supported_pretender_talk.conditionBlock = condition


supported_pretender_pretalk_supported_pretender_talk = Dialog("anyone", "Anything else?", starting_state="supported_pretender_pretalk", ending_state="supported_pretender_talk")


supported_pretender_talk_pretender_progress = Dialog("anyone|plyr", "What do you think about our progress so far?", starting_state="supported_pretender_talk", ending_state="pretender_progress")


pretender_progress_pretender_progress_2 = Dialog("anyone", "{reg11?We have {reg11} lords on our side:We have no lord with us yet}, whereas {reg21?{s9} still has {reg21} lords supporting him:{s9} has no loyal lords left}. {reg19?We control {reg13?{reg13} towns:} {reg14?{reg14} castles:} {reg15?and {reg15} villages:}:We don't control any settlements}, while {reg29?they have {reg23?{reg23} towns:} {reg24?{reg24} castles:} {reg25?and {reg25} villages:}:they have no remaining settlements}. Overall, {s30}.", starting_state="pretender_progress", ending_state="pretender_progress_2")
def condition():
    reg11 = 0
    reg13 = 0
    reg14 = 0
    reg15 = 0
    reg21 = 0
    reg23 = 0
    reg24 = 0
    reg25 = 0
    for trp_001 in range(trp.npc1, trp.knight_1_1_wife):
        if troop_slot_eq(trp_001,2,2):
            troop_faction_002 = store_faction_of_troop(trp_001)
            if troop_faction_002 == fac.player_supporters_faction and trp_001 != trp.player and trp_001 != _supported_pretender:
                reg11 += 1
            elif troop_faction_002 == _supported_pretender_old_faction and not faction_slot_eq(_supported_pretender_old_faction,11,trp_001):
                reg21 += 1
            #end
        #end
    #end
    for p_003 in range(p.town_1, p.salt_mine):
        party_faction_004 = store_faction_of_party(p_003)
        if party_faction_004 == fac.player_supporters_faction:
            if party_slot_eq(p_003,0,3):
                reg13 += 1
            elif party_slot_eq(p_003,0,2):
                reg14 += 1
            elif party_slot_eq(p_003,0,4):
                reg15 += 1
            #end
        elif party_faction_004 == _supported_pretender_old_faction:
            if party_slot_eq(p_003,0,3):
                reg23 += 1
            elif party_slot_eq(p_003,0,2):
                reg24 += 1
            elif party_slot_eq(p_003,0,4):
                reg25 += 1
            #end
        #end
    #end
    reg19 = reg13 + reg14
    reg19 += reg15
    reg29 = reg23 + reg24
    reg29 += reg25
    var005 = reg13 + reg14
    var005 += reg11
    var006 = reg23 + reg24
    var006 += reg21
    var007 = var005 + var006
    var005 *= 100
    var008 = var005 / var007
    if var008 < 10:
        s30 = str_store_string("@we have made very little progress so far")
    elif var008 < 30:
        s30 = str_store_string("@we have suceeded in gaining some ground;;; but we still have a long way to go")
    elif var008 < 50:
        s30 = str_store_string("@we have become a significant force;;; and we have an even chance of victory")
    elif var008 < 75:
        s30 = str_store_string("@we are winning the war;;; but our enemies are still holding on.")
    else:
        s30 = str_store_string("@we are on the verge of victory. The remaining enemies pose no threat;;; but we still need to hunt them down.")
    #end
    faction_slot_009 = faction_get_slot(_supported_pretender_old_faction,11)
    s9 = str_store_troop_name(faction_slot_009)
pretender_progress_pretender_progress_2.conditionBlock = condition


pretender_progress_2_supported_pretender_pretalk = Dialog("anyone|plyr", "Then, we must keep fighting and rally our supporters!", starting_state="pretender_progress_2", ending_state="supported_pretender_pretalk")


pretender_progress_2_pretender_quit_rebel_confirm = Dialog("anyone|plyr", "It seems this rebellion is not going anywhere. We must give up.", starting_state="pretender_progress_2", ending_state="pretender_quit_rebel_confirm")


pretender_quit_rebel_confirm_pretender_quit_rebel_confirm_2 = Dialog("anyone", "{playername}, you can't abandon me now. Are you serious?", starting_state="pretender_quit_rebel_confirm", ending_state="pretender_quit_rebel_confirm_2")


pretender_quit_rebel_confirm_2_pretender_quit_rebel_confirm_3 = Dialog("anyone|plyr", "Indeed, I am. I can't support you any longer.", starting_state="pretender_quit_rebel_confirm_2", ending_state="pretender_quit_rebel_confirm_3")


pretender_quit_rebel_confirm_2_supported_pretender_pretalk = Dialog("anyone|plyr", "I was jesting. I will fight for you until we succeed.", starting_state="pretender_quit_rebel_confirm_2", ending_state="supported_pretender_pretalk")


pretender_quit_rebel_confirm_3_pretender_quit_rebel_confirm_4 = Dialog("anyone", "Are you absolutely sure? I will never forgive you if you abandon my cause.", starting_state="pretender_quit_rebel_confirm_3", ending_state="pretender_quit_rebel_confirm_4")


pretender_quit_rebel_confirm_4_pretender_quit_rebel = Dialog("anyone|plyr", "I am sure.", starting_state="pretender_quit_rebel_confirm_4", ending_state="pretender_quit_rebel")


pretender_quit_rebel_confirm_4_supported_pretender_pretalk = Dialog("anyone|plyr", "Let me think about this some more.", starting_state="pretender_quit_rebel_confirm_4", ending_state="supported_pretender_pretalk")


pretender_quit_rebel_close_window = Dialog("anyone", "So be it. Then my cause is lost. There is only one thing to do for me now. I will go from Calradia and never come back. With me gone, you may try to make your peace with {s4}.", starting_state="pretender_quit_rebel", ending_state="close_window")
def code():
    troop_slot_001 = troop_get_slot(_g_talk_troop,14)
    faction_slot_002 = faction_get_slot(troop_slot_001,11)
    s4 = str_store_troop_name(faction_slot_002)
    for trp_003 in range(trp.npc1, trp.knight_1_1_wife):
        if troop_slot_eq(trp_003,2,2) and _supported_pretender != trp_003:
            troop_faction_004 = store_faction_of_troop(trp_003)
            if troop_faction_004 == fac.player_supporters_faction:
                change_troop_faction(trp_003,troop_slot_001)
            #end
        #end
    #end
    troop_set_faction(_g_talk_troop,fac.neutral)
    faction_set_slot(fac.player_supporters_faction,11,trp.player)
    var005 = 0
    for p_006 in range(p.town_1, p.salt_mine):
        troop_faction_004 = store_faction_of_party(p_006)
        if troop_faction_004 == fac.player_supporters_faction:
            var005 = 1
            if not party_slot_eq(p_006,7,trp.player):
                give_center_to_lord(p_006,trp.player,0)
            #end
        #end
    #end
    party_remove_members(p.main_party,_supported_pretender,1)
    faction_set_slot(troop_slot_001,60,0)
    _supported_pretender = 0
    if var005 == 1:
        faction_set_color(fac.player_supporters_faction,16711680)
        if _g_player_minister == 0:
            _g_player_minister = trp.temporary_minister
        #end
    else:
        deactivate_player_faction()
    #end
    change_player_honor(-20)
    fail_quest(qst.rebel_against_kingdom)
    end_quest(qst.rebel_against_kingdom)
pretender_quit_rebel_close_window.codeBlock = code


supported_pretender_talk_supported_pretender_equip = Dialog("anyone|plyr", "{reg65?My lady:My lord}, would you allow me to check out your equipment?", starting_state="supported_pretender_talk", ending_state="supported_pretender_equip")


supported_pretender_equip_supported_pretender_pretalk = Dialog("anyone", "Very well, it's all here...", starting_state="supported_pretender_equip", ending_state="supported_pretender_pretalk")
def code():
    change_screen_equip_other()
supported_pretender_equip_supported_pretender_pretalk.codeBlock = code


supported_pretender_talk_pretneder_view_char_requested = Dialog("anyone|plyr", "If it would please you, can you tell me about your skills?", starting_state="supported_pretender_talk", ending_state="pretneder_view_char_requested")


pretneder_view_char_requested_supported_pretender_pretalk = Dialog("anyone", "Well, all right.", starting_state="pretneder_view_char_requested", ending_state="supported_pretender_pretalk")
def code():
    change_screen_view_character()
pretneder_view_char_requested_supported_pretender_pretalk.codeBlock = code


supported_pretender_talk_supported_pretender_grant_fief = Dialog("anyone|plyr", "I suggest that you decide who should hold a fief that does not have a lord.", starting_state="supported_pretender_talk", ending_state="supported_pretender_grant_fief")
def condition():
    var001 = 0
    for p_002 in range(p.town_1, p.salt_mine):
        party_faction_003 = store_faction_of_party(p_002)
        if party_faction_003 == fac.player_supporters_faction and party_slot_eq(p_002,7,-1):
            var001 = 1
            if var001 == 1:
                pass
            #end
        #end
    #end
supported_pretender_talk_supported_pretender_grant_fief.conditionBlock = condition


supported_pretender_grant_fief_supported_pretender_grant_fief_select = Dialog("anyone", "Which fief did you have in mind?", starting_state="supported_pretender_grant_fief", ending_state="supported_pretender_grant_fief_select")


supported_pretender_grant_fief_select_supported_pretender_grant_fief_choose_recipient = Dialog("anyone|repeat_for_parties|plyr", "{s4}", starting_state="supported_pretender_grant_fief_select", ending_state="supported_pretender_grant_fief_choose_recipient")
def condition():
    var001 = store_repeat_object()
    if is_between(var001,p.town_1,p.salt_mine):
        party_faction_002 = store_faction_of_party(var001)
        if party_faction_002 == fac.player_supporters_faction and party_slot_eq(var001,7,-1):
            s4 = str_store_party_name(var001)
supported_pretender_grant_fief_select_supported_pretender_grant_fief_choose_recipient.conditionBlock = condition
def code():
    _g_center_taken_by_player_faction = store_repeat_object()
supported_pretender_grant_fief_select_supported_pretender_grant_fief_choose_recipient.codeBlock = code


supported_pretender_grant_fief_choose_recipient_center_captured_rebellion = Dialog("anyone", "And who should receive it?", starting_state="supported_pretender_grant_fief_choose_recipient", ending_state="center_captured_rebellion")
def code():
    s4 = str_store_party_name(_g_center_taken_by_player_faction)
supported_pretender_grant_fief_choose_recipient_center_captured_rebellion.codeBlock = code


supported_pretender_grant_fief_select_supported_pretender_pretalk = Dialog("anyone|plyr", "Never mind.", starting_state="supported_pretender_grant_fief_select", ending_state="supported_pretender_pretalk")


supported_pretender_talk_close_window = Dialog("anyone|plyr", "Let us keep going, {reg65?my lady:sir}.", starting_state="supported_pretender_talk", ending_state="close_window")


do_member_trade_member_talk = Dialog("anyone", "Anything else?", starting_state="do_member_trade", ending_state="member_talk")


member_pretalk_member_talk = Dialog("anyone", "Anything else?", starting_state="member_pretalk", ending_state="member_talk")


member_chat_member_talk = Dialog("anyone", "Yes, {s5}?", starting_state="member_chat", ending_state="member_talk")
def condition():
    _g_talk_troop = store_conversation_troop()
    if troop_is_hero(_g_talk_troop):
        troop_slot_001 = troop_get_slot(_g_talk_troop,130)
        s5 = str_store_string(troop_slot_001)
member_chat_member_talk.conditionBlock = condition
def code():
    if is_between(_g_talk_troop,trp.npc1,trp.kingdom_1_lord):
        unlock_achievement(46)
    #end
member_chat_member_talk.codeBlock = code


member_talk_member_direct_campaign = Dialog("anyone|plyr", "As marshal, I wish you to send a message to the vassals of the realm", starting_state="member_talk", ending_state="member_direct_campaign")
def condition():
    if is_between(_players_kingdom,fac.player_supporters_faction,fac.kingdoms_end) and faction_slot_eq(_players_kingdom,8,trp.player):
        pass
member_talk_member_direct_campaign.conditionBlock = condition


member_talk_member_trade = Dialog("anyone|plyr", "Let me see your equipment.", starting_state="member_talk", ending_state="member_trade")


member_trade_do_member_trade = Dialog("anyone", "Very well, it's all here...", starting_state="member_trade", ending_state="do_member_trade")
def code():
    change_screen_equip_other()
member_trade_do_member_trade.codeBlock = code


do_member_trade_member_talk = Dialog("anyone", "Anything else?", starting_state="do_member_trade", ending_state="member_talk")


member_talk_view_member_char_requested = Dialog("anyone|plyr", "What can you tell me about your skills?", starting_state="member_talk", ending_state="view_member_char_requested")


view_member_char_requested_do_member_view_char = Dialog("anyone", "All right, let me tell you...", starting_state="view_member_char_requested", ending_state="do_member_view_char")
def code():
    change_screen_view_character()
view_member_char_requested_do_member_view_char.codeBlock = code


member_talk_member_separate = Dialog("anyone|plyr", "We need to separate for a while.", starting_state="member_talk", ending_state="member_separate")
def code():
    npc_morale(_g_talk_troop)
    _npc_quit_morale = reg0
member_talk_member_separate.codeBlock = code


member_separate_member_separate_confirm = Dialog("anyone", "Oh really? Well, I'm not just going to wait around here. I'm going to go to the towns to look for other work. Is that what you want?", starting_state="member_separate", ending_state="member_separate_confirm")
def condition():
    if _npc_quit_morale > 30:
        pass
member_separate_member_separate_confirm.conditionBlock = condition


member_separate_companion_quitting = Dialog("anyone", "Well, actually, there was something I needed to tell you.", starting_state="member_separate", ending_state="companion_quitting")
def code():
    _player_can_refuse_npc_quitting = 0
    _player_can_persuade_npc = 0
member_separate_companion_quitting.codeBlock = code


member_separate_confirm_member_separate_yes = Dialog("anyone|plyr", "That's right. We need to part ways.", starting_state="member_separate_confirm", ending_state="member_separate_yes")


member_separate_confirm_do_member_trade = Dialog("anyone|plyr", "No, I'd rather have you at my side.", starting_state="member_separate_confirm", ending_state="do_member_trade")


member_separate_yes_close_window = Dialog("anyone", "Well. I'll be off, then. Look me up if you need me.", starting_state="member_separate_yes", ending_state="close_window")
def code():
    troop_set_slot(_g_talk_troop,2,0)
    troop_set_slot(_g_talk_troop,82,2)
    remove_member_from_party(_g_talk_troop)
member_separate_yes_close_window.codeBlock = code


member_talk_member_question = Dialog("anyone|plyr", "I'd like to ask you something.", starting_state="member_talk", ending_state="member_question")


member_talk_close_window = Dialog("anyone|plyr", "Never mind.", starting_state="member_talk", ending_state="close_window")


member_question_member_question_2 = Dialog("anyone", "Very well. What did you want to ask?", starting_state="member_question", ending_state="member_question_2")


member_question_2_member_morale = Dialog("anyone|plyr", "How do you feel about the way things are going in this company?", starting_state="member_question_2", ending_state="member_morale")


member_question_2_member_background_recap = Dialog("anyone|plyr", "Tell me your story again.", starting_state="member_question_2", ending_state="member_background_recap")


member_question_2_member_kingsupport_1 = Dialog("anyone|plyr", "I suppose you know that I aspire to be {king/queen} of this land?", starting_state="member_question_2", ending_state="member_kingsupport_1")
def condition():
    if troop_slot_eq(_g_talk_troop,142,0):
        pass
member_question_2_member_kingsupport_1.conditionBlock = condition


member_question_2_member_intelgathering_1 = Dialog("anyone|plyr", "Do you have any connections that we could use to our advantage?", starting_state="member_question_2", ending_state="member_intelgathering_1")


member_question_2_member_fief_grant_1 = Dialog("anyone|plyr", "Would you be interested in holding a fief?", starting_state="member_question_2", ending_state="member_fief_grant_1")
def condition():
    if faction_slot_eq(_players_kingdom,11,trp.player):
        pass
member_question_2_member_fief_grant_1.conditionBlock = condition


member_morale_do_member_trade = Dialog("anyone", "{s21}", starting_state="member_morale", ending_state="do_member_trade")
def condition():
    npc_morale(_g_talk_troop)
member_morale_do_member_trade.conditionBlock = condition


member_background_recap_member_background_recap_2 = Dialog("anyone", "{s5}", starting_state="member_background_recap", ending_state="member_background_recap_2")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,59)
    s20 = str_store_party_name(troop_slot_001)
    troop_slot_002 = troop_get_slot(_g_talk_troop,60)
    s21 = str_store_party_name(troop_slot_002)
    troop_slot_003 = troop_get_slot(_g_talk_troop,129)
    s5 = str_store_string(troop_slot_003)
member_background_recap_member_background_recap_2.conditionBlock = condition


member_background_recap_2_member_background_recap_3 = Dialog("anyone", "{s5}", starting_state="member_background_recap_2", ending_state="member_background_recap_3")
def condition():
    str_clear(19)
    troop_slot_001 = troop_get_slot(_g_talk_troop,105)
    s5 = str_store_string(troop_slot_001)
member_background_recap_2_member_background_recap_3.conditionBlock = condition


member_background_recap_3_do_member_trade = Dialog("anyone", "Then shortly after, I joined up with you.", starting_state="member_background_recap_3", ending_state="do_member_trade")


do_member_view_char_member_talk = Dialog("anyone", "Anything else?", starting_state="do_member_view_char", ending_state="member_talk")


member_kingsupport_1_do_member_trade = Dialog("anyone", "Um... Yes. I had heard.", starting_state="member_kingsupport_1", ending_state="do_member_trade")
def condition():
    if troop_slot_001 > 10:
        troop_slot_001 = troop_get_slot(_g_talk_troop,69)
member_kingsupport_1_do_member_trade.conditionBlock = condition


member_kingsupport_1_member_kingsupport_1a = Dialog("anyone", "{s21}", starting_state="member_kingsupport_1", ending_state="member_kingsupport_1a")
def condition():
    var001 = _g_talk_troop - trp.npc1
    var002 = gstr.npc1_kingsupport_1
    var002 += var001
    s21 = str_store_string(var002)
member_kingsupport_1_member_kingsupport_1a.conditionBlock = condition


member_kingsupport_1a_member_kingsupport_2 = Dialog("anyone|plyr", "Would you then support my cause?", starting_state="member_kingsupport_1a", ending_state="member_kingsupport_2")


member_kingsupport_1a_do_member_trade = Dialog("anyone|plyr", "Very good. I shall keep that in mind.", starting_state="member_kingsupport_1a", ending_state="do_member_trade")


member_kingsupport_2_do_member_trade = Dialog("anyone", "I would, {s21}. Moreover, I have a proposal on how I might help you attain your throne. But you recently sent {s22} off on a similar mission. Perhaps we should wait for a couple of weeks to avoid drawing too much attention to ourselves.", starting_state="member_kingsupport_2", ending_state="do_member_trade")
def condition():
    var001 = -1
    for trp_002 in range(trp.npc1, trp.kingdom_1_lord):
        if troop_slot_eq(trp_002,2,5):
            troop_slot_003 = troop_get_slot(trp_002,150)
            if troop_slot_003 > 17 and not main_party_has_troop(trp_002):
                var001 = trp_002
            #end
        #end
    #end
    if var001 > -1:
        troop_slot_004 = troop_get_slot(_g_talk_troop,130)
        s21 = str_store_string(troop_slot_004)
        s22 = str_store_troop_name(var001)
member_kingsupport_2_do_member_trade.conditionBlock = condition


member_kingsupport_2_member_kingsupport_2a = Dialog("anyone", "{s21}", starting_state="member_kingsupport_2", ending_state="member_kingsupport_2a")
def condition():
    var001 = _g_talk_troop - trp.npc1
    var002 = gstr.npc1_kingsupport_2
    var002 += var001
    s21 = str_store_string(var002)
member_kingsupport_2_member_kingsupport_2a.conditionBlock = condition


member_kingsupport_2a_member_kingsupport_3 = Dialog("anyone|plyr", "{s21}", starting_state="member_kingsupport_2a", ending_state="member_kingsupport_3")
def condition():
    var001 = _g_talk_troop - trp.npc1
    var002 = gstr.npc1_kingsupport_2a
    var002 + var001
    s21 = str_store_string(var002)
member_kingsupport_2a_member_kingsupport_3.conditionBlock = condition


member_kingsupport_2a_do_member_trade = Dialog("anyone|plyr", "{s21}", starting_state="member_kingsupport_2a", ending_state="do_member_trade")
def condition():
    var001 = _g_talk_troop - trp.npc1
    var002 = gstr.npc1_kingsupport_2b
    var002 += var001
    s21 = str_store_string(var002)
member_kingsupport_2a_do_member_trade.conditionBlock = condition


member_kingsupport_3_member_kingsupport_3a = Dialog("anyone", "{s21}", starting_state="member_kingsupport_3", ending_state="member_kingsupport_3a")
def condition():
    var001 = _g_talk_troop - trp.npc1
    var002 = gstr.npc1_kingsupport_3
    var002 += var001
    s21 = str_store_string(var002)
member_kingsupport_3_member_kingsupport_3a.conditionBlock = condition


member_kingsupport_3a_member_kingsupport_4 = Dialog("anyone|plyr", "Very good. You do that", starting_state="member_kingsupport_3a", ending_state="member_kingsupport_4")


member_kingsupport_3a_do_member_trade = Dialog("anyone|plyr", "On second thought, stay with me for a while", starting_state="member_kingsupport_3a", ending_state="do_member_trade")


member_kingsupport_4_close_window = Dialog("anyone", "Farewell then, {s21}, for a little while", starting_state="member_kingsupport_4", ending_state="close_window")
def condition():
    troop_set_slot(_g_talk_troop,150,21)
    troop_set_slot(_g_talk_troop,151,1)
    remove_member_from_party(_g_talk_troop,p.main_party)
    troop_slot_001 = troop_get_slot(_g_talk_troop,130)
    s21 = str_store_string(troop_slot_001)
member_kingsupport_4_close_window.conditionBlock = condition


member_intelgathering_1_member_intelgathering_3 = Dialog("anyone", "{s21}", starting_state="member_intelgathering_1", ending_state="member_intelgathering_3")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,67)
    s17 = str_store_party_name(troop_slot_001)
    party_faction_002 = store_faction_of_party(troop_slot_001)
    s18 = str_store_faction_name(party_faction_002)
    var003 = _g_talk_troop - trp.npc1
    var004 = gstr.npc1_intel_mission
    var004 += var003
    s21 = str_store_string(var004)
member_intelgathering_1_member_intelgathering_3.conditionBlock = condition


member_intelgathering_3_member_intelgathering_3 = Dialog("anyone", "Of course, as few people should know of this as possible. If you want to collect the information, or pull me out, then don't send a messenger. Come and get me yourself -- even if that means you have to sneak through the gates.", starting_state="member_intelgathering_3", ending_state="member_intelgathering_3")
def condition():
    if 1 == 0:
        pass
member_intelgathering_3_member_intelgathering_3.conditionBlock = condition


member_intelgathering_3_member_intelgathering_4 = Dialog("anyone|plyr", "Splendid idea -- you do that.", starting_state="member_intelgathering_3", ending_state="member_intelgathering_4")


member_intelgathering_3_do_member_trade = Dialog("anyone|plyr", "Actually, hold off for now.", starting_state="member_intelgathering_3", ending_state="do_member_trade")


member_intelgathering_4_close_window = Dialog("anyone", "Good. I should be ready to report in about five days. Farewell then, {s21}, for a little while.", starting_state="member_intelgathering_4", ending_state="close_window")
def condition():
    troop_set_slot(_g_talk_troop,150,5)
    troop_set_slot(_g_talk_troop,151,2)
    remove_member_from_party(_g_talk_troop,p.main_party)
    troop_slot_001 = troop_get_slot(_g_talk_troop,130)
    s21 = str_store_string(troop_slot_001)
member_intelgathering_4_close_window.conditionBlock = condition


start_merchant_quest_4_start = Dialog("anyone|auto_proceed", "{!}.", starting_state="start", ending_state="merchant_quest_4_start")
def condition():
    if is_between(_g_talk_troop,trp.swadian_merchant,trp.startup_merchants_end) and _talk_context == 0:
        pass
start_merchant_quest_4_start.conditionBlock = condition


merchant_quest_4_start_close_window = Dialog("anyone", "It's time, lads! Up and at them!", starting_state="merchant_quest_4_start", ending_state="close_window")
def code():
    for cur_agent in __all_agents__:
        troop_id_002 = agent_get_troop_id(cur_agent)
        if troop_id_002 >= trp.looter and troop_id_002 <= trp.desert_bandit:
            agent_set_team(cur_agent,1)
        #end
    #end
    agent_no_003 = get_player_agent_no()
    var004 = 1000
    for cur_agent in __all_agents__:
        if cur_agent != agent_no_003:
            agent_team_no_006 = agent_get_team(cur_agent)
            if agent_team_no_006 == 0:
                pos0 = agent_get_position(cur_agent)
                for cur_agent in __all_agents__:
                    agent_team_no_008 = agent_get_team(cur_agent)
                    if agent_team_no_008 == 1:
                        pos1 = agent_get_position(cur_agent)
                        distance_009 = get_distance_between_positions(0,1)
                        if distance_009 <= var004:
                            var004 = distance_009
                            copy_position(2,1)
                        #end
                    #end
                #end
            #end
        #end
        agent_set_scripted_destination(cur_agent,2,0)
        agent_set_speed_limit(cur_agent,10)
    #end
merchant_quest_4_start_close_window.codeBlock = code


start_relative_saved_1a = Dialog("anyone", "Thank you! Thank you, {sir/my lady}, for rescuing me from those fiends. Did my brother in {s9} put you onto their track?", starting_state="start", ending_state="relative_saved_1a")
def condition():
    if is_between(_g_talk_troop,trp.relative_of_merchant,trp.relative_of_merchants_end):
        if check_quest_active(qst.save_relative_of_merchant):
            succeed_quest(qst.save_relative_of_merchant)
        #end
    #end
    s9 = str_store_party_name(_g_starting_town)
    _relative_of_merchant_is_found = 1
start_relative_saved_1a.conditionBlock = condition


relative_saved_1a_close_window = Dialog("anyone|plyr", "Yes. I told him that I would find you. I advise you to return to your family as quickly as you can -- and be careful on the road.", starting_state="relative_saved_1a", ending_state="close_window")


start_bandit_leader_1a = Dialog("anyone", "Ay! Spare me! Spare my life! Let me go, and I'll go far away from here, and learn an honest trade, and you'll never hear of me again!", starting_state="start", ending_state="bandit_leader_1a")
def condition():
    if is_between(_g_talk_troop,trp.sea_raider_leader,trp.bandit_leaders_end) and _talk_context == 9:
        pass
start_bandit_leader_1a.conditionBlock = condition


bandit_leader_1a_bandit_leader_1b = Dialog("anyone|plyr", "I'll spare your life -- but in exchange, I want information. Either you or your mates kidnapped the brother of a prominent merchant in town. Tell me where you're hiding him, and give me your word that you'll stop troubling the people of these parts, and you can go free.", starting_state="bandit_leader_1a", ending_state="bandit_leader_1b")
def condition():
    if is_between(_g_talk_troop,trp.sea_raider_leader,trp.bandit_leaders_end):
        pass
bandit_leader_1a_bandit_leader_1b.conditionBlock = condition


start_looter_leader_1 = Dialog("anyone", "What do you want?", starting_state="start", ending_state="looter_leader_1")
def condition():
    if _talk_context == 2 and is_between(_g_talk_troop,trp.sea_raider_leader,trp.bandit_leaders_end):
        pass
start_looter_leader_1.conditionBlock = condition


looter_leader_1_looter_leader_2 = Dialog("anyone|plyr", "I've been looking for you. Tell me where you keep your prisoners, and I'll let you go.", starting_state="looter_leader_1", ending_state="looter_leader_2")
def condition():
    party_faction_001 = store_faction_of_party(_g_starting_town)
    if party_faction_001 == fac.kingdom_1:
        var002 = trp.swadian_merchant
    elif party_faction_001 == fac.kingdom_2:
        var002 = trp.vaegir_merchant
    elif party_faction_001 == fac.kingdom_3:
        var002 = trp.khergit_merchant
    elif party_faction_001 == fac.kingdom_4:
        var002 = trp.nord_merchant
    elif party_faction_001 == fac.kingdom_5:
        var002 = trp.rhodok_merchant
    elif party_faction_001 == fac.kingdom_6:
        var002 = trp.sarranid_merchant
    #end
    s9 = str_store_troop_name(var002)
looter_leader_1_looter_leader_2.conditionBlock = condition


looter_leader_1_close_window = Dialog("anyone|plyr", "Nothing. We'll leave you in peace.", starting_state="looter_leader_1", ending_state="close_window")
def code():
    _g_leave_encounter = 1
looter_leader_1_close_window.codeBlock = code


looter_leader_2_looter_leader_3 = Dialog("anyone", "Hah! Those prisoners are only going free if you pay their ransom. Did you bring any silver?", starting_state="looter_leader_2", ending_state="looter_leader_3")


looter_leader_3_close_window = Dialog("anyone|plyr", "No, but I brought steel.", starting_state="looter_leader_3", ending_state="close_window")


bandit_leader_1b_close_window = Dialog("anyone", "Oh bless you, {sir/my lady}. Bless you. We've done the lad no harm. We've been keeping him in our hideout near {s9}. I'll describe the area nearby in detail, so there's no mistaking it...", starting_state="bandit_leader_1b", ending_state="close_window")
def condition():
    if is_between(_g_talk_troop,trp.sea_raider_leader,trp.bandit_leaders_end):
        var001 = 0
        for p_002 in range(p.village_1, p.salt_mine):
            if party_slot_eq(p_002,120,_g_starting_town):
                var001 += 1
            #end
        #end
    #end
    random_x_003 = store_random_in_range(0,var001)
    random_x_003 += 1
    for p_002 in range(p.village_1, p.salt_mine):
        if party_slot_eq(p_002,120,_g_starting_town):
            random_x_003 -= 1
            if random_x_003 == 0:
                _lair_neighboor_village = p_002
            #end
        #end
    #end
    s9 = str_store_party_name_link(_lair_neighboor_village)
    set_spawn_radius(4)
    spawn_around_party(_lair_neighboor_village,pt.looter_lair)
    party_set_flags(reg0,16384,1)
bandit_leader_1b_close_window.conditionBlock = condition
def code():
    succeed_quest(qst.learn_where_merchant_brother_is)
    end_quest(qst.learn_where_merchant_brother_is)
    party_faction_001 = store_faction_of_party(_g_starting_town)
    if party_faction_001 == fac.kingdom_1:
        var002 = trp.swadian_merchant
    elif party_faction_001 == fac.kingdom_2:
        var002 = trp.vaegir_merchant
    elif party_faction_001 == fac.kingdom_3:
        var002 = trp.khergit_merchant
    elif party_faction_001 == fac.kingdom_4:
        var002 = trp.nord_merchant
    elif party_faction_001 == fac.kingdom_5:
        var002 = trp.rhodok_merchant
    elif party_faction_001 == fac.kingdom_6:
        var002 = trp.sarranid_merchant
    #end
    s10 = str_store_troop_name(var002)
    s2 = str_store_string(gstr.find_the_lair_near_s9_and_free_the_brother_of_the_prominent_s10_merchant)
    start_quest(qst.save_relative_of_merchant,var002)
bandit_leader_1b_close_window.codeBlock = code


start_rescue_prisoner_succeed_2 = Dialog("anyone", "{playername}, you saved him! Thank you ever so much for rescuing my {s11}. Please, take this as some small repayment for your noble deed.", starting_state="start", ending_state="rescue_prisoner_succeed_2")
def condition():
    if troop_slot_eq(_g_talk_troop,2,2) and check_quest_active(qst.rescue_prisoner) and check_quest_succeeded(qst.rescue_prisoner) and quest_slot_eq(qst.rescue_prisoner,6,_g_talk_troop):
        quest_slot_001 = quest_get_slot(qst.rescue_prisoner,2)
        troop_get_family_relation_to_troop(quest_slot_001,_g_talk_troop)
start_rescue_prisoner_succeed_2.conditionBlock = condition
def code():
    change_player_relation_with_troop(_g_talk_troop,8)
    add_xp_as_reward(2000)
    troop_add_gold(trp.player,1500)
    end_quest(qst.rescue_prisoner)
start_rescue_prisoner_succeed_2.codeBlock = code


rescue_prisoner_succeed_2_lord_pretalk = Dialog("anyone|plyr", "Always an honour to serve, {s65}.", starting_state="rescue_prisoner_succeed_2", ending_state="lord_pretalk")


start_start_up_quest_1_next = Dialog("anyone|auto_proceed", "{!}.", starting_state="start", ending_state="start_up_quest_1_next")
def condition():
    if is_between(_g_talk_troop,trp.swadian_merchant,trp.startup_merchants_end) and _talk_context == 11 and _talked_with_merchant == 0:
        pass
start_start_up_quest_1_next.conditionBlock = condition


start_up_quest_1_next_close_window = Dialog("anyone", "Are you all right? Well.... I guess you're alive, at any rate. I'm not sure that we can say the same for the other fellow. That's one less thief to trouble our streets at night, although Heaven knows he won't be the last.... Anyway, maybe you can help me with something. Let's talk more inside. Out here, we don't know who's listening", starting_state="start_up_quest_1_next", ending_state="close_window")
def code():
    _talked_with_merchant = 1
    mission_disable_talk()
start_up_quest_1_next_close_window.codeBlock = code


start_start_up_quest_2_next = Dialog("anyone|auto_proceed", "{!}.", starting_state="start", ending_state="start_up_quest_2_next")
def condition():
    if is_between(_g_talk_troop,trp.swadian_merchant,trp.startup_merchants_end) and _talk_context == 14:
        party_count_members_with_full_health(p.main_party)
        var001 = reg0
        var002 = 0
        if check_quest_active(qst.collect_men) and not check_quest_succeeded(qst.collect_men) and var001 <= 5:
            if var001 <= 1:
                s11 = str_store_string(gstr.please_sir_my_lady_go_find_some_volunteers_i_do_not_know_how_much_time_we_have)
            else:
                s11 = str_store_string(gstr.you_need_more_men_sir_my_lady)
            #end
        #end
        var002 = 1
    elif check_quest_active(qst.learn_where_merchant_brother_is) and not check_quest_succeeded(qst.learn_where_merchant_brother_is):
        s11 = str_store_string(gstr.do_not_waste_time_go_and_learn_where_my_brother_is)
        var002 = 1
        if var002 == 1:
            pass
        #end
    #end
start_start_up_quest_2_next.conditionBlock = condition


start_up_quest_2_next_close_window = Dialog("anyone", "{!}{s11}", starting_state="start_up_quest_2_next", ending_state="close_window")


start_merchant_quest_2a = Dialog("anyone", "Splendid work. You have hired enough men to take on the bandits. Now -- travellers entering {s9} have told us that there is a small group of robbers lurking on the outside of town. I suspect that they are all from the same band, the one that took my brother. Hunt them down and defeat them, and make them disclose the location of their lair!", starting_state="start", ending_state="merchant_quest_2a")
def condition():
    if is_between(_g_talk_troop,trp.swadian_merchant,trp.startup_merchants_end) and _talk_context == 14 and check_quest_active(qst.collect_men) and not check_quest_succeeded(qst.duel_for_lady):
        party_count_members_with_full_health(p.main_party)
        if reg0 >= 6:
            s9 = str_store_party_name(_current_town)
start_merchant_quest_2a.conditionBlock = condition
def code():
    succeed_quest(qst.collect_men)
    end_quest(qst.collect_men)
start_merchant_quest_2a.codeBlock = code


start_merchant_quest_3a = Dialog("anyone", "So, you've found out where they hid my brother? Splendid work. I flatter myself that I'm a fine judge of character, and you look to be a {man/woman} who can get things done. Now, go out and save his unworthy hide!", starting_state="start", ending_state="merchant_quest_3a")
def condition():
    if is_between(_g_talk_troop,trp.swadian_merchant,trp.startup_merchants_end) and _talk_context == 14 and check_quest_active(qst.save_relative_of_merchant) and not check_quest_succeeded(qst.save_relative_of_merchant):
        s9 = str_store_party_name(_current_town)
start_merchant_quest_3a.conditionBlock = condition


start_merchant_quest_3b = Dialog("anyone", "Well... My brother is home safe. I'm not sure what to do with him -- maybe pack him off to a university outside Calradia. That way, if he gets knocked on the head in a street brawl, no one can say it's my fault. But that's not your problem. Here's the rest of your reward. It was well-earned.", starting_state="start", ending_state="merchant_quest_3b")
def condition():
    if is_between(_g_talk_troop,trp.swadian_merchant,trp.startup_merchants_end) and _talk_context == 14 and check_quest_active(qst.save_relative_of_merchant) and check_quest_succeeded(qst.save_relative_of_merchant):
        pass
start_merchant_quest_3b.conditionBlock = condition
def code():
    finish_quest(qst.save_relative_of_merchant,100)
    troop_add_gold(trp.player,200)
start_merchant_quest_3b.codeBlock = code


merchant_quest_3b_merchant_quest_4a = Dialog("anyone|plyr", "The money is most welcome, and I am glad to have been of service", starting_state="merchant_quest_3b", ending_state="merchant_quest_4a")


merchant_quest_4a_merchant_quest_4b = Dialog("anyone", "Good! Now... Are you interested in making some more?", starting_state="merchant_quest_4a", ending_state="merchant_quest_4b")


merchant_quest_4b_merchant_quest_4b1 = Dialog("anyone|plyr", "Possibly. What do you need?", starting_state="merchant_quest_4b", ending_state="merchant_quest_4b1")


merchant_quest_4b1_merchant_quest_4b2 = Dialog("anyone", "Remember how I told you that the bandits had an ally inside the walls? I think I know who it is -- the captain of the watch, no less. Some months ago this captain, seeing the amount of profit we merchants were making from trade across the frontiers, decided to borrow some money to sponsor a caravan. Unfortunately, like many who are new to commerce, he failed to realize that great profit only comes with great risk. So he sank all his money into the most expensive commodities, and of course his caravan was captured and looted, and he lost everything.", starting_state="merchant_quest_4b1", ending_state="merchant_quest_4b2")


merchant_quest_4b2_merchant_quest_4b3 = Dialog("anyone", "As a consequence, it seems, our captain turned to villainy to recoup his fortune. I supposed I'd do the same if, the Heavens forbid, I ever faced indebtedness and ruination. Now, any watch captain worth his salary will have a few thieves and robbers on his payroll, to inform on the rest, but our captain decides to employ these bastards wholesale. He brings them into the town, lets them do as they will, and takes a share of their take. You've heard of poachers turning gamekeepers? Well, in the unfortunate land of Calradia, sometimes gamekeepers will turn poacher. Luckily, there's are still a few brave, honest souls in the watch who've told me how he works.", starting_state="merchant_quest_4b2", ending_state="merchant_quest_4b3")


merchant_quest_4b3_merchant_quest_4b4 = Dialog("anyone", "Now -- here's my plan. I could bring this to the attention of {s4}, lord of the city, but that would mean an inquiry, my word against the captain's, and witnesses can be bought and evidence destroyed, or maybe the whole thing will be forgotten if the enemy comes across the border again, and all I'll get for my trouble is a knife in the ribs. In time of war, you see, a king's eye wanders far from his domain, and his subjects suffer. So I've got another idea. I've got a small group of townsfolk together, some men in my employ and some others who've lost relatives to these bandits, and we'll storm the captain's home and bring him in chains before {s4}, hopefully with a few captured bandits to explain how things stack up.", starting_state="merchant_quest_4b3", ending_state="merchant_quest_4b4")
def condition():
    faction_slot_001 = faction_get_slot(_g_encountered_party_faction,11)
    s4 = str_store_troop_name(faction_slot_001)
merchant_quest_4b3_merchant_quest_4b4.conditionBlock = condition


merchant_quest_4b4_merchant_quest_4b5 = Dialog("anyone", "All I need now is someone to lead my little army into battle -- and I can't think of anyone better than you. So, what do you say?", starting_state="merchant_quest_4b4", ending_state="merchant_quest_4b5")


merchant_quest_4b5_merchant_quest_4b6 = Dialog("anyone|plyr", "How do I know that you're telling me the truth?", starting_state="merchant_quest_4b5", ending_state="merchant_quest_4b6")


merchant_quest_4b6_merchant_quest_4b7 = Dialog("anyone", "Oh, well, I suppose it's possible that I found a dozen bandits who were willing to give their lives to give a passing stranger a false impression of life in old {s4}... Well, I guess you can't really know if my word is good, but I reckon you've learned by now that my money is good, and there's another 100 denars, or maybe a bit more, that's waiting for you if you'll do me this last little favor. So what do you say?", starting_state="merchant_quest_4b6", ending_state="merchant_quest_4b7")
def condition():
    s4 = str_store_party_name(_g_encountered_party)
merchant_quest_4b6_merchant_quest_4b7.conditionBlock = condition


merchant_quest_4b7_merchant_quest_4b8 = Dialog("anyone|plyr", "All right. I'll lead your men.", starting_state="merchant_quest_4b7", ending_state="merchant_quest_4b8")


merchant_quest_4b7_merchant_quest_4_decline = Dialog("anyone|plyr", "I'm sorry. This is too much, too fast. I need time to think.", starting_state="merchant_quest_4b7", ending_state="merchant_quest_4_decline")


merchant_quest_4b8_merchant_quest_4b9 = Dialog("anyone", "Splendid. It's been a long time since I staked so much on a single throw of the dice, and frankly I find it exhilarating. My men are ready to move on your word. Are you ready?", starting_state="merchant_quest_4b8", ending_state="merchant_quest_4b9")


merchant_quest_4b9_merchant_quest_4_accept = Dialog("anyone|plyr", "Yes. Give them the sign.", starting_state="merchant_quest_4b9", ending_state="merchant_quest_4_accept")


merchant_quest_4b9_merchant_quest_4_decline = Dialog("anyone|plyr", "Not now. I will need to rest before I can fight again.", starting_state="merchant_quest_4b9", ending_state="merchant_quest_4_decline")


merchant_quest_4_accept_close_window = Dialog("anyone", "Good! Now -- strike hard, strike fast, and the captain and his henchmen won't know what hit them. May the heavens be with you!", starting_state="merchant_quest_4_accept", ending_state="close_window")
def code():
    _current_startup_quest_phase = 3
    jump_to_menu(mnu.start_phase_3)
    finish_mission()
merchant_quest_4_accept_close_window.codeBlock = code


merchant_quest_4_decline_close_window = Dialog("anyone", "Right. I can keep my men standing by. If you let this go too long, then I suppose that I shall have to finish this affair without you, but I would be most pleased if you could be part of it as well. For now, take what time you need.", starting_state="merchant_quest_4_decline", ending_state="close_window")


merchant_quest_2a_close_window = Dialog("anyone|plyr", "Very well. I shall hunt for bandits.", starting_state="merchant_quest_2a", ending_state="close_window")
def code():
    s9 = str_store_party_name(_current_town)
    s2 = str_store_string(gstr.start_up_quest_message_2)
    start_quest(qst.learn_where_merchant_brother_is,_g_talk_troop)
    set_spawn_radius(2)
    spawn_around_party(_current_town,pt.leaded_looters)
    var001 = reg0
    pos0 = party_get_position(_current_town)
    party_set_ai_behavior(var001,2)
    party_set_ai_patrol_radius(var001,3)
    party_set_ai_target_position(var001,0)
merchant_quest_2a_close_window.codeBlock = code


merchant_quest_2a_merchant_quest_2a_whynotcome = Dialog("anyone|plyr", "Why don't you come with us?", starting_state="merchant_quest_2a", ending_state="merchant_quest_2a_whynotcome")


merchant_quest_2a_whynotcome_merchant_quest_2a = Dialog("anyone", "Because I'm paying you to go take care of it. That's the short answer. The long answer is that I've got some leads to follow up here in town, and I have just as much chance of getting knocked on my head as you, if that's what you're asking. But I respect your question. Now, what do you say?", starting_state="merchant_quest_2a_whynotcome", ending_state="merchant_quest_2a")


merchant_quest_2a_close_window_1 = Dialog("anyone|plyr", "I cannot deal with this matter at this time.", starting_state="merchant_quest_2a", ending_state="close_window")


merchant_quest_3a_close_window = Dialog("anyone|plyr", "Very well. I go now to attack the bandits in their lair, and find your brother.", starting_state="merchant_quest_3a", ending_state="close_window")


merchant_quest_3a_close_window_1 = Dialog("anyone|plyr", "I cannot deal with this matter at this time.", starting_state="merchant_quest_3a", ending_state="close_window")


start_merchant_quest_persuasion = Dialog("anyone", "You may do as you wish, {sir/my lady}, but I am disappointed. You would do well to reconsider. I am a rich men, and would show you my gratitude in coin.", starting_state="start", ending_state="merchant_quest_persuasion")
def condition():
    if is_between(_g_talk_troop,trp.swadian_merchant,trp.startup_merchants_end) and _talk_context == 14 or _dialog_with_merchant_ended != 0:
        var001 = 0
        if not check_quest_succeeded(qst.collect_men) and not check_quest_active(qst.collect_men):
            var001 = 1
        elif not check_quest_active(qst.collect_men) and not check_quest_succeeded(qst.learn_where_merchant_brother_is) and not check_quest_active(qst.learn_where_merchant_brother_is):
            var001 = 1
        elif not check_quest_active(qst.collect_men) and not check_quest_active(qst.learn_where_merchant_brother_is) and not check_quest_succeeded(qst.save_relative_of_merchant) and not check_quest_active(qst.save_relative_of_merchant):
            var001 = 1
            if var001 == 1:
                pass
            #end
        #end
    #end
start_merchant_quest_persuasion.conditionBlock = condition


start_merchant_quest_4b4 = Dialog("anyone|auto_proceed", "{!}.", starting_state="start", ending_state="merchant_quest_4b4")
def condition():
    if is_between(_g_talk_troop,trp.swadian_merchant,trp.startup_merchants_end) and _talk_context == 14 or _dialog_with_merchant_ended != 0 and check_quest_finished(qst.save_relative_of_merchant) and not check_quest_succeeded(qst.save_town_from_bandits) and not check_quest_active(qst.save_town_from_bandits):
        pass
start_merchant_quest_4b4.conditionBlock = condition


merchant_quest_persuasion_merchant_quest_1_prologue_3 = Dialog("anyone|plyr", "You make a persuasive case. I will help you.", starting_state="merchant_quest_persuasion", ending_state="merchant_quest_1_prologue_3")
def condition():
    if not check_quest_finished(qst.collect_men) and not check_quest_active(qst.collect_men):
        pass
merchant_quest_persuasion_merchant_quest_1_prologue_3.conditionBlock = condition


merchant_quest_persuasion_merchant_quest_2 = Dialog("anyone|plyr", "You make a persuasive case. I will help you.", starting_state="merchant_quest_persuasion", ending_state="merchant_quest_2")
def condition():
    if check_quest_finished(qst.collect_men) and not check_quest_finished(qst.learn_where_merchant_brother_is) and not check_quest_active(qst.learn_where_merchant_brother_is):
        pass
merchant_quest_persuasion_merchant_quest_2.conditionBlock = condition


merchant_quest_persuasion_merchant_quest_3 = Dialog("anyone|plyr", "You make a persuasive case. I will help you.", starting_state="merchant_quest_persuasion", ending_state="merchant_quest_3")
def condition():
    if check_quest_finished(qst.collect_men) and check_quest_finished(qst.learn_where_merchant_brother_is) and not check_quest_finished(qst.save_relative_of_merchant) and not check_quest_active(qst.save_relative_of_merchant):
        pass
merchant_quest_persuasion_merchant_quest_3.conditionBlock = condition


merchant_quest_persuasion_merchant_quest_4b8 = Dialog("anyone|plyr", "You make a persuasive case. I will help you.", starting_state="merchant_quest_persuasion", ending_state="merchant_quest_4b8")
def condition():
    if check_quest_finished(qst.collect_men) and check_quest_finished(qst.learn_where_merchant_brother_is) and check_quest_finished(qst.save_relative_of_merchant) and not check_quest_finished(qst.save_town_from_bandits) and not check_quest_active(qst.save_town_from_bandits):
        pass
merchant_quest_persuasion_merchant_quest_4b8.conditionBlock = condition


merchant_quest_persuasion_close_window = Dialog("anyone|plyr", "As I say, I have more important business elsewhere.", starting_state="merchant_quest_persuasion", ending_state="close_window")


merchant_quest_2_merchant_quest_2a = Dialog("anyone", "Now -- go find and defeat that group of bandits.", starting_state="merchant_quest_2", ending_state="merchant_quest_2a")


merchant_quest_3_merchant_quest_3a = Dialog("anyone", "Now -- go attack that bandit hideout, get my brother back, and show those brigands what happens to those who threaten my household.", starting_state="merchant_quest_3", ending_state="merchant_quest_3a")


start_close_window_7 = Dialog("anyone", "Oh -- thank the heavens... Thank the heavens... Am I safe?", starting_state="start", ending_state="close_window")
def condition():
    if is_between(_g_talk_troop,trp.relative_of_merchant,trp.relative_of_merchant):
        pass
start_close_window_7.conditionBlock = condition


start_merchant_closing_statement_2 = Dialog("anyone", "Ah... {playername}. Things didn't go quite so well as I had hoped. {s5} couldn't quite find it in him to overlook my little breach of the peace. Oh, he's grateful enough that I got rid of his crooked captain -- a guard who'll let in bandits will let in an enemy army, if the price is right -- but he can't exactly have me running around here as a lasting reminder of his failure to take care of things himself.", starting_state="start", ending_state="merchant_closing_statement_2")
def condition():
    if is_between(_g_talk_troop,trp.swadian_merchant,trp.startup_merchants_end) and _g_do_one_more_meeting_with_merchant == 1:
        faction_slot_001 = faction_get_slot(_g_encountered_party_faction,11)
        s5 = str_store_troop_name(faction_slot_001)
start_merchant_closing_statement_2.conditionBlock = condition


merchant_closing_statement_2_merchant_closing_statement_3 = Dialog("anyone|plyr", "That hardly seems fair...", starting_state="merchant_closing_statement_2", ending_state="merchant_closing_statement_3")


merchant_closing_statement_3_merchant_closing_statement_4 = Dialog("anyone", "Fair? This is Calradia, {my boy/my lady}! Kings do what they will, and the rest of us do as they must. He didn't string me up, and instead gave me time to sell my properties -- even put in a word with the other merchants that they best pay me a fair price, too. That's gracious enough, as kings go -- but he's a weak king, as they all are here, and weak kings must always look to their authority first, and justice second. I suppose I'd do the same, in his shoes.", starting_state="merchant_closing_statement_3", ending_state="merchant_closing_statement_4")


merchant_closing_statement_4_close_window = Dialog("anyone", "Anyway, I wouldn't go rubbing your part in this affair in {s5}'s face -- but he's taken note of you, and decided that you're not worth hanging, and that's something to which I'll raise a glass any day of the week. He might even have work for you, further down the road. Or, you can sell your sword to one of his competitors. Anyway, I hope you've learned a bit about what it will take to stay alive in this troubled land, and I suspect that the money you've earned won't go to waste. Good luck.", starting_state="merchant_closing_statement_4", ending_state="close_window")
def code():
    _g_do_one_more_meeting_with_merchant = 2
merchant_closing_statement_4_close_window.codeBlock = code


start_merchant_quests_last_word = Dialog("anyone|auto_proceed", "{!}.", starting_state="start", ending_state="merchant_quests_last_word")
def condition():
    if is_between(_g_talk_troop,trp.swadian_merchant,trp.startup_merchants_end) and check_quest_finished(qst.save_town_from_bandits) and _g_do_one_more_meeting_with_merchant == 2:
        pass
start_merchant_quests_last_word.conditionBlock = condition


merchant_quests_last_word_close_window = Dialog("anyone", "I am preparing to leave town in a short while. It's been an honor to know you. Good luck.", starting_state="merchant_quests_last_word", ending_state="close_window")


member_intel_liaison_member_intel_liaison_results = Dialog("anyone|plyr", "What have you discovered?", starting_state="member_intel_liaison", ending_state="member_intel_liaison_results")


start_member_intel_liaison = Dialog("anyone", "Greetings, stranger.", starting_state="start", ending_state="member_intel_liaison")
def condition():
    if is_between(_g_talk_troop,trp.npc1,trp.kingdom_1_lord) and _talk_context == 14 and troop_slot_eq(_g_talk_troop,151,2):
        pass
start_member_intel_liaison.conditionBlock = condition


member_intel_liaison_member_intel_liaison_results = Dialog("anyone|plyr", "What have you discovered?", starting_state="member_intel_liaison", ending_state="member_intel_liaison_results")


member_intel_liaison_close_window = Dialog("anyone|plyr", "It's time to pull you out. Let's leave town separately, but join me soon after", starting_state="member_intel_liaison", ending_state="close_window")
def code():
    _npc_to_rejoin_party = _g_talk_troop
member_intel_liaison_close_window.codeBlock = code


member_intel_liaison_close_window_1 = Dialog("anyone|plyr", "You're doing good work. Stay here for a little longer", starting_state="member_intel_liaison", ending_state="close_window")


member_intel_liaison_results_member_intel_liaison = Dialog("anyone", "{s11} I notice that you have been keeping some notes about individual lords. I have annotated those with my findings.", starting_state="member_intel_liaison_results", ending_state="member_intel_liaison")
def condition():
    party_faction_001 = store_faction_of_party(_g_encountered_party)
    update_faction_political_notes(party_faction_001)
    var002 = reg0
    var002 += reg0
    var002 += reg1
    for trp_003 in range(trp.npc1, trp.knight_1_1_wife):
        if troop_slot_eq(trp_003,2,2):
            troop_faction_004 = store_faction_of_troop(trp_003)
            if troop_faction_004 == party_faction_001:
                update_troop_political_notes(trp_003)
            #end
        #end
    #end
    s12 = str_store_faction_name(party_faction_001)
    if var002 > 60:
        s11 = str_store_string(gstr.the_s12_is_a_labyrinth_of_rivalries_and_grudges_lords_ignore_their_lieges_summons_and_many_are_ripe_to_defect)
    elif is_between(var002,40,60):
        s11 = str_store_string(gstr.the_s12_is_shaky_many_lords_do_not_cooperate_with_each_other_and_some_might_be_tempted_to_defect_to_a_liege_that_they_consider_more_worthy)
    elif is_between(var002,20,40):
        s11 = str_store_string(gstr.the_s12_is_fairly_solid_some_lords_bear_enmities_for_each_other_but_they_tend_to_stand_together_against_outside_enemies)
    elif var002 < 20:
        s11 = str_store_string(gstr.the_s12_is_a_rock_of_stability_politically_speaking_whatever_the_lords_may_think_of_each_other_they_fight_as_one_against_the_common_foe)
    #end
member_intel_liaison_results_member_intel_liaison.conditionBlock = condition


member_fief_grant_1_member_fief_grant_2 = Dialog("anyone", "Which fief did you have in mind?", starting_state="member_fief_grant_1", ending_state="member_fief_grant_2")


member_fief_grant_2_member_fief_grant_3 = Dialog("anyone|repeat_for_parties|plyr", "{s11}", starting_state="member_fief_grant_2", ending_state="member_fief_grant_3")
def condition():
    var001 = store_repeat_object()
    if is_between(var001,p.town_1,p.salt_mine) and var001 != _g_player_court:
        party_faction_002 = store_faction_of_party(var001)
        if party_faction_002 == fac.player_supporters_faction and not party_slot_ge(var001,7,trp.npc1):
            s11 = str_store_party_name(var001)
member_fief_grant_2_member_fief_grant_3.conditionBlock = condition
def code():
    _temp = store_repeat_object()
member_fief_grant_2_member_fief_grant_3.codeBlock = code


member_fief_grant_2_do_member_trade = Dialog("anyone|plyr", "Never mind -- there is no fief I can offer.", starting_state="member_fief_grant_2", ending_state="do_member_trade")


member_fief_grant_3_close_window = Dialog("anyone", "{s5}", starting_state="member_fief_grant_3", ending_state="close_window")
def code():
    npc_morale(_g_talk_troop)
    var001 = reg0
    remove_member_from_party(_g_talk_troop,p.main_party)
    if not troop_slot_eq(_g_talk_troop,2,2):
        var002 = 136
        var002 -= 1
        var002 -= _g_companions_banner_id
        var003 = spr.banner_a
        var003 += var002
        troop_set_slot(_g_talk_troop,13,var003)
        _g_companions_banner_id += 1
        troop_set_slot(_g_talk_troop,2,2)
    #end
    troop_set_faction(_g_talk_troop,fac.player_supporters_faction)
    give_center_to_lord(_temp,_g_talk_troop,0)
    if faction_slot_eq(_players_kingdom,64,_temp):
        faction_set_slot(_players_kingdom,64,-1)
    #end
    if troop_slot_eq(_g_talk_troop,14,0):
        party_slot_004 = party_get_slot(_temp,61)
        troop_set_slot(_g_talk_troop,14,party_slot_004)
    #end
    character_lvl_005 = store_character_level(_g_talk_troop)
    character_lvl_005 *= 15
    val_max(character_lvl_005,200)
    troop_set_slot(_g_talk_troop,7,character_lvl_005)
    troop_set_slot(_g_talk_troop,11,2500)
    s12 = str_store_troop_name_plural(_g_talk_troop)
    troop_type_006 = troop_get_type(_g_talk_troop)
    if _g_talk_troop == trp.npc10:
        s14 = str_store_string(gstr.tribune_s12)
    elif troop_type_006 == 1:
        s14 = str_store_string(gstr.lady_s12)
    else:
        s14 = str_store_string(gstr.lord_s12)
    #end
    troop_set_name(_g_talk_troop,14)
    unlock_achievement(42)
    check_concilio_calradi_achievement()
    if True:
        troop_add_item(_g_talk_troop,itm.saddle_horse,0)
        troop_add_item(_g_talk_troop,itm.courser,0)
        troop_add_item(_g_talk_troop,itm.courtly_outfit,0)
        troop_add_item(_g_talk_troop,itm.heraldic_mail_with_tabard,0)
        troop_add_item(_g_talk_troop,itm.red_gambeson,0)
        troop_add_item(_g_talk_troop,itm.sword_medieval_c,0)
        troop_add_item(_g_talk_troop,itm.tab_shield_kite_cav_b,0)
        troop_add_item(_g_talk_troop,itm.light_lance,0)
    #end
    troop_equip_items(_g_talk_troop)
    var007 = var001 / 3
    troop_change_relation_with_troop(_g_talk_troop,trp.player,var007)
    s17 = str_store_party_name(_temp)
    var008 = _g_talk_troop - trp.npc1
    var009 = gstr.npc1_fief_acceptance
    var009 += var008
    s5 = str_store_string(var009)
member_fief_grant_3_close_window.codeBlock = code


start_close_window_8 = Dialog("anyone", "Let's leave whenever you are ready.", starting_state="start", ending_state="close_window")
def condition():
    if is_between(_g_talk_troop,trp.npc1,trp.kingdom_1_lord) and _talk_context == 14 or _talk_context == 1 and main_party_has_troop(_g_talk_troop):
        pass
start_close_window_8.conditionBlock = condition


start_close_window_9 = Dialog("anyone", "Please do not waste any more of my time today, {sir/madame}. Perhaps we shall meet again in our travels.", starting_state="start", ending_state="close_window")
def condition():
    if is_between(_g_talk_troop,trp.npc1,trp.kingdom_1_lord) and troop_slot_eq(_g_talk_troop,2,0) and troop_slot_eq(_g_talk_troop,81,1):
        pass
start_close_window_9.conditionBlock = condition


start_companion_recruit_intro_response = Dialog("anyone", "{s5}", starting_state="start", ending_state="companion_recruit_intro_response")
def condition():
    if is_between(_g_talk_troop,trp.npc1,trp.kingdom_1_lord) and troop_slot_eq(_g_talk_troop,2,0) and _g_talk_troop_met == 0:
        troop_slot_001 = troop_get_slot(_g_talk_troop,101)
        s5 = str_store_string(troop_slot_001)
        s20 = str_store_party_name(_g_encountered_party)
start_companion_recruit_intro_response.conditionBlock = condition
def code():
    troop_set_slot(_g_talk_troop,59,_g_encountered_party)
start_companion_recruit_intro_response.codeBlock = code


companion_recruit_intro_response_companion_recruit_backstory_a = Dialog("anyone|plyr", "{s6}", starting_state="companion_recruit_intro_response", ending_state="companion_recruit_backstory_a")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,102)
    s6 = str_store_string(troop_slot_001)
companion_recruit_intro_response_companion_recruit_backstory_a.conditionBlock = condition


companion_recruit_intro_response_close_window = Dialog("anyone|plyr", "{s7}", starting_state="companion_recruit_intro_response", ending_state="close_window")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,103)
    s7 = str_store_string(troop_slot_001)
companion_recruit_intro_response_close_window.conditionBlock = condition


companion_recruit_backstory_a_companion_recruit_backstory_b = Dialog("anyone", "{s5}", starting_state="companion_recruit_backstory_a", ending_state="companion_recruit_backstory_b")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,104)
    s5 = str_store_string(troop_slot_001)
    s19 = str_store_string(gstr.here_plus_space)
    s20 = str_store_party_name(_g_encountered_party)
companion_recruit_backstory_a_companion_recruit_backstory_b.conditionBlock = condition


companion_recruit_backstory_b_companion_recruit_backstory_c = Dialog("anyone", "{s5}", starting_state="companion_recruit_backstory_b", ending_state="companion_recruit_backstory_c")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,105)
    s5 = str_store_string(troop_slot_001)
    s20 = str_store_party_name(_g_encountered_party)
companion_recruit_backstory_b_companion_recruit_backstory_c.conditionBlock = condition


companion_recruit_backstory_c_companion_recruit_backstory_response = Dialog("anyone", "{s5}", starting_state="companion_recruit_backstory_c", ending_state="companion_recruit_backstory_response")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,106)
    s5 = str_store_string(troop_slot_001)
companion_recruit_backstory_c_companion_recruit_backstory_response.conditionBlock = condition


companion_recruit_backstory_response_companion_recruit_signup = Dialog("anyone|plyr", "{s6}", starting_state="companion_recruit_backstory_response", ending_state="companion_recruit_signup")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,108)
    s6 = str_store_string(troop_slot_001)
companion_recruit_backstory_response_companion_recruit_signup.conditionBlock = condition


companion_recruit_backstory_response_close_window = Dialog("anyone|plyr", "{s7}", starting_state="companion_recruit_backstory_response", ending_state="close_window")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,109)
    s7 = str_store_string(troop_slot_001)
companion_recruit_backstory_response_close_window.conditionBlock = condition


companion_recruit_signup_companion_recruit_signup_b = Dialog("anyone", "{s5}", starting_state="companion_recruit_signup", ending_state="companion_recruit_signup_b")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,110)
    s5 = str_store_string(troop_slot_001)
    s20 = str_store_party_name(_g_encountered_party)
companion_recruit_signup_companion_recruit_signup_b.conditionBlock = condition


companion_recruit_signup_b_companion_recruit_signup_response = Dialog("anyone", "{s5}", starting_state="companion_recruit_signup_b", ending_state="companion_recruit_signup_response")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,111)
    reg3 = troop_get_slot(_g_talk_troop,141)
    s5 = str_store_string(troop_slot_001)
    s20 = str_store_party_name(_g_encountered_party)
companion_recruit_signup_b_companion_recruit_signup_response.conditionBlock = condition


companion_recruit_signup_response_close_window = Dialog("anyone|plyr", "Unfortunately, I can't take on any more hands in my party right now.", starting_state="companion_recruit_signup_response", ending_state="close_window")
def condition():
    if not hero_can_join(p.main_party):
        pass
companion_recruit_signup_response_close_window.conditionBlock = condition


companion_recruit_signup_response_companion_recruit_payment = Dialog("anyone|plyr", "{s6}", starting_state="companion_recruit_signup_response", ending_state="companion_recruit_payment")
def condition():
    if hero_can_join(p.main_party):
        troop_slot_001 = troop_get_slot(_g_talk_troop,112)
        s6 = str_store_string(troop_slot_001)
companion_recruit_signup_response_companion_recruit_payment.conditionBlock = condition


companion_recruit_signup_response_close_window_1 = Dialog("anyone|plyr", "{s7}", starting_state="companion_recruit_signup_response", ending_state="close_window")
def condition():
    if hero_can_join(p.main_party):
        troop_slot_001 = troop_get_slot(_g_talk_troop,113)
        s7 = str_store_string(troop_slot_001)
companion_recruit_signup_response_close_window_1.conditionBlock = condition


companion_recruit_payment_companion_recruit_signup_confirm = Dialog("anyone|auto_proceed", ".", starting_state="companion_recruit_payment", ending_state="companion_recruit_signup_confirm")
def condition():
    if troop_slot_eq(_g_talk_troop,141,0):
        pass
companion_recruit_payment_companion_recruit_signup_confirm.conditionBlock = condition


companion_recruit_payment_companion_recruit_payment_response = Dialog("anyone", "{s5}", starting_state="companion_recruit_payment", ending_state="companion_recruit_payment_response")
def condition():
    var001 = _g_talk_troop - trp.npc1
    var002 = gstr.npc1_payment
    var002 += var001
    s5 = str_store_string(var002)
    reg3 = troop_get_slot(_g_talk_troop,141)
    s20 = str_store_party_name(_g_encountered_party)
companion_recruit_payment_companion_recruit_payment_response.conditionBlock = condition


companion_recruit_payment_response_companion_recruit_signup_confirm = Dialog("anyone|plyr", "{s6}", starting_state="companion_recruit_payment_response", ending_state="companion_recruit_signup_confirm")
def condition():
    if hero_can_join(p.main_party):
        troop_slot_001 = troop_get_slot(_g_talk_troop,141)
        troop_gold_002 = store_troop_gold(trp.player)
        if troop_gold_002 >= troop_slot_001:
            reg3 = troop_slot_001
            var003 = _g_talk_troop - trp.npc1
            var004 = gstr.npc1_payment_response
            var004 += var003
            s6 = str_store_string(var004)
companion_recruit_payment_response_companion_recruit_signup_confirm.conditionBlock = condition
def code():
    troop_slot_001 = troop_get_slot(_g_talk_troop,141)
    if troop_slot_001 > 0:
        troop_remove_gold(trp.player,troop_slot_001)
        troop_set_slot(_g_talk_troop,141,0)
companion_recruit_payment_response_companion_recruit_signup_confirm.codeBlock = code


companion_recruit_payment_response_close_window = Dialog("anyone|plyr", "Sorry. I can't afford that at the moment.", starting_state="companion_recruit_payment_response", ending_state="close_window")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,113)
    s7 = str_store_string(troop_slot_001)
companion_recruit_payment_response_close_window.conditionBlock = condition


start_companion_recruit_meet_again = Dialog("anyone", "We meet again.", starting_state="start", ending_state="companion_recruit_meet_again")
def condition():
    if is_between(_g_talk_troop,trp.npc1,trp.kingdom_1_lord) and troop_slot_eq(_g_talk_troop,2,0) and troop_slot_eq(_g_talk_troop,80,1) and troop_slot_eq(_g_talk_troop,82,0):
        pass
start_companion_recruit_meet_again.conditionBlock = condition
def code():
    troop_set_slot(_g_talk_troop,81,1)
start_companion_recruit_meet_again.codeBlock = code


companion_recruit_meet_again_companion_recruit_backstory_delayed = Dialog("anyone|plyr", "So... What have you been doing since our last encounter?", starting_state="companion_recruit_meet_again", ending_state="companion_recruit_backstory_delayed")


companion_recruit_meet_again_close_window = Dialog("anyone|plyr", "Good day to you.", starting_state="companion_recruit_meet_again", ending_state="close_window")


start_companion_recruit_secondchance = Dialog("anyone", "Yes?", starting_state="start", ending_state="companion_recruit_secondchance")
def condition():
    if is_between(_g_talk_troop,trp.npc1,trp.kingdom_1_lord) and troop_slot_eq(_g_talk_troop,2,0) and troop_slot_eq(_g_talk_troop,80,0) and troop_slot_eq(_g_talk_troop,82,0):
        pass
start_companion_recruit_secondchance.conditionBlock = condition
def code():
    troop_set_slot(_g_talk_troop,81,1)
start_companion_recruit_secondchance.codeBlock = code


companion_recruit_secondchance_companion_recruit_backstory_b = Dialog("anyone|plyr", "My apologies if I was rude, earlier. What was your story again?", starting_state="companion_recruit_secondchance", ending_state="companion_recruit_backstory_b")


companion_recruit_secondchance_close_window = Dialog("anyone|plyr", "Never mind.", starting_state="companion_recruit_secondchance", ending_state="close_window")


companion_recruit_backstory_delayed_companion_recruit_backstory_delayed_response = Dialog("anyone", "{s5}", starting_state="companion_recruit_backstory_delayed", ending_state="companion_recruit_backstory_delayed_response")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,107)
    s5 = str_store_string(troop_slot_001)
companion_recruit_backstory_delayed_companion_recruit_backstory_delayed_response.conditionBlock = condition


companion_recruit_backstory_delayed_response_companion_recruit_signup_b = Dialog("anyone|plyr", "I might be able to use you in my company.", starting_state="companion_recruit_backstory_delayed_response", ending_state="companion_recruit_signup_b")


companion_recruit_backstory_delayed_response_close_window = Dialog("anyone|plyr", "I'll let you know if I hear of anything.", starting_state="companion_recruit_backstory_delayed_response", ending_state="close_window")


companion_recruit_signup_confirm_close_window = Dialog("anyone", "Good! Give me a few moments to prepare and I'll be ready to move.", starting_state="companion_recruit_signup_confirm", ending_state="close_window")
def code():
    recruit_troop_as_companion(_g_talk_troop)
companion_recruit_signup_confirm_close_window.codeBlock = code


start_companion_rehire = Dialog("anyone", "My offer to rejoin you still stands, if you'll have me.", starting_state="start", ending_state="companion_rehire")
def condition():
    if is_between(_g_talk_troop,trp.npc1,trp.kingdom_1_lord) and not troop_slot_eq(_g_talk_troop,2,2) and troop_slot_eq(_g_talk_troop,82,4):
        if troop_slot_001 < p.town_1:
            troop_slot_001 = troop_get_slot(_g_talk_troop,8)
start_companion_rehire.conditionBlock = condition


start_companion_rehire_1 = Dialog("anyone", "It is good to see you alive, {s5}! {s6}, and I did not know whether you had been captured, or slain, or got away. I've been roaming around since then, looking for you. Shall I get my gear together and rejoin your company?", starting_state="start", ending_state="companion_rehire")
def condition():
    if is_between(_g_talk_troop,trp.npc1,trp.kingdom_1_lord) and not troop_slot_eq(_g_talk_troop,2,2) and troop_slot_eq(_g_talk_troop,82,1) and _talk_context == 8 or not troop_slot_ge(_g_talk_troop,8,0) and _talk_context != 18:
        var001 = gstr.battle_fate_1
        random_x_002 = store_random_in_range(0,5)
        var001 += random_x_002
        s6 = str_store_string(var001)
        troop_slot_003 = troop_get_slot(_g_talk_troop,130)
        s5 = str_store_string(troop_slot_003)
start_companion_rehire_1.conditionBlock = condition
def code():
    troop_set_slot(_g_talk_troop,82,4)
    troop_set_slot(_g_talk_troop,8,-1)
start_companion_rehire_1.codeBlock = code


start_companion_prison_break_chains = Dialog("anyone|plyr", "I've come to break you out of here.", starting_state="start", ending_state="companion_prison_break_chains")
def condition():
    if is_between(_g_talk_troop,trp.npc1,trp.kingdom_1_lord) and not troop_slot_eq(_g_talk_troop,2,2) and troop_slot_eq(_g_talk_troop,82,1) and troop_slot_ge(_g_talk_troop,8,0) and _talk_context != 18:
        var001 = gstr.battle_fate_1
        random_x_002 = store_random_in_range(0,5)
        var001 += random_x_002
        s6 = str_store_string(var001)
        troop_slot_003 = troop_get_slot(_g_talk_troop,130)
        s5 = str_store_string(troop_slot_003)
start_companion_prison_break_chains.conditionBlock = condition


companion_prison_break_chains_close_window = Dialog("anyone", "Thank the heavens you came! However, I'm not going anywhere with these chains on my legs. You'll need to get the key away from the guard somehow.", starting_state="companion_prison_break_chains", ending_state="close_window")


start_companion_rehire_2 = Dialog("anyone", "{s5}", starting_state="start", ending_state="companion_rehire")
def condition():
    if is_between(_g_talk_troop,trp.npc1,trp.kingdom_1_lord) and troop_slot_eq(_g_talk_troop,2,0) and troop_slot_eq(_g_talk_troop,81,0) and troop_slot_eq(_g_talk_troop,82,3):
        troop_slot_001 = troop_get_slot(_g_talk_troop,125)
        s5 = str_store_string(troop_slot_001)
start_companion_rehire_2.conditionBlock = condition
def code():
    troop_set_slot(_g_talk_troop,82,4)
start_companion_rehire_2.codeBlock = code


start_companion_was_dismissed = Dialog("anyone", "It is good to see you, {s21}! To tell you the truth, I had hoped to run into you.", starting_state="start", ending_state="companion_was_dismissed")
def condition():
    if is_between(_g_talk_troop,trp.npc1,trp.kingdom_1_lord) and troop_slot_eq(_g_talk_troop,2,0) and troop_slot_eq(_g_talk_troop,82,2):
        troop_slot_001 = troop_get_slot(_g_talk_troop,130)
        s21 = str_store_string(troop_slot_001)
        troop_slot_002 = troop_get_slot(_g_talk_troop,107)
        s5 = str_store_string(troop_slot_002)
start_companion_was_dismissed.conditionBlock = condition
def code():
    troop_set_slot(_g_talk_troop,82,4)
start_companion_was_dismissed.codeBlock = code


companion_was_dismissed_companion_rehire = Dialog("anyone", "{s5}. Would you want me to rejoin your company?", starting_state="companion_was_dismissed", ending_state="companion_rehire")
def condition():
    if not troop_slot_eq(_g_talk_troop,2,2):
        troop_slot_001 = troop_get_slot(_g_talk_troop,107)
        s5 = str_store_string(troop_slot_001)
companion_was_dismissed_companion_rehire.conditionBlock = condition


companion_rehire_companion_recruit_signup_confirm = Dialog("anyone|plyr", "Welcome back, my friend!", starting_state="companion_rehire", ending_state="companion_recruit_signup_confirm")
def condition():
    if hero_can_join(p.main_party):
        pass
companion_rehire_companion_recruit_signup_confirm.conditionBlock = condition


companion_rehire_companion_rehire_refused = Dialog("anyone|plyr", "Sorry, I can't take on anyone else right now.", starting_state="companion_rehire", ending_state="companion_rehire_refused")


companion_rehire_refused_close_window = Dialog("anyone", "Well... Look me up if you change your mind, eh?", starting_state="companion_rehire_refused", ending_state="close_window")
def code():
    troop_slot_001 = troop_get_slot(_g_talk_troop,12)
    if not is_between(troop_slot_001,p.town_1,p.castle_1):
        random_x_002 = store_random_in_range(p.town_1,p.castle_1)
        troop_set_slot(_g_talk_troop,12,random_x_002)
        if _cheat_mode >= 1:
            reg1 = troop_slot_001
            s7 = str_store_party_name(random_x_002)
            print("@{!}current town was {reg1};;; now moved to {s7}")
        #end
    #end
companion_rehire_refused_close_window.codeBlock = code


start_companion_rehire_3 = Dialog("anyone", "So... Do you want me back yet?", starting_state="start", ending_state="companion_rehire")
def condition():
    if is_between(_g_talk_troop,trp.npc1,trp.kingdom_1_lord) and not troop_slot_eq(_g_talk_troop,2,2):
        if troop_slot_001 < p.town_1:
            troop_slot_001 = troop_get_slot(_g_talk_troop,8)
start_companion_rehire_3.conditionBlock = condition


minister_issues_minister_pretalk = Dialog("anyone", "There is a matter which needs your attention. The quarrel between {s11} and {s12} has esclatated to a point where it has become unseemly. If you do intervene, you risk offending one of the lords. However, if you do nothing, you risk appearing weak. Such are the burdens of kingship, {sire/my lady}.", starting_state="minister_issues", ending_state="minister_pretalk")
def condition():
    if check_quest_active(qst.consult_with_minister) and _g_minister_notification_quest == qst.resolve_dispute:
        setup_quest_text(qst.resolve_dispute)
        quest_slot_001 = quest_get_slot(qst.resolve_dispute,2)
        s11 = str_store_troop_name(quest_slot_001)
        quest_slot_002 = quest_get_slot(qst.resolve_dispute,4)
        s12 = str_store_troop_name(quest_slot_002)
        s2 = str_store_string(gstr.resolve_the_dispute_between_s11_and_s12)
        start_quest(qst.resolve_dispute,-1)
        quest_set_slot(qst.resolve_dispute,23,30)
        quest_set_slot(qst.resolve_dispute,6,_g_player_minister)
        quest_set_slot(qst.resolve_dispute,16,0)
        quest_set_slot(qst.resolve_dispute,17,0)
        quest_slot_001 = quest_get_slot(qst.resolve_dispute,2)
        s11 = str_store_troop_name(quest_slot_001)
        quest_slot_002 = quest_get_slot(qst.resolve_dispute,4)
        s12 = str_store_troop_name(quest_slot_002)
minister_issues_minister_pretalk.conditionBlock = condition
def code():
    end_quest(qst.consult_with_minister)
minister_issues_minister_pretalk.codeBlock = code


minister_issues_minister_talk = Dialog("anyone", "{s1} currently does not have a lord. You may wish to keep it this way, as lords will sometimes gravitate towards lieges who have land to offer, but for the time being, no one is collecting any of its rents.", starting_state="minister_issues", ending_state="minister_talk")
def condition():
    _g_center_taken_by_player_faction = -1
    for p_001 in range(p.town_1, p.salt_mine):
        if _g_center_taken_by_player_faction == -1:
            party_faction_002 = store_faction_of_party(p_001)
            if party_faction_002 == fac.player_supporters_faction and not party_slot_ge(p_001,7,0):
                _g_center_taken_by_player_faction = p_001
            #end
        #end
    #end
    if is_between(_g_center_taken_by_player_faction,p.town_1,p.salt_mine):
        s1 = str_store_party_name(_g_center_taken_by_player_faction)
minister_issues_minister_talk.conditionBlock = condition


minister_issues_minister_talk_1 = Dialog("anyone", "At this point, there are no particularly urgent matters which need your attention. I should point out though, sire, that I am not very skilled in the ways of politics, and that I am anxious to return to private life. If you wish to issue any but the most basic directives, I suggest appointing a trusted companion in my stead. In the meantime, is there anything you wish done?", starting_state="minister_issues", ending_state="minister_talk")
def condition():
    if not is_between(_g_player_minister,trp.npc1,trp.heroes_end):
        pass
minister_issues_minister_talk_1.conditionBlock = condition


minister_issues_center_captured_lord_advice = Dialog("anyone", "{!}[Should not appear - there to prevent error related to center captured lord advice]", starting_state="minister_issues", ending_state="center_captured_lord_advice")
def condition():
    if 1 == 0:
        pass
minister_issues_center_captured_lord_advice.conditionBlock = condition


minister_issues_minister_talk_2 = Dialog("anyone", "If I may offer you a world of advice, my {lord/lady}, it seems that your right to rule as an independent monarch is not sufficiently recognized, and this may bring us problems further down the road. It may be advisable to find another kingdom with whom you have shared interests and seek its recognition, to establish yourself as an equal with Calradia's other kings.", starting_state="minister_issues", ending_state="minister_talk")
def condition():
    if _player_right_to_rule < 30:
        pass
minister_issues_minister_talk_2.conditionBlock = condition


minister_issues_minister_talk_3 = Dialog("anyone", "At this point, there are no particularly urgent matters which need your attention. Is there anything you wish done?", starting_state="minister_issues", ending_state="minister_talk")


minister_pretalk_minister_talk = Dialog("anyone", "Is there anything you wish done?", starting_state="minister_pretalk", ending_state="minister_talk")


minister_talk_combined_political_quests = Dialog("anyone|plyr", "Do you have any ideas to strengthen our kingdom's unity?", starting_state="minister_talk", ending_state="combined_political_quests")
def condition():
    if is_between(_g_player_minister,trp.npc1,trp.heroes_end):
        pass
minister_talk_combined_political_quests.conditionBlock = condition
def code():
    get_political_quest(_g_talk_troop)
    _political_quest_found = reg0
    _political_quest_target_troop = reg1
    _political_quest_object_troop = reg2
minister_talk_combined_political_quests.codeBlock = code


minister_talk_offer_gift_quest_complete = Dialog("anyone|plyr", "I have the materials for {s4}'s gift.", starting_state="minister_talk", ending_state="offer_gift_quest_complete")
def condition():
    if check_quest_active(qst.offer_gift) and quest_slot_eq(qst.offer_gift,6,_g_talk_troop):
        quest_slot_001 = quest_get_slot(qst.offer_gift,2)
        if player_has_item(itm.furs) and player_has_item(itm.velvet):
            s4 = str_store_troop_name(quest_slot_001)
minister_talk_offer_gift_quest_complete.conditionBlock = condition


offer_gift_quest_complete_close_window = Dialog("anyone", "Ah, let me take those. Hopefully this will mend the quarrel between you two. You may wish to speak to {reg4?her:him}, and see if I had any success.", starting_state="offer_gift_quest_complete", ending_state="close_window")
def condition():
    quest_slot_001 = quest_get_slot(qst.offer_gift,2)
    reg4 = troop_get_type(quest_slot_001)
offer_gift_quest_complete_close_window.conditionBlock = condition
def code():
    quest_set_slot(qst.offer_gift,11,2)
    quest_set_slot(qst.offer_gift,23,365)
    troop_remove_item(trp.player,itm.furs)
    troop_remove_item(trp.player,itm.velvet)
    _g_leave_encounter = 1
offer_gift_quest_complete_close_window.codeBlock = code


minister_talk_minister_cancel_political_quest = Dialog("anyone|plyr", "Let's abandon our plan to {s10}.", starting_state="minister_talk", ending_state="minister_cancel_political_quest")
def condition():
    _political_quest_to_cancel = -1
    if check_quest_active(qst.offer_gift) and quest_slot_eq(qst.offer_gift,6,_g_talk_troop):
        _political_quest_to_cancel = qst.offer_gift
        s10 = str_store_string(gstr.offer_gift_description)
    elif check_quest_active(qst.resolve_dispute) and quest_slot_eq(qst.resolve_dispute,6,_g_talk_troop):
        _political_quest_to_cancel = qst.resolve_dispute
        s10 = str_store_string(gstr.resolve_dispute_description)
        if _political_quest_to_cancel > 0:
            pass
        #end
    #end
minister_talk_minister_cancel_political_quest.conditionBlock = condition


minister_cancel_political_quest_minister_cancel_political_quest_confirm = Dialog("anyone", "Are you sure you want to drop that idea?", starting_state="minister_cancel_political_quest", ending_state="minister_cancel_political_quest_confirm")


minister_cancel_political_quest_confirm_minister_pretalk = Dialog("anyone|plyr", "Yes, I am sure. Let's abandon that idea.", starting_state="minister_cancel_political_quest_confirm", ending_state="minister_pretalk")
def code():
    abort_quest(_political_quest_to_cancel,1)
minister_cancel_political_quest_confirm_minister_pretalk.codeBlock = code


minister_cancel_political_quest_confirm_minister_pretalk_1 = Dialog("anyone|plyr", "Actually, never mind.", starting_state="minister_cancel_political_quest_confirm", ending_state="minister_pretalk")


minister_talk_minister_diplomatic_kingdoms = Dialog("anyone|plyr", "I wish to dispatch an emissary.", starting_state="minister_talk", ending_state="minister_diplomatic_kingdoms")
def condition():
    if is_between(_g_player_minister,trp.npc1,trp.heroes_end):
        pass
minister_talk_minister_diplomatic_kingdoms.conditionBlock = condition


minister_talk_minister_indict = Dialog("anyone|plyr", "I wish to indict a disloyal vassal for treason.", starting_state="minister_talk", ending_state="minister_indict")
def condition():
    if is_between(_g_player_minister,trp.npc1,trp.heroes_end):
        pass
minister_talk_minister_indict.conditionBlock = condition


minister_talk_minister_change_marshal = Dialog("anyone|plyr", "I wish to replace {s4} as marshal.", starting_state="minister_talk", ending_state="minister_change_marshal")
def condition():
    faction_slot_001 = faction_get_slot(_players_kingdom,8)
    if faction_slot_001 >= 0:
        if faction_slot_001 > 0:
            s4 = str_store_troop_name(faction_slot_001)
        else:
            s4 = str_store_string(gstr.myself)
        #end
    #end
minister_talk_minister_change_marshal.conditionBlock = condition


minister_talk_minister_change_marshal_1 = Dialog("anyone|plyr", "I wish to appoint a new marshal.", starting_state="minister_talk", ending_state="minister_change_marshal")
def condition():
    if faction_slot_eq(_players_kingdom,8,-1):
        pass
minister_talk_minister_change_marshal_1.conditionBlock = condition


minister_change_marshal_minister_pretalk = Dialog("anyone", "You have just made such an appointment, {sire/my lady}. If you countermand your decree so soon, there will be great confusion. We will need to wait a few days.", starting_state="minister_change_marshal", ending_state="minister_pretalk")
def condition():
    cur_hours_001 = store_current_hours()
    if cur_hours_001 < 48:
        cur_hours_001 -= _g_player_faction_last_marshal_appointment
minister_change_marshal_minister_pretalk.conditionBlock = condition


minister_talk_minister_replace = Dialog("anyone|plyr", "I wish for you to retire as minister.", starting_state="minister_talk", ending_state="minister_replace")
def condition():
    if not is_between(_g_player_minister,trp.npc1,trp.knight_1_1_wife):
        pass
minister_talk_minister_replace.conditionBlock = condition


minister_talk_minister_replace_1 = Dialog("anyone|plyr", "I wish you to rejoin my party.", starting_state="minister_talk", ending_state="minister_replace")
def condition():
    if is_between(_g_player_minister,trp.npc1,trp.knight_1_1_wife) and not troop_slot_eq(_g_talk_troop,2,2):
        pass
minister_talk_minister_replace_1.conditionBlock = condition


minister_talk_minister_grant_fief = Dialog("anyone|plyr", "I wish you to grant one of my vassals a fief.", starting_state="minister_talk", ending_state="minister_grant_fief")
def condition():
    if is_between(_g_player_minister,trp.npc1,trp.heroes_end):
        pass
minister_talk_minister_grant_fief.conditionBlock = condition


minister_talk_minister_grant_self_fief = Dialog("anyone|plyr", "I wish to make myself lord of {s4}.", starting_state="minister_talk", ending_state="minister_grant_self_fief")
def condition():
    if is_between(_g_player_minister,trp.npc1,trp.heroes_end):
        var001 = -1
        for p_002 in range(p.town_1, p.salt_mine):
            if var001 == -1:
                party_faction_003 = store_faction_of_party(p_002)
                if party_faction_003 == fac.player_supporters_faction:
                    party_slot_004 = party_get_slot(p_002,7)
                    if party_slot_004 >= trp.npc1:
                        troop_faction_005 = store_faction_of_troop(party_slot_004)
                        if troop_faction_005 != fac.player_supporters_faction:
                            party_slot_004 = -1
                        #end
                    #end
                #end
            #end
        #end
        if party_slot_004 < 0:
            var001 = p_002
        #end
    #end
    if var001 > -1:
        s4 = str_store_party_name(var001)
minister_talk_minister_grant_self_fief.conditionBlock = condition


minister_grant_self_fief_minister_pretalk = Dialog("anyone", "As you wish. You shall be lord of {s4}.", starting_state="minister_grant_self_fief", ending_state="minister_pretalk")
def code():
    var001 = -1
    for p_002 in range(p.town_1, p.salt_mine):
        if var001 == -1:
            party_faction_003 = store_faction_of_party(p_002)
            if party_faction_003 == fac.player_supporters_faction:
                party_slot_004 = party_get_slot(p_002,7)
                if party_slot_004 >= trp.npc1:
                    troop_faction_005 = store_faction_of_troop(party_slot_004)
                    if troop_faction_005 != fac.player_supporters_faction:
                        party_slot_004 = -1
                    #end
                #end
            #end
        #end
        if party_slot_004 < 0:
            var001 = p_002
        #end
    #end
    give_center_to_lord(var001,trp.player,0)
    if faction_slot_eq(_players_kingdom,64,var001):
        faction_set_slot(_players_kingdom,64,-1)
    #end
    s4 = str_store_party_name(var001)
minister_grant_self_fief_minister_pretalk.codeBlock = code


minister_talk_close_window = Dialog("anyone|plyr", "That is all for now.", starting_state="minister_talk", ending_state="close_window")


minister_change_marshal_minister_change_marshal_choose = Dialog("anyone", "Who should be the new marshal?", starting_state="minister_change_marshal", ending_state="minister_change_marshal_choose")


minister_change_marshal_choose_minister_pretalk = Dialog("anyone|plyr", "I shall be marshal", starting_state="minister_change_marshal_choose", ending_state="minister_pretalk")
def code():
    appoint_faction_marshall(fac.player_supporters_faction,trp.player)
    cur_hours_001 = store_current_hours()
    _g_recalculate_ais = 1
    _g_player_faction_last_marshal_appointment = cur_hours_001
    if faction_slot_eq(fac.player_supporters_faction,64,1):
        faction_set_slot(fac.player_supporters_faction,64,0)
        troop_set_slot(trp.player,154,-1)
        for trp_002 in range(trp.npc1, trp.knight_1_1_wife):
            troop_faction_003 = store_faction_of_troop(trp_002)
            if troop_faction_003 == fac.player_supporters_faction:
                troop_set_slot(trp_002,154,-1)
            #end
        #end
    #end
minister_change_marshal_choose_minister_pretalk.codeBlock = code


minister_change_marshal_choose_minister_pretalk_1 = Dialog("anyone|plyr", "For a short while, we should have no marshal", starting_state="minister_change_marshal_choose", ending_state="minister_pretalk")
def code():
    appoint_faction_marshall(fac.player_supporters_faction,-1)
    if faction_slot_eq(fac.player_supporters_faction,64,1):
        faction_set_slot(fac.player_supporters_faction,64,0)
        troop_set_slot(trp.player,154,-1)
        for trp_001 in range(trp.npc1, trp.knight_1_1_wife):
            troop_faction_002 = store_faction_of_troop(trp_001)
            if troop_faction_002 == fac.player_supporters_faction:
                troop_set_slot(trp_001,154,-1)
            #end
        #end
    #end
    _g_recalculate_ais = 1
minister_change_marshal_choose_minister_pretalk_1.codeBlock = code


minister_change_marshal_choose_minister_pretalk_2 = Dialog("anyone|repeat_for_troops|plyr", "{s4}", starting_state="minister_change_marshal_choose", ending_state="minister_pretalk")
def condition():
    troop_id_001 = store_repeat_object()
    if is_between(troop_id_001,trp.npc1,trp.knight_1_1_wife) and troop_slot_eq(troop_id_001,2,2):
        troop_faction_002 = store_faction_of_troop(troop_id_001)
        if troop_faction_002 == fac.player_supporters_faction:
            s4 = str_store_troop_name(troop_id_001)
minister_change_marshal_choose_minister_pretalk_2.conditionBlock = condition
def code():
    var001 = store_repeat_object()
    appoint_faction_marshall(fac.player_supporters_faction,var001)
    cur_hours_002 = store_current_hours()
    _g_player_faction_last_marshal_appointment = cur_hours_002
    if faction_slot_eq(fac.player_supporters_faction,64,1):
        faction_set_slot(fac.player_supporters_faction,64,0)
        troop_set_slot(trp.player,154,-1)
        for trp_003 in range(trp.npc1, trp.knight_1_1_wife):
            troop_faction_004 = store_faction_of_troop(trp_003)
            if troop_faction_004 == fac.player_supporters_faction:
                troop_set_slot(trp_003,154,-1)
            #end
        #end
    #end
    _g_recalculate_ais = 1
minister_change_marshal_choose_minister_pretalk_2.codeBlock = code


minister_change_marshal_choose_minister_pretalk_3 = Dialog("anyone|plyr", "Never mind", starting_state="minister_change_marshal_choose", ending_state="minister_pretalk")


minister_diplomatic_kingdoms_minister_diplomatic_kingdoms_select = Dialog("anyone", "To whom do you wish to send this emissary?", starting_state="minister_diplomatic_kingdoms", ending_state="minister_diplomatic_kingdoms_select")
def condition():
    var001 = 0
    for trp_002 in range(trp.npc1, trp.kingdom_1_lord):
        if main_party_has_troop(trp_002):
            var001 = 1
            if var001 == 1:
                pass
            #end
        #end
    #end
minister_diplomatic_kingdoms_minister_diplomatic_kingdoms_select.conditionBlock = condition


minister_diplomatic_kingdoms_minister_pretalk = Dialog("anyone", "Unfortunately, there is no one to send right now.", starting_state="minister_diplomatic_kingdoms", ending_state="minister_pretalk")


minister_diplomatic_kingdoms_minister_diplomatic_kingdoms_select = Dialog("anyone", "To whom do you wish to send this emissary?", starting_state="minister_diplomatic_kingdoms", ending_state="minister_diplomatic_kingdoms_select")


minister_diplomatic_kingdoms_select_minister_diplomatic_initiative_type = Dialog("anyone|repeat_for_factions|plyr", "{s10} of the {s11}{s14}", starting_state="minister_diplomatic_kingdoms_select", ending_state="minister_diplomatic_initiative_type")
def condition():
    faction_id_001 = store_repeat_object()
    if is_between(faction_id_001,fac.player_supporters_faction,fac.kingdoms_end) and faction_id_001 != fac.player_supporters_faction and faction_slot_eq(faction_id_001,21,0):
        faction_slot_002 = faction_get_slot(faction_id_001,11)
        s10 = str_store_troop_name(faction_slot_002)
        s11 = str_store_faction_name(faction_id_001)
        str_clear(14)
minister_diplomatic_kingdoms_select_minister_diplomatic_initiative_type.conditionBlock = condition
def code():
    _g_faction_selected = store_repeat_object()
minister_diplomatic_kingdoms_select_minister_diplomatic_initiative_type.codeBlock = code


minister_diplomatic_kingdoms_select_minister_pretalk = Dialog("anyone|plyr", "Never mind", starting_state="minister_diplomatic_kingdoms_select", ending_state="minister_pretalk")


minister_diplomatic_initiative_type_minister_diplomatic_initiative_type_select = Dialog("anyone", "What do you wish to tell him?", starting_state="minister_diplomatic_initiative_type", ending_state="minister_diplomatic_initiative_type_select")


minister_diplomatic_initiative_type_select_minister_diplomatic_emissary = Dialog("anyone|plyr", "That our two kingdoms should enter into truce.", starting_state="minister_diplomatic_initiative_type_select", ending_state="minister_diplomatic_emissary")
def condition():
    if faction_relation_001 < 0:
        faction_relation_001 = store_relation(fac.player_supporters_faction,_g_faction_selected)
minister_diplomatic_initiative_type_select_minister_diplomatic_emissary.conditionBlock = condition
def code():
    _g_initiative_selected = 3
minister_diplomatic_initiative_type_select_minister_diplomatic_emissary.codeBlock = code


minister_diplomatic_initiative_type_select_minister_diplomatic_emissary_1 = Dialog("anyone|plyr", "That I wish to put myself under his protection, as his vassal.", starting_state="minister_diplomatic_initiative_type_select", ending_state="minister_diplomatic_emissary")
def code():
    _g_initiative_selected = 4
minister_diplomatic_initiative_type_select_minister_diplomatic_emissary_1.codeBlock = code


minister_diplomatic_initiative_type_select_minister_diplomatic_emissary_2 = Dialog("anyone|plyr", "That I wish to express my goodwill, as one monarch to another.", starting_state="minister_diplomatic_initiative_type_select", ending_state="minister_diplomatic_emissary")
def condition():
    if faction_slot_eq(_g_faction_selected,32,0) and faction_relation_001 >= 0:
        faction_relation_001 = store_relation(fac.player_supporters_faction,_g_faction_selected)
minister_diplomatic_initiative_type_select_minister_diplomatic_emissary_2.conditionBlock = condition
def code():
    _g_initiative_selected = 5
minister_diplomatic_initiative_type_select_minister_diplomatic_emissary_2.codeBlock = code


minister_diplomatic_initiative_type_select_minister_declare_war = Dialog("anyone|plyr", "That I declare war upon him.", starting_state="minister_diplomatic_initiative_type_select", ending_state="minister_declare_war")
def condition():
    if faction_relation_001 >= 0:
        faction_relation_001 = store_relation(fac.player_supporters_faction,_g_faction_selected)
minister_diplomatic_initiative_type_select_minister_declare_war.conditionBlock = condition


minister_diplomatic_initiative_type_select_close_window = Dialog("anyone|plyr", "Never mind", starting_state="minister_diplomatic_initiative_type_select", ending_state="close_window")


minister_declare_war_minister_declare_war_confirm = Dialog("anyone", "{s12}", starting_state="minister_declare_war", ending_state="minister_declare_war_confirm")
def condition():
    if True:
        diplomacy_faction_get_diplomatic_status_with_faction(fac.player_supporters_faction,_g_faction_selected)
        if reg0 == 1:
            s12 = str_store_string(gstr.in_doing_so_you_will_be_in_violation_of_your_truce_is_that_what_you_want)
        else:
            diplomacy_faction_get_diplomatic_status_with_faction(fac.player_supporters_faction,_g_faction_selected)
            if reg0 != -1:
                s12 = str_store_string(gstr.if_you_attack_without_provocation_some_of_your_vassals_may_consider_you_to_be_too_warlike_is_that_what_you_want)
            else:
                s12 = str_store_string(gstr.our_men_are_ready_to_ride_forth_at_your_bidding_are_you_sure_this_is_what_you_want)
            #end
        #end
    #end
minister_declare_war_minister_declare_war_confirm.conditionBlock = condition


minister_declare_war_confirm_minister_declare_war_confirm_yes = Dialog("anyone|plyr", "It is. I wish to make war on {s12}.", starting_state="minister_declare_war_confirm", ending_state="minister_declare_war_confirm_yes")
def condition():
    s12 = str_store_faction_name(_g_faction_selected)
minister_declare_war_confirm_minister_declare_war_confirm_yes.conditionBlock = condition
def code():
    diplomacy_start_war_between_kingdoms(fac.player_supporters_faction,_g_faction_selected,1)
minister_declare_war_confirm_minister_declare_war_confirm_yes.codeBlock = code


minister_declare_war_confirm_minister_pretalk = Dialog("anyone|plyr", "Hmm. Perhaps not.", starting_state="minister_declare_war_confirm", ending_state="minister_pretalk")
def condition():
    s12 = str_store_faction_name(_g_faction_selected)
minister_declare_war_confirm_minister_pretalk.conditionBlock = condition


minister_declare_war_confirm_yes_minister_pretalk = Dialog("anyone", "As you command. We are now at war with the {s12}. May the heavens grant us victory.", starting_state="minister_declare_war_confirm_yes", ending_state="minister_pretalk")
def condition():
    s12 = str_store_faction_name(_g_faction_selected)
minister_declare_war_confirm_yes_minister_pretalk.conditionBlock = condition


minister_diplomatic_emissary_minister_emissary_select = Dialog("anyone", "Who shall be your emissary? You should choose one whom you trust, but who is also persuasive -- one who can negotiate without giving offense.", starting_state="minister_diplomatic_emissary", ending_state="minister_emissary_select")


minister_emissary_select_minister_emissary_dispatch = Dialog("anyone|repeat_for_troops|plyr", "{s11}", starting_state="minister_emissary_select", ending_state="minister_emissary_dispatch")
def condition():
    var001 = store_repeat_object()
    if main_party_has_troop(var001) and is_between(var001,trp.npc1,trp.kingdom_1_lord) and troop_slot_eq(var001,8,-1) and is_between(var001,trp.npc1,trp.knight_1_1_wife):
        s11 = str_store_troop_name(var001)
minister_emissary_select_minister_emissary_dispatch.conditionBlock = condition
def code():
    _g_emissary_selected = store_repeat_object()
minister_emissary_select_minister_emissary_dispatch.codeBlock = code


minister_emissary_select_minister_pretalk = Dialog("anyone|plyr", "Actually, I can't think of anyone.", starting_state="minister_emissary_select", ending_state="minister_pretalk")


minister_emissary_dispatch_minister_diplomatic_dispatch_confirm = Dialog("anyone", "Very well -- I shall send {s11} to the {s12} to {s14}.", starting_state="minister_emissary_dispatch", ending_state="minister_diplomatic_dispatch_confirm")
def condition():
    s11 = str_store_troop_name(_g_emissary_selected)
    s12 = str_store_faction_name(_g_faction_selected)
    if _g_initiative_selected == 5:
        s14 = str_store_string(gstr.seek_recognition)
    elif _g_initiative_selected == 4:
        s14 = str_store_string(gstr.seek_vassalhood)
    elif _g_initiative_selected == 3:
        s14 = str_store_string(gstr.seek_a_truce)
    #end
minister_emissary_dispatch_minister_diplomatic_dispatch_confirm.conditionBlock = condition


minister_diplomatic_dispatch_confirm_minister_pretalk = Dialog("anyone|plyr", "Yes, do that", starting_state="minister_diplomatic_dispatch_confirm", ending_state="minister_pretalk")
def code():
    troop_set_slot(_g_emissary_selected,150,3)
    troop_set_slot(_g_emissary_selected,151,_g_initiative_selected)
    troop_set_slot(_g_emissary_selected,152,_g_faction_selected)
    remove_member_from_party(_g_emissary_selected,p.main_party)
minister_diplomatic_dispatch_confirm_minister_pretalk.codeBlock = code


minister_diplomatic_dispatch_confirm_minister_pretalk_1 = Dialog("anyone|plyr", "Actually, hold off on that", starting_state="minister_diplomatic_dispatch_confirm", ending_state="minister_pretalk")


minister_replace_minister_replace_select = Dialog("anyone", "Very good. Whom will you appoint in my stead?", starting_state="minister_replace", ending_state="minister_replace_select")


minister_replace_select_minister_replace_confirm = Dialog("anyone|repeat_for_troops|plyr", "{s4}", starting_state="minister_replace_select", ending_state="minister_replace_confirm")
def condition():
    var001 = store_repeat_object()
    if is_between(var001,trp.npc1,trp.kingdom_1_lord) and main_party_has_troop(var001) and troop_slot_eq(var001,8,-1):
        s4 = str_store_troop_name(var001)
minister_replace_select_minister_replace_confirm.conditionBlock = condition
def code():
    _g_player_minister = store_repeat_object()
minister_replace_select_minister_replace_confirm.codeBlock = code


minister_replace_select_minister_replace_confirm_1 = Dialog("anyone|plyr", "My wife, {s4}.", starting_state="minister_replace_select", ending_state="minister_replace_confirm")
def condition():
    troop_slot_001 = troop_get_slot(trp.player,30)
    if troop_slot_001 > 0:
        troop_type_002 = troop_get_type(troop_slot_001)
        if not troop_slot_eq(troop_slot_001,2,2) and troop_type_002 == 1:
            if troop_slot_001 != _g_talk_troop:
                s4 = str_store_troop_name(troop_slot_001)
minister_replace_select_minister_replace_confirm_1.conditionBlock = condition
def code():
    _g_player_minister = troop_get_slot(trp.player,30)
minister_replace_select_minister_replace_confirm_1.codeBlock = code


minister_replace_select_minister_pretalk = Dialog("anyone|plyr", "Actually, hold off on that.", starting_state="minister_replace_select", ending_state="minister_pretalk")


minister_replace_confirm_close_window = Dialog("anyone", "Very good. {s9} is your new minister. I shall make ready to rejoin you.", starting_state="minister_replace_confirm", ending_state="close_window")
def condition():
    if troop_slot_eq(_g_talk_troop,2,5):
        pass
minister_replace_confirm_close_window.conditionBlock = condition
def code():
    s9 = str_store_troop_name(_g_player_minister)
    party_add_members(p.main_party,_g_talk_troop,1)
    _g_leave_encounter = 1
    if main_party_has_troop(_g_player_minister):
        party_remove_members(p.main_party,_g_player_minister,1)
    #end
    for var001 in range(0, qst.quests_end):
        if quest_slot_eq(var001,6,_g_talk_troop):
            abort_quest(var001,0)
        #end
    #end
minister_replace_confirm_close_window.codeBlock = code


minister_replace_confirm_close_window_1 = Dialog("anyone", "Very good. {s9} is your new minister. It has been an honor to serve you.", starting_state="minister_replace_confirm", ending_state="close_window")
def code():
    s9 = str_store_troop_name(_g_player_minister)
    if main_party_has_troop(_g_player_minister):
        party_remove_members(p.main_party,_g_player_minister,1)
    #end
minister_replace_confirm_close_window_1.codeBlock = code


minister_grant_fief_minister_grant_fief_select = Dialog("anyone", "Which of your fiefs did you wish to grant?{s12}", starting_state="minister_grant_fief", ending_state="minister_grant_fief_select")
def condition():
    faction_slot_001 = faction_get_slot(_players_kingdom,64)
    str_clear(12)
    if is_between(faction_slot_001,p.town_1,p.salt_mine):
        s4 = str_store_party_name(faction_slot_001)
        s12 = str_store_string(gstr.minister_advice_select_fief)
    elif faction_slot_001 == 1:
        s12 = str_store_string(gstr.minister_advice_select_fief_wait)
    #end
minister_grant_fief_minister_grant_fief_select.conditionBlock = condition


minister_grant_fief_select_minister_grant_fief_select_recipient = Dialog("anyone|repeat_for_parties|plyr", "{s1}{s12}", starting_state="minister_grant_fief_select", ending_state="minister_grant_fief_select_recipient")
def condition():
    party_id_001 = store_repeat_object()
    if is_between(party_id_001,p.town_1,p.salt_mine):
        party_faction_002 = store_faction_of_party(party_id_001)
        if party_faction_002 == fac.player_supporters_faction and party_id_001 != _g_player_court:
            party_slot_003 = party_get_slot(party_id_001,7)
            if party_slot_003 >= trp.npc1:
                troop_faction_004 = store_faction_of_troop(party_slot_003)
                if troop_faction_004 != fac.player_supporters_faction:
                    party_slot_003 = -1
                #end
            #end
        #end
    #end
    if party_slot_003 <= 0:
        s1 = str_store_party_name(party_id_001)
        str_clear(12)
        if party_slot_eq(party_id_001,7,-1):
            s12 = str_store_string(gstr.unassigned_center)
        #end
    #end
minister_grant_fief_select_minister_grant_fief_select_recipient.conditionBlock = condition
def code():
    _fief_selected = store_repeat_object()
minister_grant_fief_select_minister_grant_fief_select_recipient.codeBlock = code


minister_grant_fief_select_minister_pretalk = Dialog("anyone|plyr", "Never mind", starting_state="minister_grant_fief_select", ending_state="minister_pretalk")


minister_grant_fief_select_recipient_minister_grant_fief_select_recipient_choice = Dialog("anyone", "And who will you choose to receive the fief?{s12}", starting_state="minister_grant_fief_select_recipient", ending_state="minister_grant_fief_select_recipient_choice")
def condition():
    str_clear(12)
    if faction_slot_eq(_players_kingdom,64,_fief_selected):
        for trp_001 in range(trp.npc1, trp.knight_1_1_wife):
            troop_set_slot(trp_001,46,0)
        #end
        var002 = -1
        var003 = 0
        for trp_001 in range(trp.npc1, trp.knight_1_1_wife):
            troop_faction_004 = store_faction_of_troop(trp_001)
            if troop_faction_004 == fac.player_supporters_faction:
                troop_slot_005 = troop_get_slot(trp_001,154)
                if troop_slot_005 >= 0:
                    troop_slot_006 = troop_get_slot(troop_slot_005,46)
                    troop_slot_006 += 1
                    troop_set_slot(troop_slot_005,46,troop_slot_006)
                    if troop_slot_006 > var003:
                        var003 = troop_slot_006
                        var002 = troop_slot_005
                    #end
                #end
            #end
        #end
        if is_between(var002,trp.npc1,trp.knight_1_1_wife):
            s4 = str_store_troop_name(var002)
            reg4 = var003
            s12 = str_store_string(gstr.minister_advice_fief_leading_vassal)
        #end
    #end
minister_grant_fief_select_recipient_minister_grant_fief_select_recipient_choice.conditionBlock = condition


minister_grant_fief_select_recipient_choice_minister_grant_fief_complete = Dialog("anyone|repeat_for_troops|plyr", "{s1}", starting_state="minister_grant_fief_select_recipient_choice", ending_state="minister_grant_fief_complete")
def condition():
    troop_id_001 = store_repeat_object()
    if troop_slot_eq(troop_id_001,2,2) and is_between(troop_id_001,trp.npc1,trp.knight_1_1_wife):
        troop_faction_002 = store_faction_of_troop(troop_id_001)
        if troop_faction_002 == fac.player_supporters_faction:
            s1 = str_store_troop_name(troop_id_001)
minister_grant_fief_select_recipient_choice_minister_grant_fief_complete.conditionBlock = condition
def code():
    _lord_selected = store_repeat_object()
minister_grant_fief_select_recipient_choice_minister_grant_fief_complete.codeBlock = code


minister_grant_fief_select_recipient_choice_minister_pretalk = Dialog("anyone|plyr", "Never mind", starting_state="minister_grant_fief_select_recipient_choice", ending_state="minister_pretalk")


minister_grant_fief_complete_minister_pretalk = Dialog("anyone", "Very well - {s2} shall receive {s1}.", starting_state="minister_grant_fief_complete", ending_state="minister_pretalk")
def code():
    give_center_to_lord(_fief_selected,_lord_selected,0)
    s1 = str_store_party_name(_fief_selected)
    s2 = str_store_troop_name(_lord_selected)
    if faction_slot_eq(_players_kingdom,64,_fief_selected):
        faction_set_slot(_players_kingdom,64,-1)
    #end
    add_log_entry(20,trp.player,_fief_selected,_lord_selected,_g_encountered_party_faction)
minister_grant_fief_complete_minister_pretalk.codeBlock = code


minister_indict_minister_indict_select = Dialog("anyone", "Grim news, {sire/my lady}. Who do you believe is planning to betray you?", starting_state="minister_indict", ending_state="minister_indict_select")


minister_indict_select_minister_indict_confirm = Dialog("anyone|repeat_for_troops|plyr", "{s11}", starting_state="minister_indict_select", ending_state="minister_indict_confirm")
def condition():
    troop_id_001 = store_repeat_object()
    if troop_slot_eq(troop_id_001,2,2):
        troop_faction_002 = store_faction_of_troop(troop_id_001)
        if troop_faction_002 == fac.player_supporters_faction:
            s11 = str_store_troop_name(troop_id_001)
minister_indict_select_minister_indict_confirm.conditionBlock = condition
def code():
    _lord_selected = store_repeat_object()
minister_indict_select_minister_indict_confirm.codeBlock = code


minister_indict_select_minister_pretalk = Dialog("anyone|plyr", "Never mind.", starting_state="minister_indict_select", ending_state="minister_pretalk")


minister_indict_confirm_minister_indict_confirm_answer = Dialog("anyone", "Think carefully on this, {sire/my lady}. If you indict {s4} for treason unjustly, you may find that others become nervous about serving you. On the other hand, if you truly believe that {reg4?she:he} is about to betray you, then perhaps it is best to move first, to secure control of {reg4?her:his} fortresses.", starting_state="minister_indict_confirm", ending_state="minister_indict_confirm_answer")
def condition():
    s4 = str_store_troop_name(_lord_selected)
    reg4 = troop_get_type(_lord_selected)
minister_indict_confirm_minister_indict_confirm_answer.conditionBlock = condition


minister_indict_confirm_answer_minister_indict_conclude = Dialog("anyone|plyr", "I have thought long enough. Issue the indictment!", starting_state="minister_indict_confirm_answer", ending_state="minister_indict_conclude")


minister_indict_confirm_answer_minister_pretalk = Dialog("anyone|plyr", "Perhaps I should wait a little while longer..", starting_state="minister_indict_confirm_answer", ending_state="minister_pretalk")


minister_indict_conclude_minister_pretalk = Dialog("anyone", "It has been sent, {sire/my lady}.", starting_state="minister_indict_conclude", ending_state="minister_pretalk")
def code():
    indict_lord_for_treason(_lord_selected,fac.player_supporters_faction)
minister_indict_conclude_minister_pretalk.codeBlock = code


center_captured_lord_advice_center_captured_lord_advice_2 = Dialog("anyone|repeat_for_troops|plyr", "{s11}. {s1}", starting_state="center_captured_lord_advice", ending_state="center_captured_lord_advice_2")
def condition():
    troop_id_001 = store_repeat_object()
    if troop_slot_eq(troop_id_001,2,2) and _g_talk_troop != troop_id_001 and trp.player != troop_id_001:
        troop_faction_002 = store_faction_of_troop(troop_id_001)
        if troop_faction_002 == fac.player_supporters_faction:
            s11 = str_store_troop_name(troop_id_001)
            print_troop_owned_centers_in_numbers_to_s0(troop_id_001)
            if troop_slot_eq(_g_talk_troop,53,3):
                s12 = str_store_string(gstr._promised_fief)
            else:
                str_clear(12)
            #end
        #end
    #end
    if reg0 == 0:
        s1 = str_store_string(gstr.no_fiefss12)
    else:
        s1 = str_store_string(gstr.fiefs_s0s12)
    #end
center_captured_lord_advice_center_captured_lord_advice_2.conditionBlock = condition
def code():
    _temp = store_repeat_object()
center_captured_lord_advice_center_captured_lord_advice_2.codeBlock = code


center_captured_lord_advice_center_captured_lord_advice_2_1 = Dialog("anyone|plyr", "{s12}I want to have {s1} for myself. (fiefs: {s0})", starting_state="center_captured_lord_advice", ending_state="center_captured_lord_advice_2")
def condition():
    print_troop_owned_centers_in_numbers_to_s0(trp.player)
    s1 = str_store_party_name(_g_center_taken_by_player_faction)
    if is_between(_g_talk_troop,trp.kingdom_1_pretender,trp.knight_1_1_wife):
        s12 = str_store_string(gstr.please_s65_)
    else:
        str_clear(12)
    #end
center_captured_lord_advice_center_captured_lord_advice_2_1.conditionBlock = condition
def code():
    _temp = trp.player
center_captured_lord_advice_center_captured_lord_advice_2_1.codeBlock = code


center_captured_lord_advice_center_captured_lord_advice_2_2 = Dialog("anyone|plyr", "{s66}, you should have {s1} for yourself. (fiefs: {s0})", starting_state="center_captured_lord_advice", ending_state="center_captured_lord_advice_2")
def condition():
    print_troop_owned_centers_in_numbers_to_s0(_g_talk_troop)
    if is_between(_g_talk_troop,trp.kingdom_1_pretender,trp.knight_1_1_wife):
        s1 = str_store_party_name(_g_center_taken_by_player_faction)
center_captured_lord_advice_center_captured_lord_advice_2_2.conditionBlock = condition
def code():
    _temp = _g_talk_troop
center_captured_lord_advice_center_captured_lord_advice_2_2.codeBlock = code


center_captured_lord_advice_2_minister_issues = Dialog("anyone", "As you wish, {sire/my lady}. {reg6?I:{reg7?You:{s11}}} will be the new {reg3?lady:lord} of {s1}.", starting_state="center_captured_lord_advice_2", ending_state="minister_issues")
def condition():
    if _g_talk_troop == _g_player_minister:
        pass
center_captured_lord_advice_2_minister_issues.conditionBlock = condition
def code():
    troop_id_001 = _temp
    give_center_to_lord(_g_center_taken_by_player_faction,troop_id_001,0)
    if faction_slot_eq(_players_kingdom,64,_g_center_taken_by_player_faction):
        faction_set_slot(_players_kingdom,64,-1)
    #end
    if troop_id_001 != trp.player:
        for var002 in range(0, 4):
            if call_script(script.cf_reinforce_party,_g_center_taken_by_player_faction):
                pass
            #end
        #end
    #end
    reg6 = 0
    reg7 = 0
    if troop_id_001 == _g_talk_troop:
        reg6 = 1
    elif troop_id_001 == trp.player:
        reg7 = 1
    else:
        s11 = str_store_troop_name(troop_id_001)
    #end
    s1 = str_store_party_name(_g_center_taken_by_player_faction)
    reg3 = troop_get_type(troop_id_001)
    _g_center_taken_by_player_faction = -1
center_captured_lord_advice_2_minister_issues.codeBlock = code


center_captured_lord_advice_2_close_window = Dialog("anyone", "Hmmm. All right, {playername}. I value your counsel highly. {reg6?I:{reg7?You:{s11}}} will be the new {reg3?lady:lord} of {s1}.", starting_state="center_captured_lord_advice_2", ending_state="close_window")
def code():
    troop_id_001 = _temp
    troop_set_slot(troop_id_001,53,0)
    give_center_to_lord(_g_center_taken_by_player_faction,troop_id_001,0)
    if faction_slot_eq(_players_kingdom,64,_g_center_taken_by_player_faction):
        faction_set_slot(_players_kingdom,64,-1)
    #end
    if troop_id_001 != trp.player:
        for var002 in range(0, 4):
            if call_script(script.cf_reinforce_party,_g_center_taken_by_player_faction):
                pass
            #end
        #end
    #end
    reg6 = 0
    reg7 = 0
    if troop_id_001 == _g_talk_troop:
        reg6 = 1
    elif troop_id_001 == trp.player:
        reg7 = 1
    else:
        s11 = str_store_troop_name(troop_id_001)
    #end
    s1 = str_store_party_name(_g_center_taken_by_player_faction)
    reg3 = troop_get_type(troop_id_001)
    _g_center_taken_by_player_faction = -1
center_captured_lord_advice_2_close_window.codeBlock = code


event_triggered_companion_quitting = Dialog("anyone", "Excuse me {s5} -- there is something I need to tell you.", starting_state="event_triggered", ending_state="companion_quitting")
def condition():
    if _g_infinite_camping == 0:
        _map_talk_troop = store_conversation_troop()
        if is_between(_map_talk_troop,trp.npc1,trp.kingdom_1_lord) and _map_talk_troop == _npc_is_quitting:
            troop_slot_001 = troop_get_slot(_map_talk_troop,130)
            s5 = str_store_string(troop_slot_001)
event_triggered_companion_quitting.conditionBlock = condition
def code():
    _npc_is_quitting = 0
    _player_can_persuade_npc = 1
    _player_can_refuse_npc_quitting = 1
event_triggered_companion_quitting.codeBlock = code


companion_quitting_companion_quitting_2 = Dialog("anyone", "{s5}", starting_state="companion_quitting", ending_state="companion_quitting_2")
def condition():
    _map_talk_troop = store_conversation_troop()
    troop_slot_001 = troop_get_slot(_map_talk_troop,124)
    s5 = str_store_string(troop_slot_001)
companion_quitting_companion_quitting_2.conditionBlock = condition


companion_quitting_2_companion_quitting_response = Dialog("anyone", "To tell you the truth, {s21}", starting_state="companion_quitting_2", ending_state="companion_quitting_response")
def condition():
    npc_morale(_map_talk_troop)
companion_quitting_2_companion_quitting_response.conditionBlock = condition


companion_quitting_response_companion_quitting_yes = Dialog("anyone|plyr", "Very well. You be off, then.", starting_state="companion_quitting_response", ending_state="companion_quitting_yes")


companion_quitting_response_companion_quitting_persuasion = Dialog("anyone|plyr", "Perhaps I can persuade you to change your mind.", starting_state="companion_quitting_response", ending_state="companion_quitting_persuasion")
def condition():
    if _player_can_persuade_npc == 1:
        pass
companion_quitting_response_companion_quitting_persuasion.conditionBlock = condition
def code():
    _player_can_persuade_npc = 0
companion_quitting_response_companion_quitting_persuasion.codeBlock = code


companion_quitting_persuasion_close_window = Dialog("anyone", "Hm. When you put it like that, I suppose I can stay a while longer, see if things improve.", starting_state="companion_quitting_persuasion", ending_state="close_window")
def condition():
    random_x_001 = store_random_in_range(-2,13)
    if random_x_001 <= skill_lvl_002:
        skill_lvl_002 = store_skill_level(skl.persuasion,trp.player)
companion_quitting_persuasion_close_window.conditionBlock = condition
def code():
    troop_slot_001 = troop_get_slot(_map_talk_troop,69)
    troop_slot_001 /= 2
    troop_set_slot(_map_talk_troop,69,troop_slot_001)
    troop_slot_002 = troop_get_slot(_map_talk_troop,77)
    troop_slot_002 /= 2
    troop_set_slot(_map_talk_troop,77,troop_slot_002)
companion_quitting_persuasion_close_window.codeBlock = code


companion_quitting_persuasion_companion_quitting_response = Dialog("anyone", "I'm sorry, but I don't see your point. I am leaving whether you like it or not.", starting_state="companion_quitting_persuasion", ending_state="companion_quitting_response")


companion_quitting_response_companion_quitting_no = Dialog("anyone|plyr", "We hang deserters in this company.", starting_state="companion_quitting_response", ending_state="companion_quitting_no")
def condition():
    if 1 == 0 and _player_can_refuse_npc_quitting == 1:
        pass
companion_quitting_response_companion_quitting_no.conditionBlock = condition


companion_quitting_no_companion_quitting_no_confirm = Dialog("anyone", "Oh... Right... Do you mean that?", starting_state="companion_quitting_no", ending_state="companion_quitting_no_confirm")


companion_quitting_no_confirm_companion_quitting_no_confirmed = Dialog("anyone|plyr", "Absolutely. You either leave this company by my command, or are carried out on your shield.", starting_state="companion_quitting_no_confirm", ending_state="companion_quitting_no_confirmed")


companion_quitting_no_confirm_companion_quitting_yes = Dialog("anyone|plyr", "No, actually I don't mean that. You are free to leave.", starting_state="companion_quitting_no_confirm", ending_state="companion_quitting_yes")


companion_quitting_yes_close_window = Dialog("anyone", "Then this is goodbye. Perhaps I'll see you around, {playername}.", starting_state="companion_quitting_yes", ending_state="close_window")
def code():
    troop_set_slot(_map_talk_troop,82,3)
    retire_companion(_map_talk_troop,100)
companion_quitting_yes_close_window.codeBlock = code


companion_quitting_no_confirmed_close_window = Dialog("anyone", "Hm. I suppose I'm staying, then.", starting_state="companion_quitting_no_confirmed", ending_state="close_window")


event_triggered_companion_objection_response = Dialog("anyone", "{s5}", starting_state="event_triggered", ending_state="companion_objection_response")
def condition():
    _map_talk_troop = store_conversation_troop()
    if is_between(_map_talk_troop,trp.npc1,trp.kingdom_1_lord) and _map_talk_troop == _npc_with_grievance and _npc_map_talk_context == 61:
        if _npc_grievance_slot == 61:
            troop_slot_001 = troop_get_slot(_map_talk_troop,116)
        else:
            troop_slot_001 = troop_get_slot(_map_talk_troop,117)
        #end
    #end
    s21 = str_store_string(_npc_grievance_string)
    s5 = str_store_string(troop_slot_001)
event_triggered_companion_objection_response.conditionBlock = condition
def code():
    _npc_with_grievance = 0
event_triggered_companion_objection_response.codeBlock = code


companion_objection_response_close_window = Dialog("anyone|plyr", "Thanks, I appreciate your support.", starting_state="companion_objection_response", ending_state="close_window")
def condition():
    if _npc_praise_not_complaint == 1:
        pass
companion_objection_response_close_window.conditionBlock = condition
def code():
    troop_set_slot(_map_talk_troop,_npc_grievance_slot,1)
companion_objection_response_close_window.codeBlock = code


companion_objection_response_close_window_1 = Dialog("anyone|plyr", "Hopefully it won't happen again.", starting_state="companion_objection_response", ending_state="close_window")
def condition():
    if _npc_praise_not_complaint == 0:
        pass
companion_objection_response_close_window_1.conditionBlock = condition
def code():
    troop_set_slot(_map_talk_troop,_npc_grievance_slot,1)
companion_objection_response_close_window_1.codeBlock = code


companion_objection_response_close_window_2 = Dialog("anyone|plyr", "Your objection is noted. Now fall back in line.", starting_state="companion_objection_response", ending_state="close_window")
def condition():
    if _npc_praise_not_complaint == 0:
        pass
companion_objection_response_close_window_2.conditionBlock = condition
def code():
    troop_set_slot(_map_talk_troop,_npc_grievance_slot,2)
    troop_slot_001 = troop_get_slot(_map_talk_troop,69)
    troop_slot_001 += 10
    troop_set_slot(_map_talk_troop,69,troop_slot_001)
companion_objection_response_close_window_2.codeBlock = code


event_triggered_companion_personalityclash2_b = Dialog("anyone", "{s5}", starting_state="event_triggered", ending_state="companion_personalityclash2_b")
def condition():
    _map_talk_troop = store_conversation_troop()
    if is_between(_map_talk_troop,trp.npc1,trp.kingdom_1_lord) and _map_talk_troop == _npc_with_personality_clash_2 and _npc_map_talk_context == 74:
        troop_slot_001 = troop_get_slot(_map_talk_troop,120)
        troop_slot_002 = troop_get_slot(_map_talk_troop,73)
        s11 = str_store_troop_name(troop_slot_002)
        s5 = str_store_string(troop_slot_001)
event_triggered_companion_personalityclash2_b.conditionBlock = condition
def code():
    _npc_with_personality_clash_2 = 0
    troop_slot_001 = troop_get_slot(_map_talk_troop,77)
    troop_slot_001 += 5
    troop_set_slot(_map_talk_troop,77,troop_slot_001)
    troop_slot_002 = troop_get_slot(_map_talk_troop,73)
    troop_change_relation_with_troop(_map_talk_troop,troop_slot_002,-15)
event_triggered_companion_personalityclash2_b.codeBlock = code


companion_personalityclash2_b_companion_personalityclash2_response = Dialog("anyone", "{s5}", starting_state="companion_personalityclash2_b", ending_state="companion_personalityclash2_response")
def code():
    troop_slot_001 = troop_get_slot(_map_talk_troop,121)
    troop_slot_002 = troop_get_slot(_map_talk_troop,73)
    s11 = str_store_troop_name(troop_slot_002)
    s5 = str_store_string(troop_slot_001)
companion_personalityclash2_b_companion_personalityclash2_response.codeBlock = code


companion_personalityclash2_response_close_window = Dialog("anyone|plyr", "{s11} is a valuable member of this company. I don't want you picking any more fights with {reg11?her:him}.", starting_state="companion_personalityclash2_response", ending_state="close_window")
def condition():
    troop_slot_001 = troop_get_slot(_map_talk_troop,73)
    s11 = str_store_troop_name(troop_slot_001)
    reg11 = troop_get_type(troop_slot_001)
companion_personalityclash2_response_close_window.conditionBlock = condition
def code():
    troop_set_slot(_map_talk_troop,74,1)
companion_personalityclash2_response_close_window.codeBlock = code


companion_personalityclash2_response_close_window_1 = Dialog("anyone|plyr", "Tell {s11} you have my support in this, and {reg11?she:he} should hold {reg11?her:his} tongue.", starting_state="companion_personalityclash2_response", ending_state="close_window")
def condition():
    troop_slot_001 = troop_get_slot(_map_talk_troop,73)
    s11 = str_store_troop_name(troop_slot_001)
    reg11 = troop_get_type(troop_slot_001)
companion_personalityclash2_response_close_window_1.conditionBlock = condition
def code():
    troop_set_slot(_map_talk_troop,74,2)
companion_personalityclash2_response_close_window_1.codeBlock = code


companion_personalityclash2_response_close_window_2 = Dialog("anyone|plyr", "I don't have time for your petty dispute. Do not bother me with this again.", starting_state="companion_personalityclash2_response", ending_state="close_window")
def code():
    troop_set_slot(_map_talk_troop,74,3)
companion_personalityclash2_response_close_window_2.codeBlock = code


event_triggered_companion_personalityclash_b = Dialog("anyone", "{s5}", starting_state="event_triggered", ending_state="companion_personalityclash_b")
def condition():
    _map_talk_troop = store_conversation_troop()
    if is_between(_map_talk_troop,trp.npc1,trp.kingdom_1_lord) and _map_talk_troop == _npc_with_personality_clash and _npc_map_talk_context == 72:
        troop_slot_001 = troop_get_slot(_map_talk_troop,118)
        troop_slot_002 = troop_get_slot(_map_talk_troop,71)
        s11 = str_store_troop_name(troop_slot_002)
        s5 = str_store_string(troop_slot_001)
event_triggered_companion_personalityclash_b.conditionBlock = condition
def code():
    _npc_with_personality_clash = 0
    troop_slot_001 = troop_get_slot(_map_talk_troop,77)
    troop_slot_001 += 5
    troop_set_slot(_map_talk_troop,77,troop_slot_001)
    troop_slot_002 = troop_get_slot(_map_talk_troop,71)
    troop_change_relation_with_troop(_map_talk_troop,troop_slot_002,-15)
event_triggered_companion_personalityclash_b.codeBlock = code


companion_personalityclash_b_companion_personalityclash_response = Dialog("anyone", "{s5}", starting_state="companion_personalityclash_b", ending_state="companion_personalityclash_response")
def code():
    troop_slot_001 = troop_get_slot(_map_talk_troop,119)
    troop_slot_002 = troop_get_slot(_map_talk_troop,71)
    s11 = str_store_troop_name(troop_slot_002)
    s5 = str_store_string(troop_slot_001)
companion_personalityclash_b_companion_personalityclash_response.codeBlock = code


companion_personalityclash_response_close_window = Dialog("anyone|plyr", "{s11} is a capable member of this company. I don't want you picking any more fights with {reg11?her:him}.", starting_state="companion_personalityclash_response", ending_state="close_window")
def condition():
    troop_slot_001 = troop_get_slot(_map_talk_troop,71)
    s11 = str_store_troop_name(troop_slot_001)
    reg11 = troop_get_type(troop_slot_001)
companion_personalityclash_response_close_window.conditionBlock = condition
def code():
    troop_set_slot(_map_talk_troop,72,1)
companion_personalityclash_response_close_window.codeBlock = code


companion_personalityclash_response_close_window_1 = Dialog("anyone|plyr", "Tell {s11} you have my support in this, and {reg11?she:he} should hold {reg11?her:his} tongue.", starting_state="companion_personalityclash_response", ending_state="close_window")
def condition():
    troop_slot_001 = troop_get_slot(_map_talk_troop,71)
    s11 = str_store_troop_name(troop_slot_001)
    reg11 = troop_get_type(troop_slot_001)
companion_personalityclash_response_close_window_1.conditionBlock = condition
def code():
    troop_set_slot(_map_talk_troop,72,2)
companion_personalityclash_response_close_window_1.codeBlock = code


companion_personalityclash_response_close_window_2 = Dialog("anyone|plyr", "I don't have time for your petty dispute. Do not bother me with this again.", starting_state="companion_personalityclash_response", ending_state="close_window")
def code():
    troop_set_slot(_map_talk_troop,72,3)
companion_personalityclash_response_close_window_2.codeBlock = code


event_triggered_companion_personalitymatch_b = Dialog("anyone", "{s5}", starting_state="event_triggered", ending_state="companion_personalitymatch_b")
def condition():
    if _npc_map_talk_context == 76:
        _map_talk_troop = store_conversation_troop()
        if is_between(_map_talk_troop,trp.npc1,trp.kingdom_1_lord) and _map_talk_troop == _npc_with_personality_match:
            troop_slot_001 = troop_get_slot(_map_talk_troop,122)
            troop_slot_002 = troop_get_slot(_map_talk_troop,75)
            s11 = str_store_troop_name(troop_slot_002)
            s5 = str_store_string(troop_slot_001)
event_triggered_companion_personalitymatch_b.conditionBlock = condition
def code():
    _npc_with_personality_match = 0
    troop_slot_001 = troop_get_slot(_map_talk_troop,75)
    troop_change_relation_with_troop(_map_talk_troop,troop_slot_001,15)
event_triggered_companion_personalitymatch_b.codeBlock = code


companion_personalitymatch_b_companion_personalitymatch_response = Dialog("anyone", "{s5}", starting_state="companion_personalitymatch_b", ending_state="companion_personalitymatch_response")
def condition():
    troop_slot_001 = troop_get_slot(_map_talk_troop,123)
    troop_slot_002 = troop_get_slot(_map_talk_troop,75)
    s11 = str_store_troop_name(troop_slot_002)
    s5 = str_store_string(troop_slot_001)
companion_personalitymatch_b_companion_personalitymatch_response.conditionBlock = condition


companion_personalitymatch_response_close_window = Dialog("anyone|plyr", "Very good.", starting_state="companion_personalitymatch_response", ending_state="close_window")
def code():
    troop_set_slot(_map_talk_troop,76,1)
companion_personalitymatch_response_close_window.codeBlock = code


event_triggered_companion_sisterly_advice = Dialog("anyone", "{s5}", starting_state="event_triggered", ending_state="companion_sisterly_advice")
def condition():
    if _npc_map_talk_context == 139:
        _map_talk_troop = store_conversation_troop()
        if is_between(_map_talk_troop,trp.npc1,trp.kingdom_1_lord):
            var001 = _map_talk_troop - trp.npc1
            var002 = gstr.npc1_woman_to_woman
            var002 += var001
            s5 = str_store_string(var002)
event_triggered_companion_sisterly_advice.conditionBlock = condition
def code():
    troop_set_slot(_map_talk_troop,139,-1)
    _npc_with_sisterly_advice = 0
event_triggered_companion_sisterly_advice.codeBlock = code


companion_sisterly_advice_close_window = Dialog("anyone|plyr", "Thank you.", starting_state="companion_sisterly_advice", ending_state="close_window")


companion_sisterly_advice_close_window_1 = Dialog("anyone|plyr", "I would prefer not to discuss such things.", starting_state="companion_sisterly_advice", ending_state="close_window")
def code():
    _disable_sisterly_advice = 1
companion_sisterly_advice_close_window_1.codeBlock = code


event_triggered_companion_home_description = Dialog("anyone", "{s5}", starting_state="event_triggered", ending_state="companion_home_description")
def condition():
    if _g_infinite_camping == 0 and _npc_map_talk_context == 60:
        _map_talk_troop = store_conversation_troop()
        if is_between(_map_talk_troop,trp.npc1,trp.kingdom_1_lord):
            troop_slot_001 = troop_get_slot(_map_talk_troop,126)
            s5 = str_store_string(troop_slot_001)
event_triggered_companion_home_description.conditionBlock = condition
def code():
    troop_set_slot(_map_talk_troop,78,1)
event_triggered_companion_home_description.codeBlock = code


companion_home_description_companion_home_description_2 = Dialog("anyone|plyr", "Tell me more.", starting_state="companion_home_description", ending_state="companion_home_description_2")


companion_home_description_close_window = Dialog("anyone|plyr", "We don't have time to chat just now.", starting_state="companion_home_description", ending_state="close_window")


companion_home_description_close_window_1 = Dialog("anyone|plyr", "I prefer my companions not to bother me with such trivialities.", starting_state="companion_home_description", ending_state="close_window")
def code():
    _disable_local_histories = 1
companion_home_description_close_window_1.codeBlock = code


companion_home_description_2_companion_home_description_3 = Dialog("anyone", "{s5}", starting_state="companion_home_description_2", ending_state="companion_home_description_3")
def condition():
    troop_slot_001 = troop_get_slot(_map_talk_troop,127)
    s5 = str_store_string(troop_slot_001)
companion_home_description_2_companion_home_description_3.conditionBlock = condition


companion_home_description_3_close_window = Dialog("anyone", "{s5}", starting_state="companion_home_description_3", ending_state="close_window")
def condition():
    troop_slot_001 = troop_get_slot(_map_talk_troop,128)
    s5 = str_store_string(troop_slot_001)
companion_home_description_3_close_window.conditionBlock = condition


event_triggered_rebel_thanks_answer = Dialog("anyone", "{s6}", starting_state="event_triggered", ending_state="rebel_thanks_answer")
def condition():
    if _talk_context == 15:
        _g_talk_troop = store_conversation_troop()
        if is_between(_g_talk_troop,trp.kingdom_1_pretender,trp.knight_1_1_wife):
            troop_slot_001 = troop_get_slot(_g_talk_troop,14)
            s3 = str_store_faction_name(troop_slot_001)
            s6 = str_store_string("@{playername};;; when we started our long walk;;; few people had the courage to support me. And fewer still would be willing to put their lives at risk for my cause. But you didn't hesitate for a moment in throwing yourself at my enemies. We have gone through a lot together;;; and there were times I came close to losing all hope. But with God's help;;; we prevailed. It is now time for me to leave your company and take what's rightfully mine. From now on;;; I will carry out the great responsibility of ruling {s3}. There still lie many challanges ahead and I count on your help in overcoming those. And of course;;; you will always remain as my foremost vassal.")
event_triggered_rebel_thanks_answer.conditionBlock = condition
def code():
    unlock_achievement(47)
    end_quest(qst.rebel_against_kingdom)
    if True:
        troop_type_001 = troop_get_type(trp.player)
        if troop_type_001 == 1:
            troop_type_001 = troop_get_type(_g_talk_troop)
            if troop_type_001 == 1:
                unlock_achievement(76)
            #end
        #end
    #end
event_triggered_rebel_thanks_answer.codeBlock = code


rebel_thanks_answer_rebel_thanks_answer_2 = Dialog("anyone|plyr", "It was an honour to fight for your cause, {reg65?madame:my lord}.", starting_state="rebel_thanks_answer", ending_state="rebel_thanks_answer_2")


rebel_thanks_answer_rebel_thanks_answer_2_1 = Dialog("anyone|plyr", "You will always have my loyal support, {reg65?my lady:sir}.", starting_state="rebel_thanks_answer", ending_state="rebel_thanks_answer_2")


rebel_thanks_answer_2_close_window = Dialog("anyone", "I will miss living this life of adventure with you, but my duties await me. So... farewell for now, {playername}. I hope I'll see you again soon.", starting_state="rebel_thanks_answer_2", ending_state="close_window")


event_triggered_companion_political_grievance_response = Dialog("anyone", "{s21}", starting_state="event_triggered", ending_state="companion_political_grievance_response")
def condition():
    _map_talk_troop = store_conversation_troop()
    if is_between(_map_talk_troop,trp.npc1,trp.kingdom_1_lord) and _map_talk_troop == _npc_with_political_grievance and _npc_map_talk_context == 145:
        var001 = _g_talk_troop - trp.npc1
        var002 = gstr.npc1_kingsupport_objection
        var002 += var001
        s21 = str_store_string(var002)
event_triggered_companion_political_grievance_response.conditionBlock = condition
def code():
    _npc_with_political_grievance = 0
    troop_set_slot(_map_talk_troop,145,2)
event_triggered_companion_political_grievance_response.codeBlock = code


companion_political_grievance_response_close_window = Dialog("anyone|plyr", "Your opinion is noted.", starting_state="companion_political_grievance_response", ending_state="close_window")
def code():
    troop_slot_001 = troop_get_slot(_map_talk_troop,69)
    troop_slot_001 += 25
    troop_set_slot(_map_talk_troop,69,troop_slot_001)
companion_political_grievance_response_close_window.codeBlock = code


event_triggered_companion_rejoin_response = Dialog("anyone", "Greetings, {s21}. Are you ready for me to rejoin you?", starting_state="event_triggered", ending_state="companion_rejoin_response")
def condition():
    _map_talk_troop = store_conversation_troop()
    if is_between(_map_talk_troop,trp.npc1,trp.kingdom_1_lord) and _map_talk_troop == _npc_to_rejoin_party and not main_party_has_troop(_map_talk_troop) and troop_slot_eq(_map_talk_troop,151,8) and troop_slot_eq(_map_talk_troop,2,5):
        troop_slot_001 = troop_get_slot(_map_talk_troop,130)
        s21 = str_store_string(troop_slot_001)
event_triggered_companion_rejoin_response.conditionBlock = condition
def code():
    _npc_to_rejoin_party = 0
event_triggered_companion_rejoin_response.codeBlock = code


event_triggered_companion_rejoin_response_1 = Dialog("anyone", "Well, {s21}, at last I've found you. I've been out spreading the word about your claim, and am now ready to rejoin the company.", starting_state="event_triggered", ending_state="companion_rejoin_response")
def condition():
    _map_talk_troop = store_conversation_troop()
    if is_between(_map_talk_troop,trp.npc1,trp.kingdom_1_lord) and _map_talk_troop == _npc_to_rejoin_party and troop_slot_eq(_g_talk_troop,151,1):
        troop_slot_001 = troop_get_slot(_map_talk_troop,130)
        s21 = str_store_string(troop_slot_001)
event_triggered_companion_rejoin_response_1.conditionBlock = condition
def code():
    _npc_to_rejoin_party = 0
    change_player_right_to_rule(3)
    troop_set_slot(_g_talk_troop,142,1)
    if is_between(_player_right_to_rule,10,15):
        add_log_entry(24,trp.player,0,0,0)
    elif is_between(_player_right_to_rule,20,25):
        add_log_entry(25,trp.player,0,0,0)
    #end
event_triggered_companion_rejoin_response_1.codeBlock = code


event_triggered_companion_rejoin_response_2 = Dialog("anyone", "Well, {s21}, at last I've found you. {s11}. The rest of my report I submit to you in writing.", starting_state="event_triggered", ending_state="companion_rejoin_response")
def condition():
    _map_talk_troop = store_conversation_troop()
    if is_between(_map_talk_troop,trp.npc1,trp.kingdom_1_lord) and _map_talk_troop == _npc_to_rejoin_party and troop_slot_eq(_map_talk_troop,151,2):
        troop_slot_001 = troop_get_slot(_map_talk_troop,130)
        s21 = str_store_string(troop_slot_001)
        troop_slot_002 = troop_get_slot(_map_talk_troop,67)
        party_faction_003 = store_faction_of_party(troop_slot_002)
        update_faction_political_notes(party_faction_003)
        var004 = reg0
        var004 += reg0
        var004 += reg1
        s12 = str_store_faction_name(party_faction_003)
        if var004 >= 60:
            s11 = str_store_string(gstr.the_s12_is_a_labyrinth_of_rivalries_and_grudges_lords_ignore_their_lieges_summons_and_many_are_ripe_to_defect)
        elif var004 >= 40:
            s11 = str_store_string(gstr.the_s12_is_shaky_many_lords_do_not_cooperate_with_each_other_and_some_might_be_tempted_to_defect_to_a_liege_that_they_consider_more_worthy)
        elif var004 >= 20:
            s11 = str_store_string(gstr.the_s12_is_fairly_solid_some_lords_bear_enmities_for_each_other_but_they_tend_to_stand_together_against_outside_enemies)
        else:
            s11 = str_store_string(gstr.the_s12_is_a_rock_of_stability_politically_speaking_whatever_the_lords_may_think_of_each_other_they_fight_as_one_against_the_common_foe)
        #end
    #end
    for trp_005 in range(trp.npc1, trp.knight_1_1_wife):
        if troop_slot_eq(trp_005,2,2):
            troop_faction_006 = store_faction_of_troop(trp_005)
            if troop_faction_006 == party_faction_003:
                update_troop_political_notes(trp_005)
            #end
        #end
    #end
event_triggered_companion_rejoin_response_2.conditionBlock = condition


event_triggered_companion_embassy_results = Dialog("anyone", "Well, {s21}, at last I've found you. I have returned from my mission to {s31}. In general, I would say, {s14}.", starting_state="event_triggered", ending_state="companion_embassy_results")
def condition():
    troop_slot_001_list1 = [
    5,
    7,
    6,
    4,
    3,
    ]
    _map_talk_troop = store_conversation_troop()
    if is_between(_map_talk_troop,trp.npc1,trp.kingdom_1_lord) and _map_talk_troop == _npc_to_rejoin_party:
        troop_slot_001 = troop_get_slot(_g_talk_troop,151)
        if troop_slot_001 in troop_slot_001_list1:
            troop_slot_002 = troop_get_slot(_map_talk_troop,130)
            s21 = str_store_string(troop_slot_002)
            troop_slot_003 = troop_get_slot(_g_talk_troop,152)
            s31 = str_store_faction_name(troop_slot_003)
            npc_decision_checklist_peace_or_war(troop_slot_003,fac.player_supporters_faction,_g_talk_troop)
            _g_mission_result = reg0
event_triggered_companion_embassy_results.conditionBlock = condition


companion_embassy_results_companion_rejoin_response = Dialog("anyone", "In this letter, {s12} addresses you as {Lord/Lady} of {s4}, which implies some sort of recognition that you are a sovereign and independent monarch.", starting_state="companion_embassy_results", ending_state="companion_rejoin_response")
def condition():
    if troop_slot_eq(_g_talk_troop,151,5):
        troop_slot_001 = troop_get_slot(_g_talk_troop,152)
        if _g_mission_result >= 2 or faction_slot_eq(troop_slot_001,32,1) and is_between(_g_player_court,p.town_1,p.salt_mine):
            faction_slot_002 = faction_get_slot(troop_slot_001,11)
            s12 = str_store_troop_name(faction_slot_002)
            if not party_slot_eq(_g_player_court,61,troop_slot_001):
                s4 = str_store_party_name(_g_player_court)
companion_embassy_results_companion_rejoin_response.conditionBlock = condition
def code():
    troop_slot_001 = troop_get_slot(_g_talk_troop,152)
    if faction_slot_eq(troop_slot_001,32,0):
        faction_set_slot(troop_slot_001,32,1)
        change_player_right_to_rule(10)
    #end
companion_embassy_results_companion_rejoin_response.codeBlock = code


companion_embassy_results_companion_rejoin_response_1 = Dialog("anyone", "In his letter, {s12} merely refers to you as {playername}, omitting any title. This does not constitute recognition of your right to rule.", starting_state="companion_embassy_results", ending_state="companion_rejoin_response")
def condition():
    if troop_slot_eq(_g_talk_troop,151,5):
        troop_slot_001 = troop_get_slot(_g_talk_troop,152)
        faction_slot_002 = faction_get_slot(troop_slot_001,11)
        s12 = str_store_troop_name(faction_slot_002)
companion_embassy_results_companion_rejoin_response_1.conditionBlock = condition


companion_embassy_results_companion_rejoin_response_2 = Dialog("anyone", "{s12} says that your current truce should suffice.", starting_state="companion_embassy_results", ending_state="companion_rejoin_response")
def condition():
    if troop_slot_eq(_g_talk_troop,151,3):
        troop_slot_001 = troop_get_slot(_g_talk_troop,152)
        if faction_slot_ge(troop_slot_001,120,1):
            faction_slot_002 = faction_get_slot(troop_slot_001,11)
            s12 = str_store_troop_name(faction_slot_002)
companion_embassy_results_companion_rejoin_response_2.conditionBlock = condition


companion_embassy_results_companion_truce_confirm = Dialog("anyone", "{s12} says that he is willing to consider a truce of forty days.", starting_state="companion_embassy_results", ending_state="companion_truce_confirm")
def condition():
    if troop_slot_eq(_g_talk_troop,151,3) and _g_mission_result >= 1:
        troop_slot_001 = troop_get_slot(_g_talk_troop,152)
        faction_slot_002 = faction_get_slot(troop_slot_001,11)
        s12 = str_store_troop_name(faction_slot_002)
companion_embassy_results_companion_truce_confirm.conditionBlock = condition


companion_embassy_results_companion_rejoin_response_3 = Dialog("anyone", "{s12} says that he is unwilling to conclude a peace.", starting_state="companion_embassy_results", ending_state="companion_rejoin_response")
def condition():
    if troop_slot_eq(_g_talk_troop,151,3):
        troop_slot_001 = troop_get_slot(_g_talk_troop,152)
        faction_slot_002 = faction_get_slot(troop_slot_001,11)
        s12 = str_store_troop_name(faction_slot_002)
companion_embassy_results_companion_rejoin_response_3.conditionBlock = condition


companion_truce_confirm_companion_rejoin_response = Dialog("anyone|plyr", "Very well - let this truce with the {s4} be concluded.", starting_state="companion_truce_confirm", ending_state="companion_rejoin_response")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,152)
    s4 = str_store_faction_name(troop_slot_001)
companion_truce_confirm_companion_rejoin_response.conditionBlock = condition
def code():
    troop_slot_001 = troop_get_slot(_g_talk_troop,152)
    diplomacy_start_peace_between_kingdoms(troop_slot_001,_players_kingdom,1)
    s4 = str_store_faction_name(troop_slot_001)
companion_truce_confirm_companion_rejoin_response.codeBlock = code


companion_truce_confirm_companion_rejoin_response_1 = Dialog("anyone|plyr", "On second thought, perhaps this is currently not in our interests.", starting_state="companion_truce_confirm", ending_state="companion_rejoin_response")


companion_embassy_results_companion_rejoin_response_4 = Dialog("anyone", "{s12} says that you are already pledged to another ruler.", starting_state="companion_embassy_results", ending_state="companion_rejoin_response")
def condition():
    if troop_slot_eq(_g_talk_troop,151,4) and check_quest_active(qst.join_faction) or is_between(_players_kingdom,fac.kingdom_1,fac.kingdoms_end):
        troop_slot_001 = troop_get_slot(_g_talk_troop,152)
        faction_slot_002 = faction_get_slot(troop_slot_001,11)
        s12 = str_store_troop_name(faction_slot_002)
companion_embassy_results_companion_rejoin_response_4.conditionBlock = condition


companion_embassy_results_companion_rejoin_response_5 = Dialog("anyone", "{s12} says that he does not believe that you would honor your obligations as a vassal, and suspects that your offer is just a ploy.", starting_state="companion_embassy_results", ending_state="companion_rejoin_response")
def condition():
    if troop_slot_eq(_g_talk_troop,151,4) and _g_mission_result < -2:
        troop_slot_001 = troop_get_slot(_g_talk_troop,152)
        faction_slot_002 = faction_get_slot(troop_slot_001,11)
        s12 = str_store_troop_name(faction_slot_002)
companion_embassy_results_companion_rejoin_response_5.conditionBlock = condition


companion_embassy_results_vassalage_offer_confirm = Dialog("anyone", "{s12} says that he accepts your offer of vassalage. He will give you 30 days to seek him out, in which time he will refrain from making war on you.", starting_state="companion_embassy_results", ending_state="vassalage_offer_confirm")
def condition():
    if troop_slot_eq(_g_talk_troop,151,4):
        troop_slot_001 = troop_get_slot(_g_talk_troop,152)
        faction_slot_002 = faction_get_slot(troop_slot_001,11)
        s12 = str_store_troop_name(faction_slot_002)
companion_embassy_results_vassalage_offer_confirm.conditionBlock = condition


vassalage_offer_confirm_companion_rejoin_response = Dialog("anyone|plyr", "Tell him that I accept his terms...", starting_state="vassalage_offer_confirm", ending_state="companion_rejoin_response")
def code():
    _g_invite_faction = troop_get_slot(_g_talk_troop,152)
    _g_invite_faction_lord = faction_get_slot(_g_invite_faction,11)
    s1 = str_store_troop_name(_g_invite_faction_lord)
    setup_quest_text(qst.join_faction)
    s3 = str_store_troop_name_link(_g_invite_faction_lord)
    s4 = str_store_faction_name_link(_g_invite_faction)
    quest_set_slot(qst.join_faction,6,_g_invite_faction_lord)
    quest_set_slot(qst.join_faction,23,30)
    if True:
        faction_relation_001 = store_relation(_g_invite_faction,fac.player_supporters_faction)
        if faction_relation_001 < 0:
            diplomacy_start_peace_between_kingdoms(_g_invite_faction,fac.player_supporters_faction,0)
            quest_set_slot(qst.join_faction,26,1)
        #end
    #end
    s2 = str_store_string("@Find and speak with {s3} of {s4} to give him your oath of homage.")
    start_quest(qst.join_faction,_g_invite_faction_lord)
    report_quest_troop_positions(qst.join_faction,_g_invite_faction_lord,3)
vassalage_offer_confirm_companion_rejoin_response.codeBlock = code


companion_rejoin_response_close_window = Dialog("anyone|plyr", "Welcome back, friend!", starting_state="companion_rejoin_response", ending_state="close_window")
def condition():
    if hero_can_join(p.main_party) and not main_party_has_troop(_map_talk_troop):
        pass
companion_rejoin_response_close_window.conditionBlock = condition
def code():
    party_add_members(p.main_party,_map_talk_troop,1)
    _npc_to_rejoin_party = 0
    troop_set_slot(_map_talk_troop,151,0)
    troop_set_slot(_map_talk_troop,150,0)
companion_rejoin_response_close_window.codeBlock = code


companion_rejoin_response_companion_rejoin_refused = Dialog("anyone|plyr", "Unfortunately, I cannot take you back just yet.", starting_state="companion_rejoin_response", ending_state="companion_rejoin_refused")
def code():
    troop_set_slot(_map_talk_troop,151,8)
    troop_set_slot(_map_talk_troop,150,0)
    _npc_to_rejoin_party = 0
companion_rejoin_response_companion_rejoin_refused.codeBlock = code


companion_rejoin_refused_close_window = Dialog("anyone", "As you wish. I will take care of some business, and try again in a few days.", starting_state="companion_rejoin_refused", ending_state="close_window")


event_triggered_companion_rejoin_response_3 = Dialog("anyone", "Would you have me rejoin you?", starting_state="event_triggered", ending_state="companion_rejoin_response")
def condition():
    if is_between(_g_talk_troop,trp.npc1,trp.kingdom_1_lord) and not troop_slot_eq(_g_talk_troop,2,2) and not main_party_has_troop(_g_talk_troop):
        pass
event_triggered_companion_rejoin_response_3.conditionBlock = condition
def code():
    _map_talk_troop = _g_talk_troop
event_triggered_companion_rejoin_response_3.codeBlock = code


event_triggered_close_window_1 = Dialog("anyone", "There! I can see the walls of {s3} in the distance. We've made it safely. Here, take this purse of {reg3} denars, as I promised. I hope we can travel together again someday.", starting_state="event_triggered", ending_state="close_window")
def condition():
    if _caravan_escort_state == 1 and _g_encountered_party == _caravan_escort_party_id and _talk_context <= 2:
        reg0 = store_distance_to_party_from_party(_caravan_escort_destination_town,_caravan_escort_party_id)
        if reg0 < 5:
            s3 = str_store_party_name(_caravan_escort_destination_town)
            reg3 = _caravan_escort_agreed_reward
event_triggered_close_window_1.conditionBlock = condition
def code():
    _caravan_escort_state = 0
    troop_add_gold(trp.player,_caravan_escort_agreed_reward)
    reg4 = _caravan_escort_agreed_reward
    reg4 *= 1
    add_xp_as_reward(reg4)
    _g_leave_encounter = 1
event_triggered_close_window_1.codeBlock = code


event_triggered_close_window_2 = Dialog("anyone", "{!}Sorry -- just talking to myself [ERROR- {s51}]", starting_state="event_triggered", ending_state="close_window")


start_lord_start = Dialog("anyone", "My lady, I look forward to our marriage, as soon as there is an opportunity to hold a proper feast.{s12}", starting_state="start", ending_state="lord_start")
def condition():
    if _talk_context < 4 and check_quest_active(qst.wed_betrothed_female) and quest_slot_eq(qst.wed_betrothed_female,6,_g_talk_troop) and not faction_slot_eq(_g_talk_x_troop_faction,4,6):
        cur_hours_001 = store_current_hours()
        troop_slot_002 = troop_get_slot(_g_talk_troop,39)
        cur_hours_001 -= troop_slot_002
        if cur_hours_001 < 720:
            str_clear(12)
            if not faction_slot_eq(_g_talk_x_troop_faction,4,6) and not faction_slot_eq(_g_talk_x_troop_faction,4,0):
                s12 = str_store_string("@ We will of course need to wait until the realm is no longer on campaign.")
            #end
        #end
    #end
start_lord_start.conditionBlock = condition


start_lord_start_1 = Dialog("anyone", "My lady, if you wish to marry, we can proceed to the feast at {s4} to exchange vows before the lords of the realm.", starting_state="start", ending_state="lord_start")
def condition():
    if _talk_context < 4 and check_quest_active(qst.wed_betrothed_female) and quest_slot_eq(qst.wed_betrothed_female,6,_g_talk_troop) and faction_slot_eq(_g_talk_x_troop_faction,4,6):
        faction_slot_001 = faction_get_slot(_g_talk_x_troop_faction,5)
        if party_slot_eq(_g_talk_troop_party,4,7) and party_slot_eq(_g_talk_troop_party,5,faction_slot_001) and faction_slot_001 != _g_encountered_party:
            s4 = str_store_party_name(faction_slot_001)
start_lord_start_1.conditionBlock = condition


start_lord_start_2 = Dialog("anyone", "My lady, I grow tired of waiting for the lords of this realm to assemble. Come with me to {s4} exchange our vows.", starting_state="start", ending_state="lord_start")
def condition():
    if _talk_context < 4 and check_quest_active(qst.wed_betrothed_female) and quest_slot_eq(qst.wed_betrothed_female,6,_g_talk_troop):
        cur_hours_001 = store_current_hours()
        troop_slot_002 = troop_get_slot(_g_talk_troop,39)
        cur_hours_001 -= troop_slot_002
        if cur_hours_001 >= 720:
            party_attached_003 = party_get_attached_to(_g_talk_troop_party)
            if not is_between(party_attached_003,p.town_1,p.village_1) and party_slot_eq(_g_talk_troop_party,4,7):
                party_slot_004 = party_get_slot(_g_talk_troop_party,5)
                s4 = str_store_party_name(party_slot_004)
start_lord_start_2.conditionBlock = condition


start_lord_start_3 = Dialog("anyone", "My lady, I grow tired of waiting for the lords of this realm to assemble. Perhaps we should take the first opportunity to marry, in any great hall that is open to us.", starting_state="start", ending_state="lord_start")
def condition():
    if _talk_context < 4 and check_quest_active(qst.wed_betrothed_female) and quest_slot_eq(qst.wed_betrothed_female,6,_g_talk_troop):
        cur_hours_001 = store_current_hours()
        troop_slot_002 = troop_get_slot(_g_talk_troop,39)
        cur_hours_001 -= troop_slot_002
        if cur_hours_001 >= 0:
            if not is_between(party_attached_003,p.town_1,p.village_1):
                party_attached_003 = party_get_attached_to(_g_talk_troop_party)
start_lord_start_3.conditionBlock = condition


start_lord_groom_vows = Dialog("anyone", "My lady, I have grown tired of waiting. Let us proceed with the vows immediately.", starting_state="start", ending_state="lord_groom_vows")
def condition():
    if _talk_context < 4 and check_quest_active(qst.wed_betrothed_female) and quest_slot_eq(qst.wed_betrothed_female,6,_g_talk_troop) and faction_slot_eq(_g_talk_x_troop_faction,4,6) or not faction_slot_eq(_g_talk_x_troop_faction,5,_g_encountered_party):
        pass
start_lord_groom_vows.conditionBlock = condition


start_lord_groom_vows_1 = Dialog("anyone", "My lady, my eyes rejoice to see you. We may proceed with the vows.", starting_state="start", ending_state="lord_groom_vows")
def condition():
    if _talk_context < 4 and check_quest_active(qst.wed_betrothed_female) and quest_slot_eq(qst.wed_betrothed_female,6,_g_talk_troop):
        pass
start_lord_groom_vows_1.conditionBlock = condition


lord_groom_vows_female_pc_marriage_vow = Dialog("anyone", "My lady, with this assembly as my witness, I vow to take you as my wife, to honor, cherish, and protect you. My the heavens bless us with health, prosperity, and children.", starting_state="lord_groom_vows", ending_state="female_pc_marriage_vow")


female_pc_marriage_vow_lord_groom_wedding_complete = Dialog("anyone|plyr", "I vow to take you as my husband.", starting_state="female_pc_marriage_vow", ending_state="lord_groom_wedding_complete")
def code():
    courtship_event_bride_marry_groom(trp.player,_g_talk_troop,0)
    end_quest(qst.wed_betrothed_female)
female_pc_marriage_vow_lord_groom_wedding_complete.codeBlock = code


female_pc_marriage_vow_close_window = Dialog("anyone|plyr", "Wait -- I need to think about this.", starting_state="female_pc_marriage_vow", ending_state="close_window")
def code():
    _g_leave_encounter = 1
female_pc_marriage_vow_close_window.codeBlock = code


lord_groom_wedding_complete_close_window = Dialog("anyone", "We are now husband and wife. Let the festivities commence!", starting_state="lord_groom_wedding_complete", ending_state="close_window")


start_close_window_10 = Dialog("anyone", "Very well. You've made your point. I have nothing more to say.", starting_state="start", ending_state="close_window")
def condition():
    if _talk_context == 17 and check_quest_active(qst.denounce_lord) and check_quest_succeeded(qst.denounce_lord) and quest_slot_eq(qst.denounce_lord,2,_g_talk_troop):
        pass
start_close_window_10.conditionBlock = condition
def code():
    change_troop_renown(trp.player,10)
    _g_leave_encounter = 1
start_close_window_10.codeBlock = code


start_close_window_11 = Dialog("anyone", "Well, {sir/my lady}! Please, do not trouble yourself to rise from the ground, as I would simply have to knock you down again. I shall take your silence as an apology. Good day to you.", starting_state="start", ending_state="close_window")
def condition():
    if _talk_context == 17 and check_quest_active(qst.denounce_lord) and check_quest_failed(qst.denounce_lord) and quest_slot_eq(qst.denounce_lord,2,_g_talk_troop):
        pass
start_close_window_11.conditionBlock = condition
def code():
    change_troop_renown(trp.player,-10)
    _g_leave_encounter = 1
start_close_window_11.codeBlock = code


start_close_window_12 = Dialog("anyone", "Very well. You've made your point. I retract what I said. I hope you have obtained satisfaction.", starting_state="start", ending_state="close_window")
def condition():
    if _talk_context == 17:
        _temp = 0
        if check_quest_active(qst.duel_avenge_insult) and check_quest_succeeded(qst.duel_avenge_insult) and quest_slot_eq(qst.duel_avenge_insult,2,_g_talk_troop):
            _temp = 1
        elif check_quest_active(qst.duel_for_lady) and check_quest_succeeded(qst.duel_for_lady) and quest_slot_eq(qst.duel_for_lady,2,_g_talk_troop):
            _temp = 2
            if _temp > 0:
                pass
            #end
        #end
    #end
start_close_window_12.conditionBlock = condition
def code():
    if _temp == 1:
        change_troop_renown(trp.player,10)
        end_quest(qst.duel_avenge_insult)
    #end
    _g_leave_encounter = 1
start_close_window_12.codeBlock = code


start_close_window_13 = Dialog("anyone", "Hah! Not so gallant now, are we? Now trouble me no more.", starting_state="start", ending_state="close_window")
def condition():
    if _talk_context == 17:
        _temp = 0
        if check_quest_active(qst.duel_avenge_insult) and check_quest_failed(qst.duel_avenge_insult) and quest_slot_eq(qst.duel_avenge_insult,2,_g_talk_troop):
            _temp = 1
        elif check_quest_active(qst.duel_for_lady) and check_quest_failed(qst.duel_for_lady) and quest_slot_eq(qst.duel_for_lady,2,_g_talk_troop):
            _temp = 2
            if _temp > 0:
                pass
            #end
        #end
    #end
start_close_window_13.conditionBlock = condition
def code():
    if _temp == 1:
        change_troop_renown(trp.player,-10)
        end_quest(qst.duel_avenge_insult)
    #end
    _g_leave_encounter = 1
start_close_window_13.codeBlock = code


start_close_window_14 = Dialog("anyone", "Very well -- you have won. Let all those present today witness that you have defeated me, and I shall abandon my suit of {s10}. Are you satisfied, you heartless bastard?", starting_state="start", ending_state="close_window")
def condition():
    if _talk_context == 17 and check_quest_active(qst.duel_courtship_rival) and check_quest_succeeded(qst.duel_courtship_rival) and quest_slot_eq(qst.duel_courtship_rival,2,_g_talk_troop):
        quest_slot_001 = quest_get_slot(qst.duel_courtship_rival,6)
        s10 = str_store_troop_name(quest_slot_001)
start_close_window_14.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(qst.duel_courtship_rival,6)
    courtship_event_lady_break_relation_with_suitor(quest_slot_001,_g_talk_troop)
    _g_leave_encounter = 1
start_close_window_14.codeBlock = code


start_close_window_15 = Dialog("anyone", "Get up. Let all those present today witness that I have defeated you, and you are now bound to relinquish your suit of the {s10}. I will permit you one final visit, to make your farewells. After that, if you persist in attempting to see her, everyone shall know that you are a man of scant honor.", starting_state="start", ending_state="close_window")
def condition():
    if _talk_context == 17 and check_quest_active(qst.duel_courtship_rival) and check_quest_failed(qst.duel_courtship_rival) and quest_slot_eq(qst.duel_courtship_rival,2,_g_talk_troop):
        quest_slot_001 = quest_get_slot(qst.duel_courtship_rival,6)
        s10 = str_store_troop_name(quest_slot_001)
start_close_window_15.conditionBlock = condition
def code():
    _g_leave_encounter = 1
start_close_window_15.codeBlock = code


start_player_siege_castle_commander_1 = Dialog("anyone", "What do you want?", starting_state="start", ending_state="player_siege_castle_commander_1")
def condition():
    if _talk_context == 7:
        pass
start_player_siege_castle_commander_1.conditionBlock = condition


player_siege_castle_commander_1_player_siege_ask_surrender = Dialog("anyone|plyr", "Surrender! Your situation is hopeless!", starting_state="player_siege_castle_commander_1", ending_state="player_siege_ask_surrender")


player_siege_castle_commander_1_close_window = Dialog("anyone|plyr", "Nothing. I'll leave you now.", starting_state="player_siege_castle_commander_1", ending_state="close_window")


player_siege_ask_surrender_player_siege_ask_surrender_treatment = Dialog("anyone", "Perhaps... Do you give your word of honour that we'll be treated well?", starting_state="player_siege_ask_surrender", ending_state="player_siege_ask_surrender_treatment")
def condition():
    if _g_enemy_strength < 100:
        if _g_ally_strength >= var001:
            var001 = _g_enemy_strength * 5
player_siege_ask_surrender_player_siege_ask_surrender_treatment.conditionBlock = condition


player_siege_ask_surrender_player_siege_ask_leave_unmolested = Dialog("anyone", "We are ready to leave this castle to you and march away if you give me your word of honour that you'll let us leave unmolested.", starting_state="player_siege_ask_surrender", ending_state="player_siege_ask_leave_unmolested")
def condition():
    if _g_enemy_strength < 200:
        if _g_ally_strength >= var001:
            var001 = _g_enemy_strength * 3
player_siege_ask_surrender_player_siege_ask_leave_unmolested.conditionBlock = condition


player_siege_ask_surrender_close_window = Dialog("anyone", "Surrender? Hah! We can hold these walls until we all die of old age.", starting_state="player_siege_ask_surrender", ending_state="close_window")


player_siege_ask_surrender_treatment_player_siege_ask_surrender_treatment_reject = Dialog("anyone|plyr", "I give you nothing. Surrender now or prepare to die!", starting_state="player_siege_ask_surrender_treatment", ending_state="player_siege_ask_surrender_treatment_reject")


player_siege_ask_surrender_treatment_reject_close_window = Dialog("anyone", "Bastard. We will fight you to the last man!", starting_state="player_siege_ask_surrender_treatment_reject", ending_state="close_window")


player_siege_ask_surrender_treatment_player_siege_ask_surrender_treatment_accept = Dialog("anyone|plyr", "You will be ransomed and your soldiers will live. I give you my word.", starting_state="player_siege_ask_surrender_treatment", ending_state="player_siege_ask_surrender_treatment_accept")


player_siege_ask_surrender_treatment_accept_close_window = Dialog("anyone", "Very well then. Under those terms, I offer you my surrender.", starting_state="player_siege_ask_surrender_treatment_accept", ending_state="close_window")
def code():
    _g_enemy_surrenders = 1
player_siege_ask_surrender_treatment_accept_close_window.codeBlock = code


player_siege_ask_leave_unmolested_player_siege_ask_leave_unmolested_accept = Dialog("anyone|plyr", "You have my word. You will not come under attack if you leave the castle.", starting_state="player_siege_ask_leave_unmolested", ending_state="player_siege_ask_leave_unmolested_accept")


player_siege_ask_leave_unmolested_accept_close_window = Dialog("anyone", "Very well. Then we leave this castle to you. You have won this day. But we'll meet again.", starting_state="player_siege_ask_leave_unmolested_accept", ending_state="close_window")
def code():
    _g_castle_left_to_player = 1
player_siege_ask_leave_unmolested_accept_close_window.codeBlock = code


player_siege_ask_leave_unmolested_player_siege_ask_leave_unmolested_reject = Dialog("anyone|plyr", "Unacceptable. I want prisoners.", starting_state="player_siege_ask_leave_unmolested", ending_state="player_siege_ask_leave_unmolested_reject")


player_siege_ask_leave_unmolested_reject_close_window = Dialog("anyone", "Then we will defend this castle to the death, and this parley is done. Farewell.", starting_state="player_siege_ask_leave_unmolested_reject", ending_state="close_window")


lord_prison_break_lord_prison_break_confirm = Dialog("anyone|plyr", "I've come to get you out of here", starting_state="lord_prison_break", ending_state="lord_prison_break_confirm")


lord_prison_break_close_window = Dialog("anyone|plyr", "Never mind -- just stay quiet", starting_state="lord_prison_break", ending_state="close_window")
def code():
    troop_set_slot(_g_talk_troop,149,1)
    _g_reset_mission_participation = 1
lord_prison_break_close_window.codeBlock = code


lord_prison_break_confirm_lord_prison_break_confirm_2 = Dialog("anyone", "Thank the heavens! I don't know how long I could have lasted in here", starting_state="lord_prison_break_confirm", ending_state="lord_prison_break_confirm_2")


lord_prison_break_confirm_2_lord_prison_break_confirm_3 = Dialog("anyone", "But wait -- how will we escape? We'll be rushed by the garrison the moment we step out that door. I can help you hold them off -- but I'll tell you now, they have fed me nothing but watery porridge and a few scraps, and I'm not as strong as I could be.", starting_state="lord_prison_break_confirm_2", ending_state="lord_prison_break_confirm_3")


lord_prison_break_confirm_3_lord_prison_break_confirm_4 = Dialog("anyone|plyr", "You keep well behind me, and try to stay out of the fighting.", starting_state="lord_prison_break_confirm_3", ending_state="lord_prison_break_confirm_4")
def code():
    troop_set_slot(_g_talk_troop,149,3)
    _g_reset_mission_participation = 1
    agent_set_team(_g_talk_agent,0)
lord_prison_break_confirm_3_lord_prison_break_confirm_4.codeBlock = code


lord_prison_break_confirm_3_lord_prison_break_confirm_4_1 = Dialog("anyone|plyr", "I'll need you to grab a weapon and help me, despite your weakness.", starting_state="lord_prison_break_confirm_3", ending_state="lord_prison_break_confirm_4")
def code():
    troop_set_slot(_g_talk_troop,149,2)
    _g_reset_mission_participation = 1
    agent_set_team(_g_talk_agent,0)
lord_prison_break_confirm_3_lord_prison_break_confirm_4_1.codeBlock = code


lord_prison_break_confirm_3_close_window = Dialog("anyone|plyr", "Actually, don't get involved in this.", starting_state="lord_prison_break_confirm_3", ending_state="close_window")
def code():
    troop_set_slot(_g_talk_troop,149,1)
    _g_reset_mission_participation = 1
lord_prison_break_confirm_3_close_window.codeBlock = code


lord_prison_break_confirm_4_close_window = Dialog("anyone", "Let's go!{s14}", starting_state="lord_prison_break_confirm_4", ending_state="close_window")
def condition():
    str_clear(14)
    for trp_001 in range(trp.npc1, trp.heroes_end):
        if troop_slot_eq(trp_001,8,_g_encountered_party) and trp_001 != _g_talk_troop:
            var002 = 0
            if cf_prisoner_offered_parole(trp_001):
                var002 = 1
            #end
        #end
        if var002 == 0 and troop_slot_eq(trp_001,149,0):
            s15 = str_store_troop_name(trp_001)
            reg4 = troop_get_type(trp_001)
            s14 = str_store_string(gstr._s15_is_also_being_held_here_and_you_may_wish_to_see_if_reg4shehe_will_join_us)
        #end
    #end
lord_prison_break_confirm_4_close_window.conditionBlock = condition


start_freed_lord_answer = Dialog("anyone", "I am in your debt for freeing me, friend.", starting_state="start", ending_state="freed_lord_answer")
def condition():
    if _talk_context == 8 and troop_slot_eq(_g_talk_troop,2,2):
        pass
start_freed_lord_answer.conditionBlock = condition
def code():
    if check_quest_active(qst.rescue_lord_by_replace) and quest_slot_eq(qst.rescue_lord_by_replace,2,_g_talk_troop):
        succeed_quest(qst.rescue_lord_by_replace)
        _do_not_cancel_quest = 1
    #end
    if check_quest_active(qst.rescue_prisoner) and quest_slot_eq(qst.rescue_prisoner,2,_g_talk_troop):
        succeed_quest(qst.rescue_prisoner)
        _do_not_cancel_quest = 1
    #end
    remove_troop_from_prison(_g_talk_troop)
    _do_not_cancel_quest = 0
start_freed_lord_answer.codeBlock = code


freed_lord_answer_freed_lord_answer_1 = Dialog("anyone|plyr", "You're not going anywhere, 'friend'. You're my prisoner now.", starting_state="freed_lord_answer", ending_state="freed_lord_answer_1")
def condition():
    if _g_talk_x_troop_faction_relation < 0:
        pass
freed_lord_answer_freed_lord_answer_1.conditionBlock = condition
def code():
    troop_set_slot(_g_talk_troop,8,p.main_party)
    party_force_add_prisoners(p.main_party,_g_talk_troop,1)
    change_player_relation_with_troop(_g_talk_troop,-30)
    change_player_relation_with_faction_ex(_g_talk_x_troop_faction,-2)
    event_hero_taken_prisoner_by_player(_g_talk_troop)
freed_lord_answer_freed_lord_answer_1.codeBlock = code


freed_lord_answer_1_close_window = Dialog("anyone", "I'll have your head on a pike for this, you bastard! Someday!", starting_state="freed_lord_answer_1", ending_state="close_window")


freed_lord_answer_freed_lord_answer_2 = Dialog("anyone|plyr", "You are free to go wherever you want, sir.", starting_state="freed_lord_answer", ending_state="freed_lord_answer_2")
def code():
    change_player_relation_with_troop(_g_talk_troop,7)
    change_player_honor(2)
    change_player_relation_with_faction_ex(_g_talk_x_troop_faction,2)
freed_lord_answer_freed_lord_answer_2.codeBlock = code


freed_lord_answer_2_close_window = Dialog("anyone", "Thank you, good {sire/lady}. I never forget someone who's done me a good turn.", starting_state="freed_lord_answer_2", ending_state="close_window")
def code():
    _g_leave_encounter = 1
freed_lord_answer_2_close_window.codeBlock = code


start_defeat_lord_answer = Dialog("anyone", "{s43}", starting_state="start", ending_state="defeat_lord_answer")
def condition():
    if _talk_context == 9 and troop_slot_eq(_g_talk_troop,2,2):
        pass
start_defeat_lord_answer.conditionBlock = condition
def code():
    troop_set_slot(_g_talk_troop,10,-1)
    lord_comment_to_s43(_g_talk_troop,gstr.surrender_offer_default)
start_defeat_lord_answer.codeBlock = code


defeat_lord_answer_defeat_lord_answer_1 = Dialog("anyone|plyr", "You are my prisoner now.", starting_state="defeat_lord_answer", ending_state="defeat_lord_answer_1")
def code():
    troop_set_slot(_g_talk_troop,8,p.main_party)
    party_force_add_prisoners(p.main_party,_g_talk_troop,1)
    change_player_relation_with_troop(_g_talk_troop,-3)
    change_player_relation_with_faction_ex(_g_talk_x_troop_faction,-3)
    event_hero_taken_prisoner_by_player(_g_talk_troop)
    add_log_entry(12,trp.player,-1,_g_talk_troop,_g_talk_x_troop_faction)
defeat_lord_answer_defeat_lord_answer_1.codeBlock = code


defeat_lord_answer_1_close_window = Dialog("anyone", "I am at your mercy.", starting_state="defeat_lord_answer_1", ending_state="close_window")


defeat_lord_answer_defeat_lord_answer_2 = Dialog("anyone|plyr", "You have fought well. You are free to go.", starting_state="defeat_lord_answer", ending_state="defeat_lord_answer_2")
def code():
    change_player_relation_with_troop(_g_talk_troop,5)
    change_player_honor(3)
    add_log_entry(13,trp.player,-1,_g_talk_troop,_g_talk_x_troop_faction)
defeat_lord_answer_defeat_lord_answer_2.codeBlock = code


defeat_lord_answer_2_close_window = Dialog("anyone", "{s43}", starting_state="defeat_lord_answer_2", ending_state="close_window")
def code():
    lord_comment_to_s43(_g_talk_troop,gstr.prisoner_released_default)
defeat_lord_answer_2_close_window.codeBlock = code


start_party_encounter_lord_hostile_attacker = Dialog("anyone", "{playername}!", starting_state="start", ending_state="party_encounter_lord_hostile_attacker")
def condition():
    if _talk_context == 2 and troop_slot_eq(_g_talk_troop,2,2) and _g_encountered_party_relation < 0 and encountered_party_is_attacker() and _g_talk_troop_met == 1:
        pass
start_party_encounter_lord_hostile_attacker.conditionBlock = condition


start_party_encounter_lord_hostile_attacker_1 = Dialog("anyone", "Halt!", starting_state="start", ending_state="party_encounter_lord_hostile_attacker")
def condition():
    if _talk_context == 2 and troop_slot_eq(_g_talk_troop,2,2) and _g_encountered_party_relation < 0 and encountered_party_is_attacker():
        pass
start_party_encounter_lord_hostile_attacker_1.conditionBlock = condition


party_encounter_lord_hostile_attacker_party_encounter_lord_hostile_attacker = Dialog("anyone", "{s42}", starting_state="party_encounter_lord_hostile_attacker", ending_state="party_encounter_lord_hostile_attacker")
def condition():
    if _g_comment_found > 0:
        pass
party_encounter_lord_hostile_attacker_party_encounter_lord_hostile_attacker.conditionBlock = condition
def code():
    if _log_comment_relation_change != 0:
        change_player_relation_with_troop(_g_talk_troop,_log_comment_relation_change)
    #end
    _g_comment_found = 0
party_encounter_lord_hostile_attacker_party_encounter_lord_hostile_attacker.codeBlock = code


party_encounter_lord_hostile_attacker_party_encounter_lord_hostile_attacker_2 = Dialog("anyone", "{s43}", starting_state="party_encounter_lord_hostile_attacker", ending_state="party_encounter_lord_hostile_attacker_2")
def code():
    lord_comment_to_s43(_g_talk_troop,gstr.surrender_demand_default)
party_encounter_lord_hostile_attacker_party_encounter_lord_hostile_attacker_2.codeBlock = code


party_encounter_lord_hostile_attacker_2_close_window = Dialog("anyone|plyr", "We will fight you to the end!", starting_state="party_encounter_lord_hostile_attacker_2", ending_state="close_window")


party_encounter_lord_hostile_attacker_2_lord_recruit_1_relation = Dialog("anyone|plyr", "Stay your hand! There is something I must tell you in private.", starting_state="party_encounter_lord_hostile_attacker_2", ending_state="lord_recruit_1_relation")
def condition():
    if is_between(_g_talk_troop,trp.npc1,trp.knight_1_1_wife) and not faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop):
        pass
party_encounter_lord_hostile_attacker_2_lord_recruit_1_relation.conditionBlock = condition


party_encounter_lord_hostile_attacker_2_party_encounter_offer_dont_fight = Dialog("anyone|plyr", "Is there no way to avoid this battle? I don't want to fight with you.", starting_state="party_encounter_lord_hostile_attacker_2", ending_state="party_encounter_offer_dont_fight")


party_encounter_lord_hostile_attacker_2_close_window_1 = Dialog("anyone|plyr", "Don't attack! We surrender.", starting_state="party_encounter_lord_hostile_attacker_2", ending_state="close_window")
def code():
    _g_player_surrenders = 1
party_encounter_lord_hostile_attacker_2_close_window_1.codeBlock = code


party_encounter_offer_dont_fight_close_window = Dialog("anyone", "I owe you a favor, don't I. Well... all right then. I will let you go just this once.", starting_state="party_encounter_offer_dont_fight", ending_state="close_window")
def condition():
    if _g_talk_troop_effective_relation > 30:
        pass
party_encounter_offer_dont_fight_close_window.conditionBlock = condition
def code():
    change_player_relation_with_troop(_g_talk_troop,-7)
    cur_hours_001 = store_current_hours()
    cur_hours_001 += 72
    party_set_slot(_g_encountered_party,3,cur_hours_001)
    party_ignore_player(_g_encountered_party,72)
    _g_leave_encounter = 1
party_encounter_offer_dont_fight_close_window.codeBlock = code


party_encounter_offer_dont_fight_close_window_1 = Dialog("anyone", "{s43}", starting_state="party_encounter_offer_dont_fight", ending_state="close_window")
def condition():
    lord_comment_to_s43(_g_talk_troop,gstr.lord_declines_negotiation_offer_default)
party_encounter_offer_dont_fight_close_window_1.conditionBlock = condition


start_lord_requests_recruitment = Dialog("anyone", "{s9}", starting_state="start", ending_state="lord_requests_recruitment")
def condition():
    if _g_talk_x_troop_faction == fac.player_supporters_faction and is_between(_g_talk_troop,trp.npc1,trp.knight_1_1_wife) and troop_slot_eq(_g_talk_troop,2,0) and _g_talk_troop != _g_player_minister:
        troop_slot_001 = troop_get_slot(_g_talk_troop,14)
        faction_slot_002 = faction_get_slot(troop_slot_001,11)
        s10 = str_store_troop_name(faction_slot_002)
        s9 = str_store_string(gstr.lord_indicted_dialog_approach)
start_lord_requests_recruitment.conditionBlock = condition


lord_requests_recruitment_close_window = Dialog("anyone|plyr", "{s9}", starting_state="lord_requests_recruitment", ending_state="close_window")
def condition():
    s9 = str_store_string(gstr.lord_indicted_dialog_approach_yes)
lord_requests_recruitment_close_window.conditionBlock = condition
def code():
    troop_set_slot(_g_talk_troop,2,2)
lord_requests_recruitment_close_window.codeBlock = code


lord_requests_recruitment_lord_requests_recruitment_refuse = Dialog("anyone|plyr", "{s9}", starting_state="lord_requests_recruitment", ending_state="lord_requests_recruitment_refuse")
def condition():
    s9 = str_store_string(gstr.lord_indicted_dialog_approach_no)
lord_requests_recruitment_lord_requests_recruitment_refuse.conditionBlock = condition


lord_requests_recruitment_refuse_close_window = Dialog("anyone", "{s9}", starting_state="lord_requests_recruitment_refuse", ending_state="close_window")
def condition():
    s9 = str_store_string(gstr.lord_indicted_dialog_rejected)
lord_requests_recruitment_refuse_close_window.conditionBlock = condition
def code():
    _g_leave_encounter = 1
    troop_change_relation_with_troop(_g_talk_troop,trp.player,-10)
    lord_find_alternative_faction(_g_talk_troop)
    var001 = reg0
    if is_between(var001,fac.player_supporters_faction,fac.kingdoms_end):
        troop_slot_002 = troop_get_slot(_g_talk_troop,14)
        s1 = str_store_troop_name(_g_talk_troop)
        s2 = str_store_faction_name(var001)
        s3 = str_store_faction_name(troop_slot_002)
        troop_set_slot(_g_talk_troop,2,2)
        change_troop_faction(_g_talk_troop,var001)
        reg4 = troop_get_type(_g_talk_troop)
        print(gstr.lord_defects_ordinary)
    else:
        change_troop_faction(_g_talk_troop,fac.outlaws)
    #end
lord_requests_recruitment_refuse_close_window.codeBlock = code


start_supported_pretender_talk = Dialog("anyone", "I await your counsel, {playername}.", starting_state="start", ending_state="supported_pretender_talk")
def condition():
    if is_between(_g_talk_troop,trp.kingdom_1_pretender,trp.knight_1_1_wife) and _g_talk_troop == _supported_pretender:
        pass
start_supported_pretender_talk.conditionBlock = condition


start_pretender_intro_1 = Dialog("anyone", "Do I know you?.", starting_state="start", ending_state="pretender_intro_1")
def condition():
    if is_between(_g_talk_troop,trp.kingdom_1_pretender,trp.knight_1_1_wife) and not troop_slot_eq(_g_talk_troop,2,2):
        if _g_talk_troop_met == 0 and not faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop):
            _pretender_told_story = 0
start_pretender_intro_1.conditionBlock = condition


pretender_intro_1_pretender_intro_2 = Dialog("anyone|plyr", "My name is {playername}. At your service.", starting_state="pretender_intro_1", ending_state="pretender_intro_2")


pretender_intro_1_pretender_intro_2_1 = Dialog("anyone|plyr", "I am {playername}. Perhaps you have heard of my exploits.", starting_state="pretender_intro_1", ending_state="pretender_intro_2")


pretender_intro_2_pretender_intro_3 = Dialog("anyone", "{s48}", starting_state="pretender_intro_2", ending_state="pretender_intro_3")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,14)
    troop_slot_001 -= fac.kingdom_1
    troop_slot_001 += gstr.swadian_rebellion_pretender_intro
    s48 = str_store_string(troop_slot_001)
pretender_intro_2_pretender_intro_3.conditionBlock = condition


pretender_intro_3_pretender_rebellion_cause_1 = Dialog("anyone|plyr", "I thought {s12} was ruled by {s11}?", starting_state="pretender_intro_3", ending_state="pretender_rebellion_cause_1")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,14)
    s12 = str_store_faction_name(troop_slot_001)
    faction_slot_002 = faction_get_slot(troop_slot_001,11)
    s11 = str_store_troop_name(faction_slot_002)
pretender_intro_3_pretender_rebellion_cause_1.conditionBlock = condition
def code():
    troop_set_slot(_g_talk_troop,78,1)
pretender_intro_3_pretender_rebellion_cause_1.codeBlock = code


start_pretender_start = Dialog("anyone", "Greetings, {playername}", starting_state="start", ending_state="pretender_start")
def condition():
    if is_between(_g_talk_troop,trp.kingdom_1_pretender,trp.knight_1_1_wife) and not faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop) and not troop_slot_eq(_g_talk_troop,2,2):
        pass
start_pretender_start.conditionBlock = condition
def code():
    _pretender_told_story = 0
start_pretender_start.codeBlock = code


pretender_start_pretender_rebellion_cause_prelim = Dialog("anyone|plyr", "What was your story again, {reg65?my lady:sir}?", starting_state="pretender_start", ending_state="pretender_rebellion_cause_prelim")
def condition():
    if troop_slot_eq(_g_talk_troop,78,1) and _pretender_told_story == 0:
        pass
pretender_start_pretender_rebellion_cause_prelim.conditionBlock = condition


pretender_rebellion_cause_prelim_pretender_rebellion_cause_1 = Dialog("anyone", "I shall tell you.", starting_state="pretender_rebellion_cause_prelim", ending_state="pretender_rebellion_cause_1")


pretender_rebellion_cause_1_pretender_rebellion_cause_2 = Dialog("anyone", "{s48}", starting_state="pretender_rebellion_cause_1", ending_state="pretender_rebellion_cause_2")
def code():
    _pretender_told_story = 1
    troop_slot_001 = troop_get_slot(_g_talk_troop,14)
    troop_slot_001 -= fac.kingdom_1
    troop_slot_001 += gstr.swadian_rebellion_pretender_story_1
    s48 = str_store_string(troop_slot_001)
pretender_rebellion_cause_1_pretender_rebellion_cause_2.codeBlock = code


pretender_rebellion_cause_2_pretender_rebellion_cause_3 = Dialog("anyone", "{s48}", starting_state="pretender_rebellion_cause_2", ending_state="pretender_rebellion_cause_3")
def code():
    troop_slot_001 = troop_get_slot(_g_talk_troop,14)
    troop_slot_001 -= fac.kingdom_1
    troop_slot_001 += gstr.swadian_rebellion_pretender_story_2
    s48 = str_store_string(troop_slot_001)
pretender_rebellion_cause_2_pretender_rebellion_cause_3.codeBlock = code


pretender_rebellion_cause_3_pretender_start = Dialog("anyone", "{s48}", starting_state="pretender_rebellion_cause_3", ending_state="pretender_start")
def code():
    troop_slot_001 = troop_get_slot(_g_talk_troop,14)
    troop_slot_001 -= fac.kingdom_1
    troop_slot_001 += gstr.swadian_rebellion_pretender_story_3
    s48 = str_store_string(troop_slot_001)
pretender_rebellion_cause_3_pretender_start.codeBlock = code


pretender_start_pretender_discuss_rebellion_1 = Dialog("anyone|plyr", "I want to take up your cause and help you reclaim your throne!", starting_state="pretender_start", ending_state="pretender_discuss_rebellion_1")
def condition():
    if troop_slot_eq(_g_talk_troop,78,1):
        pass
pretender_start_pretender_discuss_rebellion_1.conditionBlock = condition


pretender_start_pretender_end = Dialog("anyone|plyr", "I must leave now.", starting_state="pretender_start", ending_state="pretender_end")


pretender_discuss_rebellion_1_pretender_discuss_rebellion_2a = Dialog("anyone", "Are you sure you will be up to the task, {playername}? Reclaiming my throne will be no simple matter. The lords of our realm have all sworn oaths of homage to {s11}. Such oaths to a usurper are of course invalid, and we can expect some of the lords to side with us, but it will be a very tough and challenging struggle ahead.", starting_state="pretender_discuss_rebellion_1", ending_state="pretender_discuss_rebellion_2a")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,14)
    faction_slot_002 = faction_get_slot(troop_slot_001,11)
    s11 = str_store_troop_name(faction_slot_002)
pretender_discuss_rebellion_1_pretender_discuss_rebellion_2a.conditionBlock = condition


pretender_discuss_rebellion_2a_pretender_discuss_rebellion_2 = Dialog("anyone", "{s11}", starting_state="pretender_discuss_rebellion_2a", ending_state="pretender_discuss_rebellion_2")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,14)
    faction_slot_002 = faction_get_slot(troop_slot_001,11)
    s12 = str_store_troop_name(faction_slot_002)
    evaluate_realm_stability(troop_slot_001)
    var003 = reg0
    var003 += reg0
    var003 += reg1
    if var003 > 60:
        s11 = str_store_string(gstr.one_thing_in_our_favor_is_that_s12s_grip_is_very_shaky_he_rules_over_a_labyrinth_of_rivalries_and_grudges_lords_often_fail_to_cooperate_and_many_would_happily_seek_a_better_liege)
    elif is_between(var003,40,60):
        s11 = str_store_string(gstr.thankfully_s12s_grip_is_fairly_shaky_many_lords_do_not_cooperate_with_each_other_and_some_might_be_tempted_to_seek_a_better_liege)
    elif is_between(var003,20,40):
        s11 = str_store_string(gstr.unfortunately_s12s_grip_is_fairly_strong_until_we_can_shake_it_we_may_have_to_look_long_and_hard_for_allies)
    elif var003 < 20:
        s11 = str_store_string(gstr.unfortunately_s12s_grip_is_very_strong_unless_we_can_loosen_it_it_may_be_difficult_to_find_allies)
    #end
pretender_discuss_rebellion_2a_pretender_discuss_rebellion_2.conditionBlock = condition


pretender_discuss_rebellion_2_pretender_discuss_rebellion_3 = Dialog("anyone|plyr", "I am ready for this struggle.", starting_state="pretender_discuss_rebellion_2", ending_state="pretender_discuss_rebellion_3")


pretender_discuss_rebellion_2_pretender_end = Dialog("anyone|plyr", "You are right. Perhaps, I should think about this some more.", starting_state="pretender_discuss_rebellion_2", ending_state="pretender_end")


pretender_discuss_rebellion_3_close_window = Dialog("anyone", "I have no doubt that your support for my cause is heartfelt, {playername}, and I am grateful to you for it. But I don't think we have much of a chance of success. If you can gain renown in the battlefield and make a name for yourself as a great commander, then our friends would not hesitate to join our cause, and our enemies would be wary to take up arms against us. When that time comes, I will come with you gladly. But until that time, it will be wiser not to openly challange the usurper, {s11}.", starting_state="pretender_discuss_rebellion_3", ending_state="close_window")
def condition():
    if faction_slot_eq(fac.player_supporters_faction,21,0) or not faction_slot_eq(fac.player_supporters_faction,11,trp.player) and not troop_slot_ge(trp.player,7,200):
        troop_slot_001 = troop_get_slot(_g_talk_troop,14)
        faction_slot_002 = faction_get_slot(troop_slot_001,11)
        s11 = str_store_troop_name(faction_slot_002)
pretender_discuss_rebellion_3_close_window.conditionBlock = condition


pretender_discuss_rebellion_3_close_window_1 = Dialog("anyone", "Haven't you already taken up the cause of {s17}? You must have a very strong sense of justice, indeed. But no, thank you. I will not be part of your game.", starting_state="pretender_discuss_rebellion_3", ending_state="close_window")
def condition():
    if faction_slot_eq(fac.player_supporters_faction,21,0) or not faction_slot_eq(fac.player_supporters_faction,11,trp.player) and _supported_pretender > 0:
        s17 = str_store_troop_name(_supported_pretender)
pretender_discuss_rebellion_3_close_window_1.conditionBlock = condition


pretender_discuss_rebellion_3_close_window_2 = Dialog("anyone", "{playername}, you are already oath-bound to serve {s15}. As such, I cannot allow you to take up my cause, and let my enemies claim that I am but a mere puppet of {s16}. No, if I am to have the throne of {s17}, I must do it due to the righteousness of my cause and the support of my subjects alone. If you want to help me, you must first free yourself of your oath to {s15}.", starting_state="pretender_discuss_rebellion_3", ending_state="close_window")
def condition():
    if faction_slot_eq(fac.player_supporters_faction,21,0) or not faction_slot_eq(fac.player_supporters_faction,11,trp.player) and _players_kingdom > 0 and _players_kingdom != fac.player_supporters_faction and _players_kingdom != fac.player_faction:
        troop_slot_001 = troop_get_slot(_g_talk_troop,14)
        if _players_kingdom != troop_slot_001 and _player_has_homage == 1:
            s16 = str_store_faction_name(_players_kingdom)
            faction_slot_002 = faction_get_slot(_players_kingdom,11)
            s15 = str_store_troop_name(faction_slot_002)
            s17 = str_store_faction_name(troop_slot_001)
pretender_discuss_rebellion_3_close_window_2.conditionBlock = condition


pretender_discuss_rebellion_3_close_window_3 = Dialog("anyone", "You are a monarch in your own right, {sir/my lady}. If you were to back me, I would be merely your puppet.", starting_state="pretender_discuss_rebellion_3", ending_state="close_window")
def condition():
    if faction_slot_eq(fac.player_supporters_faction,21,0) and faction_slot_eq(fac.player_supporters_faction,11,trp.player):
        pass
pretender_discuss_rebellion_3_close_window_3.conditionBlock = condition


pretender_discuss_rebellion_3_pretender_rebellion_ready = Dialog("anyone", "You are a capable warrior, {playername}, and I am sure with your renown as a commander, and my righteous cause, the nobles and the good people of {s12} will flock to our support. The time is ripe for us to act! I will come with you, and together, we will topple the usurper {s11} and take the throne from his bloodied hands. But first, you must give me your oath of homage and accept me as your liege {reg65?lady:lord}.", starting_state="pretender_discuss_rebellion_3", ending_state="pretender_rebellion_ready")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,14)
    s12 = str_store_faction_name(troop_slot_001)
    faction_slot_002 = faction_get_slot(troop_slot_001,11)
    s11 = str_store_troop_name(faction_slot_002)
pretender_discuss_rebellion_3_pretender_rebellion_ready.conditionBlock = condition


pretender_rebellion_ready_lord_give_oath_2 = Dialog("anyone|plyr", "I am ready to pledge myself to your cause, {reg3?my lady:sir}.", starting_state="pretender_rebellion_ready", ending_state="lord_give_oath_2")
def condition():
    reg3 = troop_get_type(_g_talk_troop)
pretender_rebellion_ready_lord_give_oath_2.conditionBlock = condition


pretender_rebellion_ready_pretender_end = Dialog("anyone|plyr", "Let us bide our time a little longer.", starting_state="pretender_rebellion_ready", ending_state="pretender_end")


lord_give_conclude_2_close_window = Dialog("anyone", "Forward, then! Our first task is to take hold of a fortress and persuade other lords to join us. You lead the way!", starting_state="lord_give_conclude_2", ending_state="close_window")
def condition():
    if is_between(_g_talk_troop,trp.kingdom_1_pretender,trp.knight_1_1_wife) and not troop_slot_eq(_g_talk_troop,2,2):
        pass
lord_give_conclude_2_close_window.conditionBlock = condition
def code():
    change_player_relation_with_troop(_g_talk_troop,50)
    faction_set_slot(_g_talk_x_troop_faction,21,0)
    party_force_add_members(p.main_party,_supported_pretender,1)
    troop_set_slot(_supported_pretender,12,0)
    troop_set_auto_equip(_supported_pretender,0)
    s6 = str_store_troop_name_link(_supported_pretender)
    print("@{s6} has joined your party.")
    faction_relation_001 = store_relation(_supported_pretender_old_faction,fac.player_supporters_faction)
    val_min(faction_relation_001,-50)
    set_player_relation_with_faction(_supported_pretender_old_faction,faction_relation_001)
    faction_slot_002 = faction_get_slot(_supported_pretender_old_faction,22)
    s1 = str_store_string(faction_slot_002)
    faction_set_name(fac.player_supporters_faction,"@{s1} Rebels")
    faction_set_color(fac.player_supporters_faction,16711680)
    update_all_notes()
lord_give_conclude_2_close_window.codeBlock = code


pretender_end_close_window = Dialog("anyone", "Farewell for now, then.", starting_state="pretender_end", ending_state="close_window")


start_lord_event_choose_friend = Dialog("anyone", "I heard that you have befriended that {s43} called {s6}. Believe me, you can't trust that man. You should end your dealings with him.", starting_state="start", ending_state="lord_event_choose_friend")
def condition():
    if troop_slot_eq(_g_talk_troop,2,2) and _g_talk_troop_met != 0 and _g_time_since_last_talk > 24 and _g_talk_troop_relation > -10:
        random_x_001 = store_random_in_range(0,100)
        if random_x_001 < 30 and _talk_context == 0 and cf_troop_get_random_enemy_troop_with_occupation(_g_talk_troop,2):
            troop_id_002 = reg0
            troop_slot_003 = troop_get_slot(troop_id_002,22)
            if troop_slot_003 >= 20:
                s6 = str_store_troop_name(troop_id_002)
                _temp = troop_id_002
start_lord_event_choose_friend.conditionBlock = condition
def code():
    lord_comment_to_s43(_g_talk_troop,gstr.lord_insult_default)
start_lord_event_choose_friend.codeBlock = code


lord_event_choose_friend_lord_event_choose_friend_renounce = Dialog("anyone|plyr", "I assure you, {s65}, I am no friend of {s6}.", starting_state="lord_event_choose_friend", ending_state="lord_event_choose_friend_renounce")
def code():
    change_player_relation_with_troop(_g_talk_troop,5)
    change_player_relation_with_troop(_temp,-10)
lord_event_choose_friend_lord_event_choose_friend_renounce.codeBlock = code


lord_event_choose_friend_renounce_lord_pretalk = Dialog("anyone", "Glad news, {playername}. I would fear for your safety otherwise. If you do encounter {s6}, be on your guard and don't believe a word.", starting_state="lord_event_choose_friend_renounce", ending_state="lord_pretalk")


lord_event_choose_friend_lord_event_choose_friend_defend = Dialog("anyone|plyr", "{s6} is an honourable man, you've no right to speak of him thus.", starting_state="lord_event_choose_friend", ending_state="lord_event_choose_friend_defend")
def code():
    change_player_relation_with_troop(_g_talk_troop,-10)
    change_player_relation_with_troop(_temp,5)
lord_event_choose_friend_lord_event_choose_friend_defend.codeBlock = code


lord_event_choose_friend_defend_lord_pretalk = Dialog("anyone", "As you like, {playername}. A fool you might be, but a loyal fool at the least. {s6}'s loyalty may not be so steadfast, however...", starting_state="lord_event_choose_friend_defend", ending_state="lord_pretalk")


lord_event_choose_friend_lord_event_choose_friend_neutral = Dialog("anyone|plyr", "I don't want to be involved in your quarrel with {s6}.", starting_state="lord_event_choose_friend", ending_state="lord_event_choose_friend_neutral")
def code():
    change_player_relation_with_troop(_g_talk_troop,-2)
    change_player_relation_with_troop(_temp,-3)
lord_event_choose_friend_lord_event_choose_friend_neutral.codeBlock = code


lord_event_choose_friend_neutral_lord_pretalk = Dialog("anyone", "Hmph. As you wish, {playername}. Just remember that a {man/woman} needs friends in this world, and you'll never make any if you never stand with anyone.", starting_state="lord_event_choose_friend_neutral", ending_state="lord_pretalk")


start_lord_start_4 = Dialog("anyone", "Yes, my wife?", starting_state="start", ending_state="lord_start")
def condition():
    if troop_slot_eq(_g_talk_troop,2,2) and troop_slot_eq(trp.player,30,_g_talk_troop):
        pass
start_lord_start_4.conditionBlock = condition


start_lord_start_5 = Dialog("anyone", "Yes, {sire/my lady}?", starting_state="start", ending_state="lord_start")
def condition():
    if faction_slot_eq(_g_talk_x_troop_faction,11,trp.player) and troop_slot_eq(_g_talk_troop,2,2) and _talk_context <= 4:
        pass
start_lord_start_5.conditionBlock = condition


start_lord_start_6 = Dialog("anyone", "It is good to see you, old friend.", starting_state="start", ending_state="lord_start")
def condition():
    if is_between(_g_talk_troop,trp.npc1,trp.kingdom_1_lord) and troop_slot_eq(_g_talk_troop,2,2) and _talk_context <= 4:
        pass
start_lord_start_6.conditionBlock = condition


start_lord_invite_player_monarch_1 = Dialog("anyone", "Well, {playername}. I am willing to forgive your impudence in proclaiming yourself {king/queen}, and will welcome you into my realm with full honor, as one of my vassals. Shall we proceed to the oath of allegiance?", starting_state="start", ending_state="lord_invite_player_monarch_1")
def condition():
    if troop_slot_eq(_g_talk_troop,2,2) and check_quest_active(qst.join_faction) and _g_invite_faction_lord == _g_talk_troop and _players_kingdom == fac.player_supporters_faction:
        pass
start_lord_invite_player_monarch_1.conditionBlock = condition


lord_invite_player_monarch_1_lord_invite_2 = Dialog("anyone|plyr", "Yes... my lord.", starting_state="lord_invite_player_monarch_1", ending_state="lord_invite_2")


lord_invite_player_monarch_1_lord_enter_service_reject = Dialog("anyone|plyr", "No. That oath sticks in my throat.", starting_state="lord_invite_player_monarch_1", ending_state="lord_enter_service_reject")


start_lord_invite_1 = Dialog("anyone", "{playername}, I've been expecting you. Word has reached my ears of your exploits. Why, I keep hearing such tales of prowess and bravery that my mind was quickly made up. I knew that I had found someone worthy of becoming my vassal.", starting_state="start", ending_state="lord_invite_1")
def condition():
    if troop_slot_eq(_g_talk_troop,2,2) and check_quest_active(qst.join_faction) and _g_invite_faction_lord == _g_talk_troop:
        if _g_invite_offered_center > 0:
            party_faction_001 = store_faction_of_party(_g_invite_offered_center)
            if party_faction_001 != _g_talk_x_troop_faction:
                get_poorest_village_of_faction(_g_talk_x_troop_faction)
                _g_invite_offered_center = reg0
            #end
        #end
    #end
start_lord_invite_1.conditionBlock = condition


lord_invite_1_lord_invite_2 = Dialog("anyone|plyr", "Thank you, {s65}, you honour me with your offer.", starting_state="lord_invite_1", ending_state="lord_invite_2")


lord_invite_1_lord_invite_2_1 = Dialog("anyone|plyr", "It is good to have my true value recognised.", starting_state="lord_invite_1", ending_state="lord_invite_2")


lord_invite_2_lord_invite_3 = Dialog("anyone", "Aye. Let us dispense with the formalities, {playername}; are you ready to swear homage to me?", starting_state="lord_invite_2", ending_state="lord_invite_3")


lord_invite_3_lord_give_oath_2 = Dialog("anyone|plyr", "Yes, {s65}.", starting_state="lord_invite_3", ending_state="lord_give_oath_2")


lord_invite_3_lord_enter_service_reject = Dialog("anyone|plyr", "No, {s65}. I cannot serve you right now.", starting_state="lord_invite_3", ending_state="lord_enter_service_reject")


start_lord_female_pc_marriage_proposal = Dialog("anyone", "My lady, I have been giving much thought to our recent conversation. It is time for me to ask. Would you do me the honor of becoming my wife?", starting_state="start", ending_state="lord_female_pc_marriage_proposal")
def condition():
    if troop_slot_eq(_g_talk_troop,5,2) and _g_talk_troop_relation > 10 and _g_time_since_last_talk > 3:
        troop_type_001 = troop_get_type(trp.player)
        if troop_type_001 == 1 and troop_slot_eq(trp.player,30,-1) and troop_slot_eq(trp.player,34,-1) and troop_slot_eq(_g_talk_troop,30,-1) and troop_slot_eq(_g_talk_troop,34,-1):
            if reg0 >= 1:
                npc_decision_checklist_marry_female_pc(_g_talk_troop)
start_lord_female_pc_marriage_proposal.conditionBlock = condition


lord_female_pc_marriage_proposal_lord_marriage_proposal_female_pc_next_step = Dialog("anyone|plyr", "Yes. I would.", starting_state="lord_female_pc_marriage_proposal", ending_state="lord_marriage_proposal_female_pc_next_step")


lord_female_pc_marriage_proposal_lord_female_pc_marriage_proposal_postponed = Dialog("anyone|plyr", "Let me think about this some more.", starting_state="lord_female_pc_marriage_proposal", ending_state="lord_female_pc_marriage_proposal_postponed")


lord_female_pc_marriage_proposal_lord_female_pc_marriage_proposal_rejected = Dialog("anyone|plyr", "No. I have decided that it would not be appropriate", starting_state="lord_female_pc_marriage_proposal", ending_state="lord_female_pc_marriage_proposal_rejected")


lord_female_pc_marriage_proposal_postponed_lord_start = Dialog("anyone", "Of course, my lady. Take all the time you need.", starting_state="lord_female_pc_marriage_proposal_postponed", ending_state="lord_start")


lord_female_pc_marriage_proposal_rejected_lord_female_pc_marriage_proposal_rejected_confirm = Dialog("anyone", "Do you mean to reject my suit outright, my lady?", starting_state="lord_female_pc_marriage_proposal_rejected", ending_state="lord_female_pc_marriage_proposal_rejected_confirm")


lord_female_pc_marriage_proposal_rejected_confirm_lord_female_pc_marriage_proposal_rejected_confirm_yes = Dialog("anyone|plyr", "Yes. I do.", starting_state="lord_female_pc_marriage_proposal_rejected_confirm", ending_state="lord_female_pc_marriage_proposal_rejected_confirm_yes")


lord_female_pc_marriage_proposal_rejected_confirm_lord_female_pc_marriage_proposal_postponed = Dialog("anyone|plyr", "No, you misunderstand. I just need some more time to think", starting_state="lord_female_pc_marriage_proposal_rejected_confirm", ending_state="lord_female_pc_marriage_proposal_postponed")


lord_female_pc_marriage_proposal_rejected_confirm_yes_close_window = Dialog("anyone", "Well, in that case, let me tell you something -- with those harsh words, you have removed the scales from my eyes. I would agree that it would not be appropriate for me to marry one such as you. Good day, my lady.", starting_state="lord_female_pc_marriage_proposal_rejected_confirm_yes", ending_state="close_window")
def condition():
    if troop_slot_eq(_g_talk_troop,52,5) or troop_slot_eq(_g_talk_troop,52,3) or troop_slot_eq(_g_talk_troop,52,2):
        pass
lord_female_pc_marriage_proposal_rejected_confirm_yes_close_window.conditionBlock = condition
def code():
    troop_change_relation_with_troop(_g_talk_troop,trp.player,-20)
    troop_set_slot(_g_talk_troop,5,4)
    _g_leave_encounter = 1
lord_female_pc_marriage_proposal_rejected_confirm_yes_close_window.codeBlock = code


lord_female_pc_marriage_proposal_rejected_confirm_yes_close_window_1 = Dialog("anyone", "Such is your right, my lady. If you ever wished to reconsider, I would be overwhelmed with joy.", starting_state="lord_female_pc_marriage_proposal_rejected_confirm_yes", ending_state="close_window")
def code():
    troop_change_relation_with_troop(_g_talk_troop,trp.player,-5)
    troop_set_slot(_g_talk_troop,5,4)
    _g_leave_encounter = 1
lord_female_pc_marriage_proposal_rejected_confirm_yes_close_window_1.codeBlock = code


start_lord_start_7 = Dialog("anyone", "My lady, it brings my heart great joy to see you again...", starting_state="start", ending_state="lord_start")
def condition():
    if troop_slot_eq(_g_talk_troop,5,2) and _g_time_since_last_talk > 24 and _g_talk_troop_relation > 0:
        if troop_type_001 == 1 and troop_slot_eq(trp.player,30,-1) and troop_slot_eq(trp.player,34,-1) and troop_slot_eq(_g_talk_troop,30,-1) and troop_slot_eq(_g_talk_troop,34,-1):
            troop_type_001 = troop_get_type(trp.player)
start_lord_start_7.conditionBlock = condition
def code():
    troop_change_relation_with_troop(trp.player,_g_talk_troop,2)
start_lord_start_7.codeBlock = code


start_lord_start_8 = Dialog("anyone", "My lady, I am always your humble servant", starting_state="start", ending_state="lord_start")
def condition():
    if troop_slot_eq(_g_talk_troop,5,2) and _g_talk_troop_relation > 0:
        if troop_type_001 == 1:
            troop_type_001 = troop_get_type(trp.player)
start_lord_start_8.conditionBlock = condition


start_lord_start_9 = Dialog("anyone", "If it isn't my brave champion, {playername}...", starting_state="start", ending_state="lord_start")
def condition():
    if troop_slot_eq(_g_talk_troop,2,2) and _g_talk_troop_met != 0 and _g_time_since_last_talk > 24 and _g_talk_troop_relation > 50 and _g_talk_x_troop_faction_relation > 10 and _talk_context <= 4:
        pass
start_lord_start_9.conditionBlock = condition


start_lord_start_10 = Dialog("anyone", "Good to see you again {playername}...", starting_state="start", ending_state="lord_start")
def condition():
    if troop_slot_eq(_g_talk_troop,2,2) and _g_talk_troop_met != 0 and _g_time_since_last_talk > 24 and _g_talk_troop_relation > 10 and _talk_context <= 4:
        pass
start_lord_start_10.conditionBlock = condition


start_lord_start_11 = Dialog("anyone", "We meet again, {playername}...", starting_state="start", ending_state="lord_start")
def condition():
    if troop_slot_eq(_g_talk_troop,2,2) and _g_talk_troop_met != 0 and _g_time_since_last_talk > 24 and _talk_context <= 4:
        pass
start_lord_start_11.conditionBlock = condition


start_lord_meet_neutral = Dialog("anyone", "Do I know you?", starting_state="start", ending_state="lord_meet_neutral")
def condition():
    if troop_slot_eq(_g_talk_troop,2,2) and _g_talk_troop_met == 0 and _g_talk_x_troop_faction_relation >= 0 and _talk_context <= 4:
        pass
start_lord_meet_neutral.conditionBlock = condition


lord_meet_neutral_lord_intro = Dialog("anyone|plyr", "I am {playername}.", starting_state="lord_meet_neutral", ending_state="lord_intro")


lord_meet_neutral_lord_intro_1 = Dialog("anyone|plyr", "My name is {playername}. At your service sir.", starting_state="lord_meet_neutral", ending_state="lord_intro")


lord_intro_lord_start = Dialog("anyone", "{s11}", starting_state="lord_intro", ending_state="lord_start")
def code():
    faction_slot_001 = faction_get_slot(_g_talk_x_troop_faction,11)
    s6 = str_store_faction_name(_g_talk_x_troop_faction)
    reg4 = 0
    s4 = str_store_troop_name(_g_talk_troop)
    if faction_slot_001 == _g_talk_troop:
        s9 = str_store_string("@I am {s4};;; the ruler of {s6}")
    else:
        s9 = str_store_string("@I am {s4};;; a vassal of {s6}")
    #end
    var002 = 0
    str_clear(8)
    for p_003 in range(p.town_1, p.salt_mine):
        if party_slot_eq(p_003,7,_g_talk_troop):
            if var002 == 0:
                s8 = str_store_party_name(p_003)
            elif var002 == 1:
                s7 = str_store_party_name(p_003)
                s8 = str_store_string("@{s7} and {s8}")
            else:
                s7 = str_store_party_name(p_003)
                s8 = str_store_string("@{!}{s7};;; {s8}")
            #end
        #end
        var002 += 1
    #end
    reg5 = var002
    s11 = str_store_string("@{s9}{reg5? and the lord of {s8}.:.")
lord_intro_lord_start.codeBlock = code


start_lord_meet_enemy = Dialog("anyone", "{s43}", starting_state="start", ending_state="lord_meet_enemy")
def condition():
    if troop_slot_eq(_g_talk_troop,2,2) and _g_talk_troop_met == 0 and _g_talk_x_troop_faction_relation < 0 and _talk_context <= 4:
        pass
start_lord_meet_enemy.conditionBlock = condition
def code():
    lord_comment_to_s43(_g_talk_troop,gstr.enemy_meet_default)
start_lord_meet_enemy.codeBlock = code


lord_meet_enemy_lord_intro = Dialog("anyone|plyr", "I am {playername}, {s65}.", starting_state="lord_meet_enemy", ending_state="lord_intro")


lord_meet_enemy_lord_intro_1 = Dialog("anyone|plyr", "They know me as {playername}. Mark it down, you shall be hearing of me a lot.", starting_state="lord_meet_enemy", ending_state="lord_intro")


start_lord_start_12 = Dialog("anyone", "{s8}", starting_state="start", ending_state="lord_start")
def condition():
    if troop_slot_eq(_g_talk_troop,2,2) and _talk_context <= 4:
        if troop_slot_eq(_g_talk_troop,52,5) or troop_slot_eq(_g_talk_troop,52,2) and _g_talk_troop_relation < -15:
            s8 = str_store_string(gstr.playername_come_to_plague_me_some_more_have_you)
        elif _g_talk_troop_relation < -5:
            s8 = str_store_string(gstr.ah_it_is_you_again)
        else:
            s8 = str_store_string(gstr.well_playername)
        #end
    #end
start_lord_start_12.conditionBlock = condition


lord_start_lord_start = Dialog("anyone", "{s42}", starting_state="lord_start", ending_state="lord_start")
def condition():
    if _g_comment_found > 0:
        s1 = str_store_string(_g_last_comment_copied_to_s42)
        if _cheat_mode == 1:
            print(gstr.comment_found_s1)
        #end
    #end
lord_start_lord_start.conditionBlock = condition
def code():
    if _log_comment_relation_change != 0:
        change_player_relation_with_troop(_g_talk_troop,_log_comment_relation_change)
    #end
    _g_comment_has_rejoinder = 0
    if _g_rejoinder_to_last_comment > 0:
        if _cheat_mode == 1:
            print(gstr.rejoinder_noted)
        #end
        _g_comment_has_rejoinder = 1
    #end
    _g_comment_found = 0
lord_start_lord_start.codeBlock = code


lord_start_lair_quest_intermediate_1 = Dialog("anyone|auto_proceed", "{!}.", starting_state="lord_start", ending_state="lair_quest_intermediate_1")
def condition():
    if check_quest_active(qst.destroy_bandit_lair) and check_quest_succeeded(qst.destroy_bandit_lair) and quest_slot_eq(qst.destroy_bandit_lair,6,_g_talk_troop):
        pass
lord_start_lair_quest_intermediate_1.conditionBlock = condition


lair_quest_intermediate_1_lord_pretalk = Dialog("anyone", "Splendid work, {playername} -- your audacious attack is the talk of the realm. No doubt they, or others like them, will soon be back, but for a short while you have bought this land a small respite. We are most grateful to you.", starting_state="lair_quest_intermediate_1", ending_state="lord_pretalk")
def code():
    quest_slot_001 = quest_get_slot(qst.destroy_bandit_lair,22)
    troop_add_gold(trp.player,quest_slot_001)
    var002 = quest_slot_001
    var002 *= 2
    add_xp_as_reward(var002)
    change_troop_renown(trp.player,3)
    troop_change_relation_with_troop(trp.player,_g_talk_troop,4)
    end_quest(qst.destroy_bandit_lair)
    reg5 = quest_slot_001
lair_quest_intermediate_1_lord_pretalk.codeBlock = code


lord_start_lair_quest_intermediate_2 = Dialog("anyone|auto_proceed", "{!}.", starting_state="lord_start", ending_state="lair_quest_intermediate_2")
def condition():
    if check_quest_active(qst.destroy_bandit_lair) and check_quest_failed(qst.destroy_bandit_lair) and quest_slot_eq(qst.destroy_bandit_lair,6,_g_talk_troop):
        pass
lord_start_lair_quest_intermediate_2.conditionBlock = condition


lair_quest_intermediate_2_lord_pretalk = Dialog("anyone", "Well, {playername}, I guess that at least some of those brigands eluded you -- and of course, it will be the peaceful travellers of this land who will pay the price. Still, it was good of you to try.", starting_state="lair_quest_intermediate_2", ending_state="lord_pretalk")
def code():
    end_quest(qst.destroy_bandit_lair)
lair_quest_intermediate_2_lord_pretalk.codeBlock = code


lord_start_lord_generic_mission_completed = Dialog("anyone", "Your surgeon managed to convince my friend and made the operation.  The matter is in God's hands now,, and all we can do is pray for his recovery. Anyway, I thank you for lending your surgeon to me {sir/madam}. You have a noble spirit. I will not forget it.", starting_state="lord_start", ending_state="lord_generic_mission_completed")
def condition():
    if partner_quest_001 == qst.lend_surgeon and quest_slot_eq(qst.lend_surgeon,6,_g_talk_troop):
        partner_quest_001 = store_partner_quest()
lord_start_lord_generic_mission_completed.conditionBlock = condition
def code():
    finish_quest(qst.lend_surgeon,100)
    troop_set_slot(_g_talk_troop,20,1)
lord_start_lord_generic_mission_completed.codeBlock = code


lord_start_wedding_ceremony_bride_vow = Dialog("anyone", "May the heavens witness that I am ready to give you my {s11} {s4}, to have in marriage...", starting_state="lord_start", ending_state="wedding_ceremony_bride_vow")
def condition():
    if troop_slot_eq(_g_talk_troop,2,2) and check_quest_active(qst.wed_betrothed) and quest_slot_eq(qst.wed_betrothed,6,_g_talk_troop):
        quest_slot_001 = quest_get_slot(qst.wed_betrothed,2)
        if troop_slot_eq(quest_slot_001,12,_g_encountered_party) and faction_slot_eq(_g_talk_x_troop_faction,4,6) and faction_slot_eq(_g_talk_x_troop_faction,5,_g_encountered_party):
            troop_get_family_relation_to_troop(quest_slot_001,_g_talk_troop)
            s4 = str_store_troop_name(quest_slot_001)
lord_start_wedding_ceremony_bride_vow.conditionBlock = condition
def code():
    _g_player_bride = quest_get_slot(qst.wed_betrothed,2)
lord_start_wedding_ceremony_bride_vow.codeBlock = code


lord_start_lord_wedding_reschedule = Dialog("anyone", "It is good to see you, {playername}. We look forward to the wedding, as soon as we can all gather together for the feast.{s12}", starting_state="lord_start", ending_state="lord_wedding_reschedule")
def condition():
    if check_quest_active(qst.wed_betrothed) and quest_slot_eq(qst.wed_betrothed,6,_g_talk_troop):
        quest_slot_001 = quest_get_slot(qst.wed_betrothed,23)
        if quest_slot_001 < 362 and _g_done_wedding_comment == 0:
            str_clear(12)
            if not faction_slot_eq(_g_talk_x_troop_faction,4,6) and not faction_slot_eq(_g_talk_x_troop_faction,4,0):
                s12 = str_store_string("@ We will of course need to wait until the realm is no longer on campaign.")
            #end
        #end
    #end
lord_start_lord_wedding_reschedule.conditionBlock = condition
def code():
    _g_done_wedding_comment = 1
lord_start_lord_wedding_reschedule.codeBlock = code


lord_wedding_reschedule_lord_start = Dialog("anyone|plyr", "It is no problem. I can wait.", starting_state="lord_wedding_reschedule", ending_state="lord_start")


lord_wedding_reschedule_lord_return_dower = Dialog("anyone|plyr", "I have no faith that this wedding will be concluded. Please return my dower.", starting_state="lord_wedding_reschedule", ending_state="lord_return_dower")


lord_return_dower_close_window = Dialog("anyone", "Well, that is your right, if you indeed have no confidence in our family's commitments. Take your money.", starting_state="lord_return_dower", ending_state="close_window")
def code():
    quest_slot_001 = quest_get_slot(qst.wed_betrothed,2)
    fail_quest(qst.wed_betrothed)
    end_quest(qst.wed_betrothed)
    troop_set_slot(trp.player,34,-1)
    troop_set_slot(quest_slot_001,34,-1)
    _marriage_dowry = 0
    troop_add_gold(trp.player,_marriage_dower)
    _marriage_dower = 0
    troop_change_relation_with_troop(trp.player,_g_talk_troop,-3)
    _g_leave_encounter = 1
lord_return_dower_close_window.codeBlock = code


lord_start_lord_generic_mission_completed_1 = Dialog("anyone", "Hah! Our little plot against {s3} worked perfectly, {playername}. The fool has lost one of his most valuable retainers, and we are one step closer to bringing him to his knees. Here, this purse contains {reg5} denars, and I wish you to have it. You deserve every copper. And, need I remind you, there could be much more to come if you've a mind to earn it...", starting_state="lord_start", ending_state="lord_generic_mission_completed")
def condition():
    partner_quest_001 = store_partner_quest()
    if partner_quest_001 == qst.incriminate_loyal_commander and check_quest_succeeded(qst.incriminate_loyal_commander):
        quest_slot_002 = quest_get_slot(qst.incriminate_loyal_commander,2)
        s3 = str_store_troop_name(quest_slot_002)
        reg5 = quest_get_slot(qst.incriminate_loyal_commander,22)
lord_start_lord_generic_mission_completed_1.conditionBlock = condition
def code():
    end_quest(qst.incriminate_loyal_commander)
    change_player_relation_with_troop(_g_talk_troop,5)
    change_player_honor(-10)
lord_start_lord_generic_mission_completed_1.codeBlock = code


lord_start_close_window = Dialog("anyone", "You werent't able to complete a simple task. I had set up everything. The only thing you needed to do was sacrifice a messenger, and we would be celebrating now. But no, you were too damned honorable, weren't you?", starting_state="lord_start", ending_state="close_window")
def condition():
    if partner_quest_001 == qst.incriminate_loyal_commander and check_quest_failed(qst.incriminate_loyal_commander):
        partner_quest_001 = store_partner_quest()
lord_start_close_window.conditionBlock = condition
def code():
    end_quest(qst.incriminate_loyal_commander)
    change_player_relation_with_troop(_g_talk_troop,-5)
    change_player_honor(3)
lord_start_close_window.codeBlock = code


lord_start_quest_meet_spy_in_enemy_town_completed = Dialog("anyone", "Have you brought me any news about that task I gave you? You know the one I mean...", starting_state="lord_start", ending_state="quest_meet_spy_in_enemy_town_completed")
def condition():
    if partner_quest_001 == qst.meet_spy_in_enemy_town and check_quest_succeeded(qst.meet_spy_in_enemy_town):
        partner_quest_001 = store_partner_quest()
lord_start_quest_meet_spy_in_enemy_town_completed.conditionBlock = condition


quest_meet_spy_in_enemy_town_completed_quest_meet_spy_in_enemy_town_completed_2 = Dialog("anyone|plyr", "I have the reports you wanted right here.", starting_state="quest_meet_spy_in_enemy_town_completed", ending_state="quest_meet_spy_in_enemy_town_completed_2")


quest_meet_spy_in_enemy_town_completed_2_lord_pretalk = Dialog("anyone", "Ahh, well done. It's good to have competent {men/people} on my side. Here is the payment I promised you.", starting_state="quest_meet_spy_in_enemy_town_completed_2", ending_state="lord_pretalk")
def code():
    change_player_relation_with_troop(_g_talk_troop,3)
    add_xp_as_reward(500)
    quest_slot_001 = quest_get_slot(qst.meet_spy_in_enemy_town,22)
    troop_add_gold(trp.player,quest_slot_001)
    end_quest(qst.meet_spy_in_enemy_town)
quest_meet_spy_in_enemy_town_completed_2_lord_pretalk.codeBlock = code


lord_start_lord_pretalk = Dialog("anyone", "Brilliant work, {playername}! Whatever you did, the nobles of the {s13} are clamoring for war! Soon, the time will come for us to reap the benefits of our hard work, from fields ripe for plunder. This war is going to make us rich, mark my words!", starting_state="lord_start", ending_state="lord_pretalk")
def condition():
    partner_quest_001 = store_partner_quest()
    if partner_quest_001 == qst.cause_provocation and check_quest_succeeded(qst.cause_provocation):
        quest_slot_002 = quest_get_slot(qst.cause_provocation,3)
        s13 = str_store_faction_name(quest_slot_002)
lord_start_lord_pretalk.conditionBlock = condition
def code():
    change_player_relation_with_troop(_g_talk_troop,10)
    for trp_001 in range(trp.npc1, trp.knight_1_1_wife):
        if troop_slot_eq(trp_001,2,2):
            troop_faction_002 = store_faction_of_troop(trp_001)
            if troop_faction_002 == _players_kingdom and trp_001 != _g_talk_troop:
                random_x_003 = store_random_in_range(-5,4)
                change_player_relation_with_troop(trp_001,random_x_003)
            #end
        #end
    #end
    troop_add_gold(trp.player,500)
    add_xp_as_reward(2000)
    change_player_honor(-5)
    end_quest(qst.cause_provocation)
lord_start_lord_pretalk.codeBlock = code


lord_start_lord_collect_debt_completed = Dialog("anyone", "I'm told that you've collected the money owed me from {s7}. Good, it's past time I had it back. I believe I promised to give you one-fifth of it all, eh? Well, that makes {reg3} denars, so if you give me my share -- that's {reg4} denars -- you can keep the rest.", starting_state="lord_start", ending_state="lord_collect_debt_completed")
def condition():
    partner_quest_001 = store_partner_quest()
    if partner_quest_001 == qst.collect_debt and quest_slot_eq(qst.collect_debt,11,1):
        quest_slot_002 = quest_get_slot(qst.collect_debt,2)
        s7 = str_store_troop_name(quest_slot_002)
        quest_slot_003 = quest_get_slot(qst.collect_debt,10)
        reg3 = quest_slot_003 / 5
        reg4 = quest_slot_003 - reg3
lord_start_lord_collect_debt_completed.conditionBlock = condition


lord_collect_debt_completed_lord_collect_debt_pay = Dialog("anyone|plyr", "Of course, {s65}. {reg4} denars, all here.", starting_state="lord_collect_debt_completed", ending_state="lord_collect_debt_pay")
def condition():
    if troop_gold_001 >= reg4:
        troop_gold_001 = store_troop_gold(trp.player)
lord_collect_debt_completed_lord_collect_debt_pay.conditionBlock = condition


lord_collect_debt_pay_lord_pretalk = Dialog("anyone", "I must admit I'm impressed, {playername}. I had lost hope of ever getting this money back. Please accept my sincere thanks.", starting_state="lord_collect_debt_pay", ending_state="lord_pretalk")
def code():
    troop_remove_gold(trp.player,reg4)
    change_player_relation_with_troop(_g_talk_troop,2)
    add_xp_as_reward(100)
    end_quest(qst.collect_debt)
lord_collect_debt_pay_lord_pretalk.codeBlock = code


lord_collect_debt_completed_lord_collect_debt_no_pay = Dialog("anyone|plyr", "I am afraid I don't have the money with me sir.", starting_state="lord_collect_debt_completed", ending_state="lord_collect_debt_no_pay")


lord_collect_debt_no_pay_close_window = Dialog("anyone", "Is this a joke? I know full well that {s7} gave you the money, and I want every denar owed to me, {sir/madam}. As far as I'm concerned, I hold you personally in my debt until I see that silver.", starting_state="lord_collect_debt_no_pay", ending_state="close_window")
def code():
    change_debt_to_troop(_g_talk_troop,reg4)
    end_quest(qst.collect_debt)
    objectionable_action(4,gstr.squander_money)
lord_collect_debt_no_pay_close_window.codeBlock = code


lord_start_close_window_1 = Dialog("anyone", "I heard you got rid of that poxy merchant that was causing me so much grief. I can see you're not afraid to get your hands dirty, eh? I like that in a {man/woman}. Here's your reward. Remember, {playername}, stick with me and we'll go a long, long way together.", starting_state="lord_start", ending_state="close_window")
def condition():
    if partner_quest_001 == qst.kill_local_merchant and check_quest_succeeded(qst.kill_local_merchant) and quest_slot_eq(qst.kill_local_merchant,11,1):
        partner_quest_001 = store_partner_quest()
lord_start_close_window_1.conditionBlock = condition
def code():
    troop_add_gold(trp.player,600)
    change_player_relation_with_troop(_g_talk_troop,4)
    add_xp_as_reward(300)
    end_quest(qst.kill_local_merchant)
    objectionable_action(3,gstr.murder_merchant)
    _g_leave_encounter = 1
lord_start_close_window_1.codeBlock = code


lord_start_close_window_2 = Dialog("anyone", "Oh, it's you. Enlighten me, how exactly does one lose a simple fight to some poxy, lowborn merchant? Truly, if I ever need my guardsmen to take a lesson in how to lay down and die, I'll be sure to come to you. Just leave me be, {playername}, I have things to do.", starting_state="lord_start", ending_state="close_window")
def condition():
    if partner_quest_001 == qst.kill_local_merchant and check_quest_failed(qst.kill_local_merchant):
        partner_quest_001 = store_partner_quest()
lord_start_close_window_2.conditionBlock = condition
def code():
    end_quest(qst.kill_local_merchant)
    _g_leave_encounter = 1
lord_start_close_window_2.codeBlock = code


lord_start_lord_kill_local_merchant_let_go = Dialog("anyone", "You! Do you have sawdust between your ears? Did you think that when I said to kill the merchant, I meant you to have a nice chat with him and then let him go?! What possessed you?", starting_state="lord_start", ending_state="lord_kill_local_merchant_let_go")
def condition():
    if partner_quest_001 == qst.kill_local_merchant and check_quest_succeeded(qst.kill_local_merchant) and quest_slot_eq(qst.kill_local_merchant,11,2):
        partner_quest_001 = store_partner_quest()
lord_start_lord_kill_local_merchant_let_go.conditionBlock = condition


lord_kill_local_merchant_let_go_lord_kill_local_merchant_let_go_2 = Dialog("anyone|plyr", "Sir, I made sure he will not act against you.", starting_state="lord_kill_local_merchant_let_go", ending_state="lord_kill_local_merchant_let_go_2")


lord_kill_local_merchant_let_go_2_lord_pretalk = Dialog("anyone", "Piffle. You were supposed to remove him, not give him a sermon and send him on his way. He had better do as you say, or you'll both regret it. Here, this is half the money I promised you. Don't say a word, {playername}, you're lucky to get even that. I have little use for {men/people} who cannot follow orders.", starting_state="lord_kill_local_merchant_let_go_2", ending_state="lord_pretalk")
def code():
    troop_add_gold(trp.player,300)
    change_player_relation_with_troop(_g_talk_troop,2)
    add_xp_as_reward(500)
    end_quest(qst.kill_local_merchant)
    _g_leave_encounter = 1
lord_kill_local_merchant_let_go_2_lord_pretalk.codeBlock = code


lord_start_lord_follow_spy_completed = Dialog("anyone", "Beautiful work, {playername}! You captured both the spy and his handler, just as I'd hoped, and the pair are now safely ensconced in my dungeon, waiting to be questioned. My torturer shall be busy tonight! Anyway, I'm very pleased with your success, {playername}, and I give you this purse as a token of my appreciation.", starting_state="lord_start", ending_state="lord_follow_spy_completed")
def condition():
    if not troop_slot_ge(_g_talk_troop,8,0):
        partner_quest_001 = store_partner_quest()
        if partner_quest_001 == qst.follow_spy and _qst_follow_spy_no_active_parties == 1:
            party_count_prisoners_of_type(party_prisoners_of_type_002,p.main_party,trp.spy)
            if party_prisoners_of_type_002 > 0 and party_prisoners_of_type_003 > 0:
                party_count_prisoners_of_type(party_prisoners_of_type_003,p.main_party,trp.spy_partner)
lord_start_lord_follow_spy_completed.conditionBlock = condition
def code():
    party_remove_prisoners(p.main_party,trp.spy,1)
    party_remove_prisoners(p.main_party,trp.spy_partner,1)
    change_player_relation_with_troop(_g_talk_troop,4)
    troop_add_gold(trp.player,2000)
    add_xp_as_reward(4000)
    end_quest(qst.follow_spy)
lord_start_lord_follow_spy_completed.codeBlock = code


lord_start_lord_follow_spy_half_completed = Dialog("anyone", "Blast and damn you! I wanted TWO prisoners, {playername} -- what you've brought me is one step short of useless! I already know everything the spy knows, it was the handler I was after. Here, half a job gets you half a reward. Take it and begone.", starting_state="lord_start", ending_state="lord_follow_spy_half_completed")
def condition():
    if not troop_slot_ge(_g_talk_troop,8,0):
        partner_quest_001 = store_partner_quest()
        if partner_quest_001 == qst.follow_spy and _qst_follow_spy_no_active_parties == 1:
            party_count_prisoners_of_type(party_prisoners_of_type_002,p.main_party,trp.spy)
            if party_prisoners_of_type_002 > 0 and party_prisoners_of_type_003 == 0:
                party_count_prisoners_of_type(party_prisoners_of_type_003,p.main_party,trp.spy_partner)
lord_start_lord_follow_spy_half_completed.conditionBlock = condition
def code():
    party_remove_prisoners(p.main_party,trp.spy,1)
    change_player_relation_with_troop(_g_talk_troop,-1)
    troop_add_gold(trp.player,1000)
    add_xp_as_reward(400)
    end_quest(qst.follow_spy)
lord_start_lord_follow_spy_half_completed.codeBlock = code


lord_start_lord_follow_spy_half_completed_1 = Dialog("anyone", "I asked you for two prisoners, {playername}, not one. Two. Still, I suppose you did capture the spy's handler, the more important one of the pair. The spy will not dare return here and will prove quite useless to whatever master he served. 'Tis better than nothing. However, you'll understand if I pay you half the promised reward for what is but half a success.", starting_state="lord_start", ending_state="lord_follow_spy_half_completed")
def condition():
    if not troop_slot_ge(_g_talk_troop,8,0):
        partner_quest_001 = store_partner_quest()
        if partner_quest_001 == qst.follow_spy and _qst_follow_spy_no_active_parties == 1:
            party_count_prisoners_of_type(party_prisoners_of_type_002,p.main_party,trp.spy)
            if party_prisoners_of_type_002 == 0 and party_prisoners_of_type_003 > 0:
                party_count_prisoners_of_type(party_prisoners_of_type_003,p.main_party,trp.spy_partner)
lord_start_lord_follow_spy_half_completed_1.conditionBlock = condition
def code():
    party_remove_prisoners(p.main_party,trp.spy_partner,1)
    change_player_relation_with_troop(_g_talk_troop,1)
    troop_add_gold(trp.player,1000)
    add_xp_as_reward(400)
    end_quest(qst.follow_spy)
lord_start_lord_follow_spy_half_completed_1.codeBlock = code


lord_start_lord_follow_spy_failed = Dialog("anyone", "Truly, {playername}, you are nothing short of totally incompetent. Failing to capture both the spy AND his handler plumbs astonishing new depths of failure. Forget any reward I offered you. You've done nothing to earn it.", starting_state="lord_start", ending_state="lord_follow_spy_failed")
def condition():
    partner_quest_001 = store_partner_quest()
    if partner_quest_001 == qst.follow_spy and _qst_follow_spy_no_active_parties == 1:
        party_count_prisoners_of_type(party_prisoners_of_type_002,p.main_party,trp.spy)
        if party_prisoners_of_type_002 == 0 and party_prisoners_of_type_003 == 0:
            party_count_prisoners_of_type(party_prisoners_of_type_003,p.main_party,trp.spy_partner)
lord_start_lord_follow_spy_failed.conditionBlock = condition
def code():
    change_player_relation_with_troop(_g_talk_troop,-2)
    end_quest(qst.follow_spy)
lord_start_lord_follow_spy_failed.codeBlock = code


lord_follow_spy_half_completed_lord_pretalk = Dialog("anyone|plyr", "I did my best, {s65}.", starting_state="lord_follow_spy_half_completed", ending_state="lord_pretalk")


lord_follow_spy_completed_lord_pretalk = Dialog("anyone|plyr", "Thank you, {s65}.", starting_state="lord_follow_spy_completed", ending_state="lord_pretalk")


lord_follow_spy_failed_lord_pretalk = Dialog("anyone|plyr", "Hrm. As you like, {s65}.", starting_state="lord_follow_spy_failed", ending_state="lord_pretalk")


lord_start_lord_generic_mission_completed_2 = Dialog("anyone", "Splendid work, {playername}. All the serfs are back, properly cowed, and they're busy preparing for the harvest. You certainly earned your reward. Here, take it, with my compliments.", starting_state="lord_start", ending_state="lord_generic_mission_completed")
def condition():
    if partner_quest_001 == qst.bring_back_runaway_serfs and check_quest_succeeded(qst.bring_back_runaway_serfs):
        partner_quest_001 = store_partner_quest()
lord_start_lord_generic_mission_completed_2.conditionBlock = condition
def code():
    change_player_relation_with_troop(_g_talk_troop,2)
    troop_add_gold(trp.player,300)
    add_xp_as_reward(300)
    end_quest(qst.bring_back_runaway_serfs)
    objectionable_action(3,gstr.round_up_serfs)
lord_start_lord_generic_mission_completed_2.codeBlock = code


lord_start_lord_bring_back_runaway_serfs_failed = Dialog("anyone", "{playername}. I have been waiting patiently for my serfs, yet none have returned. Have you an explanation? Were you outwitted by simple fieldhands, or are you merely incompetent? Or perhaps you are plotting with my enemies, intending to ruin me...", starting_state="lord_start", ending_state="lord_bring_back_runaway_serfs_failed")
def condition():
    if partner_quest_001 == qst.bring_back_runaway_serfs and check_quest_failed(qst.bring_back_runaway_serfs):
        partner_quest_001 = store_partner_quest()
lord_start_lord_bring_back_runaway_serfs_failed.conditionBlock = condition


lord_bring_back_runaway_serfs_failed_lord_bring_back_runaway_serfs_failed_1a = Dialog("anyone|plyr", "Forgive me, {s65}, those serfs were slippery as eels.", starting_state="lord_bring_back_runaway_serfs_failed", ending_state="lord_bring_back_runaway_serfs_failed_1a")


lord_bring_back_runaway_serfs_failed_lord_bring_back_runaway_serfs_failed_1b = Dialog("anyone|plyr", "Perhaps if you had treated them better...", starting_state="lord_bring_back_runaway_serfs_failed", ending_state="lord_bring_back_runaway_serfs_failed_1b")


lord_bring_back_runaway_serfs_failed_1a_lord_pretalk = Dialog("anyone", "Hmph, that is hardly an excuse for failure, {playername}. Now if you will excuse me, I need to recruit new men to work these fields before we all starve.", starting_state="lord_bring_back_runaway_serfs_failed_1a", ending_state="lord_pretalk")
def code():
    change_player_relation_with_troop(_g_talk_troop,-1)
    end_quest(qst.bring_back_runaway_serfs)
lord_bring_back_runaway_serfs_failed_1a_lord_pretalk.codeBlock = code


lord_bring_back_runaway_serfs_failed_1b_close_window = Dialog("anyone", "Hah, now you reveal your true colours, traitor! Your words match your actions all too well. I should never have trusted you.", starting_state="lord_bring_back_runaway_serfs_failed_1b", ending_state="close_window")
def code():
    change_player_relation_with_troop(_g_talk_troop,-10)
    quest_slot_001 = quest_get_slot(qst.bring_back_runaway_serfs,7)
    change_player_relation_with_center(quest_slot_001,6)
    end_quest(qst.bring_back_runaway_serfs)
    _g_leave_encounter = 1
lord_bring_back_runaway_serfs_failed_1b_close_window.codeBlock = code


lord_start_lord_runaway_serf_half_completed = Dialog("anyone", "You disappoint me, {playername}. There were 3 groups of serfs that I charged you to return. 3. Not {reg17}. I suppose the ones who did come back shall have to work twice as hard to make up for those that got away. As for your reward, {playername}, I'll only pay you for the serfs you returned, not the ones you let fly. Here. Take it, and let this business be done.", starting_state="lord_start", ending_state="lord_runaway_serf_half_completed")
def condition():
    partner_quest_001 = store_partner_quest()
    if partner_quest_001 == qst.bring_back_runaway_serfs and check_quest_concluded(qst.bring_back_runaway_serfs):
        reg17 = _qst_bring_back_runaway_serfs_num_parties_returned
lord_start_lord_runaway_serf_half_completed.conditionBlock = condition
def code():
    var001 = _qst_bring_back_runaway_serfs_num_parties_returned * 100
    var001 /= 2
    troop_add_gold(trp.player,var001)
    add_xp_as_reward(var001)
    objectionable_action(3,gstr.round_up_serfs)
    end_quest(qst.bring_back_runaway_serfs)
lord_start_lord_runaway_serf_half_completed.codeBlock = code


lord_runaway_serf_half_completed_lord_pretalk = Dialog("anyone|plyr", "Thank you, {s65}. You are indeed generous.", starting_state="lord_runaway_serf_half_completed", ending_state="lord_pretalk")


lord_runaway_serf_half_completed_lord_pretalk_1 = Dialog("anyone|plyr", "Bah, this proved to be a waste of my time.", starting_state="lord_runaway_serf_half_completed", ending_state="lord_pretalk")


lord_start_lord_deal_with_bandits_completed = Dialog("anyone", "{playername}, I was told that you have crushed the bandits at my village of {s5}. Please know that I am most grateful to you for that. Please, let me pay the expenses of your campaign. Here, I hope these {reg14} denars will be adequate.", starting_state="lord_start", ending_state="lord_deal_with_bandits_completed")
def condition():
    if partner_quest_001 == qst.deal_with_bandits_at_lords_village and check_quest_succeeded(qst.deal_with_bandits_at_lords_village):
        partner_quest_001 = store_partner_quest()
lord_start_lord_deal_with_bandits_completed.conditionBlock = condition
def code():
    change_player_relation_with_troop(_g_talk_troop,3)
    character_lvl_001 = store_character_level(trp.player)
    var002 = character_lvl_001 * 20
    var002 += 300
    troop_add_gold(trp.player,var002)
    add_xp_as_reward(350)
    end_quest(qst.deal_with_bandits_at_lords_village)
    reg14 = var002
    quest_slot_003 = quest_get_slot(qst.deal_with_bandits_at_lords_village,1)
    s5 = str_store_party_name(quest_slot_003)
lord_start_lord_deal_with_bandits_completed.codeBlock = code


lord_deal_with_bandits_completed_lord_pretalk = Dialog("anyone|plyr", "Not a problem, {s65}.", starting_state="lord_deal_with_bandits_completed", ending_state="lord_pretalk")


lord_deal_with_bandits_completed_lord_pretalk_1 = Dialog("anyone|plyr", "Glad to be of service.", starting_state="lord_deal_with_bandits_completed", ending_state="lord_pretalk")


lord_deal_with_bandits_completed_lord_pretalk_2 = Dialog("anyone|plyr", "It was mere child's play.", starting_state="lord_deal_with_bandits_completed", ending_state="lord_pretalk")


lord_start_lord_pretalk_1 = Dialog("anyone", "Damn it, {playername}. I heard that you were unable to drive off the bandits from my village of {s5}, and thanks to you, my village now lies in ruins. Everyone said that you were a capable warrior, but appearently, they were wrong.", starting_state="lord_start", ending_state="lord_pretalk")
def condition():
    if partner_quest_001 == qst.deal_with_bandits_at_lords_village and check_quest_concluded(qst.deal_with_bandits_at_lords_village):
        partner_quest_001 = store_partner_quest()
lord_start_lord_pretalk_1.conditionBlock = condition
def code():
    change_player_relation_with_troop(_g_talk_troop,-5)
    end_quest(qst.deal_with_bandits_at_lords_village)
    quest_slot_001 = quest_get_slot(qst.deal_with_bandits_at_lords_village,1)
    s5 = str_store_party_name(quest_slot_001)
lord_start_lord_pretalk_1.codeBlock = code


lord_start_lord_deliver_cattle_to_army_thank = Dialog("anyone", "Ah, {playername}. My quartermaster has informed me of your delivery, {reg13} heads of cattle, as I requested. I'm impressed.", starting_state="lord_start", ending_state="lord_deliver_cattle_to_army_thank")
def condition():
    partner_quest_001 = store_partner_quest()
    if partner_quest_001 == qst.deliver_cattle_to_army and check_quest_succeeded(qst.deliver_cattle_to_army):
        reg13 = quest_get_slot(qst.deliver_cattle_to_army,10)
lord_start_lord_deliver_cattle_to_army_thank.conditionBlock = condition
def code():
    change_player_relation_with_troop(_g_talk_troop,2)
    quest_slot_001 = quest_get_slot(qst.deliver_cattle_to_army,10)
    var002 = quest_slot_001 * 100
    troop_add_gold(trp.player,var002)
    var002 /= 5
    add_xp_as_reward(var002)
    end_quest(qst.deliver_cattle_to_army)
    s9 = str_store_troop_name_link(_g_talk_troop)
    setup_quest_text(qst.follow_army)
    s2 = str_store_string(gstr.follow_army_quest_brief_2)
    start_quest(qst.follow_army,_g_talk_troop)
    _g_player_follow_army_warnings = 0
lord_start_lord_deliver_cattle_to_army_thank.codeBlock = code


lord_deliver_cattle_to_army_thank_lord_pretalk = Dialog("anyone|plyr", "Not a problem, {s65}.", starting_state="lord_deliver_cattle_to_army_thank", ending_state="lord_pretalk")


lord_deliver_cattle_to_army_thank_lord_pretalk_1 = Dialog("anyone|plyr", "Glad to be of service.", starting_state="lord_deliver_cattle_to_army_thank", ending_state="lord_pretalk")


lord_deliver_cattle_to_army_thank_lord_pretalk_2 = Dialog("anyone|plyr", "Mere child's play.", starting_state="lord_deliver_cattle_to_army_thank", ending_state="lord_pretalk")


lord_start_lord_scout_waypoints_thank = Dialog("anyone", "You make a good scout, {playername}. My runner just brought me your reports of the mission to {s13}, {s14} and {s15}. Well done.", starting_state="lord_start", ending_state="lord_scout_waypoints_thank")
def condition():
    partner_quest_001 = store_partner_quest()
    if partner_quest_001 == qst.scout_waypoints and check_quest_succeeded(qst.scout_waypoints):
        s13 = str_store_party_name(_qst_scout_waypoints_wp_1)
        s14 = str_store_party_name(_qst_scout_waypoints_wp_2)
        s15 = str_store_party_name(_qst_scout_waypoints_wp_3)
lord_start_lord_scout_waypoints_thank.conditionBlock = condition
def code():
    change_player_relation_with_troop(_g_talk_troop,1)
    add_xp_as_reward(100)
    end_quest(qst.scout_waypoints)
    s9 = str_store_troop_name_link(_g_talk_troop)
    setup_quest_text(qst.follow_army)
    s2 = str_store_string(gstr.follow_army_quest_brief_2)
    start_quest(qst.follow_army,_g_talk_troop)
    _g_player_follow_army_warnings = 0
lord_start_lord_scout_waypoints_thank.codeBlock = code


lord_scout_waypoints_thank_lord_pretalk = Dialog("anyone|plyr", "A simple task, {s65}.", starting_state="lord_scout_waypoints_thank", ending_state="lord_pretalk")


lord_scout_waypoints_thank_lord_pretalk_1 = Dialog("anyone|plyr", "Nothing I couldn't handle.", starting_state="lord_scout_waypoints_thank", ending_state="lord_pretalk")


lord_scout_waypoints_thank_lord_pretalk_2 = Dialog("anyone|plyr", "My pleasure, {s65}.", starting_state="lord_scout_waypoints_thank", ending_state="lord_pretalk")


lord_start_lord_mission_told_deliver_cattle_to_army = Dialog("anyone", "The army's supplies are dwindling too quickly, {playername}. I need you to bring me {reg3} heads of cattle so I can keep the troops fed. I care very little about where you get them, just bring them to me as soon as you can.", starting_state="lord_start", ending_state="lord_mission_told_deliver_cattle_to_army")
def condition():
    if check_quest_active(qst.follow_army) and faction_slot_eq(_g_talk_x_troop_faction,8,_g_talk_troop) and _g_random_army_quest == qst.deliver_cattle_to_army:
        quest_slot_001 = quest_get_slot(_g_random_army_quest,10)
        reg3 = quest_slot_001
lord_start_lord_mission_told_deliver_cattle_to_army.conditionBlock = condition


lord_mission_told_deliver_cattle_to_army_lord_mission_told_deliver_cattle_to_army_accepted = Dialog("anyone|plyr", "Very well, I can find you some cattle.", starting_state="lord_mission_told_deliver_cattle_to_army", ending_state="lord_mission_told_deliver_cattle_to_army_accepted")


lord_mission_told_deliver_cattle_to_army_lord_mission_told_deliver_cattle_to_army_rejected = Dialog("anyone|plyr", "Sorry, sir, I have other plans.", starting_state="lord_mission_told_deliver_cattle_to_army", ending_state="lord_mission_told_deliver_cattle_to_army_rejected")


lord_mission_told_deliver_cattle_to_army_accepted_close_window = Dialog("anyone", "Excellent! You know what to do, {playername}, now get to it. I need that cattle sooner rather than later.", starting_state="lord_mission_told_deliver_cattle_to_army_accepted", ending_state="close_window")
def code():
    end_quest(qst.follow_army)
    quest_slot_001 = quest_get_slot(_g_random_army_quest,10)
    s13 = str_store_troop_name_link(_g_talk_troop)
    reg3 = quest_slot_001
    setup_quest_text(_g_random_army_quest)
    s2 = str_store_string("@{s13} asked you to gather {reg3} heads of cattle and deliver them back to him.")
    start_quest(_g_random_army_quest,_g_talk_troop)
    change_player_relation_with_troop(_g_talk_troop,1)
    _g_leave_encounter = 1
lord_mission_told_deliver_cattle_to_army_accepted_close_window.codeBlock = code


lord_mission_told_deliver_cattle_to_army_rejected_close_window = Dialog("anyone", "That . . . is unfortunate, {playername}. I shall have to find someone else who's up to the task. Please go now, I've work to do.", starting_state="lord_mission_told_deliver_cattle_to_army_rejected", ending_state="close_window")
def code():
    troop_set_slot(_g_talk_troop,20,1)
    _g_leave_encounter = 1
lord_mission_told_deliver_cattle_to_army_rejected_close_window.codeBlock = code


lord_start_lord_pretalk_2 = Dialog("anyone", "Thank you for answering the summons, {playername}. However, as we are now at peace, we do not need your services. You may attend to your other business.", starting_state="lord_start", ending_state="lord_pretalk")
def condition():
    if check_quest_active(qst.report_to_army) and quest_slot_eq(qst.report_to_army,2,_g_talk_troop):
        var001 = 0
        for fac_002 in range(fac.player_supporters_faction, fac.kingdoms_end):
            faction_relation_003 = store_relation(fac_002,_players_kingdom)
            if faction_relation_003 < 0:
                var001 = 1
                if var001 == 0:
                    pass
                #end
            #end
        #end
    #end
lord_start_lord_pretalk_2.conditionBlock = condition
def code():
    end_quest(qst.report_to_army)
    quest_set_slot(qst.report_to_army,6,_g_talk_troop)
    change_player_relation_with_troop(_g_talk_troop,1)
lord_start_lord_pretalk_2.codeBlock = code


lord_start_lord_report_to_army_asked = Dialog("anyone", "Ah, you have arrived at last, {playername}. We've been expecting you. I hope you have brought with you troops of sufficient number and experience.", starting_state="lord_start", ending_state="lord_report_to_army_asked")
def condition():
    if check_quest_active(qst.report_to_army) and quest_slot_eq(qst.report_to_army,2,_g_talk_troop):
        pass
lord_start_lord_report_to_army_asked.conditionBlock = condition


lord_report_to_army_asked_lord_report_to_army_completed = Dialog("anyone|plyr", "I have a company of good, hardened soldiers with me. We are ready to join you.", starting_state="lord_report_to_army_asked", ending_state="lord_report_to_army_completed")
def condition():
    quest_slot_001 = quest_get_slot(qst.report_to_army,10)
    if reg0 > quest_slot_001:
        party_count_fit_for_battle(p.main_party)
lord_report_to_army_asked_lord_report_to_army_completed.conditionBlock = condition


lord_report_to_army_asked_lord_report_to_army_continue = Dialog("anyone|plyr", "I don't have the sufficient number of troops yet. I will need some more time.", starting_state="lord_report_to_army_asked", ending_state="lord_report_to_army_continue")


lord_report_to_army_completed_close_window = Dialog("anyone", "Excellent. We'll be moving soon. Now -- you are a {man/warrior} of sound judgement, and we trust that you will do what is necessary to support our campaign. I do not require you to remain close at hand, and I will not count it against you if you believe that your forces would be of better use elsewhere. But if you do choose to remain with me, to support me in battle, that would be appreciated. I may also have additional tasks for you to perform.", starting_state="lord_report_to_army_completed", ending_state="close_window")
def code():
    end_quest(qst.report_to_army)
    quest_set_slot(qst.report_to_army,6,_g_talk_troop)
    change_player_relation_with_troop(_g_talk_troop,1)
    s9 = str_store_troop_name_link(_g_talk_troop)
    setup_quest_text(qst.follow_army)
    s2 = str_store_string("@{s9} wants you to follow his army until further notice.")
    start_quest(qst.follow_army,_g_talk_troop)
    _g_player_follow_army_warnings = 0
    _g_leave_encounter = 1
lord_report_to_army_completed_close_window.codeBlock = code


lord_report_to_army_continue_close_window = Dialog("anyone", "Then you'd better hurry. We'll be moving out soon against the enemy and I need every able hand we can muster.", starting_state="lord_report_to_army_continue", ending_state="close_window")
def code():
    _g_leave_encounter = 1
lord_report_to_army_continue_close_window.codeBlock = code


lord_start_lord_mission_told_scout_waypoints = Dialog("anyone", "{playername}, I need a volunteer to scout the area. We're sorely lacking on information, and I simply must have a better picture of the situation before we can proceed. I want you to go to {s13}, {s14} and {s15} and report back whatever you find.", starting_state="lord_start", ending_state="lord_mission_told_scout_waypoints")
def condition():
    if check_quest_active(qst.follow_army) and faction_slot_eq(_players_kingdom,8,_g_talk_troop) and _g_random_army_quest == qst.scout_waypoints:
        s13 = str_store_party_name(_qst_scout_waypoints_wp_1)
        s14 = str_store_party_name(_qst_scout_waypoints_wp_2)
        s15 = str_store_party_name(_qst_scout_waypoints_wp_3)
lord_start_lord_mission_told_scout_waypoints.conditionBlock = condition


lord_mission_told_scout_waypoints_lord_mission_told_scout_waypoints_accepted = Dialog("anyone|plyr", "You've found your volunteer, sir.", starting_state="lord_mission_told_scout_waypoints", ending_state="lord_mission_told_scout_waypoints_accepted")


lord_mission_told_scout_waypoints_lord_mission_told_scout_waypoints_rejected = Dialog("anyone|plyr", "I fear I must decline.", starting_state="lord_mission_told_scout_waypoints", ending_state="lord_mission_told_scout_waypoints_rejected")


lord_mission_told_scout_waypoints_accepted_close_window = Dialog("anyone", "Good {man/lass}! Simply pass near {s13}, {s14} and {s15} and check out what's there. Make a note of anything you find and return to me as soon as possible.", starting_state="lord_mission_told_scout_waypoints_accepted", ending_state="close_window")
def code():
    end_quest(qst.follow_army)
    s9 = str_store_troop_name_link(_g_talk_troop)
    s13 = str_store_party_name_link(_qst_scout_waypoints_wp_1)
    s14 = str_store_party_name_link(_qst_scout_waypoints_wp_2)
    s15 = str_store_party_name_link(_qst_scout_waypoints_wp_3)
    setup_quest_text(_g_random_army_quest)
    s2 = str_store_string("@{s9} asked you to scout {s13};;; {s14} and {s15};;; then report back.")
    start_quest(_g_random_army_quest,_g_talk_troop)
    change_player_relation_with_troop(_g_talk_troop,1)
    _g_leave_encounter = 1
lord_mission_told_scout_waypoints_accepted_close_window.codeBlock = code


lord_mission_told_scout_waypoints_rejected_lord_pretalk = Dialog("anyone", "Hm. I'm disappointed, {playername}. Very disappointed. We'll talk later, I need to go and find somebody to scout for us.", starting_state="lord_mission_told_scout_waypoints_rejected", ending_state="lord_pretalk")
def code():
    troop_set_slot(_g_talk_troop,20,1)
lord_mission_told_scout_waypoints_rejected_lord_pretalk.codeBlock = code


lord_generic_mission_thank_lord_generic_mission_completed = Dialog("anyone", "You have been most helpful, {playername}. My thanks.", starting_state="lord_generic_mission_thank", ending_state="lord_generic_mission_completed")


lord_generic_mission_completed_lord_pretalk = Dialog("anyone|plyr", "It was an honour to serve.", starting_state="lord_generic_mission_completed", ending_state="lord_pretalk")


lord_start_lord_pay_debt_2 = Dialog("anyone", "I think you owe me {reg1} denars, {playername}. Do you intend to pay your debt anytime soon?", starting_state="lord_start", ending_state="lord_pay_debt_2")
def condition():
    if not troop_slot_ge(_g_talk_troop,8,0):
        troop_slot_001 = troop_get_slot(_g_talk_troop,21)
        if troop_slot_001 > 0:
            reg1 = troop_slot_001
lord_start_lord_pay_debt_2.conditionBlock = condition


lord_pay_debt_2_lord_pay_debt_3_1 = Dialog("anyone|plyr", "That is why I came, {s65}. Here it is, every denar I owe you.", starting_state="lord_pay_debt_2", ending_state="lord_pay_debt_3_1")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,21)
    if troop_slot_001 <= troop_gold_002:
        troop_gold_002 = store_troop_gold(trp.player)
lord_pay_debt_2_lord_pay_debt_3_1.conditionBlock = condition
def code():
    troop_slot_001 = troop_get_slot(_g_talk_troop,21)
    troop_remove_gold(trp.player,troop_slot_001)
    troop_set_slot(_g_talk_troop,21,0)
lord_pay_debt_2_lord_pay_debt_3_1.codeBlock = code


lord_pay_debt_2_lord_pay_debt_3_2 = Dialog("anyone|plyr", "Alas, I don't have sufficient funds, {s65}. But I'll pay you soon enough.", starting_state="lord_pay_debt_2", ending_state="lord_pay_debt_3_2")


lord_pay_debt_3_1_lord_pretalk = Dialog("anyone", "Ah, excellent. You are a {man/woman} of honour, {playername}. I am satisfied. Your debt to me has been paid in full.", starting_state="lord_pay_debt_3_1", ending_state="lord_pretalk")


lord_pay_debt_3_2_lord_pretalk = Dialog("anyone", "Well, don't keep me waiting much longer.", starting_state="lord_pay_debt_3_2", ending_state="lord_pretalk")


lord_start_lord_start_1 = Dialog("anyone", "By the way, I hope you get a chance to meet my {s11}, {s14}.  ", starting_state="lord_start", ending_state="lord_start")
def condition():
    if _g_romantic_comment_made == 0 and _g_talk_troop_relation >= 20 and troop_slot_ge(trp.player,7,250) and not troop_slot_ge(trp.player,30,trp.knight_1_1_wife):
        troop_type_001 = troop_get_type(trp.player)
        if troop_type_001 == 0:
            var002 = 0
            for trp_003 in range(trp.knight_1_1_wife, trp.heroes_end):
                if troop_slot_eq(trp_003,30,-1) and troop_slot_eq(trp_003,34,-1) and troop_slot_eq(trp_003,12,_g_encountered_party) and not troop_slot_ge(trp_003,5,4):
                    get_kingdom_lady_social_determinants(trp_003)
                    if reg0 == _g_talk_troop:
                        _marriage_candidate = trp_003
                        npc_decision_checklist_male_guardian_assess_suitor(_g_talk_troop,trp.player)
                        if reg0 > 0:
                            var002 = trp_003
                        #end
                    #end
                #end
            #end
        #end
    #end
    if var002 > 0 and troop_slot_eq(var002,5,0):
        troop_get_family_relation_to_troop(var002,_g_talk_troop)
        s14 = str_store_troop_name(var002)
lord_start_lord_start_1.conditionBlock = condition
def code():
    troop_set_slot(_g_talk_troop,38,1)
    _g_romantic_comment_made = 1
lord_start_lord_start_1.codeBlock = code


lord_start_lord_start_2 = Dialog("anyone", "By the way, I am sure that my {s11}, {s14}, would be delighted were you to pay her a visit. She awaits you in her chambers.", starting_state="lord_start", ending_state="lord_start")
def condition():
    if _g_romantic_comment_made == 0 and _g_talk_troop_relation >= 20 and troop_slot_ge(trp.player,7,250):
        var001 = 0
        if not troop_slot_ge(trp.player,30,trp.knight_1_1_wife):
            troop_type_002 = troop_get_type(trp.player)
            if troop_type_002 == 0:
                for trp_003 in range(trp.knight_1_1_wife, trp.heroes_end):
                    if troop_slot_eq(trp_003,30,-1) and troop_slot_eq(trp_003,34,-1) and troop_slot_eq(trp_003,12,_g_encountered_party) and not troop_slot_ge(trp_003,5,4):
                        get_kingdom_lady_social_determinants(trp_003)
                        if reg0 == _g_talk_troop:
                            _marriage_candidate = trp_003
                            npc_decision_checklist_male_guardian_assess_suitor(_g_talk_troop,trp.player)
                            if reg0 > 0 and troop_slot_ge(trp_003,5,1):
                                cur_hours_004 = store_current_hours()
                                troop_slot_005 = troop_get_slot(trp_003,4)
                                cur_hours_004 -= troop_slot_005
                                if cur_hours_004 >= 24:
                                    var001 = trp_003
                                #end
                            #end
                        #end
                    #end
                #end
            #end
        #end
    #end
    if var001 > 0:
        troop_get_family_relation_to_troop(var001,_g_talk_troop)
        s14 = str_store_troop_name(var001)
lord_start_lord_start_2.conditionBlock = condition
def code():
    troop_set_slot(_g_talk_troop,38,1)
    _g_romantic_comment_made = 1
lord_start_lord_start_2.codeBlock = code


lord_start_lord_buy_prisoner = Dialog("anyone", "I heard that you have captured our enemy {s3} and he is with you at the moment. I can pay you {reg6} denars for him if you want to get rid of him. You can wait for his family to pay his ransom of course, but there is no telling how long that will take, eh?", starting_state="lord_start", ending_state="lord_buy_prisoner")
def condition():
    if party_slot_eq(_g_encountered_party,7,_g_talk_troop) and _g_talk_x_troop_faction_relation >= 0 and _g_ransom_offer_rejected != 1 and _g_encountered_party_2 < 0 and hero_can_join_as_prisoner(_g_encountered_party):
        random_x_001 = store_random_in_range(0,100)
        if random_x_001 < 10:
            party_num_prisoners_stacks_002 = party_get_num_prisoner_stacks(p.main_party)
            _prisoner_lord_to_buy = -1
            for var003 in range(0, party_num_prisoners_stacks_002):
                party_prisoner_troop_id_004 = party_prisoner_stack_get_troop_id(p.main_party,var003)
                if troop_slot_eq(party_prisoner_troop_id_004,2,2):
                    troop_faction_005 = store_faction_of_troop(party_prisoner_troop_id_004)
                    faction_relation_006 = store_relation(troop_faction_005,_g_talk_x_troop_faction)
                    if faction_relation_006 < 0:
                        _prisoner_lord_to_buy = party_prisoner_troop_id_004
                    #end
                #end
            #end
        #end
    #end
    if _prisoner_lord_to_buy > 0:
        var007 = 1
        if check_quest_active(qst.capture_enemy_hero):
            troop_faction_008 = store_faction_of_troop(_prisoner_lord_to_buy)
            if quest_slot_eq(qst.capture_enemy_hero,3,troop_faction_008):
                var007 = 0
            #end
        #end
    #end
    if var007 == 1:
        s3 = str_store_troop_name(_prisoner_lord_to_buy)
        reg5 = _prisoner_lord_to_buy
        calculate_ransom_amount_for_troop(_prisoner_lord_to_buy)
        reg6 = reg0
        reg6 /= 2
        _temp = reg6
lord_start_lord_buy_prisoner.conditionBlock = condition


lord_buy_prisoner_lord_buy_prisoner_accept = Dialog("anyone|plyr", "I accept your offer. I'll leave {s3} to you for {reg6} denars.", starting_state="lord_buy_prisoner", ending_state="lord_buy_prisoner_accept")


lord_buy_prisoner_lord_buy_prisoner_deny = Dialog("anyone|plyr", "I fear I can't accept your offer.", starting_state="lord_buy_prisoner", ending_state="lord_buy_prisoner_deny")
def code():
    _g_ransom_offer_rejected = 1
lord_buy_prisoner_lord_buy_prisoner_deny.codeBlock = code


lord_buy_prisoner_accept_lord_pretalk = Dialog("anyone", "Excellent! Here's your {reg6} denars. I'll send some men to take him to our prison with due haste.", starting_state="lord_buy_prisoner_accept", ending_state="lord_pretalk")
def code():
    remove_troops_from_prisoners(_prisoner_lord_to_buy,1)
    troop_add_gold(trp.player,_temp)
    party_add_prisoners(_g_encountered_party,_prisoner_lord_to_buy,1)
    troop_set_slot(_prisoner_lord_to_buy,8,_g_encountered_party)
lord_buy_prisoner_accept_lord_pretalk.codeBlock = code


lord_buy_prisoner_deny_lord_pretalk = Dialog("anyone", "Mmm. As you wish, {playername}, but you'll not get a better offer. Take it from me.", starting_state="lord_buy_prisoner_deny", ending_state="lord_pretalk")


lord_start_lord_talk = Dialog("anyone", "I lift a {s5} to your health, {playername}! You are most gracious to host us on this occasion. Now, what is it?", starting_state="lord_start", ending_state="lord_talk")
def condition():
    if faction_slot_eq(_g_talk_x_troop_faction,4,6) and faction_slot_eq(_g_talk_x_troop_faction,5,_g_encountered_party) and check_quest_active(qst.organize_feast) and quest_slot_eq(qst.organize_feast,1,_g_encountered_party):
        if _g_talk_x_troop_faction == fac.kingdom_4:
            s5 = str_store_string(gstr.flagon_of_mead)
        else:
            var001 = store_mod(_g_talk_troop,2)
            if var001 == 0 and _g_talk_x_troop_faction == fac.kingdom_3:
                s5 = str_store_string(gstr.skin_of_kumis)
            else:
                var001 = store_mod(_g_talk_troop,2)
                if var001 == 0 and _g_talk_x_troop_faction == fac.kingdom_2:
                    s5 = str_store_string(gstr.mug_of_kvass)
                else:
                    s5 = str_store_string(gstr.cup_of_wine)
                #end
            #end
        #end
    #end
lord_start_lord_talk.conditionBlock = condition
def code():
    internal_politics_rate_feast_to_s9(trp.household_possessions,120,_players_kingdom,0)
    var001 = reg0
    if var001 >= 20 and _g_time_since_last_talk >= 24:
        troop_change_relation_with_troop(_g_talk_troop,trp.player,1)
    #end
lord_start_lord_talk.codeBlock = code


lord_start_lord_talk_1 = Dialog("anyone", "To your health, {sire/your Highness}. Long may you reign. What is your bidding?", starting_state="lord_start", ending_state="lord_talk")
def condition():
    if faction_slot_eq(_g_talk_x_troop_faction,11,trp.player) and faction_slot_eq(_g_talk_x_troop_faction,4,6) and faction_slot_eq(_g_talk_x_troop_faction,5,_g_encountered_party):
        pass
lord_start_lord_talk_1.conditionBlock = condition
def code():
    if party_slot_eq(_g_encountered_party,7,trp.player) or party_slot_eq(_g_encountered_party,7,_g_talk_troop) and _g_time_since_last_talk >= 24 and _g_talk_troop_relation >= 0:
        troop_change_relation_with_troop(_g_talk_troop,trp.player,1)
    #end
lord_start_lord_talk_1.codeBlock = code


lord_start_lord_talk_2 = Dialog("anyone", "What is your bidding?", starting_state="lord_start", ending_state="lord_talk")
def condition():
    if faction_slot_eq(_g_talk_x_troop_faction,11,trp.player):
        pass
lord_start_lord_talk_2.conditionBlock = condition


lord_start_lord_talk_3 = Dialog("anyone", "I wish to welcome you to my hall on this auspicious occasion. Now, what is it?", starting_state="lord_start", ending_state="lord_talk")
def condition():
    if faction_slot_eq(_g_talk_x_troop_faction,4,6) and faction_slot_eq(_g_talk_x_troop_faction,5,_g_encountered_party) and _g_encountered_party_relation >= 0 and party_slot_eq(_g_encountered_party,7,_g_talk_troop) and _talk_context != 3:
        pass
lord_start_lord_talk_3.conditionBlock = condition
def code():
    if is_between(_g_talk_troop_relation,0,10) and _g_time_since_last_talk >= 24:
        troop_change_relation_with_troop(_g_talk_troop,trp.player,2)
    #end
lord_start_lord_talk_3.codeBlock = code


lord_start_lord_talk_4 = Dialog("anyone", "Let us lift a {s5} to the health of our host, {s4}. Now, what is it?", starting_state="lord_start", ending_state="lord_talk")
def condition():
    if faction_slot_eq(_g_talk_x_troop_faction,4,6) and faction_slot_eq(_g_talk_x_troop_faction,5,_g_encountered_party) and _g_encountered_party_relation >= 0:
        party_slot_001 = party_get_slot(_g_encountered_party,7)
        s4 = str_store_troop_name(party_slot_001)
        if _talk_context != 3:
            if _g_talk_x_troop_faction == fac.kingdom_4:
                s5 = str_store_string(gstr.flagon_of_mead)
            else:
                var002 = store_mod(_g_talk_troop,2)
                if var002 == 0 and _g_talk_x_troop_faction == fac.kingdom_3:
                    s5 = str_store_string(gstr.skin_of_kumis)
                else:
                    var002 = store_mod(_g_talk_troop,2)
                    if var002 == 0 and _g_talk_x_troop_faction == fac.kingdom_2:
                        s5 = str_store_string(gstr.mug_of_kvass)
                    else:
                        s5 = str_store_string(gstr.cup_of_wine)
                    #end
                #end
            #end
        #end
    #end
lord_start_lord_talk_4.conditionBlock = condition


lord_talk_offer_gift_quest_complete = Dialog("anyone|plyr", "I have the materials for {s4}'s gift.", starting_state="lord_talk", ending_state="offer_gift_quest_complete")
def condition():
    if check_quest_active(qst.offer_gift) and quest_slot_eq(qst.offer_gift,6,_g_talk_troop):
        quest_slot_001 = quest_get_slot(qst.offer_gift,2)
        if player_has_item(itm.furs) and player_has_item(itm.velvet):
            s4 = str_store_troop_name(quest_slot_001)
lord_talk_offer_gift_quest_complete.conditionBlock = condition


offer_gift_quest_complete_close_window = Dialog("anyone", "Ah, let me take those. Hopefully this will mend the quarrel between you two. You may wish to speak to {reg4?her:him}, and see if I had any success.", starting_state="offer_gift_quest_complete", ending_state="close_window")
def condition():
    quest_slot_001 = quest_get_slot(qst.offer_gift,2)
    reg4 = troop_get_type(quest_slot_001)
offer_gift_quest_complete_close_window.conditionBlock = condition
def code():
    quest_set_slot(qst.offer_gift,11,2)
    quest_set_slot(qst.offer_gift,23,365)
    troop_remove_item(trp.player,itm.furs)
    troop_remove_item(trp.player,itm.velvet)
    _g_leave_encounter = 1
offer_gift_quest_complete_close_window.codeBlock = code


lord_talk_intrigue_quest_state_complaint = Dialog("anyone|plyr", "My lord -- there is something I wish to tell you in confidence, about one of your vassals.", starting_state="lord_talk", ending_state="intrigue_quest_state_complaint")
def condition():
    if check_quest_active(qst.intrigue_against_lord) and not check_quest_succeeded(qst.intrigue_against_lord) and not check_quest_failed(qst.intrigue_against_lord):
        quest_slot_001 = quest_get_slot(qst.intrigue_against_lord,2)
        if faction_slot_eq(troop_faction_002,11,_g_talk_troop):
            troop_faction_002 = store_faction_of_troop(quest_slot_001)
lord_talk_intrigue_quest_state_complaint.conditionBlock = condition


intrigue_quest_state_complaint_lord_pretalk = Dialog("anyone", "Whatever you have to say, I would ask you to wait until we are alone.", starting_state="intrigue_quest_state_complaint", ending_state="lord_pretalk")
def condition():
    var001 = 1
    if cf_troop_can_intrigue(_g_talk_troop,1):
        var001 = 0
        if var001 == 1:
            pass
        #end
    #end
intrigue_quest_state_complaint_lord_pretalk.conditionBlock = condition


intrigue_quest_state_complaint_intrigue_quest_state_complaint_plyr = Dialog("anyone", "What is it? I value your opinion, although I hope that you are not trying to sew dissension among my vassals? ", starting_state="intrigue_quest_state_complaint", ending_state="intrigue_quest_state_complaint_plyr")
def code():
    quest_slot_001 = quest_get_slot(qst.intrigue_against_lord,2)
    troop_get_relation_with_troop(quest_slot_001,_g_talk_troop)
    reg4 = reg0
    s4 = str_store_troop_name(quest_slot_001)
    reg5 = _g_talk_troop_effective_relation
    if _cheat_mode == 1:
        s12 = str_store_string(gstr.intrigue_success_chance)
        print(gstr.s12)
    #end
intrigue_quest_state_complaint_intrigue_quest_state_complaint_plyr.codeBlock = code


intrigue_quest_state_complaint_plyr_lord_intrigue_quest_complaint_stated = Dialog("anyone|plyr", "My liege -- {s4} is widely held by your vassals to be {s5}, and a liability to your realm", starting_state="intrigue_quest_state_complaint_plyr", ending_state="lord_intrigue_quest_complaint_stated")
def condition():
    if check_quest_active(qst.intrigue_against_lord):
        quest_slot_001 = quest_get_slot(qst.intrigue_against_lord,2)
        s4 = str_store_troop_name(quest_slot_001)
        troop_slot_002 = troop_get_slot(quest_slot_001,52)
        troop_slot_002 += gstr.lord_derogatory_default
        s5 = str_store_string(troop_slot_002)
intrigue_quest_state_complaint_plyr_lord_intrigue_quest_complaint_stated.conditionBlock = condition


intrigue_quest_state_complaint_plyr_lord_pretalk = Dialog("anyone|plyr", "Actually, my liege, never mind.", starting_state="intrigue_quest_state_complaint_plyr", ending_state="lord_pretalk")
def code():
    fail_quest(qst.intrigue_against_lord)
intrigue_quest_state_complaint_plyr_lord_pretalk.codeBlock = code


lord_intrigue_quest_complaint_stated_lord_pretalk = Dialog("anyone", "Hmm... This is troubling to hear. Although I do not encourage my vassals to speak ill of each other, I value your opinion. Perhaps I should think twice about granting {s4} any further fiefs or offices...", starting_state="lord_intrigue_quest_complaint_stated", ending_state="lord_pretalk")
def condition():
    random_x_001 = store_random_in_range(-50,50)
    var002 = _g_talk_troop_effective_relation + random_x_001
    quest_slot_003 = quest_get_slot(qst.intrigue_against_lord,2)
    if var002 >= reg0:
        troop_get_relation_with_troop(quest_slot_003,_g_talk_troop)
lord_intrigue_quest_complaint_stated_lord_pretalk.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(qst.intrigue_against_lord,2)
    troop_change_relation_with_troop(_g_talk_troop,quest_slot_001,-10)
    succeed_quest(qst.intrigue_against_lord)
lord_intrigue_quest_complaint_stated_lord_pretalk.codeBlock = code


lord_intrigue_quest_complaint_stated_intrigue_quest_state_complaint_failed = Dialog("anyone", "Sew discord among my vassals, will you? With everything else going on, do you think I appreciate my nobles turning on each other like quarreling dogs? Let me ask you this -- did someone put you up this?", starting_state="lord_intrigue_quest_complaint_stated", ending_state="intrigue_quest_state_complaint_failed")
def code():
    fail_quest(qst.intrigue_against_lord)
    troop_change_relation_with_troop(_g_talk_troop,trp.player,-5)
lord_intrigue_quest_complaint_stated_intrigue_quest_state_complaint_failed.codeBlock = code


intrigue_quest_state_complaint_failed_intrigue_quest_state_accept_blame = Dialog("anyone|plyr", "I stand by my words, my liege.", starting_state="intrigue_quest_state_complaint_failed", ending_state="intrigue_quest_state_accept_blame")
def code():
    change_player_honor(1)
intrigue_quest_state_complaint_failed_intrigue_quest_state_accept_blame.codeBlock = code


intrigue_quest_state_complaint_failed_intrigue_quest_state_deflect_blame = Dialog("anyone|plyr", "Yes, sire -- {s4} put me up to denouncing {s5}!", starting_state="intrigue_quest_state_complaint_failed", ending_state="intrigue_quest_state_deflect_blame")
def condition():
    quest_slot_001 = quest_get_slot(qst.intrigue_against_lord,6)
    quest_slot_002 = quest_get_slot(qst.intrigue_against_lord,2)
    s4 = str_store_troop_name(quest_slot_001)
    s5 = str_store_troop_name(quest_slot_002)
intrigue_quest_state_complaint_failed_intrigue_quest_state_deflect_blame.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(qst.intrigue_against_lord,6)
    troop_change_relation_with_troop(_g_talk_troop,quest_slot_001,-5)
    troop_change_relation_with_troop(_g_talk_troop,trp.player,4)
    change_player_honor(-2)
intrigue_quest_state_complaint_failed_intrigue_quest_state_deflect_blame.codeBlock = code


intrigue_quest_state_accept_blame_lord_pretalk = Dialog("anyone", "Indeed. You may stand by your words, but keep them to yourself. I will not have you undercutting my faithful follower {s4}.", starting_state="intrigue_quest_state_accept_blame", ending_state="lord_pretalk")


intrigue_quest_state_deflect_blame_lord_pretalk = Dialog("anyone", "I thought as much. Here's some advice for you, {lad/lassie} -- don't meddle in the quarrels of others. Now, enough of this.", starting_state="intrigue_quest_state_deflect_blame", ending_state="lord_pretalk")


lord_talk_lord_denounce_1 = Dialog("anyone|plyr", "I want to tell you something -- we have had enough of your {s4} ways", starting_state="lord_talk", ending_state="lord_denounce_1")
def condition():
    if check_quest_active(qst.denounce_lord) and not check_quest_succeeded(qst.denounce_lord) and not check_quest_failed(qst.denounce_lord) and quest_slot_eq(qst.denounce_lord,2,_g_talk_troop):
        troop_slot_001 = troop_get_slot(_g_talk_troop,52)
        troop_slot_001 += gstr.lord_derogatory_default
        s4 = str_store_string(troop_slot_001)
lord_talk_lord_denounce_1.conditionBlock = condition


lord_denounce_1_lord_denounce_2 = Dialog("anyone", "I'm sorry... What did you say?", starting_state="lord_denounce_1", ending_state="lord_denounce_2")


lord_denounce_2_lord_denounce_3 = Dialog("anyone|plyr", "You heard me. You will {s4}", starting_state="lord_denounce_2", ending_state="lord_denounce_3")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,52)
    troop_slot_001 += gstr.lord_derogatory_result
    s4 = str_store_string(troop_slot_001)
lord_denounce_2_lord_denounce_3.conditionBlock = condition
def code():
    troop_change_relation_with_troop(_g_talk_troop,trp.player,-15)
    var001 = _g_talk_troop_relation / 10
    var001 += 1
    val_max(var001,1)
    var001 *= -1
    for trp_002 in range(trp.npc1, trp.knight_1_1_wife):
        if _g_talk_troop != trp_002:
            troop_faction_003 = store_faction_of_troop(trp_002)
            if troop_faction_003 == _g_talk_x_troop_faction:
                troop_get_relation_with_troop(trp_002,_g_talk_troop)
                if reg0 < 15:
                    troop_change_relation_with_troop(trp_002,_g_talk_troop,var001)
                #end
            #end
        #end
    #end
lord_denounce_2_lord_denounce_3.codeBlock = code


lord_denounce_2_lord_pretalk = Dialog("anyone|plyr", "Never mind. You must have misheard me.", starting_state="lord_denounce_2", ending_state="lord_pretalk")


lord_denounce_3_close_window = Dialog("anyone", "Why would you say such a thing? To insult me like this, in spite of our friendship -- how much crueler is a knife in my back from an erstwhile friends, than the sword of a sworn foe. I do not know what game you are playing, but I want no part of it. Go away. I do not want to look at you.", starting_state="lord_denounce_3", ending_state="close_window")
def condition():
    if _g_talk_troop_relation >= 10 and troop_slot_eq(_g_talk_troop,52,2) or not troop_slot_eq(_g_talk_troop,52,1):
        pass
lord_denounce_3_close_window.conditionBlock = condition
def code():
    succeed_quest(qst.denounce_lord)
lord_denounce_3_close_window.codeBlock = code


lord_denounce_3_close_window_1 = Dialog("anyone", "Hmf. Really? Is that your opinion, or did one of my rivals put those words in your mouth? Never mind. I will not play your game. Go away, and take your intrigues with you.", starting_state="lord_denounce_3", ending_state="close_window")
def condition():
    if troop_slot_ge(trp.player,7,300) and troop_slot_eq(_g_talk_troop,52,4) or troop_slot_eq(_g_talk_troop,52,7) or troop_slot_eq(_g_talk_troop,52,6):
        pass
lord_denounce_3_close_window_1.conditionBlock = condition
def code():
    succeed_quest(qst.denounce_lord)
lord_denounce_3_close_window_1.codeBlock = code


lord_denounce_3_lord_denounce_4 = Dialog("anyone", "I will not have you shame me in public, {sir/my lady}. Retract your words, or meet me on the duelling ground.", starting_state="lord_denounce_3", ending_state="lord_denounce_4")
def condition():
    if troop_slot_eq(_g_talk_troop,52,1) or troop_slot_eq(_g_talk_troop,52,4) or troop_slot_eq(_g_talk_troop,52,7) or troop_slot_eq(_g_talk_troop,52,6):
        pass
lord_denounce_3_lord_denounce_4.conditionBlock = condition


lord_denounce_3_lord_denounce_4_1 = Dialog("anyone", "Is that so? Well, hear this -- you're a snake, and a knave, and -- if you don't meet me on the duelling ground -- a coward. What say you to that? Do you retract your words, or shall we cross swords?", starting_state="lord_denounce_3", ending_state="lord_denounce_4")


lord_denounce_4_lord_respond_to_insult_challenge_duel_confirm = Dialog("anyone|plyr", "It would be a pleasure to fight you.", starting_state="lord_denounce_4", ending_state="lord_respond_to_insult_challenge_duel_confirm")


lord_denounce_4_lord_denounce_retract = Dialog("anyone|plyr", "I spoke rashly. I retract my words.", starting_state="lord_denounce_4", ending_state="lord_denounce_retract")
def code():
    fail_quest(qst.denounce_lord)
lord_denounce_4_lord_denounce_retract.codeBlock = code


lord_denounce_retract_lord_pretalk = Dialog("anyone", "I thought as much. Now, be gone from here.", starting_state="lord_denounce_retract", ending_state="lord_pretalk")


lord_talk_lord_respond_to_insult = Dialog("anyone|plyr", "{s9}", starting_state="lord_talk", ending_state="lord_respond_to_insult")
def condition():
    if _g_comment_has_rejoinder == 1:
        _g_comment_has_rejoinder = 0
        s9 = str_store_string(_g_rejoinder_to_last_comment)
lord_talk_lord_respond_to_insult.conditionBlock = condition
def code():
    if True:
        troop_type_001 = troop_get_type(trp.player)
        if troop_type_001 == 1:
            unlock_achievement(43)
        #end
    #end
lord_talk_lord_respond_to_insult.codeBlock = code


lord_pretalk_party_encounter_lord_hostile_attacker_2 = Dialog("anyone", "But enough talking - yield or fight!", starting_state="lord_pretalk", ending_state="party_encounter_lord_hostile_attacker_2")
def condition():
    if _g_encountered_party_relation < 0 and encountered_party_is_attacker():
        pass
lord_pretalk_party_encounter_lord_hostile_attacker_2.conditionBlock = condition


lord_pretalk_lord_talk = Dialog("anyone", "Anything else?", starting_state="lord_pretalk", ending_state="lord_talk")


hero_pretalk_lord_talk = Dialog("anyone", "Anything else?", starting_state="hero_pretalk", ending_state="lord_talk")


lord_talk_lord_quarrel_intervention_1 = Dialog("anyone|plyr", "I wish to address your quarrel with {s11}", starting_state="lord_talk", ending_state="lord_quarrel_intervention_1")
def condition():
    if check_quest_active(qst.resolve_dispute):
        quest_slot_001 = quest_get_slot(qst.resolve_dispute,2)
        quest_slot_002 = quest_get_slot(qst.resolve_dispute,4)
        var003 = 0
        if quest_slot_001 == _g_talk_troop and quest_slot_eq(qst.resolve_dispute,16,0):
            _g_other_lord = quest_slot_002
            var003 = quest_slot_002
        elif quest_slot_002 == _g_talk_troop and quest_slot_eq(qst.resolve_dispute,17,0):
            _g_other_lord = quest_slot_001
            var003 = quest_slot_001
        #end
    #end
    if var003 > 0:
        s11 = str_store_troop_name(_g_other_lord)
lord_talk_lord_quarrel_intervention_1.conditionBlock = condition


lord_talk_lord_recruit_1_relation = Dialog("anyone|plyr", "Stay your hand! There is something I must say to you in private.", starting_state="lord_talk", ending_state="lord_recruit_1_relation")
def condition():
    if not troop_slot_ge(_g_talk_troop,8,0) and encountered_party_is_attacker() and not is_between(_g_talk_troop,trp.kingdom_1_pretender,trp.knight_1_1_wife) and not faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop):
        pass
lord_talk_lord_recruit_1_relation.conditionBlock = condition


lord_talk_lord_bandit_information = Dialog("anyone|plyr", "I am hunting a group of bandits with the following description... Have you seen them?", starting_state="lord_talk", ending_state="lord_bandit_information")
def condition():
    if check_quest_active(qst.track_down_bandits) and not check_quest_succeeded(qst.track_down_bandits) and not troop_slot_ge(_g_talk_troop,8,1):
        pass
lord_talk_lord_bandit_information.conditionBlock = condition


lord_bandit_information_lord_pretalk = Dialog("anyone", "{s15}", starting_state="lord_bandit_information", ending_state="lord_pretalk")
def condition():
    get_manhunt_information_to_s15(qst.track_down_bandits)
lord_bandit_information_lord_pretalk.conditionBlock = condition


lord_talk_lord_internal_politics_cur_stance = Dialog("anyone|plyr", "Who do you think should be made the marshal of our realm?", starting_state="lord_talk", ending_state="lord_internal_politics_cur_stance")
def condition():
    if _g_talk_x_troop_faction == _players_kingdom and faction_slot_eq(_players_kingdom,64,1):
        pass
lord_talk_lord_internal_politics_cur_stance.conditionBlock = condition


lord_talk_lord_internal_politics_cur_stance_1 = Dialog("anyone|plyr", "Whom do you think should receive the fief of {s4}?", starting_state="lord_talk", ending_state="lord_internal_politics_cur_stance")
def condition():
    if _g_talk_x_troop_faction == _players_kingdom:
        faction_slot_001 = faction_get_slot(_players_kingdom,64)
        if is_between(faction_slot_001,p.town_1,p.salt_mine):
            s4 = str_store_party_name(faction_slot_001)
lord_talk_lord_internal_politics_cur_stance_1.conditionBlock = condition


lord_talk_lord_husband_auto_recruit = Dialog("anyone|plyr", "I need you to renounce your allegiance to {s4} and join the {s5} now, my husband.", starting_state="lord_talk", ending_state="lord_husband_auto_recruit")
def condition():
    if troop_slot_eq(trp.player,30,_g_talk_troop) and troop_slot_eq(_g_talk_troop,2,2) and is_between(_players_kingdom,fac.player_supporters_faction,fac.kingdoms_end) and _g_talk_x_troop_faction != _players_kingdom and faction_slot_eq(fac.player_supporters_faction,21,0):
        faction_slot_001 = faction_get_slot(_g_talk_x_troop_faction,11)
        s4 = str_store_troop_name(faction_slot_001)
        s5 = str_store_faction_name(_players_kingdom)
lord_talk_lord_husband_auto_recruit.conditionBlock = condition


lord_husband_auto_recruit_lord_pretalk = Dialog("anyone", "Ask me again when we are outside of these walls, my wife.", starting_state="lord_husband_auto_recruit", ending_state="lord_pretalk")
def condition():
    if is_between(_g_encountered_party,p.town_1,p.salt_mine) and not party_slot_eq(_g_encountered_party,7,_g_talk_troop):
        pass
lord_husband_auto_recruit_lord_pretalk.conditionBlock = condition


lord_husband_auto_recruit_close_window = Dialog("anyone", "As you wish, my wife.", starting_state="lord_husband_auto_recruit", ending_state="close_window")
def code():
    _g_leave_encounter = 1
    change_troop_faction(_g_talk_troop,_players_kingdom)
    if True:
        faction_relation_001 = store_relation(_players_kingdom,_g_talk_x_troop_faction)
        if faction_relation_001 >= 0:
            if _cheat_mode == 1:
                print(gstr.lord_recruitment_provokes_home_faction)
            #end
        #end
        add_log_entry(78,trp.player,-1,_g_talk_troop,_g_talk_x_troop_faction)
        slot_no_002 = _players_kingdom + 130
        slot_no_002 -= fac.player_supporters_faction
        faction_set_slot(_g_talk_x_troop_faction,slot_no_002,30)
        faction_slot_003 = faction_get_slot(_g_talk_x_troop_faction,11)
        troop_change_relation_with_troop(trp.player,faction_slot_003,-3)
    #end
    if faction_slot_eq(_players_kingdom,11,trp.player):
        change_player_right_to_rule(5)
    #end
lord_husband_auto_recruit_close_window.codeBlock = code


lord_talk_lord_recruit_1_relation_1 = Dialog("anyone|plyr", "There is a matter which I would like to discuss in private.", starting_state="lord_talk", ending_state="lord_recruit_1_relation")
def condition():
    if troop_slot_eq(trp.player,30,_g_talk_troop):
        pass
lord_talk_lord_recruit_1_relation_1.conditionBlock = condition


lord_talk_lord_recruit_1_relation_2 = Dialog("anyone|plyr", "There is something which I would like to discuss with to you in private.", starting_state="lord_talk", ending_state="lord_recruit_1_relation")
def condition():
    if not troop_slot_ge(_g_talk_troop,8,0) and not encountered_party_is_attacker() and not is_between(_g_talk_troop,trp.kingdom_1_pretender,trp.knight_1_1_wife) and not faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop) and not troop_slot_eq(trp.player,30,_g_talk_troop) and _g_talk_x_troop_faction != fac.player_supporters_faction:
        pass
lord_talk_lord_recruit_1_relation_2.conditionBlock = condition


lord_talk_lord_talk = Dialog("anyone|plyr", "CHEAT -- Reset lord decision seed and intrigue impatience", starting_state="lord_talk", ending_state="lord_talk")
def condition():
    if troop_slot_ge(_g_talk_troop,51,1) and _cheat_mode == 1:
        pass
lord_talk_lord_talk.conditionBlock = condition
def code():
    troop_set_slot(_g_talk_troop,51,0)
    random_x_001 = store_random_in_range(0,9999)
    troop_set_slot(_g_talk_troop,49,random_x_001)
lord_talk_lord_talk.codeBlock = code


lord_talk_lord_respond_to_insult_challenge_duel = Dialog("anyone|plyr", "CHEAT -- Let's duel (insult)", starting_state="lord_talk", ending_state="lord_respond_to_insult_challenge_duel")
def condition():
    if _cheat_mode == 1:
        pass
lord_talk_lord_respond_to_insult_challenge_duel.conditionBlock = condition


lord_respond_to_insult_lord_pretalk = Dialog("anyone", "Hah! I admire a quick tongue. Perhaps some day I shall remove it, with tongs, to admire it at greater leisure, but today, at least, I shall salute your wit and courage.", starting_state="lord_respond_to_insult", ending_state="lord_pretalk")
def condition():
    if _g_last_comment_copied_to_s42 == gstr.comment_intro_female_sadistic_admiring:
        pass
lord_respond_to_insult_lord_pretalk.conditionBlock = condition
def code():
    troop_change_relation_with_troop(trp.player,_g_talk_troop,5)
    change_troop_renown(trp.player,2)
lord_respond_to_insult_lord_pretalk.codeBlock = code


lord_respond_to_insult_lord_pretalk_1 = Dialog("anyone", "I meant no offense, madame.", starting_state="lord_respond_to_insult", ending_state="lord_pretalk")
def condition():
    _g_last_comment_copied_to_s42_list1 = [
    gstr.comment_intro_female_badtempered_admiring,
    gstr.comment_intro_female_common_martial,
    gstr.comment_intro_female_noble_upstanding,
    gstr.comment_intro_female_common_upstanding,
    gstr.comment_intro_female_pitiless_admiring,
    ]
    if _g_last_comment_copied_to_s42 in _g_last_comment_copied_to_s42_list1:
        pass
lord_respond_to_insult_lord_pretalk_1.conditionBlock = condition
def code():
    troop_change_relation_with_troop(trp.player,_g_talk_troop,-2)
    change_troop_renown(trp.player,2)
lord_respond_to_insult_lord_pretalk_1.codeBlock = code


lord_respond_to_insult_lord_respond_to_insult_challenge_battle = Dialog("anyone", "Are you trying to provoke me? Well, I would have you know that I am under no obligation to duel women, commoners, rebels, or brigands. I could, however, order my men to seize you and horsewhip you. Would you like them to do that?", starting_state="lord_respond_to_insult", ending_state="lord_respond_to_insult_challenge_battle")
def condition():
    if troop_slot_eq(_g_talk_troop,10,_g_encountered_party):
        party_size_wo_prisoners_001 = store_party_size_wo_prisoners(_g_talk_troop_party)
        party_size_wo_prisoners_002 = store_party_size_wo_prisoners(p.main_party)
        party_size_wo_prisoners_002 *= 3
        if party_size_wo_prisoners_001 > party_size_wo_prisoners_002 and _players_kingdom != _g_talk_x_troop_faction:
            party_size_wo_prisoners_002 /= 2
lord_respond_to_insult_lord_respond_to_insult_challenge_battle.conditionBlock = condition
def code():
    troop_change_relation_with_troop(trp.player,_g_talk_troop,-10)
    change_troop_renown(trp.player,2)
lord_respond_to_insult_lord_respond_to_insult_challenge_battle.codeBlock = code


lord_respond_to_insult_lord_respond_to_insult_challenge_duel = Dialog("anyone", "Are you trying to provoke me? Well, I would have you know that I am under no obligation to duel women, commoners, rebels, or brigands. However, in your case, I would be delighted to make an exception. Are you ready for a lesson in deference to your betters, {varlot/girl}?", starting_state="lord_respond_to_insult", ending_state="lord_respond_to_insult_challenge_duel")
def code():
    troop_change_relation_with_troop(trp.player,_g_talk_troop,-10)
    change_troop_renown(trp.player,2)
lord_respond_to_insult_lord_respond_to_insult_challenge_duel.codeBlock = code


lord_respond_to_insult_close_window = Dialog("anyone", "Are you trying to provoke me? Well, I would have you know that I am under no obligation to duel women, commoners, rebels, or brigands. You are lucky that I am in a good mood, because I am perfectly within my rights to order my men to seize you and horsewhip you. Now begone -- I have had enough of you.", starting_state="lord_respond_to_insult", ending_state="close_window")
def code():
    troop_change_relation_with_troop(trp.player,_g_talk_troop,-10)
    change_troop_renown(trp.player,2)
    _g_leave_encounter = 1
lord_respond_to_insult_close_window.codeBlock = code


lord_respond_to_insult_challenge_battle_lord_respond_to_insult_challenge_battle_confirm = Dialog("anyone|plyr", "I would like to see them try.", starting_state="lord_respond_to_insult_challenge_battle", ending_state="lord_respond_to_insult_challenge_battle_confirm")
def code():
    troop_change_relation_with_troop(trp.player,_g_talk_troop,-10)
    change_troop_renown(trp.player,3)
lord_respond_to_insult_challenge_battle_lord_respond_to_insult_challenge_battle_confirm.codeBlock = code


lord_respond_to_insult_challenge_battle_close_window = Dialog("anyone|plyr", "This is not worth the shedding of blood.", starting_state="lord_respond_to_insult_challenge_battle", ending_state="close_window")
def code():
    _g_leave_encounter = 1
lord_respond_to_insult_challenge_battle_close_window.codeBlock = code


lord_respond_to_insult_challenge_battle_confirm_close_window = Dialog("anyone", "Enough of your insolence! At {him/her}, lads!", starting_state="lord_respond_to_insult_challenge_battle_confirm", ending_state="close_window")
def code():
    _g_private_battle_with_troop = _g_talk_troop
    _cant_leave_encounter = 1
    _encountered_party_friendly = 0
    jump_to_menu(mnu.simple_encounter)
lord_respond_to_insult_challenge_battle_confirm_close_window.codeBlock = code


lord_respond_to_insult_challenge_duel_lord_respond_to_insult_challenge_duel_confirm = Dialog("anyone|plyr", "I am ready to teach you one.", starting_state="lord_respond_to_insult_challenge_duel", ending_state="lord_respond_to_insult_challenge_duel_confirm")
def code():
    s13 = str_store_troop_name_link(_g_talk_troop)
    setup_quest_text(qst.duel_avenge_insult)
    s2 = str_store_string(gstr.you_intend_to_challenge_s13_to_force_him_to_retract_an_insult)
    start_quest(qst.duel_avenge_insult,_g_talk_troop)
    quest_set_slot(qst.duel_avenge_insult,2,_g_talk_troop)
    troop_change_relation_with_troop(trp.player,_g_talk_troop,-10)
lord_respond_to_insult_challenge_duel_lord_respond_to_insult_challenge_duel_confirm.codeBlock = code


lord_respond_to_insult_challenge_duel_close_window = Dialog("anyone|plyr", "This is not worth the shedding of blood.", starting_state="lord_respond_to_insult_challenge_duel", ending_state="close_window")
def code():
    _g_leave_encounter = 1
lord_respond_to_insult_challenge_duel_close_window.codeBlock = code


lord_respond_to_insult_challenge_duel_confirm_close_window = Dialog("anyone", "So be it. Defend yourself!", starting_state="lord_respond_to_insult_challenge_duel_confirm", ending_state="close_window")
def code():
    set_up_duel_with_troop(_g_talk_troop)
lord_respond_to_insult_challenge_duel_confirm_close_window.codeBlock = code


lord_quarrel_intervention_1_lord_quarrel_intervention_2 = Dialog("anyone", "{s14}", starting_state="lord_quarrel_intervention_1", ending_state="lord_quarrel_intervention_2")
def condition():
    s14 = str_store_string(gstr.general_quarrel)
    _temp = _g_other_lord
    var001 = 0
    var002 = _num_log_entries + 1
    for var003 in range(1, var002):
        if troop_slot_eq(trp.log_array_entry_type,var003,27) and troop_slot_eq(trp.log_array_troop_object,var003,_temp) and troop_slot_eq(trp.log_array_center_object,var003,_g_talk_troop) and troop_slot_eq(trp.log_array_faction_object,var003,_g_talk_x_troop_faction):
            get_relevant_comment_for_log_entry(var003)
            s14 = str_store_string(reg0)
            var001 = 1
        elif troop_slot_eq(trp.log_array_entry_type,var003,32) and troop_slot_eq(trp.log_array_actor,var003,_g_talk_troop) and troop_slot_eq(trp.log_array_center_object,var003,_temp):
            get_relevant_comment_for_log_entry(var003)
            s14 = str_store_string(reg0)
            var001 = 1
        elif troop_slot_eq(trp.log_array_entry_type,var003,33) and troop_slot_eq(trp.log_array_actor,var003,_g_talk_troop) and troop_slot_eq(trp.log_array_center_object,var003,_temp):
            get_relevant_comment_for_log_entry(var003)
            s14 = str_store_string(reg0)
            var001 = 1
        elif troop_slot_eq(trp.log_array_entry_type,var003,26) and troop_slot_eq(trp.log_array_actor,var003,_g_talk_troop) and troop_slot_eq(trp.log_array_troop_object,var003,_temp):
            get_relevant_comment_for_log_entry(var003)
            s14 = str_store_string(reg0)
            var001 = 1
        elif troop_slot_eq(trp.log_array_entry_type,var003,31) and troop_slot_eq(trp.log_array_actor,var003,_g_talk_troop) and troop_slot_eq(trp.log_array_center_object,var003,_temp):
            get_relevant_comment_for_log_entry(var003)
            s14 = str_store_string(reg0)
            var001 = 1
        elif troop_slot_eq(trp.log_array_entry_type,var003,31) and troop_slot_eq(trp.log_array_actor,var003,_temp) and troop_slot_eq(trp.log_array_center_object,var003,_g_talk_troop):
            get_relevant_comment_for_log_entry(var003)
            s14 = str_store_string(reg0)
            var001 = 1
        #end
    #end
    if var001 == 0:
        troop_describes_quarrel_with_troop_to_s14(_g_talk_troop,_temp)
    #end
lord_quarrel_intervention_1_lord_quarrel_intervention_2.conditionBlock = condition


lord_quarrel_intervention_2_lord_quarrel_intervention_3a = Dialog("anyone|plyr", "Ah, well. It sounds like you're in the right, then.", starting_state="lord_quarrel_intervention_2", ending_state="lord_quarrel_intervention_3a")
def code():
    troop_change_relation_with_troop(trp.player,_g_other_lord,-20)
    troop_change_relation_with_troop(trp.player,_g_talk_troop,10)
    if faction_slot_eq(fac.player_supporters_faction,11,trp.player):
        add_log_entry(27,trp.player,_g_other_lord,_g_talk_troop,fac.player_supporters_faction)
    #end
    end_quest(qst.resolve_dispute)
lord_quarrel_intervention_2_lord_quarrel_intervention_3a.codeBlock = code


lord_quarrel_intervention_2_lord_quarrel_intervention_3b = Dialog("anyone|plyr", "Whatever your differences, I want you to settle them.", starting_state="lord_quarrel_intervention_2", ending_state="lord_quarrel_intervention_3b")
def condition():
    if faction_slot_eq(_players_kingdom,11,trp.player):
        pass
lord_quarrel_intervention_2_lord_quarrel_intervention_3b.conditionBlock = condition


lord_quarrel_intervention_2_lord_quarrel_intervention_3b_1 = Dialog("anyone|plyr", "Could you not be convinced to settle your differences?", starting_state="lord_quarrel_intervention_2", ending_state="lord_quarrel_intervention_3b")
def condition():
    if not faction_slot_eq(_players_kingdom,11,trp.player):
        pass
lord_quarrel_intervention_2_lord_quarrel_intervention_3b_1.conditionBlock = condition


lord_quarrel_intervention_2_lord_pretalk = Dialog("anyone|plyr", "On second thought, I want nothing to do with this.", starting_state="lord_quarrel_intervention_2", ending_state="lord_pretalk")
def code():
    abort_quest(qst.resolve_dispute,1)
lord_quarrel_intervention_2_lord_pretalk.codeBlock = code


lord_quarrel_intervention_3a_lord_pretalk = Dialog("anyone", "I'm glad that you think so.", starting_state="lord_quarrel_intervention_3a", ending_state="lord_pretalk")


lord_quarrel_intervention_3b_lord_quarrel_intervention_4 = Dialog("anyone", "For the sake of our friendship, I defer to your judgment. I will try to make amends with {s11}.", starting_state="lord_quarrel_intervention_3b", ending_state="lord_quarrel_intervention_4")
def condition():
    random_x_001 = store_random_in_range(0,21)
    if random_x_001 <= _g_talk_troop_effective_relation:
        s11 = str_store_troop_name(_g_other_lord)
lord_quarrel_intervention_3b_lord_quarrel_intervention_4.conditionBlock = condition
def code():
    if quest_slot_eq(qst.resolve_dispute,2,_g_talk_troop):
        quest_set_slot(qst.resolve_dispute,16,1)
    elif quest_slot_eq(qst.resolve_dispute,4,_g_talk_troop):
        quest_set_slot(qst.resolve_dispute,17,1)
    #end
lord_quarrel_intervention_3b_lord_quarrel_intervention_4.codeBlock = code


lord_quarrel_intervention_3b_lord_pretalk = Dialog("anyone", "I will not reconcile with {s11}. I know my rights.", starting_state="lord_quarrel_intervention_3b", ending_state="lord_pretalk")
def condition():
    s11 = str_store_troop_name(_g_other_lord)
lord_quarrel_intervention_3b_lord_pretalk.conditionBlock = condition
def code():
    troop_change_relation_with_troop(trp.player,_g_talk_troop,-15)
    troop_change_relation_with_troop(trp.player,_g_other_lord,10)
    if _players_kingdom == fac.player_supporters_faction:
        add_log_entry(27,trp.player,_g_talk_troop,_g_other_lord,fac.player_supporters_faction)
    #end
    end_quest(qst.resolve_dispute)
lord_quarrel_intervention_3b_lord_pretalk.codeBlock = code


lord_quarrel_intervention_4_lord_pretalk = Dialog("anyone", "Let it be as though our quarrel never occurred.", starting_state="lord_quarrel_intervention_4", ending_state="lord_pretalk")
def condition():
    if quest_slot_eq(qst.resolve_dispute,17,1) and quest_slot_eq(qst.resolve_dispute,16,1):
        pass
lord_quarrel_intervention_4_lord_pretalk.conditionBlock = condition
def code():
    troop_change_relation_with_troop(_g_talk_troop,_g_other_lord,20)
    succeed_quest(qst.resolve_dispute)
    end_quest(qst.resolve_dispute)
    change_player_honor(3)
    change_troop_renown(trp.player,25)
    add_xp_as_reward(500)
lord_quarrel_intervention_4_lord_pretalk.codeBlock = code


lord_quarrel_intervention_4_lord_pretalk_1 = Dialog("anyone", "I suppose that you should speak to {s11}, and see if he will do the same for me.", starting_state="lord_quarrel_intervention_4", ending_state="lord_pretalk")
def condition():
    s11 = str_store_troop_name(_g_other_lord)
lord_quarrel_intervention_4_lord_pretalk_1.conditionBlock = condition


lord_internal_politics_cur_stance_lord_internal_politics_cur_stance_plyr_response = Dialog("anyone", "I had already made up my mind to support you.", starting_state="lord_internal_politics_cur_stance", ending_state="lord_internal_politics_cur_stance_plyr_response")
def condition():
    if troop_slot_eq(_g_talk_troop,154,trp.player):
        pass
lord_internal_politics_cur_stance_lord_internal_politics_cur_stance_plyr_response.conditionBlock = condition


lord_internal_politics_cur_stance_lord_internal_politics_cur_stance_plyr_response_1 = Dialog("anyone", "I am unable to decide at this time", starting_state="lord_internal_politics_cur_stance", ending_state="lord_internal_politics_cur_stance_plyr_response")
def condition():
    if reg0 == -1:
        npc_decision_checklist_take_stand_on_issue(_g_talk_troop)
lord_internal_politics_cur_stance_lord_internal_politics_cur_stance_plyr_response_1.conditionBlock = condition


lord_internal_politics_cur_stance_lord_internal_politics_cur_stance_plyr_response_2 = Dialog("anyone", "I support {s15}. {s10}", starting_state="lord_internal_politics_cur_stance", ending_state="lord_internal_politics_cur_stance_plyr_response")
def code():
    npc_decision_checklist_take_stand_on_issue(_g_talk_troop)
    var001 = reg0
    var002 = reg1
    troop_set_slot(_g_talk_troop,154,var001)
    s10 = str_store_string(var002)
    if var001 == _g_talk_troop:
        str_clear(10)
    #end
    troop_describes_troop_to_s15(_g_talk_troop,var001)
lord_internal_politics_cur_stance_lord_internal_politics_cur_stance_plyr_response_2.codeBlock = code


lord_internal_politics_cur_stance_plyr_response_lord_internal_politics_plyr_choose_candidate = Dialog("anyone|plyr", "Let me tell you whom I support...", starting_state="lord_internal_politics_cur_stance_plyr_response", ending_state="lord_internal_politics_plyr_choose_candidate")
def condition():
    if troop_slot_eq(trp.player,154,-1) and _player_has_homage == 1:
        pass
lord_internal_politics_cur_stance_plyr_response_lord_internal_politics_plyr_choose_candidate.conditionBlock = condition


lord_internal_politics_cur_stance_plyr_response_lord_internal_politics_cur_stance_plyr_response = Dialog("anyone|plyr", "CHEAT -- Reset support", starting_state="lord_internal_politics_cur_stance_plyr_response", ending_state="lord_internal_politics_cur_stance_plyr_response")
def condition():
    if _cheat_mode == 1 and _player_has_homage == 1:
        pass
lord_internal_politics_cur_stance_plyr_response_lord_internal_politics_cur_stance_plyr_response.conditionBlock = condition
def code():
    troop_set_slot(trp.player,154,-1)
lord_internal_politics_cur_stance_plyr_response_lord_internal_politics_cur_stance_plyr_response.codeBlock = code


lord_internal_politics_plyr_choose_candidate_lord_internal_politics_plyr_choose_candidate_select = Dialog("anyone", "Whom do you support?", starting_state="lord_internal_politics_plyr_choose_candidate", ending_state="lord_internal_politics_plyr_choose_candidate_select")


lord_internal_politics_plyr_choose_candidate_select_lord_internal_politics_pretalk = Dialog("anyone|plyr", "I would like to nominate myself for that honor", starting_state="lord_internal_politics_plyr_choose_candidate_select", ending_state="lord_internal_politics_pretalk")
def code():
    troop_set_slot(trp.player,154,trp.player)
lord_internal_politics_plyr_choose_candidate_select_lord_internal_politics_pretalk.codeBlock = code


lord_internal_politics_plyr_choose_candidate_select_lord_internal_politics_pretalk_1 = Dialog("anyone|plyr", "I support my husband, {s4}", starting_state="lord_internal_politics_plyr_choose_candidate_select", ending_state="lord_internal_politics_pretalk")
def condition():
    troop_slot_001 = troop_get_slot(trp.player,30)
    if troop_slot_001 != _g_talk_troop and is_between(troop_slot_001,trp.npc1,trp.knight_1_1_wife) and troop_slot_eq(troop_slot_001,2,2):
        troop_faction_002 = store_faction_of_troop(troop_slot_001)
        if troop_faction_002 == _players_kingdom:
            s4 = str_store_troop_name(troop_slot_001)
lord_internal_politics_plyr_choose_candidate_select_lord_internal_politics_pretalk_1.conditionBlock = condition
def code():
    troop_slot_001 = troop_get_slot(trp.player,30)
    troop_set_slot(trp.player,154,troop_slot_001)
lord_internal_politics_plyr_choose_candidate_select_lord_internal_politics_pretalk_1.codeBlock = code


lord_internal_politics_plyr_choose_candidate_select_lord_internal_politics_support_acknowledge = Dialog("anyone|plyr", "I would support you, {s4}", starting_state="lord_internal_politics_plyr_choose_candidate_select", ending_state="lord_internal_politics_support_acknowledge")
def condition():
    s4 = str_store_troop_name(_g_talk_troop)
lord_internal_politics_plyr_choose_candidate_select_lord_internal_politics_support_acknowledge.conditionBlock = condition


lord_internal_politics_plyr_choose_candidate_select_lord_internal_politics_support_same_acknowledge = Dialog("anyone|plyr", "I would support your choice, {s4}", starting_state="lord_internal_politics_plyr_choose_candidate_select", ending_state="lord_internal_politics_support_same_acknowledge")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,154)
    if is_between(troop_slot_001,trp.npc1,trp.knight_1_1_wife):
        if troop_slot_001 != _g_talk_troop:
            s4 = str_store_troop_name(troop_slot_001)
lord_internal_politics_plyr_choose_candidate_select_lord_internal_politics_support_same_acknowledge.conditionBlock = condition


lord_internal_politics_plyr_choose_candidate_select_lord_pretalk = Dialog("anyone|plyr", "Never mind", starting_state="lord_internal_politics_plyr_choose_candidate_select", ending_state="lord_pretalk")


lord_internal_politics_support_acknowledge_lord_pretalk = Dialog("anyone", "That is most gracious of you, but I do not seek the honor, and I decline your support.", starting_state="lord_internal_politics_support_acknowledge", ending_state="lord_pretalk")
def condition():
    if _g_talk_troop != troop_slot_001:
        troop_slot_001 = troop_get_slot(_g_talk_troop,154)
lord_internal_politics_support_acknowledge_lord_pretalk.conditionBlock = condition
def code():
    troop_set_slot(trp.player,154,-1)
lord_internal_politics_support_acknowledge_lord_pretalk.codeBlock = code


lord_internal_politics_support_acknowledge_lord_pretalk_1 = Dialog("anyone", "I do not trust you, and I do not need your support.", starting_state="lord_internal_politics_support_acknowledge", ending_state="lord_pretalk")
def condition():
    if _g_talk_troop_effective_relation < -5:
        pass
lord_internal_politics_support_acknowledge_lord_pretalk_1.conditionBlock = condition
def code():
    troop_set_slot(trp.player,154,-1)
lord_internal_politics_support_acknowledge_lord_pretalk_1.codeBlock = code


lord_internal_politics_support_acknowledge_lord_pretalk_2 = Dialog("anyone", "That is most gracious of you", starting_state="lord_internal_politics_support_acknowledge", ending_state="lord_pretalk")
def code():
    troop_change_relation_with_troop(trp.player,_g_talk_troop,3)
    troop_set_slot(trp.player,154,_g_talk_troop)
lord_internal_politics_support_acknowledge_lord_pretalk_2.codeBlock = code


lord_internal_politics_support_same_acknowledge_lord_pretalk = Dialog("anyone", "You may tell him that yourself. I do not trust you, and I will have no part in any game which you are playing.", starting_state="lord_internal_politics_support_same_acknowledge", ending_state="lord_pretalk")
def condition():
    if _g_talk_troop_effective_relation < -5:
        pass
lord_internal_politics_support_same_acknowledge_lord_pretalk.conditionBlock = condition
def code():
    troop_set_slot(trp.player,154,-1)
lord_internal_politics_support_same_acknowledge_lord_pretalk.codeBlock = code


lord_internal_politics_support_same_acknowledge_lord_pretalk_1 = Dialog("anyone", "Given your relation with {s4}, I do not think that he would welcome your support.", starting_state="lord_internal_politics_support_same_acknowledge", ending_state="lord_pretalk")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,154)
    troop_get_relation_with_troop(trp.player,troop_slot_001)
    if reg0 < -5:
        s4 = str_store_troop_name(troop_slot_001)
lord_internal_politics_support_same_acknowledge_lord_pretalk_1.conditionBlock = condition
def code():
    troop_set_slot(trp.player,154,-1)
lord_internal_politics_support_same_acknowledge_lord_pretalk_1.codeBlock = code


lord_internal_politics_support_same_acknowledge_lord_pretalk_2 = Dialog("anyone", "I will tell {s4}. He will no doubt be grateful for your support.", starting_state="lord_internal_politics_support_same_acknowledge", ending_state="lord_pretalk")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,154)
    s4 = str_store_troop_name(troop_slot_001)
lord_internal_politics_support_same_acknowledge_lord_pretalk_2.conditionBlock = condition
def code():
    troop_slot_001 = troop_get_slot(_g_talk_troop,154)
    troop_change_relation_with_troop(trp.player,troop_slot_001,2)
    troop_change_relation_with_troop(trp.player,_g_talk_troop,1)
    troop_set_slot(trp.player,154,troop_slot_001)
lord_internal_politics_support_same_acknowledge_lord_pretalk_2.codeBlock = code


lord_internal_politics_plyr_choose_candidate_select_lord_internal_politics_pretalk_2 = Dialog("anyone|repeat_for_troops|plyr", "I support {s4}", starting_state="lord_internal_politics_plyr_choose_candidate_select", ending_state="lord_internal_politics_pretalk")
def condition():
    troop_id_001 = store_repeat_object()
    if 1 == 0 and troop_slot_eq(troop_id_001,2,2):
        troop_faction_002 = store_faction_of_troop(troop_id_001)
        if troop_faction_002 == _players_kingdom and not troop_slot_eq(trp.player,30,troop_id_001):
            s4 = str_store_troop_name(troop_id_001)
lord_internal_politics_plyr_choose_candidate_select_lord_internal_politics_pretalk_2.conditionBlock = condition
def code():
    var001 = store_repeat_object()
    troop_set_slot(trp.player,154,var001)
lord_internal_politics_plyr_choose_candidate_select_lord_internal_politics_pretalk_2.codeBlock = code


lord_internal_politics_pretalk_lord_internal_politics_cur_stance_plyr_response = Dialog("anyone", "Ah. Most interesting.", starting_state="lord_internal_politics_pretalk", ending_state="lord_internal_politics_cur_stance_plyr_response")


lord_internal_politics_cur_stance_plyr_response_lord_internal_politics_plyr_request_support = Dialog("anyone|plyr", "Can I convince you to support me instead?", starting_state="lord_internal_politics_cur_stance_plyr_response", ending_state="lord_internal_politics_plyr_request_support")
def condition():
    if _player_has_homage == 1 and not troop_slot_eq(_g_talk_troop,154,_g_talk_troop) and not troop_slot_ge(trp.player,154,trp.npc1) and not troop_slot_eq(_g_talk_troop,154,trp.player):
        pass
lord_internal_politics_cur_stance_plyr_response_lord_internal_politics_plyr_request_support.conditionBlock = condition


lord_internal_politics_cur_stance_plyr_response_lord_pretalk = Dialog("anyone|plyr", "Anyway, enough of politics for the time being.", starting_state="lord_internal_politics_cur_stance_plyr_response", ending_state="lord_pretalk")


lord_internal_politics_plyr_request_support_lord_pretalk = Dialog("anyone", "You have engendered too much controversy to be a viable candidate right now. I would advise you to wait a little while before seeking any further honors for yourself.", starting_state="lord_internal_politics_plyr_request_support", ending_state="lord_pretalk")
def condition():
    if troop_slot_ge(trp.player,150,25) and faction_slot_eq(_players_kingdom,64,1) or troop_slot_ge(trp.player,150,50):
        pass
lord_internal_politics_plyr_request_support_lord_pretalk.conditionBlock = condition


lord_internal_politics_plyr_request_support_lord_pretalk_1 = Dialog("anyone", "I am sorry. I would not wish to strain my relationship with {s4}", starting_state="lord_internal_politics_plyr_request_support", ending_state="lord_pretalk")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,154)
    if troop_slot_001 > 0:
        s4 = str_store_troop_name(troop_slot_001)
        if reg0 >= _g_talk_troop_effective_relation:
            troop_get_relation_with_troop(_g_talk_troop,troop_slot_001)
lord_internal_politics_plyr_request_support_lord_pretalk_1.conditionBlock = condition


lord_internal_politics_plyr_request_support_lord_pretalk_2 = Dialog("anyone", "You have already been well-rewarded with fiefs appropriate to your accomplishments, I would say.", starting_state="lord_internal_politics_plyr_request_support", ending_state="lord_pretalk")
def condition():
    faction_slot_001 = faction_get_slot(_players_kingdom,64)
    if is_between(faction_slot_001,p.town_1,p.salt_mine):
        troop_slot_002 = troop_get_slot(trp.player,7)
        var003 = troop_slot_002
        for trp_004 in range(trp.npc1, trp.knight_1_1_wife):
            troop_faction_005 = store_faction_of_troop(trp_004)
            if troop_faction_005 == _players_kingdom:
                troop_slot_006 = troop_get_slot(trp_004,7)
                var003 += troop_slot_006
            #end
        #end
    #end
    var007 = 0
    var008 = 0
    for p_009 in range(p.town_1, p.salt_mine):
        party_faction_010 = store_faction_of_party(p_009)
        if party_faction_010 == _players_kingdom:
            var011 = 1
            if is_between(p_009,p.town_1,p.castle_1):
                var011 = 2
            #end
        #end
        var007 += var011
        if party_slot_eq(p_009,7,trp.player):
            var008 += var011
        #end
    #end
    val_max(var007,1)
    val_max(var008,1)
    var012 = var003 / var007
    var013 = troop_slot_002 / var008
    var014 = var012 * 3
    if var013 < var014:
        var014 /= 4
lord_internal_politics_plyr_request_support_lord_pretalk_2.conditionBlock = condition


lord_internal_politics_plyr_request_support_lord_pretalk_3 = Dialog("anyone", "I think you would need to prove yourself further before you are eligible for that position.", starting_state="lord_internal_politics_plyr_request_support", ending_state="lord_pretalk")
def condition():
    if faction_slot_eq(_players_kingdom,64,1):
        if troop_slot_001 < 400:
            troop_slot_001 = troop_get_slot(trp.player,7)
lord_internal_politics_plyr_request_support_lord_pretalk_3.conditionBlock = condition


lord_internal_politics_plyr_request_support_lord_pretalk_4 = Dialog("anyone", "Hmm... That is too much to ask, given the state of our relationship. ", starting_state="lord_internal_politics_plyr_request_support", ending_state="lord_pretalk")
def condition():
    if _g_talk_troop_effective_relation < 10:
        pass
lord_internal_politics_plyr_request_support_lord_pretalk_4.conditionBlock = condition


lord_internal_politics_plyr_request_support_lord_pretalk_5 = Dialog("anyone", "I would support you with pleasure. ", starting_state="lord_internal_politics_plyr_request_support", ending_state="lord_pretalk")
def code():
    troop_set_slot(_g_talk_troop,154,trp.player)
lord_internal_politics_plyr_request_support_lord_pretalk_5.codeBlock = code


lord_internal_politics_plyr_request_support_lord_pretalk_6 = Dialog("anyone", "{!}[Placeholder - sorry, not yet]", starting_state="lord_internal_politics_plyr_request_support", ending_state="lord_pretalk")


lord_recruit_1_relation_lord_pretalk = Dialog("anyone", "I am a bit weary of talking politics. Perhaps at a later date", starting_state="lord_recruit_1_relation", ending_state="lord_pretalk")
def condition():
    if troop_slot_ge(_g_talk_troop,51,100):
        pass
lord_recruit_1_relation_lord_pretalk.conditionBlock = condition
def code():
    reg3 = troop_get_slot(_g_talk_troop,51)
    if _cheat_mode == 1:
        print(gstr.intrigue_impatience_equals_reg3_must_be_less_than_100)
    #end
lord_recruit_1_relation_lord_pretalk.codeBlock = code


lord_recruit_1_relation_lord_pretalk_1 = Dialog("anyone", "{s12}", starting_state="lord_recruit_1_relation", ending_state="lord_pretalk")
def condition():
    var001 = 1
    if cf_troop_can_intrigue(_g_talk_troop,1):
        var001 = 0
    #end
    if var001 == 1:
        s12 = str_store_string(gstr.youll_have_to_speak_to_me_at_some_other_time_then)
        if _g_encountered_party_relation < 0 and encountered_party_is_attacker():
            s12 = str_store_string(gstr.this_is_no_time_for_words)
        #end
    #end
    if _cheat_mode == 1:
        print(gstr.lord_not_alone)
    #end
lord_recruit_1_relation_lord_pretalk_1.conditionBlock = condition


lord_recruit_1_relation_lord_recruit_pretender = Dialog("anyone", "You have raised the standard of rebellion on behalf of {s16}. Have you come to plead {reg3?her:his} case?", starting_state="lord_recruit_1_relation", ending_state="lord_recruit_pretender")
def condition():
    if is_between(_supported_pretender,trp.kingdom_1_pretender,trp.knight_1_1_wife) and troop_slot_eq(_supported_pretender,14,_g_talk_x_troop_faction):
        reg3 = troop_get_type(_supported_pretender)
        if _skip_lord_assumes_argument == 0:
            s16 = str_store_troop_name(_supported_pretender)
lord_recruit_1_relation_lord_recruit_pretender.conditionBlock = condition


lord_recruit_pretender_lord_recruit_3_dilemma_1 = Dialog("anyone|plyr", "I have", starting_state="lord_recruit_pretender", ending_state="lord_recruit_3_dilemma_1")
def code():
    troop_set_slot(_g_talk_troop,54,_supported_pretender)
lord_recruit_pretender_lord_recruit_3_dilemma_1.codeBlock = code


lord_recruit_pretender_lord_recruit_1_relation = Dialog("anyone|plyr", "No, that's not it. There's another issue I wish to discuss.", starting_state="lord_recruit_pretender", ending_state="lord_recruit_1_relation")
def code():
    _skip_lord_assumes_argument = 1
lord_recruit_pretender_lord_recruit_1_relation.codeBlock = code


lord_recruit_1_relation_lord_pretalk_2 = Dialog("anyone", "{s12}", starting_state="lord_recruit_1_relation", ending_state="lord_pretalk")
def condition():
    if troop_slot_eq(trp.player,30,_g_talk_troop):
        var001 = 20
        s13 = str_store_string(gstr.of_course_my_wife)
        s14 = str_store_string(gstr.perhaps_not_our_marriage_has_become_a_bit_strained_dont_you_think)
        s15 = str_store_string(gstr.why_is_that_my_wife_actually_our_marriage_has_become_such_that_i_prefer_to_have_a_witness_for_all_of_our_converations)
    elif troop_slot_eq(_g_talk_troop,52,2):
        var001 = 6
        s13 = str_store_string(gstr.all_right_then_what_do_you_have_to_say_out_with_it)
        s14 = str_store_string(gstr.bah__im_in_no_mood_for_whispering_in_the_corner)
        s15 = str_store_string(gstr.bah_i_dont_like_you_that_much_im_not_going_to_go_plot_with_you_in_some_corner)
    elif troop_slot_eq(_g_talk_troop,52,5):
        var001 = 8
        s13 = str_store_string(gstr.well__now_what_do_you_have_to_propose)
        s14 = str_store_string(gstr.trying_our_hand_at_intrigue_are_we_i_think_not)
        s15 = str_store_string(gstr.hah_i_trust_you_as_a_i_would_a_serpent_i_think_not)
    elif troop_slot_eq(_g_talk_troop,52,7):
        var001 = -10
        s13 = str_store_string(gstr.i_do_not_like_to_conduct_my_business_in_the_shadows_but_sometimes_it_must_be_done_what_do_you_have_to_say)
        s14 = str_store_string(gstr.i_would_prefer_to_conduct_our_affairs_out_in_the_open)
        s15 = str_store_string(gstr.do_not_take_this_amiss_but_with_you_i_would_prefer_to_conduct_our_affairs_out_in_the_open)
    elif troop_slot_eq(_g_talk_troop,52,4):
        var001 = 4
        s13 = str_store_string(gstr.hmm_you_have_piqued_my_interest_what_do_you_have_to_say)
        s14 = str_store_string(gstr.em_lets_keep_our_affairs_out_in_the_open_for_the_time_being)
        s15 = str_store_string(gstr.em_lets_keep_our_affairs_out_in_the_open_for_the_time_being)
    elif troop_slot_eq(_g_talk_troop,52,3):
        var001 = 0
        s13 = str_store_string(gstr.thats_sensible__the_world_is_full_of_churls_who_poke_their_noses_into_their_betters_business_now_tell_me_what_it_is_that_you_have_to_say)
        s14 = str_store_string(gstr.what_do_you_take_me_for_a_plotter)
        s15 = str_store_string(gstr.hah_i_trust_you_as_a_i_would_a_serpent_i_think_not)
    elif troop_slot_eq(_g_talk_troop,52,6):
        var001 = -10
        s13 = str_store_string(gstr.well_i_normally_like_to_keep_things_out_in_the_open_but_im_sure_someone_like_you_would_not_want_to_talk_in_private_unless_heshe_had_a_good_reason_what_is_it)
        s14 = str_store_string(gstr.surely_we_can_discuss_whatever_you_want_to_discuss_out_here_in_the_open_cant_we)
        s15 = str_store_string(gstr.surely_we_can_discuss_whatever_you_want_to_discuss_out_here_in_the_open_cant_we)
    elif troop_slot_eq(_g_talk_troop,52,1):
        var001 = -5
        s13 = str_store_string(gstr.im_a_simple__man_not_one_for_intrigue_but_id_guess_that_you_have_something_worthwhile_to_say_what_is_it)
        s14 = str_store_string(gstr.forgive_me_but_im_not_one_for_going_off_in_corners_to_plot)
        s15 = str_store_string(gstr.please_do_not_take_this_amiss_but_i_do_not_trust_you)
    elif troop_slot_ge(_g_talk_troop,52,8):
        var001 = 10
        s13 = str_store_string(gstr.certainly_playername_what_is_it)
        s14 = str_store_string(gstr.forgive_me_but_id_prefer_to_keep_our_conversations_in_the_open)
        s15 = str_store_string(gstr.please_do_not_take_this_amiss_but_im_not_sure_you_and_i_are_still_on_those_terms)
    #end
    var002 = 0
    skill_lvl_003 = store_skill_level(skl.persuasion,trp.player)
    if _g_talk_troop_relation < -5:
        if _cheat_mode == 1:
            print(gstr.persuasion__relation_less_than_5)
        #end
        s12 = str_store_string(gstr.s15)
    else:
        var004 = skill_lvl_003 + _g_talk_troop_relation
        var004 += var001
        campaign_ai = game_get_reduce_campaign_ai()
        if campaign_ai == 0:
            var004 -= 5
        elif campaign_ai == 1:
            pass
        elif campaign_ai == 2:
            var004 += 5
        #end
        if var004 < 10:
            s12 = str_store_string(gstr.s14)
            if _cheat_mode == 1:
                print(gstr.persuasion__2__lord_reputation_modifier__relation_less_than_10)
            #end
        #end
        s12 = str_store_string(gstr.s14)
    #else:
    #    s12 = str_store_string(gstr.s13)
    #    var002 = 1
    #    if var002 == 0:
    #        pass
    #    #end # Johandros did not know what to do
    #end
lord_recruit_1_relation_lord_pretalk_2.conditionBlock = condition


lord_recruit_1_relation_lord_recruit_2 = Dialog("anyone", "{s12}", starting_state="lord_recruit_1_relation", ending_state="lord_recruit_2")


lord_recruit_2_lord_recruit_2_philosophy = Dialog("anyone|plyr", "What do you think, in general terms, about kings, lords, and politics?", starting_state="lord_recruit_2", ending_state="lord_recruit_2_philosophy")


lord_recruit_2_lord_spouse_leave_faction = Dialog("anyone|plyr", "My husband, I believe that you should rethink you allegiance to {s11}", starting_state="lord_recruit_2", ending_state="lord_spouse_leave_faction")
def condition():
    if troop_slot_eq(_g_talk_troop,30,trp.player) and _players_kingdom != fac.player_supporters_faction:
        troop_type_001 = troop_get_type(_g_talk_troop)
        if troop_type_001 == 0:
            faction_slot_002 = faction_get_slot(_g_encountered_party_faction,11)
            s11 = str_store_troop_name(faction_slot_002)
lord_recruit_2_lord_spouse_leave_faction.conditionBlock = condition


lord_spouse_leave_faction_lord_spouse_leave_faction_2 = Dialog("anyone", "{s9} has always been a good liege to me, but I will hear you out. What do you suggest we do?", starting_state="lord_spouse_leave_faction", ending_state="lord_spouse_leave_faction_2")
def condition():
    faction_slot_001 = faction_get_slot(_g_talk_x_troop_faction,11)
    troop_get_relation_with_troop(_g_talk_troop,faction_slot_001)
    if reg0 > 25:
        s9 = str_store_troop_name(faction_slot_001)
lord_spouse_leave_faction_lord_spouse_leave_faction_2.conditionBlock = condition


lord_spouse_leave_faction_lord_spouse_leave_faction_2_1 = Dialog("anyone", "I see no particular reason to abandon {s9}, but I will heed your advice. What do you suggest we do?", starting_state="lord_spouse_leave_faction", ending_state="lord_spouse_leave_faction_2")
def condition():
    faction_slot_001 = faction_get_slot(_g_talk_x_troop_faction,11)
    troop_get_relation_with_troop(_g_talk_troop,faction_slot_001)
    if reg0 > -5:
        s9 = str_store_troop_name(faction_slot_001)
lord_spouse_leave_faction_lord_spouse_leave_faction_2_1.conditionBlock = condition


lord_spouse_leave_faction_lord_spouse_leave_faction_2_2 = Dialog("anyone", "Yes -- as a liege, {s9} is a great disappointment. What do you suggest we do?", starting_state="lord_spouse_leave_faction", ending_state="lord_spouse_leave_faction_2")
def condition():
    faction_slot_001 = faction_get_slot(_g_talk_x_troop_faction,11)
    troop_get_relation_with_troop(_g_talk_troop,faction_slot_001)
    s9 = str_store_troop_name(faction_slot_001)
lord_spouse_leave_faction_lord_spouse_leave_faction_2_2.conditionBlock = condition


lord_spouse_leave_faction_2_lord_spouse_leave_faction_husband_king = Dialog("anyone|plyr", "I believe you should be king, my husband!", starting_state="lord_spouse_leave_faction_2", ending_state="lord_spouse_leave_faction_husband_king")


lord_spouse_leave_faction_2_lord_spouse_leave_faction_proclaim_queen = Dialog("anyone|plyr", "I am the rightful queen of Calradia", starting_state="lord_spouse_leave_faction_2", ending_state="lord_spouse_leave_faction_proclaim_queen")


lord_spouse_leave_faction_2_lord_pretalk = Dialog("anyone|plyr", "Never mind", starting_state="lord_spouse_leave_faction_2", ending_state="lord_pretalk")


lord_spouse_leave_faction_husband_king_lord_pretalk = Dialog("anyone", "Perhaps some day, my wife -- but before I declare myself king, I should like for one of us to hold a fortress which could serve as our court before we declare ourselves publically.", starting_state="lord_spouse_leave_faction_husband_king", ending_state="lord_pretalk")
def condition():
    var001 = 0
    for p_002 in range(p.town_1, p.village_1):
        if party_slot_eq(p_002,7,trp.player) or party_slot_eq(p_002,7,_g_talk_troop):
            var001 = 1
            if var001 == 0:
                pass
            #end
        #end
    #end
lord_spouse_leave_faction_husband_king_lord_pretalk.conditionBlock = condition


lord_spouse_leave_faction_proclaim_queen_lord_pretalk = Dialog("anyone", "While I do not contest your claim, my wife, I should like for one of us to hold a fortress which could serve as our court before we declare ourselves publically.", starting_state="lord_spouse_leave_faction_proclaim_queen", ending_state="lord_pretalk")
def condition():
    var001 = 0
    for p_002 in range(p.town_1, p.village_1):
        if party_slot_eq(p_002,7,trp.player) or party_slot_eq(p_002,7,_g_talk_troop):
            var001 = 1
            if var001 == 0:
                pass
            #end
        #end
    #end
lord_spouse_leave_faction_proclaim_queen_lord_pretalk.conditionBlock = condition


lord_spouse_leave_faction_proclaim_queen_lord_spouse_leave_faction_proclaim_queen_confirm = Dialog("anyone", "{s11}", starting_state="lord_spouse_leave_faction_proclaim_queen", ending_state="lord_spouse_leave_faction_proclaim_queen_confirm")
def condition():
    var001 = 0
    if _player_right_to_rule <= 5:
        s11 = str_store_string(gstr.really_well_this_is_the_first_i_have_heard_of_it_unless_you_build_up_support_for_that_claim_you_may_find_it_difficult_to_find_allies_however_whenever_you_see_fit_to_declare_yourself_publically_as_queen_i_should_be_honored_to_be_your_consort)
        _player_right_to_rule = 5
    elif _player_right_to_rule < 20:
        s11 = str_store_string(gstr.yes_i_have_heard_such_talk_while_it_is_good_that_you_are_building_up_your_support_i_do_not_think_that_you_are_quite_ready_to_proclaim_yourself_yet_however_i_will_let_you_be_the_judge_of_that_and_when_you_decide_i_should_be_honored_to_be_your_consort)
    else:
        s11 = str_store_string(gstr.yes_and_many_others_in_calradia_think_so_as_well_perhaps_it_is_time_that_you_declared_yourself_and_we_shall_ride_forth_together_to_claim_your_throne_i_should_be_honored_to_be_your_consort)
        var001 = 1
        if var001 == 1:
            pass
        #end
    #end
lord_spouse_leave_faction_proclaim_queen_lord_spouse_leave_faction_proclaim_queen_confirm.conditionBlock = condition


lord_spouse_leave_faction_proclaim_queen_lord_pretalk_1 = Dialog("anyone", "{s11}", starting_state="lord_spouse_leave_faction_proclaim_queen", ending_state="lord_pretalk")


lord_spouse_leave_faction_proclaim_queen_confirm_close_window = Dialog("anyone|plyr", "I am ready now, my husband. Let us go forth to seek our throne.", starting_state="lord_spouse_leave_faction_proclaim_queen_confirm", ending_state="close_window")
def code():
    activate_player_faction(trp.player)
    change_troop_faction(_g_talk_troop,fac.player_supporters_faction)
    _g_leave_encounter = 1
lord_spouse_leave_faction_proclaim_queen_confirm_close_window.codeBlock = code


lord_spouse_leave_faction_proclaim_queen_confirm_lord_pretalk = Dialog("anyone|plyr", "Perhaps I am not yet ready.", starting_state="lord_spouse_leave_faction_proclaim_queen_confirm", ending_state="lord_pretalk")


lord_spouse_leave_faction_husband_king_lord_pretalk_1 = Dialog("anyone", "Perhaps, but I would need your full support to press that claim. You would want to resolve {s4}'s rebellion before pushing this any further.", starting_state="lord_spouse_leave_faction_husband_king", ending_state="lord_pretalk")
def condition():
    if _players_kingdom == fac.player_supporters_faction and _supported_pretender > 0:
        s4 = str_store_troop_name(_supported_pretender)
lord_spouse_leave_faction_husband_king_lord_pretalk_1.conditionBlock = condition


lord_spouse_leave_faction_husband_king_lord_spouse_leave_faction_husband_king_2 = Dialog("anyone", "Most of the great families of this land have a claim to the throne... Given the recent issues with the succession, I should be as legitimate a king as {s4}. ", starting_state="lord_spouse_leave_faction_husband_king", ending_state="lord_spouse_leave_faction_husband_king_2")
def condition():
    faction_slot_001 = faction_get_slot(_g_talk_x_troop_faction,11)
    s4 = str_store_troop_name(faction_slot_001)
lord_spouse_leave_faction_husband_king_lord_spouse_leave_faction_husband_king_2.conditionBlock = condition


lord_spouse_leave_faction_husband_king_2_lord_spouse_leave_faction_husband_king_3 = Dialog("anyone", "While king, I will defer to your judgment in the appointment of ministers, the conduct of diplomacy, and other such matters.", starting_state="lord_spouse_leave_faction_husband_king_2", ending_state="lord_spouse_leave_faction_husband_king_3")


lord_spouse_leave_faction_husband_king_3_close_window = Dialog("anyone|plyr", "Very well, my husband. Let us ride forth to press your claim! ", starting_state="lord_spouse_leave_faction_husband_king_3", ending_state="close_window")
def code():
    change_troop_faction(_g_talk_troop,fac.player_supporters_faction)
    activate_player_faction(_g_talk_troop)
    _g_leave_encounter = 1
lord_spouse_leave_faction_husband_king_3_close_window.codeBlock = code


lord_spouse_leave_faction_husband_king_3_lord_pretalk = Dialog("anyone|plyr", "Actually, let us bide out time for a bit.", starting_state="lord_spouse_leave_faction_husband_king_3", ending_state="lord_pretalk")


lord_recruit_2_philosophy_lord_recruit_2 = Dialog("anyone", "{s43} Did you wish to speak of anything else?", starting_state="lord_recruit_2_philosophy", ending_state="lord_recruit_2")
def condition():
    lord_comment_to_s43(_g_talk_troop,gstr.political_philosophy_default)
lord_recruit_2_philosophy_lord_recruit_2.conditionBlock = condition


lord_recruit_2_lord_recruit_2_discontent = Dialog("anyone|plyr", "How do you feel about {s15}?", starting_state="lord_recruit_2", ending_state="lord_recruit_2_discontent")
def condition():
    if troop_slot_eq(_g_talk_troop,50,0):
        faction_slot_001 = faction_get_slot(_g_talk_x_troop_faction,11)
        if _g_talk_troop != faction_slot_001 and trp.player != faction_slot_001:
            s15 = str_store_troop_name(faction_slot_001)
lord_recruit_2_lord_recruit_2_discontent.conditionBlock = condition


lord_recruit_2_lord_recruit_3_a = Dialog("anyone|plyr", "Do you remember what I had told you earlier?", starting_state="lord_recruit_2", ending_state="lord_recruit_3_a")
def condition():
    if troop_slot_ge(_g_talk_troop,53,1) and _g_talk_x_troop_faction != _players_kingdom:
        pass
lord_recruit_2_lord_recruit_3_a.conditionBlock = condition


lord_recruit_2_lord_recruit_quarrel_describe = Dialog("anyone|repeat_for_troops|plyr", "I have heard that you have quarreled with {s16}", starting_state="lord_recruit_2", ending_state="lord_recruit_quarrel_describe")
def condition():
    troop_id_001 = store_repeat_object()
    if is_between(troop_id_001,trp.npc1,trp.knight_1_1_wife):
        troop_faction_002 = store_faction_of_troop(troop_id_001)
        if troop_faction_002 == _g_talk_x_troop_faction and not faction_slot_eq(_g_talk_x_troop_faction,11,troop_id_001):
            troop_get_relation_with_troop(_g_talk_troop,troop_id_001)
            if reg0 < -9:
                s16 = str_store_troop_name(troop_id_001)
lord_recruit_2_lord_recruit_quarrel_describe.conditionBlock = condition
def code():
    _temp = store_repeat_object()
lord_recruit_2_lord_recruit_quarrel_describe.codeBlock = code


lord_recruit_quarrel_describe_lord_recruit_2 = Dialog("anyone", "It is no secret. {s14}", starting_state="lord_recruit_quarrel_describe", ending_state="lord_recruit_2")
def condition():
    var001 = 0
    var002 = _num_log_entries + 1
    for var003 in range(1, var002):
        if troop_slot_eq(trp.log_array_entry_type,var003,27) and troop_slot_eq(trp.log_array_troop_object,var003,_temp) and troop_slot_eq(trp.log_array_center_object,var003,_g_talk_troop) and troop_slot_eq(trp.log_array_faction_object,var003,_g_talk_x_troop_faction):
            get_relevant_comment_for_log_entry(var003)
            s14 = str_store_string(reg0)
            var001 = 1
        elif troop_slot_eq(trp.log_array_entry_type,var003,32) and troop_slot_eq(trp.log_array_actor,var003,_g_talk_troop) and troop_slot_eq(trp.log_array_center_object,var003,_temp):
            get_relevant_comment_for_log_entry(var003)
            s14 = str_store_string(reg0)
            var001 = 1
        elif troop_slot_eq(trp.log_array_entry_type,var003,33) and troop_slot_eq(trp.log_array_actor,var003,_g_talk_troop) and troop_slot_eq(trp.log_array_center_object,var003,_temp):
            get_relevant_comment_for_log_entry(var003)
            s14 = str_store_string(reg0)
            var001 = 1
        elif troop_slot_eq(trp.log_array_entry_type,var003,26) and troop_slot_eq(trp.log_array_actor,var003,_g_talk_troop) and troop_slot_eq(trp.log_array_troop_object,var003,_temp):
            get_relevant_comment_for_log_entry(var003)
            s14 = str_store_string(reg0)
            var001 = 1
        elif troop_slot_eq(trp.log_array_entry_type,var003,31) and troop_slot_eq(trp.log_array_actor,var003,_g_talk_troop) and troop_slot_eq(trp.log_array_center_object,var003,_temp):
            get_relevant_comment_for_log_entry(var003)
            s14 = str_store_string(reg0)
            var001 = 1
        elif troop_slot_eq(trp.log_array_entry_type,var003,31) and troop_slot_eq(trp.log_array_actor,var003,_temp) and troop_slot_eq(trp.log_array_center_object,var003,_g_talk_troop):
            get_relevant_comment_for_log_entry(var003)
            s14 = str_store_string(reg0)
            var001 = 1
        #end
    #end
    if var001 == 0:
        troop_describes_quarrel_with_troop_to_s14(_g_talk_troop,_temp)
    #end
    add_rumor_string_to_troop_notes(_g_talk_troop,_temp,14)
lord_recruit_quarrel_describe_lord_recruit_2.conditionBlock = condition


lord_recruit_2_lord_pretalk = Dialog("anyone|plyr", "Never mind", starting_state="lord_recruit_2", ending_state="lord_pretalk")


lord_recruit_2_discontent_lord_recruit_2_discontent_b = Dialog("anyone", "{s12}", starting_state="lord_recruit_2_discontent", ending_state="lord_recruit_2_discontent_b")
def condition():
    faction_slot_001 = faction_get_slot(_g_talk_x_troop_faction,11)
    calculate_troop_political_factors_for_liege(_g_talk_troop,faction_slot_001)
    var002 = reg3
    if _cheat_mode == 1:
        print("@{!}DEBUG : result for political is {reg3}")
    #end
    troop_get_relation_with_troop(_g_talk_troop,faction_slot_001)
    var003 = reg0
    s15 = str_store_troop_name(faction_slot_001)
    reg15 = troop_get_type(faction_slot_001)
    if troop_slot_eq(_g_talk_troop,52,7):
        var004 = -5
        s12 = str_store_string(gstr.i_am_disturbed_about_my_lord_s15s_choice_of_companions)
    elif troop_slot_eq(_g_talk_troop,52,1):
        var004 = -1
        s12 = str_store_string(gstr.well_ill_be_honest_i_feel_that_sometimes_s15_overlooks_my_rights_and_extends_his_protection_to_the_unworthy)
    elif troop_slot_eq(_g_talk_troop,52,2):
        var004 = 5
        s12 = str_store_string(gstr.heh_one_thing_that_ill_say_about_s15_is_that_he_has_a_ripe_batch_of_bastards_in_his_court)
    elif troop_slot_eq(_g_talk_troop,52,6):
        var004 = -4
        s12 = str_store_string(gstr.well_sometimes_i_have_to_say_that_i_question_s15s_judgment_regarding_those_who_he_keeps_in_his_court)
    elif troop_slot_eq(_g_talk_troop,52,3):
        var004 = 1
        s12 = str_store_string(gstr.s15_is_a_weak_man_who_too_easily_lends_his_ear_to_evil_council_and_gives_his_protection_to_some_who_have_done_me_wrong)
    elif troop_slot_eq(_g_talk_troop,52,4):
        var004 = 3
        s12 = str_store_string(gstr.i_will_confess_that_sometimes_i_worry_about_s15s_judgment_particularly_in_the_matter_of_the_counsel_that_he_keeps)
    elif troop_slot_eq(_g_talk_troop,52,5):
        var004 = 5
        s12 = str_store_string(gstr.what_do_i_think_i_think_that_s15_is_a_vile_pretender_a_friend_to_the_flatterer_and_the_hypocrite)
    elif troop_slot_ge(_g_talk_troop,52,8):
        var004 = 5
        s12 = str_store_string(gstr.well_s15_is_not_like_you_ill_say_that_much)
    #end
    var005 = _num_log_entries + 1
    for var006 in range(1, var005):
        if troop_slot_eq(trp.log_array_entry_type,var006,27) and troop_slot_eq(trp.log_array_actor,var006,faction_slot_001) and troop_slot_eq(trp.log_array_center_object,var006,_g_talk_troop):
            get_relevant_comment_for_log_entry(var006)
            s12 = str_store_string(reg0)
        elif troop_slot_eq(trp.log_array_entry_type,var006,32) and troop_slot_eq(trp.log_array_actor,var006,_g_talk_troop) and troop_slot_eq(trp.log_array_troop_object,var006,faction_slot_001):
            get_relevant_comment_for_log_entry(var006)
            s12 = str_store_string(reg0)
        elif troop_slot_eq(trp.log_array_entry_type,var006,33) and troop_slot_eq(trp.log_array_actor,var006,_g_talk_troop) and troop_slot_eq(trp.log_array_troop_object,var006,faction_slot_001):
            get_relevant_comment_for_log_entry(var006)
            s12 = str_store_string(reg0)
        elif troop_slot_eq(trp.log_array_entry_type,var006,26) and troop_slot_eq(trp.log_array_actor,var006,_g_talk_troop) and troop_slot_eq(trp.log_array_faction_object,var006,_g_talk_x_troop_faction):
            get_relevant_comment_for_log_entry(var006)
            s12 = str_store_string(reg0)
        #end
    #end
    var004 *= 2
    _lord_might_open_up = 0
    if var002 > 12 and var003 > 0:
        s12 = str_store_string(gstr.s15_long_may_he_live)
    elif var002 >= var004:
        s12 = str_store_string(gstr.he_is_my_liege_that_is_all_that_i_will_say_on_this_matter)
        _lord_might_open_up = 1
    #end
    if var002 < var004:
        add_rumor_string_to_troop_notes(_g_talk_troop,faction_slot_001,12)
lord_recruit_2_discontent_lord_recruit_2_discontent_b.conditionBlock = condition


lord_recruit_2_discontent_lord_recruit_hesitant = Dialog("anyone", "{s12}", starting_state="lord_recruit_2_discontent", ending_state="lord_recruit_hesitant")


lord_recruit_2_discontent_b_lord_recruit_3 = Dialog("anyone", "Sometimes, I do worry about the state of the realm.", starting_state="lord_recruit_2_discontent_b", ending_state="lord_recruit_3")


lord_recruit_hesitant_lord_recruit_hesitant_persuade = Dialog("anyone|plyr", "Can't I persuade you to say a little more?", starting_state="lord_recruit_hesitant", ending_state="lord_recruit_hesitant_persuade")
def condition():
    if _lord_might_open_up == 1:
        pass
lord_recruit_hesitant_lord_recruit_hesitant_persuade.conditionBlock = condition


lord_recruit_hesitant_lord_pretalk = Dialog("anyone|plyr", "Ah. Very good.", starting_state="lord_recruit_hesitant", ending_state="lord_pretalk")


lord_recruit_hesitant_persuade_lord_recruit_3 = Dialog("anyone", "If you put it that way, I admit that I do sometimes worry about the state of the realm.", starting_state="lord_recruit_hesitant_persuade", ending_state="lord_recruit_3")
def condition():
    faction_slot_001 = faction_get_slot(_g_talk_x_troop_faction,11)
    calculate_troop_political_factors_for_liege(_g_talk_troop,faction_slot_001)
    var002 = reg3
    var003 = 12 - var002
    reg3 = var003
    var003 /= 3
    var004 = 14 - var003
    troop_slot_005 = troop_get_slot(_g_talk_troop,49)
    var006 = store_mod(troop_slot_005,var004)
    var006 -= 2
    if var006 < skill_lvl_007:
        skill_lvl_007 = store_skill_level(skl.persuasion,trp.player)
lord_recruit_hesitant_persuade_lord_recruit_3.conditionBlock = condition


lord_recruit_hesitant_persuade_lord_pretalk = Dialog("anyone", "You try my patience. I said that I have nothing to say.", starting_state="lord_recruit_hesitant_persuade", ending_state="lord_pretalk")
def condition():
    troop_set_slot(_g_talk_troop,51,100)
    troop_change_relation_with_troop(_g_talk_troop,trp.player,-1)
lord_recruit_hesitant_persuade_lord_pretalk.conditionBlock = condition


lord_recruit_3_lord_recruit_3_a = Dialog("anyone|plyr", "Well, I have something to tell you.", starting_state="lord_recruit_3", ending_state="lord_recruit_3_a")


lord_recruit_3_lord_pretalk = Dialog("anyone|plyr", "Well, that's interesting to know. But enough about politics.", starting_state="lord_recruit_3", ending_state="lord_pretalk")


lord_recruit_3_a_lord_recruit_3_reset_claim = Dialog("anyone", "{s12}", starting_state="lord_recruit_3_a", ending_state="lord_recruit_3_reset_claim")
def condition():
    if troop_slot_ge(_g_talk_troop,53,1):
        troop_slot_001 = troop_get_slot(_g_talk_troop,54)
        s14 = str_store_troop_name(troop_slot_001)
        if troop_slot_001 == trp.player:
            s14 = str_store_string("@you")
        #end
    #end
    if troop_slot_eq(_g_talk_troop,53,1) and troop_slot_001 == trp.player:
        s12 = str_store_string(gstr.that_you_are_the_rightful_heir_to_the_throne_of_calradia)
    elif troop_slot_eq(_g_talk_troop,53,1):
        s14 = str_store_troop_name(troop_slot_001)
        s12 = str_store_string(gstr.that_s14_is_the_rightful_ruler_of_calradia)
    elif troop_slot_eq(_g_talk_troop,53,2):
        s12 = str_store_string(gstr.that_s14_will_rule_this_land_justly)
    elif troop_slot_eq(_g_talk_troop,53,5):
        s12 = str_store_string(gstr.that_s14_will_protect_our_rights_as_nobles)
    elif troop_slot_eq(_g_talk_troop,53,4):
        s12 = str_store_string(gstr.that_s14_will_unify_this_land_and_end_this_war)
    elif troop_slot_eq(_g_talk_troop,53,3):
        s12 = str_store_string(gstr.that_s14_will_reward_me_with_a_fief)
    #end
lord_recruit_3_a_lord_recruit_3_reset_claim.conditionBlock = condition


lord_recruit_3_reset_claim_lord_recruit_3_claim = Dialog("anyone|plyr", "Yes, that's it.", starting_state="lord_recruit_3_reset_claim", ending_state="lord_recruit_3_claim")


lord_recruit_3_reset_claim_lord_recruit_3_a_reset = Dialog("anyone|plyr", "Let me phrase that a little differently.", starting_state="lord_recruit_3_reset_claim", ending_state="lord_recruit_3_a_reset")


lord_recruit_3_a_lord_recruit_3_b = Dialog("anyone", "Yes?", starting_state="lord_recruit_3_a", ending_state="lord_recruit_3_b")


lord_recruit_3_a_reset_lord_recruit_3_b = Dialog("anyone", "Yes?", starting_state="lord_recruit_3_a_reset", ending_state="lord_recruit_3_b")


lord_recruit_3_b_lord_recruit_3_why = Dialog("anyone|plyr", "I ask for your support for the throne of Calradia", starting_state="lord_recruit_3_b", ending_state="lord_recruit_3_why")
def condition():
    if faction_slot_001 == trp.player:
        faction_slot_001 = faction_get_slot(_players_kingdom,11)
lord_recruit_3_b_lord_recruit_3_why.conditionBlock = condition
def code():
    troop_set_slot(_g_talk_troop,54,trp.player)
    if troop_slot_eq(_g_talk_troop,50,0):
        troop_slot_001 = troop_get_slot(_g_talk_troop,49)
        var002 = troop_slot_001 / 100
        var002 += 1
        troop_set_slot(_g_talk_troop,50,var002)
    #end
lord_recruit_3_b_lord_recruit_3_why.codeBlock = code


lord_recruit_3_b_lord_recruit_3_why_1 = Dialog("anyone|plyr", "I ask you to pledge allegiance to my liege, {s45}, as monarch of all Calradia", starting_state="lord_recruit_3_b", ending_state="lord_recruit_3_why")
def condition():
    faction_slot_001 = faction_get_slot(_players_kingdom,11)
    if faction_slot_001 != trp.player and _players_kingdom != _g_talk_x_troop_faction:
        s45 = str_store_troop_name(faction_slot_001)
lord_recruit_3_b_lord_recruit_3_why_1.conditionBlock = condition
def code():
    faction_slot_001 = faction_get_slot(_players_kingdom,11)
    troop_set_slot(_g_talk_troop,54,faction_slot_001)
    if troop_slot_eq(_g_talk_troop,50,0):
        troop_slot_002 = troop_get_slot(_g_talk_troop,49)
        var003 = troop_slot_002 / 100
        var003 += 1
        troop_set_slot(_g_talk_troop,50,var003)
    #end
lord_recruit_3_b_lord_recruit_3_why_1.codeBlock = code


lord_recruit_3_b_lord_pretalk = Dialog("anyone|plyr", "Never mind", starting_state="lord_recruit_3_b", ending_state="lord_pretalk")


lord_recruit_3_dilemma_1_lord_recruit_3_dilemma_2 = Dialog("anyone", "{s43}", starting_state="lord_recruit_3_dilemma_1", ending_state="lord_recruit_3_dilemma_2")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,54)
    s45 = str_store_troop_name(troop_slot_001)
    reg3 = troop_get_type(troop_slot_001)
    faction_slot_002 = faction_get_slot(_g_talk_x_troop_faction,11)
    s46 = str_store_troop_name(faction_slot_002)
    lord_comment_to_s43(_g_talk_troop,gstr.rebellion_dilemma_default)
lord_recruit_3_dilemma_1_lord_recruit_3_dilemma_2.conditionBlock = condition


lord_recruit_3_dilemma_2_lord_recruit_3_why = Dialog("anyone", "{s43}", starting_state="lord_recruit_3_dilemma_2", ending_state="lord_recruit_3_why")
def condition():
    lord_comment_to_s43(_g_talk_troop,gstr.rebellion_dilemma_2_default)
lord_recruit_3_dilemma_2_lord_recruit_3_why.conditionBlock = condition


lord_recruit_3_why_lord_pretalk = Dialog("anyone", "Neither of us has so much as a single fortress to our name. Would you rule your kingdom from an outlaw's den in the woods?", starting_state="lord_recruit_3_why", ending_state="lord_pretalk")
def condition():
    if troop_slot_eq(_g_talk_troop,54,trp.player):
        var001 = 0
        for p_002 in range(p.town_1, p.village_1):
            if party_slot_eq(p_002,7,_g_talk_troop) or party_slot_eq(p_002,7,trp.player):
                var001 = 1
                if var001 == 0:
                    pass
                #end
            #end
        #end
    #end
lord_recruit_3_why_lord_pretalk.conditionBlock = condition


lord_recruit_3_why_lord_recruit_3_d = Dialog("anyone", "Why should I support {s44}?", starting_state="lord_recruit_3_why", ending_state="lord_recruit_3_d")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,54)
    if troop_slot_001 == trp.player:
        s44 = str_store_string("@you")
    else:
        s44 = str_store_troop_name(troop_slot_001)
    #end
lord_recruit_3_why_lord_recruit_3_d.conditionBlock = condition
def code():
    troop_slot_001 = troop_get_slot(_g_talk_troop,54)
    if True:
        troop_type_002 = troop_get_type(troop_slot_001)
        s45 = str_store_string(gstr.he)
        s47 = str_store_string(gstr.king)
        if troop_type_002 == 1:
            s45 = str_store_string(gstr.she)
            s47 = str_store_string(gstr.queen)
        #end
        if troop_slot_001 == _supported_pretender and _supported_pretender_old_faction == fac.kingdom_3:
            s47 = str_store_string(gstr.khan)
        #end
        if troop_slot_001 == trp.player:
            s45 = str_store_string(gstr.i)
        #end
    #end
lord_recruit_3_why_lord_recruit_3_d.codeBlock = code


lord_recruit_3_d_lord_recruit_3_claim = Dialog("anyone|plyr", "{s43}", starting_state="lord_recruit_3_d", ending_state="lord_recruit_3_claim")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,54)
    s43 = str_store_string(gstr.according_to_the_ancient_law_and_custom_of_the_calradians_s45_should_be_s47)
    if _supported_pretender > 0 and troop_slot_001 == _supported_pretender:
        s46 = str_store_faction_name(_supported_pretender_old_faction)
        s43 = str_store_string(gstr.because_s44_is_the_rightful_s47_of_the_s46)
    #end
lord_recruit_3_d_lord_recruit_3_claim.conditionBlock = condition
def code():
    troop_set_slot(_g_talk_troop,53,1)
    _claim_arguments_made += 1
    _opposed_arguments_made = _victory_arguments_made
lord_recruit_3_d_lord_recruit_3_claim.codeBlock = code


lord_recruit_3_d_lord_recruit_3_claim_1 = Dialog("anyone|plyr", "If {s45} were {s47}, {s45} would deal with all men fairly and uphold the rights of the commons.", starting_state="lord_recruit_3_d", ending_state="lord_recruit_3_claim")
def code():
    troop_set_slot(_g_talk_troop,53,2)
    _ruler_arguments_made += 1
    _opposed_arguments_made = _lords_arguments_made
lord_recruit_3_d_lord_recruit_3_claim_1.codeBlock = code


lord_recruit_3_d_lord_recruit_3_claim_2 = Dialog("anyone|plyr", "If {s45} were {s47}, {s45} would uphold your ancient rights as a noble of this land.", starting_state="lord_recruit_3_d", ending_state="lord_recruit_3_claim")
def code():
    troop_set_slot(_g_talk_troop,53,5)
    _lords_arguments_made += 1
    _opposed_arguments_made = _ruler_arguments_made
lord_recruit_3_d_lord_recruit_3_claim_2.codeBlock = code


lord_recruit_3_d_lord_recruit_3_claim_3 = Dialog("anyone|plyr", "Because {s45} can unify Calradia and end this discord.", starting_state="lord_recruit_3_d", ending_state="lord_recruit_3_claim")
def code():
    troop_set_slot(_g_talk_troop,53,4)
    _victory_arguments_made += 1
    _opposed_arguments_made = _claim_arguments_made
lord_recruit_3_d_lord_recruit_3_claim_3.codeBlock = code


lord_recruit_3_d_lord_recruit_3_claim_4 = Dialog("anyone|plyr", "Because {s45} will reward you with lands.", starting_state="lord_recruit_3_d", ending_state="lord_recruit_3_claim")
def code():
    troop_set_slot(_g_talk_troop,53,3)
    _benefit_arguments_made += 1
lord_recruit_3_d_lord_recruit_3_claim_4.codeBlock = code


lord_recruit_3_d_lord_pretalk = Dialog("anyone|plyr", "Never mind", starting_state="lord_recruit_3_d", ending_state="lord_pretalk")
def code():
    troop_set_slot(_g_talk_troop,50,0)
lord_recruit_3_d_lord_pretalk.codeBlock = code


lord_recruit_3_claim_lord_recruit_3_claim = Dialog("anyone", "Do you perhaps tell each person what you think they most want to hear? {s12}", starting_state="lord_recruit_3_claim", ending_state="lord_recruit_3_claim")
def condition():
    if not troop_slot_eq(_g_talk_troop,53,3) and _opposed_arguments_made > 0:
        troop_slot_001 = troop_get_slot(_g_talk_troop,50)
        var002 = _opposed_arguments_made * 10
        var002 += troop_slot_001
        if var002 > 100:
            if troop_slot_eq(_g_talk_troop,53,1):
                s12 = str_store_string(gstr.you_speak_of_claims_and_legalities_yet_to_others_you_talk_of_bringing_peace_by_force)
            elif troop_slot_eq(_g_talk_troop,53,4):
                s12 = str_store_string(gstr.you_speak_of_bringing_peace_by_force_yet_to_others_you_make_legal_claims)
            elif troop_slot_eq(_g_talk_troop,53,2):
                s12 = str_store_string(gstr.you_speak_to_some_of_upholding_the_rights_of_the_commons_yet_you_speak_to_others_of_uphold_the_rights_of_nobles_what_if_those_rights_are_in_conflict)
            elif troop_slot_eq(_g_talk_troop,53,5):
                s12 = str_store_string(gstr.you_speak_to_me_of_upholding_my_rights_as_a_lord_but_to_others_you_talk_of_upholding_the_rights_of_all_commons_what_if_those_rights_come_into_conflict)
            #end
        #end
    #end
lord_recruit_3_claim_lord_recruit_3_claim.conditionBlock = condition
def code():
    _opposed_arguments_made = -1
lord_recruit_3_claim_lord_recruit_3_claim.codeBlock = code


lord_recruit_3_claim_lord_recruit_4 = Dialog("anyone", "{s12}", starting_state="lord_recruit_3_claim", ending_state="lord_recruit_4")
def condition():
    _g_persuasion_trump_used = 0
    troop_slot_001 = troop_get_slot(_g_talk_troop,54)
    var002 = 0
    s12 = str_store_string(gstr.a_claim_should_be_strong_indeed_before_one_starts_talking_about_it)
    if troop_slot_001 != trp.player:
        s12 = str_store_string(gstr.indeed_please_continue)
        var002 = 1
    elif troop_slot_eq(_g_talk_troop,52,1):
        s12 = str_store_string(gstr.a_claim_should_be_strong_indeed_before_one_starts_talking_about_it)
        if _player_right_to_rule >= 10:
            s12 = str_store_string(gstr.a_king_should_prove_his_valor_beyond_any_doubt_before_he_starts_talking_about_a_claim_to_the_throne)
            if troop_slot_ge(troop_slot_001,7,400):
                var002 = 1
            elif troop_slot_eq(_g_talk_troop,52,6):
                s12 = str_store_string(gstr.you_must_prove_yourself_a_great_warrior_before_men_will_follow_you_as_king)
                if troop_slot_ge(troop_slot_001,7,200):
                    var002 = 1
                elif troop_slot_eq(_g_talk_troop,52,7):
                    s12 = str_store_string(gstr.a_claim_to_the_throne_should_be_strong_indeed_before_one_presses_it)
                    if _player_right_to_rule >= 20:
                        s12 = str_store_string(gstr.indeed_but_a_man_must_also_prove_himself_a_great_warrior_before_men_will_follow_you_as_king)
                        if troop_slot_ge(troop_slot_001,7,200):
                            var002 = 1
                        elif troop_slot_eq(_g_talk_troop,52,2):
                            s12 = str_store_string(gstr.my_pigherd_can_declare_himself_king_if_he_takes_he_fancy_i_think_you_need_to_break_a_few_more_heads_on_tbe_battlefield_before_men_will_follow_you)
                            if troop_slot_ge(troop_slot_001,7,200):
                                var002 = 1
                            elif troop_slot_eq(_g_talk_troop,52,3):
                                s12 = str_store_string(gstr.if_you_do_not_wish_to_die_on_a_scaffold_like_so_many_failed_pretenders_before_you_i_would_suggest_that_you_to_build_your_claim_on_stronger_foundations_so_that_men_will_follow_you)
                                if _player_right_to_rule >= 10:
                                    s12 = str_store_string(gstr.if_you_do_not_wish_to_die_on_a_scaffold_like_so_many_failed_pretenders_before_you_i_would_advise_you_prove_yourself_on_the_field_of_battle_so_that_men_will_follow_you)
                                    if troop_slot_ge(troop_slot_001,7,200):
                                        var002 = 1
                                    elif troop_slot_eq(_g_talk_troop,52,5):
                                        s12 = str_store_string(gstr.talk_is_for_heralds_and_lawyers_real_kings_prove_themselves_with_their_swords)
                                        if troop_slot_ge(troop_slot_001,7,200):
                                            var002 = 1
                                        elif troop_slot_eq(_g_talk_troop,52,4):
                                            s12 = str_store_string(gstr.i_were_you_i_would_try_to_prove_myself_a_bit_more_before_i_went_about_pressing_my_claim)
                                            if troop_slot_ge(troop_slot_001,7,400):
                                                var002 = 1
                                            #end
                                        #end
                                    #end
                                #end
                            #end
                        #end
                    #end
                #end
            #end
        #end
    #end
    str_clear(14)
    if var002 == 1:
        s12 = str_store_string(gstr.indeed_please_continue)
    elif var002 == 0 and _g_persuasion_trump_used == 0:
        _g_persuasion_trump_used = 1
        skill_lvl_003 = store_skill_level(skl.persuasion,trp.player)
        troop_slot_004 = troop_get_slot(_g_talk_troop,50)
        if _cheat_mode == 1:
            pass
        #end
        skill_lvl_003 *= 7
        if skill_lvl_003 >= troop_slot_004:
            var002 = 1
            lord_comment_to_s43(_g_talk_troop,gstr.changed_my_mind_default)
            s14 = str_store_string(gstr.s12_s43)
            s12 = str_store_string(14)
            if var002 == 1:
                pass
            #end
        #end
    #end
lord_recruit_3_claim_lord_recruit_4.conditionBlock = condition


lord_recruit_3_claim_lord_pretalk = Dialog("anyone", "{s12}", starting_state="lord_recruit_3_claim", ending_state="lord_pretalk")


lord_recruit_4_lord_recruit_4_objective_conditions = Dialog("anyone|plyr", "I ask you to pledge your allegiance to {s16}.", starting_state="lord_recruit_4", ending_state="lord_recruit_4_objective_conditions")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,54)
    s16 = str_store_troop_name(troop_slot_001)
    if troop_slot_001 == trp.player:
        s16 = str_store_string(gstr.me)
    #end
lord_recruit_4_lord_recruit_4_objective_conditions.conditionBlock = condition


lord_recruit_4_lord_pretalk = Dialog("anyone|plyr", "Never mind.", starting_state="lord_recruit_4", ending_state="lord_pretalk")
def condition():
    troop_set_slot(_g_talk_troop,50,0)
lord_recruit_4_lord_pretalk.conditionBlock = condition


lord_recruit_4_objective_conditions_lord_recruit_5_security = Dialog("anyone", "Let me think...", starting_state="lord_recruit_4_objective_conditions", ending_state="lord_recruit_5_security")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,54)
    calculate_troop_political_factors_for_liege(_g_talk_troop,troop_slot_001)
    s33 = str_store_string(14)
    var002 = reg2
    var003 = reg4
    if _cheat_mode == 1:
        print(gstr.preliminary_result_for_political_equals_reg4)
    #end
    var004 = reg10
    var005 = reg0
    faction_slot_006 = faction_get_slot(_g_talk_x_troop_faction,11)
    calculate_troop_political_factors_for_liege(_g_talk_troop,faction_slot_006)
    var007 = var002 - reg2
    var008 = var003 - reg4
    var009 = reg0
    if _cheat_mode == 1:
        reg31 = var005
        reg32 = var009
        print("@{!}DEBUG : result for new liege : {reg31}")
        print("@{!}DEBUG : result for old liege : {reg32}")
    #end
    _pledge_chance = var005 - var009
    _pledge_chance += 50
    _pledge_chance /= 2
    if var003 < 0:
        if troop_slot_eq(_g_talk_troop,52,7):
            s31 = str_store_string(gstr.i_worry_about_those_with_whom_you_have_chosen_to_surround_yourself)
        elif troop_slot_eq(_g_talk_troop,52,1):
            s31 = str_store_string(gstr.there_are_some_outstanding_matters_between_me_and_some_of_your_vassals_)
            if True:
                reg41 = var003
                print(gstr.result_for_political_equals_reg41)
            #end
        elif troop_slot_eq(_g_talk_troop,52,2):
            s31 = str_store_string(gstr.my_liege_has_his_faults_but_i_dont_care_for_your_toadies)
        elif troop_slot_eq(_g_talk_troop,52,6):
            s31 = str_store_string(gstr.i_think_youre_a_good_man_but_im_worried_that_you_might_be_pushed_in_the_wrong_direction_by_some_of_those_around_you)
        elif troop_slot_eq(_g_talk_troop,52,3):
            s31 = str_store_string(gstr.i_am_loathe_to_fight_alongside_you_so_long_as_you_take_under_your_wing_varlots_and_base_men)
        elif troop_slot_eq(_g_talk_troop,52,4):
            s31 = str_store_string(gstr.ill_be_honest__with_some_of_those_who_follow_you_i_think_id_be_more_comfortable_fighting_against_you_than_with_you)
        elif troop_slot_eq(_g_talk_troop,52,5):
            s31 = str_store_string(gstr.i_say_that_you_can_judge_a_man_by_the_company_he_keeps_and_you_have_surrounded_yourself_with_vipers_and_vultures)
        elif troop_slot_ge(_g_talk_troop,52,8):
            s31 = str_store_string(gstr.you_know_that_i_have_always_had_a_problem_with_some_of_our_companions)
        #end
    elif var008 < 0:
        s31 = str_store_string(gstr.politically_i_would_be_a_better_position_in_the_court_of_my_current_liege_than_in_yours)
    else:
        s31 = str_store_string(gstr.i_am_more_comfortable_with_you_and_your_companions_than_with_my_current_liege)
    #end
    if var002 < 10:
        if troop_slot_eq(_g_talk_troop,52,4) or troop_slot_ge(_g_talk_troop,52,8):
            s32 = str_store_string(gstr.militarily_youre_in_no_position_to_protect_me_should_i_be_attacked_id_be_reluctant_to_join_you_until_you_could)
        elif troop_slot_eq(_g_talk_troop,52,7):
            s32 = str_store_string(gstr.militarily_when_i_consider_the_lay_of_the_land_i_realize_that_to_pledge_myself_to_you_now_would_endanger_my_faithful_retainers_and_my_family)
        elif troop_slot_eq(_g_talk_troop,52,1):
            s32 = str_store_string(gstr.militarily_youre_in_no_position_to_come_to_my_help_if_someone_attacked_me_i_dont_mind_a_good_fight_but_i_like_to_have_a_chance_of_winning)
        elif troop_slot_eq(_g_talk_troop,52,6):
            s32 = str_store_string(gstr.militarily_youre_in_no_position_to_come_to_my_help_if_someone_attacked_me_i_dont_mind_a_good_fight_but_i_like_to_have_a_chance_of_winning)
        elif troop_slot_eq(_g_talk_troop,52,5):
            s32 = str_store_string(gstr.militarily_you_would_have_me_join_you_only_to_find_myself_isolated_amid_a_sea_of_enemies)
        elif troop_slot_eq(_g_talk_troop,52,3):
            s32 = str_store_string(gstr.militarily_you_would_have_me_join_you_only_to_find_myself_isolated_amid_a_sea_of_enemies)
        elif troop_slot_eq(_g_talk_troop,52,2):
            s32 = str_store_string(gstr.militarily_youre_in_no_position_to_come_to_my_help_if_someone_attacked_me_youd_let_me_be_cut_down_like_a_dog_id_bet)
        #end
    elif var007 < 0:
        s32 = str_store_string(gstr.militarily_i_wouldnt_be_any_safer_if_i_joined_you)
    else:
        s32 = str_store_string(gstr.militarily_i_might_be_safer_if_i_joined_you)
    #end
    if var004 > 40:
        s34 = str_store_string(gstr.finally_there_is_a_cost_to_ones_reputation_to_change_sides_in_this_case_the_cost_would_be_very_high)
    elif var004 > 20:
        s34 = str_store_string(gstr.finally_there_is_a_cost_to_ones_reputation_to_change_sides_in_this_case_the_cost_would_be_significant)
    else:
        s34 = str_store_string(gstr.finally_there_is_a_cost_to_ones_reputation_to_change_sides_in_this_case_however_many_men_would_understand)
    #end
lord_recruit_4_objective_conditions_lord_recruit_5_security.conditionBlock = condition


lord_recruit_5_security_lord_recruit_5_political = Dialog("anyone", "{s32}", starting_state="lord_recruit_5_security", ending_state="lord_recruit_5_political")


lord_recruit_5_political_lord_recruit_5_ideological = Dialog("anyone", "{s31}", starting_state="lord_recruit_5_political", ending_state="lord_recruit_5_ideological")


lord_recruit_5_ideological_lord_recruit_5_change_sides = Dialog("anyone", "{s33}", starting_state="lord_recruit_5_ideological", ending_state="lord_recruit_5_change_sides")


lord_recruit_5_change_sides_lord_recruit_6 = Dialog("anyone", "{s34}", starting_state="lord_recruit_5_change_sides", ending_state="lord_recruit_6")
def code():
    if _cheat_mode == 1:
        reg1 = _pledge_chance
        print(gstr.chance_of_success_equals_reg1)
    #end
lord_recruit_5_change_sides_lord_recruit_6.codeBlock = code


lord_recruit_6_lord_recruit_6_reaction = Dialog("anyone|plyr", "It is time for you to make a decision.", starting_state="lord_recruit_6", ending_state="lord_recruit_6_reaction")


lord_recruit_6_lord_pretalk = Dialog("anyone|plyr", "No need to decide anything -- we can speak of this at a later time.", starting_state="lord_recruit_6", ending_state="lord_pretalk")


lord_recruit_6_reaction_lord_recruit_7_decision = Dialog("anyone", "Very well...", starting_state="lord_recruit_6_reaction", ending_state="lord_recruit_7_decision")
def code():
    troop_set_slot(_g_talk_troop,50,0)
lord_recruit_6_reaction_lord_recruit_7_decision.codeBlock = code


lord_recruit_7_decision_lord_pretalk = Dialog("anyone", "{s12}", starting_state="lord_recruit_7_decision", ending_state="lord_pretalk")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,49)
    var002 = store_mod(troop_slot_001,100)
    if _cheat_mode == 1:
        reg3 = var002
        print(gstr.random_equals_reg3)
    #end
    faction_slot_003 = faction_get_slot(_g_talk_x_troop_faction,11)
    s14 = str_store_troop_name(faction_slot_003)
    var004 = 0
    if troop_slot_eq(_g_talk_troop,52,3) and var002 > _pledge_chance:
        s12 = str_store_string(gstr.i_will_not_have_it_be_said_about_me_that_i_am_a_traitor_that_is_my_final_decision_i_have_nothing_more_to_say_on_this_matter)
    elif troop_slot_eq(_g_talk_troop,52,1) and var002 > _pledge_chance:
        s12 = str_store_string(gstr.i_am_pledged_to_defend_s14_i_am_sorry_though_we_may_meet_on_the_battlefield_i_hope_that_we_will_still_be_friends)
    elif troop_slot_eq(_g_talk_troop,52,6) or troop_slot_ge(_g_talk_troop,52,8) and var002 > _pledge_chance:
        s12 = str_store_string(gstr.i_really_cannot_bring_myself_to_renounce_s14_i_am_sorry_please_lets_not_talk_about_this_any_more)
    elif troop_slot_eq(_g_talk_troop,52,7) and var002 > _pledge_chance:
        s12 = str_store_string(gstr.however_i_have_decided_that_i_must_remain_loyal_to_s14_i_am_sorry)
    elif troop_slot_eq(_g_talk_troop,52,5) and var002 > _pledge_chance:
        s12 = str_store_string(gstr.however_i_will_not_let_you_lead_me_into_treason_do_not_talk_to_me_of_this_again)
    elif troop_slot_eq(_g_talk_troop,52,4) and var002 > _pledge_chance:
        s12 = str_store_string(gstr.its_not_good_to_get_a_reputation_as_one_who_abandons_his_liege_that_is_my_decision_let_us_speak_no_more_of_this_matter)
    elif troop_slot_eq(_g_talk_troop,52,2) and var002 > _pledge_chance:
        s12 = str_store_string(gstr.ive_decided_to_stick_with_s14_i_dont_want_to_talk_about_this_matter_any_more)
    else:
        var004 = 1
        if var004 == 0:
            pass
        #end
    #end
lord_recruit_7_decision_lord_pretalk.conditionBlock = condition
def code():
    troop_set_slot(_g_talk_troop,51,500)
lord_recruit_7_decision_lord_pretalk.codeBlock = code


lord_recruit_7_decision_lord_recruit_pledge = Dialog("anyone", "Very well -- I am ready to pledge myself to {s4} as my {reg4?queen:king}.", starting_state="lord_recruit_7_decision", ending_state="lord_recruit_pledge")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,54)
    s4 = str_store_troop_name(troop_slot_001)
    if _cheat_mode == 1:
        print(gstr.lord_pledges_to_s4)
    #end
lord_recruit_7_decision_lord_recruit_pledge.conditionBlock = condition
def code():
    troop_slot_001 = troop_get_slot(_g_talk_troop,54)
    if troop_slot_001 == trp.player and faction_slot_eq(fac.player_supporters_faction,21,2):
        activate_player_faction(trp.player)
    #end
    _lord_expects_fief = 0
    if troop_slot_eq(_g_talk_troop,53,3):
        _lord_expects_fief = 1
    #end
    change_troop_faction(_g_talk_troop,_players_kingdom)
    if True:
        faction_relation_002 = store_relation(_players_kingdom,_g_talk_x_troop_faction)
        if faction_relation_002 >= 0:
            if _cheat_mode == 1:
                print(gstr.lord_recruitment_provokes_home_faction)
            #end
        #end
        add_log_entry(78,trp.player,-1,_g_talk_troop,_g_talk_x_troop_faction)
        slot_no_003 = _players_kingdom + 130
        slot_no_003 -= fac.player_supporters_faction
        faction_set_slot(_g_talk_x_troop_faction,slot_no_003,30)
        faction_slot_004 = faction_get_slot(_g_talk_x_troop_faction,11)
        troop_change_relation_with_troop(trp.player,faction_slot_004,-3)
    #end
    reg4 = troop_get_type(troop_slot_001)
    if troop_slot_001 == trp.player:
        s4 = str_store_string("@you")
        change_player_right_to_rule(5)
    else:
        s4 = str_store_troop_name(troop_slot_001)
    #end
lord_recruit_7_decision_lord_recruit_pledge.codeBlock = code


lord_recruit_pledge_lord_recruit_pledge = Dialog("anyone", "Remember. You have promised me a fief. I will hold you to that promise.", starting_state="lord_recruit_pledge", ending_state="lord_recruit_pledge")
def condition():
    if _lord_expects_fief == 1:
        pass
lord_recruit_pledge_lord_recruit_pledge.conditionBlock = condition
def code():
    _lord_expects_fief = 0
    troop_set_slot(_g_talk_troop,53,0)
    add_log_entry(37,trp.player,0,_g_talk_troop,_players_kingdom)
    troop_set_slot(_g_talk_troop,47,1)
lord_recruit_pledge_lord_recruit_pledge.codeBlock = code


lord_recruit_pledge_lord_recruit_pledge_conclude = Dialog("anyone", "So be it -- I pledge allegiance to you as your faithful vassal. I shall stand at your side to fight your enemies should you need my sword, and uphold your claims and those of your legitimate heirs. I expect in turn that you will protect me and recognize my rights as your vassal.", starting_state="lord_recruit_pledge", ending_state="lord_recruit_pledge_conclude")
def condition():
    if troop_slot_001 == trp.player:
        troop_slot_001 = troop_get_slot(_g_talk_troop,54)
lord_recruit_pledge_lord_recruit_pledge_conclude.conditionBlock = condition
def code():
    _g_leave_encounter = 1
lord_recruit_pledge_lord_recruit_pledge_conclude.codeBlock = code


lord_recruit_pledge_lord_recruit_pledge_conclude_1 = Dialog("anyone", "So be it -- you may inform {s4} that I am now {reg4?her:him} faithful vassal, that I will follow {reg4?her:him} as long as my breath remains, and I will be at {reg4?her:his} side to fight your enemies should you need my sword, and that I uphold your lawful claims and those of your legitimate heirs. In turn, I expect his protection and his recognition of my rights as his vassal.", starting_state="lord_recruit_pledge", ending_state="lord_recruit_pledge_conclude")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,54)
    s4 = str_store_troop_name(troop_slot_001)
lord_recruit_pledge_lord_recruit_pledge_conclude_1.conditionBlock = condition


lord_recruit_pledge_conclude_close_window = Dialog("anyone", "Now... It is a momentous step I have taken. I will take my leave, as I may need some time prepare myself for what comes next.", starting_state="lord_recruit_pledge_conclude", ending_state="close_window")


lord_start_close_window_3 = Dialog("anyone", "I received the gift, presented to me through my {s11} {s10}. It was a noble gesture, {sir/my lady}, and I regret that we ever quarreled.", starting_state="lord_start", ending_state="close_window")
def condition():
    if check_quest_active(qst.offer_gift) and quest_slot_eq(qst.offer_gift,2,_g_talk_troop) and quest_slot_eq(qst.offer_gift,11,2) and troop_slot_eq(_g_talk_troop,52,7) or troop_slot_eq(_g_talk_troop,52,6) or troop_slot_eq(_g_talk_troop,52,1):
        random_x_001 = store_random_in_range(3)
        if random_x_001 == 0:
            quest_slot_002 = quest_get_slot(qst.offer_gift,6)
            s10 = str_store_troop_name(quest_slot_002)
            troop_get_family_relation_to_troop(quest_slot_002,_g_talk_troop)
lord_start_close_window_3.conditionBlock = condition
def code():
    troop_get_relation_with_troop(_g_talk_troop,trp.player)
    var001 = 0 - reg0
    var001 += 5
    val_max(var001,5)
    troop_change_relation_with_troop(_g_talk_troop,trp.player,var001)
    end_quest(qst.offer_gift)
    _g_leave_encounter = 1
lord_start_close_window_3.codeBlock = code


lord_start_close_window_4 = Dialog("anyone", "I received the gift, presented to me through my {s11} {s10}. For {reg4?her:his} sake, I am willing to let bygones be bygones.", starting_state="lord_start", ending_state="close_window")
def condition():
    if check_quest_active(qst.offer_gift) and quest_slot_eq(qst.offer_gift,2,_g_talk_troop) and quest_slot_eq(qst.offer_gift,11,2):
        random_x_001 = store_random_in_range(3)
        if random_x_001 != 0:
            quest_slot_002 = quest_get_slot(qst.offer_gift,6)
            s10 = str_store_troop_name(quest_slot_002)
            troop_get_family_relation_to_troop(quest_slot_002,_g_talk_troop)
lord_start_close_window_4.conditionBlock = condition
def code():
    troop_get_relation_with_troop(_g_talk_troop,trp.player)
    var001 = 0 - reg0
    val_max(var001,2)
    troop_change_relation_with_troop(_g_talk_troop,trp.player,var001)
    end_quest(qst.offer_gift)
    _g_leave_encounter = 1
lord_start_close_window_4.codeBlock = code


lord_start_close_window_5 = Dialog("anyone", "I received the gift, presented to me through my {s11} {s10}. Bah! Do you think you can buy my friendship?", starting_state="lord_start", ending_state="close_window")
def condition():
    if check_quest_active(qst.offer_gift) and quest_slot_eq(qst.offer_gift,2,_g_talk_troop) and quest_slot_eq(qst.offer_gift,11,2) and troop_slot_eq(_g_talk_troop,52,2) or troop_slot_eq(_g_talk_troop,52,5) or troop_slot_eq(_g_talk_troop,52,3):
        quest_slot_001 = quest_get_slot(qst.offer_gift,6)
        s10 = str_store_troop_name(quest_slot_001)
        troop_get_family_relation_to_troop(quest_slot_001,_g_talk_troop)
lord_start_close_window_5.conditionBlock = condition
def code():
    end_quest(qst.offer_gift)
    _g_leave_encounter = 1
lord_start_close_window_5.codeBlock = code


lord_start_close_window_6 = Dialog("anyone", "I received the gift, presented to me through my {s11} {s10}. As dear as {reg?she:he} is to me, however, I cannot forget our differences.", starting_state="lord_start", ending_state="close_window")
def condition():
    if check_quest_active(qst.offer_gift) and quest_slot_eq(qst.offer_gift,2,_g_talk_troop) and quest_slot_eq(qst.offer_gift,11,2):
        quest_slot_001 = quest_get_slot(qst.offer_gift,6)
        s10 = str_store_troop_name(quest_slot_001)
        troop_get_family_relation_to_troop(quest_slot_001,_g_talk_troop)
lord_start_close_window_6.conditionBlock = condition
def code():
    _g_leave_encounter = 1
    end_quest(qst.offer_gift)
lord_start_close_window_6.codeBlock = code


lord_talk_denounce_lord_results = Dialog("anyone|plyr", "I did as you suggested, and denounced {s4}", starting_state="lord_talk", ending_state="denounce_lord_results")
def condition():
    if check_quest_active(qst.denounce_lord) and quest_slot_eq(qst.denounce_lord,6,_g_talk_troop) and check_quest_succeeded(qst.denounce_lord) or check_quest_failed(qst.denounce_lord):
        quest_slot_001 = quest_get_slot(qst.denounce_lord,6)
        s4 = str_store_troop_name(quest_slot_001)
lord_talk_denounce_lord_results.conditionBlock = condition


denounce_lord_results_lord_pretalk = Dialog("anyone", "Yes, and hopefully now {s4} will think twice before entrusting him with any additional fiefs, honors, or offices. We are grateful to you.", starting_state="denounce_lord_results", ending_state="lord_pretalk")
def condition():
    if check_quest_succeeded(qst.denounce_lord):
        faction_slot_001 = faction_get_slot(_g_talk_x_troop_faction,11)
        s4 = str_store_troop_name(faction_slot_001)
denounce_lord_results_lord_pretalk.conditionBlock = condition
def code():
    succeed_quest(qst.denounce_lord)
    end_quest(qst.denounce_lord)
    troop_change_relation_with_troop(_g_talk_troop,trp.player,8)
    add_xp_as_reward(1000)
denounce_lord_results_lord_pretalk.codeBlock = code


denounce_lord_results_close_window = Dialog("anyone", "So you did -- and we have heard that he forced you to retract your words, and thus emerged from this affair looking stronger than before. You will forgive me, {sir/my lady}, if my gratitude to you is somewhat muted.", starting_state="denounce_lord_results", ending_state="close_window")
def code():
    end_quest(qst.denounce_lord)
denounce_lord_results_close_window.codeBlock = code


lord_talk_lord_quest_intrigue_result = Dialog("anyone|plyr", "I did as you asked, and spoke to {s5} about the danger posed by {s4}.", starting_state="lord_talk", ending_state="lord_quest_intrigue_result")
def condition():
    if check_quest_active(qst.intrigue_against_lord) and quest_slot_eq(qst.intrigue_against_lord,6,_g_talk_troop) and check_quest_succeeded(qst.intrigue_against_lord) or check_quest_failed(qst.intrigue_against_lord):
        quest_slot_001 = quest_get_slot(qst.intrigue_against_lord,2)
        s4 = str_store_troop_name(quest_slot_001)
        faction_slot_002 = faction_get_slot(_players_kingdom,11)
        s5 = str_store_troop_name(faction_slot_002)
lord_talk_lord_quest_intrigue_result.conditionBlock = condition


lord_quest_intrigue_result_lord_pretalk = Dialog("anyone", "So we hear. Hopefully now {s5} will think twice before entrusting him with any additional fiefs, honors, or offices. We are grateful to you.", starting_state="lord_quest_intrigue_result", ending_state="lord_pretalk")
def condition():
    if check_quest_succeeded(qst.intrigue_against_lord):
        pass
lord_quest_intrigue_result_lord_pretalk.conditionBlock = condition
def code():
    end_quest(qst.intrigue_against_lord)
    quest_set_slot(qst.intrigue_against_lord,25,30)
    troop_change_relation_with_troop(_g_talk_troop,trp.player,8)
    add_xp_as_reward(500)
lord_quest_intrigue_result_lord_pretalk.codeBlock = code


lord_quest_intrigue_result_close_window = Dialog("anyone", "So we hear -- but alas, {s5} seems not to have listened. Still, we are grateful to you for trying.", starting_state="lord_quest_intrigue_result", ending_state="close_window")
def condition():
    if check_quest_failed(qst.intrigue_against_lord):
        pass
lord_quest_intrigue_result_close_window.conditionBlock = condition
def code():
    end_quest(qst.intrigue_against_lord)
    quest_set_slot(qst.intrigue_against_lord,25,30)
lord_quest_intrigue_result_close_window.codeBlock = code


lord_talk_lord_lend_companion_end = Dialog("anyone|plyr", "I should like {s14} returned to me, {s65}, if you no longer require {reg3?her:his} services.", starting_state="lord_talk", ending_state="lord_lend_companion_end")
def condition():
    if not troop_slot_ge(_g_talk_troop,8,0) and check_quest_active(qst.lend_companion) and quest_slot_eq(qst.lend_companion,6,_g_talk_troop):
        cur_day_001 = store_current_day()
        quest_slot_002 = quest_get_slot(qst.lend_companion,10)
        if cur_day_001 >= quest_slot_002:
            quest_slot_003 = quest_get_slot(qst.lend_companion,2)
            s14 = str_store_troop_name(quest_slot_003)
            reg3 = troop_get_type(quest_slot_003)
lord_talk_lord_lend_companion_end.conditionBlock = condition


lord_lend_companion_end_lord_pretalk = Dialog("anyone", "You've too many men in your company already, {playername}. You could not lead any more at the moment.", starting_state="lord_lend_companion_end", ending_state="lord_pretalk")
def condition():
    if not hero_can_join(p.main_party):
        pass
lord_lend_companion_end_lord_pretalk.conditionBlock = condition


lord_lend_companion_end_lord_pretalk_1 = Dialog("anyone", "Certainly, {playername}. {reg3?She:He} is a bright {reg3?girl:fellow}, you're a lucky {man/woman} to have such worthy companions.", starting_state="lord_lend_companion_end", ending_state="lord_pretalk")
def code():
    quest_slot_001 = quest_get_slot(qst.lend_companion,2)
    party_add_members(p.main_party,quest_slot_001,1)
    change_player_relation_with_troop(_g_talk_troop,3)
    add_xp_as_reward(100)
    end_quest(qst.lend_companion)
    s14 = str_store_troop_name(quest_slot_001)
    reg3 = troop_get_type(quest_slot_001)
lord_lend_companion_end_lord_pretalk_1.codeBlock = code


lord_talk_lord_ask_to_collect_debt = Dialog("anyone|plyr", "I've come to collect the debt you owe to {s1}.", starting_state="lord_talk", ending_state="lord_ask_to_collect_debt")
def condition():
    if check_quest_active(qst.collect_debt) and quest_slot_eq(qst.collect_debt,11,0):
        quest_slot_001 = quest_get_slot(qst.collect_debt,2)
        if _g_talk_troop == quest_slot_001:
            quest_slot_002 = quest_get_slot(qst.collect_debt,6)
            s1 = str_store_troop_name(quest_slot_002)
lord_talk_lord_ask_to_collect_debt.conditionBlock = condition
def code():
    _g_convince_quest = qst.collect_debt
lord_talk_lord_ask_to_collect_debt.codeBlock = code


lord_ask_to_collect_debt_lord_ask_to_collect_debt_2 = Dialog("anyone", "Oh. Well, {s1} did lend me some silver a ways back, but I've done him many favours in the past and I consider that money as my due payment.", starting_state="lord_ask_to_collect_debt", ending_state="lord_ask_to_collect_debt_2")


lord_ask_to_collect_debt_2_convince_begin = Dialog("anyone|plyr", "{s1} considers it a debt. He asked me to speak to you on his behalf.", starting_state="lord_ask_to_collect_debt_2", ending_state="convince_begin")


lord_ask_to_collect_debt_2_lord_pretalk = Dialog("anyone|plyr", "Then I will not press the matter any further.", starting_state="lord_ask_to_collect_debt_2", ending_state="lord_pretalk")


convince_accept_close_window = Dialog("anyone", "My debt to {s8} has long been overdue and was a source of great discomfort to me. Thank you for accepting to take the money to him. Please give him these {reg10} denars and thank him on my behalf.", starting_state="convince_accept", ending_state="close_window")
def condition():
    if check_quest_active(qst.collect_debt) and quest_slot_eq(qst.collect_debt,2,_g_talk_troop):
        quest_slot_001 = quest_get_slot(qst.collect_debt,6)
        s8 = str_store_troop_name(quest_slot_001)
        reg10 = quest_get_slot(qst.collect_debt,10)
convince_accept_close_window.conditionBlock = condition
def code():
    troop_add_gold(trp.player,reg10)
    quest_set_slot(qst.collect_debt,11,1)
    succeed_quest(qst.collect_debt)
    _g_leave_encounter = 1
convince_accept_close_window.codeBlock = code


lord_talk_lord_ask_to_make_peace = Dialog("anyone|plyr", "Please, {s64}, it's time to end this war between {s12} and {s13}.", starting_state="lord_talk", ending_state="lord_ask_to_make_peace")
def condition():
    if check_quest_active(qst.persuade_lords_to_make_peace):
        quest_slot_001 = quest_get_slot(qst.persuade_lords_to_make_peace,2)
        quest_slot_002 = quest_get_slot(qst.persuade_lords_to_make_peace,4)
        if quest_slot_001 == _g_talk_troop or quest_slot_002 == _g_talk_troop:
            quest_slot_003 = quest_get_slot(qst.persuade_lords_to_make_peace,3)
            quest_slot_004 = quest_get_slot(qst.persuade_lords_to_make_peace,15)
            s12 = str_store_faction_name(quest_slot_003)
            s13 = str_store_faction_name(quest_slot_004)
lord_talk_lord_ask_to_make_peace.conditionBlock = condition
def code():
    _g_convince_quest = qst.persuade_lords_to_make_peace
lord_talk_lord_ask_to_make_peace.codeBlock = code


lord_ask_to_make_peace_lord_ask_to_make_peace_2 = Dialog("anyone", "Eh? I'm not sure I heard you right, {playername}. War is not easily forgotten by either side of the conflict, and I have a very long memory. Why should I take any interest in brokering peace with those dogs?", starting_state="lord_ask_to_make_peace", ending_state="lord_ask_to_make_peace_2")


lord_ask_to_make_peace_2_convince_begin = Dialog("anyone|plyr", "Perhaps I can talk you into it...", starting_state="lord_ask_to_make_peace_2", ending_state="convince_begin")


lord_ask_to_make_peace_2_lord_pretalk = Dialog("anyone|plyr", "Never mind, peace can wait for now.", starting_state="lord_ask_to_make_peace_2", ending_state="lord_pretalk")


convince_accept_close_window_1 = Dialog("anyone", "You... have convinced me, {playername}. Very well then, you've my blessing to bring a peace offer to {s14}. I cannot guarantee they will accept it, but on the off-chance they do, I will stand by it.", starting_state="convince_accept", ending_state="close_window")
def condition():
    if check_quest_active(qst.persuade_lords_to_make_peace) and quest_slot_eq(qst.persuade_lords_to_make_peace,2,_g_talk_troop) or quest_slot_eq(qst.persuade_lords_to_make_peace,4,_g_talk_troop):
        quest_slot_001 = quest_get_slot(qst.persuade_lords_to_make_peace,15)
        quest_slot_002 = quest_get_slot(qst.persuade_lords_to_make_peace,3)
        s12 = str_store_faction_name(quest_slot_001)
        s13 = str_store_faction_name(quest_slot_002)
        if quest_slot_001 == _g_talk_x_troop_faction:
            s14 = str_store_faction_name(quest_slot_002)
        else:
            s14 = str_store_faction_name(quest_slot_001)
        #end
    #end
convince_accept_close_window_1.conditionBlock = condition
def code():
    var001 = _g_talk_troop * -1
    if quest_slot_eq(qst.persuade_lords_to_make_peace,2,_g_talk_troop):
        quest_set_slot(qst.persuade_lords_to_make_peace,2,var001)
    else:
        quest_set_slot(qst.persuade_lords_to_make_peace,4,var001)
    #end
    quest_set_slot(qst.persuade_lords_to_make_peace,19,1500)
    _g_leave_encounter = 1
    if not quest_slot_ge(qst.persuade_lords_to_make_peace,2,0) and not quest_slot_ge(qst.persuade_lords_to_make_peace,4,0):
        succeed_quest(qst.persuade_lords_to_make_peace)
convince_accept_close_window_1.codeBlock = code


lord_talk_lord_challenge_duel_for_lady = Dialog("anyone|plyr", "I want you to take back your accusations against {s1}.", starting_state="lord_talk", ending_state="lord_challenge_duel_for_lady")
def condition():
    if not troop_slot_ge(_g_talk_troop,8,0) and check_quest_active(qst.duel_for_lady) and not check_quest_concluded(qst.duel_for_lady) and quest_slot_eq(qst.duel_for_lady,2,_g_talk_troop):
        quest_slot_001 = quest_get_slot(qst.duel_for_lady,6)
        s1 = str_store_troop_name(quest_slot_001)
lord_talk_lord_challenge_duel_for_lady.conditionBlock = condition


lord_challenge_duel_for_lady_lord_challenge_duel_for_lady_2 = Dialog("anyone", "What accusations? Everyone knows that she beds her stable boys and anyone else she can lay hands on while her husband is away. I merely repeat the words of many.", starting_state="lord_challenge_duel_for_lady", ending_state="lord_challenge_duel_for_lady_2")


lord_challenge_duel_for_lady_2_lord_challenge_duel = Dialog("anyone|plyr", "You will recant these lies, sirrah, or prove them against my sword!", starting_state="lord_challenge_duel_for_lady_2", ending_state="lord_challenge_duel")


lord_challenge_duel_for_lady_2_lord_pretalk = Dialog("anyone|plyr", "If you say so...", starting_state="lord_challenge_duel_for_lady_2", ending_state="lord_pretalk")


lord_challenge_duel_close_window = Dialog("anyone", "{s15}", starting_state="lord_challenge_duel", ending_state="close_window")
def condition():
    s15 = str_store_string(gstr.error__wrong_quest_type)
    if check_quest_active(qst.duel_for_lady) and not check_quest_concluded(qst.duel_for_lady) and quest_slot_eq(qst.duel_for_lady,2,_g_talk_troop):
        s15 = str_store_string("@You are challenging me to a duel? How droll! As you wish;;; {playername};;; it will be good sport to bash your head in.")
    elif check_quest_active(qst.duel_courtship_rival) and not check_quest_concluded(qst.duel_courtship_rival) and quest_slot_eq(qst.duel_courtship_rival,2,_g_talk_troop):
        s15 = str_store_string(gstr.call_me_coward_very_well_you_leave_me_no_choice)
    #end
lord_challenge_duel_close_window.conditionBlock = condition
def code():
    change_player_relation_with_troop(_g_talk_troop,-15)
    set_up_duel_with_troop(_g_talk_troop)
lord_challenge_duel_close_window.codeBlock = code


lord_talk_lord_challenge_courtship_rival = Dialog("anyone|plyr", "Relinquish your suit of {s5}!", starting_state="lord_talk", ending_state="lord_challenge_courtship_rival")
def condition():
    if not troop_slot_ge(_g_talk_troop,8,0) and check_quest_active(qst.duel_courtship_rival) and not check_quest_concluded(qst.duel_courtship_rival) and quest_slot_eq(qst.duel_courtship_rival,2,_g_talk_troop):
        quest_slot_001 = quest_get_slot(qst.duel_courtship_rival,6)
        s5 = str_store_troop_name(quest_slot_001)
lord_talk_lord_challenge_courtship_rival.conditionBlock = condition


lord_challenge_courtship_rival_lord_challenge_courtship_rival_2 = Dialog("anyone", "Or what? Do you intend to duel over a lady? I'll let you know -- our liege frowns on this sort of hot-headed challenge, when every man must stand together against the foreign foe.", starting_state="lord_challenge_courtship_rival", ending_state="lord_challenge_courtship_rival_2")


lord_challenge_courtship_rival_2_lord_challenge_duel = Dialog("anyone|plyr", "Do you fear to fight me?", starting_state="lord_challenge_courtship_rival_2", ending_state="lord_challenge_duel")


lord_challenge_courtship_rival_2_lord_pretalk = Dialog("anyone|plyr", "My pardon. I have spoken rashly...", starting_state="lord_challenge_courtship_rival_2", ending_state="lord_pretalk")
def code():
    end_quest(qst.duel_courtship_rival)
lord_challenge_courtship_rival_2_lord_pretalk.codeBlock = code


lord_talk_lord_message_delivered = Dialog("anyone|plyr", "I bring a message from {s9}.", starting_state="lord_talk", ending_state="lord_message_delivered")
def condition():
    if check_quest_active(qst.deliver_message):
        quest_slot_001 = quest_get_slot(qst.deliver_message,2)
        if _g_talk_troop == quest_slot_001:
            quest_slot_002 = quest_get_slot(qst.deliver_message,6)
            s9 = str_store_troop_name(quest_slot_002)
lord_talk_lord_message_delivered.conditionBlock = condition


lord_message_delivered_lord_pretalk = Dialog("anyone", "Oh? Let me see that... Well, well, well! It was good of you to bring me this, {playername}. Take my seal as proof that I've received it, and give my regards to {s9} when you see him again.", starting_state="lord_message_delivered", ending_state="lord_pretalk")
def code():
    end_quest(qst.deliver_message)
    quest_slot_001 = quest_get_slot(qst.deliver_message,6)
    s9 = str_store_troop_name(quest_slot_001)
    change_player_relation_with_troop(quest_slot_001,1)
    change_player_relation_with_troop(_g_talk_troop,1)
lord_message_delivered_lord_pretalk.codeBlock = code


lord_talk_lord_message_delivered_enemy = Dialog("anyone|plyr", "I bring a message from {s9}.", starting_state="lord_talk", ending_state="lord_message_delivered_enemy")
def condition():
    if check_quest_active(qst.deliver_message_to_enemy_lord):
        quest_slot_001 = quest_get_slot(qst.deliver_message_to_enemy_lord,2)
        if _g_talk_troop == quest_slot_001:
            quest_slot_002 = quest_get_slot(qst.deliver_message_to_enemy_lord,6)
            s9 = str_store_troop_name(quest_slot_002)
lord_talk_lord_message_delivered_enemy.conditionBlock = condition


lord_message_delivered_enemy_close_window = Dialog("anyone", "Oh? Let me see that... Hmmm. It was good of you to bring me this, {playername}. Take my seal as proof that I've received it, with my thanks.", starting_state="lord_message_delivered_enemy", ending_state="close_window")
def code():
    end_quest(qst.deliver_message_to_enemy_lord)
    quest_slot_001 = quest_get_slot(qst.deliver_message_to_enemy_lord,6)
    change_player_relation_with_troop(quest_slot_001,1)
    change_player_relation_with_troop(_g_talk_troop,1)
    _g_leave_encounter = 1
lord_message_delivered_enemy_close_window.codeBlock = code


lord_talk_lord_deliver_message_prisoner = Dialog("anyone|plyr", "I bring a message from {s11}.", starting_state="lord_talk", ending_state="lord_deliver_message_prisoner")
def condition():
    if check_quest_active(qst.deliver_message_to_prisoner_lord) and quest_slot_eq(qst.deliver_message_to_prisoner_lord,2,_g_talk_troop):
        quest_slot_001 = quest_get_slot(qst.deliver_message_to_prisoner_lord,6)
        s11 = str_store_troop_name(quest_slot_001)
lord_talk_lord_deliver_message_prisoner.conditionBlock = condition
def code():
    end_quest(qst.deliver_message_to_prisoner_lord)
lord_talk_lord_deliver_message_prisoner.codeBlock = code


lord_deliver_message_prisoner_lord_deliver_message_prisoner_2 = Dialog("anyone", "Can it be true? Oh, thank you kindly, {playername}! You have brought hope and some small ray of light to these bleak walls. Perhaps one day I will be able to repay you.", starting_state="lord_deliver_message_prisoner", ending_state="lord_deliver_message_prisoner_2")


lord_deliver_message_prisoner_2_lord_deliver_message_prisoner_2a = Dialog("anyone|plyr", " 'Twas the least I could do, {s65}.", starting_state="lord_deliver_message_prisoner_2", ending_state="lord_deliver_message_prisoner_2a")


lord_deliver_message_prisoner_2a_close_window = Dialog("anyone", "You've no idea how grateful I am, {playername}. A thousand thanks and more.", starting_state="lord_deliver_message_prisoner_2a", ending_state="close_window")


lord_deliver_message_prisoner_2_lord_deliver_message_prisoner_2b = Dialog("anyone|plyr", "Worry not, {s65}. You'll have ample opportunity once you are free again.", starting_state="lord_deliver_message_prisoner_2", ending_state="lord_deliver_message_prisoner_2b")


lord_deliver_message_prisoner_2b_close_window = Dialog("anyone", "Hah, of course, {playername}. My eternal thanks go with you.", starting_state="lord_deliver_message_prisoner_2b", ending_state="close_window")


lord_talk_lord_rescue_by_replace_offer = Dialog("anyone|plyr", "Fear not, I am here to rescue you.", starting_state="lord_talk", ending_state="lord_rescue_by_replace_offer")
def condition():
    if troop_slot_ge(_g_talk_troop,8,0) and check_quest_active(qst.rescue_lord_by_replace) and quest_slot_eq(qst.rescue_lord_by_replace,2,_g_talk_troop) and not check_quest_succeeded(qst.rescue_lord_by_replace):
        pass
lord_talk_lord_rescue_by_replace_offer.conditionBlock = condition


lord_rescue_by_replace_offer_lord_rescue_by_replace_offer_2 = Dialog("anyone", "By God, are you serious? What is your plan?", starting_state="lord_rescue_by_replace_offer", ending_state="lord_rescue_by_replace_offer_2")


lord_rescue_by_replace_offer_2_lord_rescue_by_replace_offer_3 = Dialog("anyone|plyr", "A simple ruse, {s65}. If we exchange garments, I shall take your place here in prison, while you make your escape disguised as myself. I paid the guards a handsome bribe, with which I am sure they have already purchased half the wine stocks of the nearest tavern. With some luck they'll soon get so drunk they'd have trouble recognising their own mothers, let alone telling one of us from the other. At least not until you are safely away.", starting_state="lord_rescue_by_replace_offer_2", ending_state="lord_rescue_by_replace_offer_3")


lord_rescue_by_replace_offer_3_lord_rescue_by_replace_offer_4 = Dialog("anyone", "Hmm, it might just work... But what of you, my {friend/lady}? The guards won't take kindly to this trickery. You may end up spending some time in this cell yourself.", starting_state="lord_rescue_by_replace_offer_3", ending_state="lord_rescue_by_replace_offer_4")


lord_rescue_by_replace_offer_4_lord_rescue_by_replace_offer_5a = Dialog("anyone|plyr", "Not to worry, {s65}. The place is already starting to grow on me.", starting_state="lord_rescue_by_replace_offer_4", ending_state="lord_rescue_by_replace_offer_5a")


lord_rescue_by_replace_offer_4_lord_rescue_by_replace_offer_5b = Dialog("anyone|plyr", "I shall be fine as long there is an ample reward waiting at the end.", starting_state="lord_rescue_by_replace_offer_4", ending_state="lord_rescue_by_replace_offer_5b")


lord_rescue_by_replace_offer_5a_lord_rescue_by_replace_offer_6 = Dialog("anyone", "You are a brave soul indeed. I won't forget this.", starting_state="lord_rescue_by_replace_offer_5a", ending_state="lord_rescue_by_replace_offer_6")


lord_rescue_by_replace_offer_5b_lord_rescue_by_replace_offer_6 = Dialog("anyone", "Of course, my {friend/lady}, of course! Come to me when you have regained your freedom, and perhaps I shall be able to repay the debt I owe you.", starting_state="lord_rescue_by_replace_offer_5b", ending_state="lord_rescue_by_replace_offer_6")


lord_rescue_by_replace_offer_6_close_window = Dialog("anyone|plyr", "Quickly, {s65}, let us change garments. It is past time you were away from here.", starting_state="lord_rescue_by_replace_offer_6", ending_state="close_window")
def code():
    succeed_quest(qst.rescue_lord_by_replace)
    quest_slot_001 = quest_get_slot(qst.rescue_lord_by_replace,2)
    quest_slot_002 = quest_get_slot(qst.rescue_lord_by_replace,1)
    party_remove_prisoners(quest_slot_002,quest_slot_001,1)
    troop_set_slot(quest_slot_001,8,-1)
    _auto_menu = -1
    _capturer_party = _g_encountered_party
    jump_to_menu(mnu.captivity_rescue_lord_taken_prisoner)
    finish_mission()
lord_rescue_by_replace_offer_6_close_window.codeBlock = code


lord_talk_lord_ask_pardon_after_oath_renounced = Dialog("anyone|plyr", "{s66}, I wish to restore my old oath to {s4}.", starting_state="lord_talk", ending_state="lord_ask_pardon_after_oath_renounced")
def condition():
    if not troop_slot_ge(_g_talk_troop,8,0) and _players_oath_renounced_against_kingdom == _g_talk_x_troop_faction:
        s4 = str_store_faction_name(_g_talk_x_troop_faction)
lord_talk_lord_ask_pardon_after_oath_renounced.conditionBlock = condition


lord_ask_pardon_after_oath_renounced_lord_pretalk = Dialog("anyone", "That is too great a matter for me to decide, {playername}. You should seek out {s4}. Such clemency is his alone to grant or deny.", starting_state="lord_ask_pardon_after_oath_renounced", ending_state="lord_pretalk")
def condition():
    faction_slot_001 = faction_get_slot(_g_talk_x_troop_faction,11)
    if faction_slot_001 != _g_talk_troop:
        s4 = str_store_troop_name(faction_slot_001)
lord_ask_pardon_after_oath_renounced_lord_pretalk.conditionBlock = condition


lord_ask_pardon_after_oath_renounced_lord_ask_pardon_terms = Dialog("anyone", "{s11}.", starting_state="lord_ask_pardon_after_oath_renounced", ending_state="lord_ask_pardon_terms")
def condition():
    assign(var001,0)
    for p_002 in range(p.town_1, p.village_1):
        party_faction_003 = store_faction_of_party(p_002)
        if party_faction_003 == fac.player_supporters_faction and party_slot_eq(p_002,159,_g_talk_x_troop_faction):
            var001 += 1
        #end
    #end
    var004 = var001 * 500
    cur_hours_005 = store_current_hours()
    cur_hours_005 -= _players_oath_renounced_begin_time
    var004 += cur_hours_005
    if var004 > 800:
        random_x_006 = -1
        if var004 > 1500:
            if _players_oath_renounced_given_center == 0:
                random_x_006 = store_random_in_range(0,var001)
            #end
        else:
            _players_oath_renounced_given_center = 0
        #end
        var007 = 0
        for p_002 in range(p.town_1, p.village_1):
            party_faction_003 = store_faction_of_party(p_002)
            if party_faction_003 == fac.player_supporters_faction and party_slot_eq(p_002,159,_g_talk_x_troop_faction):
                if random_x_006 == 0:
                    _players_oath_renounced_given_center = p_002
                elif _players_oath_renounced_given_center != p_002:
                    if var007 == 0:
                        s17 = str_store_party_name(p_002)
                    elif var007 == 1:
                        s16 = str_store_party_name(p_002)
                        s17 = str_store_string("@{s16} and {s17}")
                    else:
                        s16 = str_store_party_name(p_002)
                        s17 = str_store_string("@{!}{s16};;; {s17}")
                    #end
                #end
                var007 += 1
            #end
            random_x_006 -= 1
        #end
        if var007 == 0:
            s11 = str_store_string("@Very well;;; I will accept you back into my ranks;;; if you're ready to swear your solemn oath once more.")
            _players_oath_renounced_terms_state = 1
        else:
            s11 = str_store_string("@A pardon will only be possible if you are willing to cede {s17} to me. Do you agree my terms?")
            _players_oath_renounced_terms_state = 2
        #end
    else:
        s11 = str_store_string("@No. There is no chance of peace between us;;; I am not interested.")
        _players_oath_renounced_terms_state = 0
    #end
lord_ask_pardon_after_oath_renounced_lord_ask_pardon_terms.conditionBlock = condition


lord_ask_pardon_terms_lord_pretalk = Dialog("anyone|plyr", "As you like, {s65}. I will accept your judgment.", starting_state="lord_ask_pardon_terms", ending_state="lord_pretalk")
def condition():
    if _players_oath_renounced_terms_state == 0:
        pass
lord_ask_pardon_terms_lord_pretalk.conditionBlock = condition


lord_ask_pardon_terms_lord_pretalk_1 = Dialog("anyone|plyr", "A shame, {s65}. A shame.", starting_state="lord_ask_pardon_terms", ending_state="lord_pretalk")
def condition():
    if _players_oath_renounced_terms_state == 0:
        pass
lord_ask_pardon_terms_lord_pretalk_1.conditionBlock = condition


lord_ask_pardon_terms_lord_pretalk_2 = Dialog("anyone|plyr", "Very well, go and die without me.", starting_state="lord_ask_pardon_terms", ending_state="lord_pretalk")
def condition():
    if _players_oath_renounced_terms_state == 0:
        pass
lord_ask_pardon_terms_lord_pretalk_2.conditionBlock = condition


lord_ask_pardon_terms_lord_ask_pardon_after_renounce_peace = Dialog("anyone|plyr", "Aye, I am ready.", starting_state="lord_ask_pardon_terms", ending_state="lord_ask_pardon_after_renounce_peace")
def condition():
    if _players_oath_renounced_terms_state == 1:
        pass
lord_ask_pardon_terms_lord_ask_pardon_after_renounce_peace.conditionBlock = condition


lord_ask_pardon_terms_lord_ask_pardon_terms_rejected = Dialog("anyone|plyr", "On second thought, no. I don't wish to be in your service again.", starting_state="lord_ask_pardon_terms", ending_state="lord_ask_pardon_terms_rejected")
def condition():
    if _players_oath_renounced_terms_state == 1:
        pass
lord_ask_pardon_terms_lord_ask_pardon_terms_rejected.conditionBlock = condition


lord_ask_pardon_terms_lord_ask_pardon_after_renounce_peace_1 = Dialog("anyone|plyr", "Aye, I agree to those terms.", starting_state="lord_ask_pardon_terms", ending_state="lord_ask_pardon_after_renounce_peace")
def condition():
    if _players_oath_renounced_terms_state == 2:
        pass
lord_ask_pardon_terms_lord_ask_pardon_after_renounce_peace_1.conditionBlock = condition


lord_ask_pardon_terms_lord_ask_pardon_terms_rejected_1 = Dialog("anyone|plyr", "That is too high a price, {s65}. I must decline.", starting_state="lord_ask_pardon_terms", ending_state="lord_ask_pardon_terms_rejected")
def condition():
    if _players_oath_renounced_terms_state == 2:
        pass
lord_ask_pardon_terms_lord_ask_pardon_terms_rejected_1.conditionBlock = condition


lord_ask_pardon_after_renounce_peace_lord_pretalk = Dialog("anyone", "Excellent. Though you strayed from us, {playername}, it gladdens all our hearts that you have found your way back to the right path. I hereby restore your homage to me. Rise once more as an honoured {man/warrior} in my service.", starting_state="lord_ask_pardon_after_renounce_peace", ending_state="lord_pretalk")
def code():
    for p_001 in range(p.town_1, p.village_1):
        party_faction_002 = store_faction_of_party(p_001)
        if party_faction_002 == fac.player_supporters_faction and party_slot_eq(p_001,159,_g_talk_x_troop_faction) and p_001 != _players_oath_renounced_given_center:
            give_center_to_faction(p_001,_g_talk_x_troop_faction)
        #end
    #end
    player_join_faction(_g_talk_x_troop_faction)
    _player_has_homage = 1
    change_player_relation_with_troop(_g_talk_troop,3)
lord_ask_pardon_after_renounce_peace_lord_pretalk.codeBlock = code


lord_ask_pardon_terms_rejected_close_window = Dialog("anyone", "Then get out of my sight, traitor! Begone with you, and do not come back!", starting_state="lord_ask_pardon_terms_rejected", ending_state="close_window")
def code():
    _g_leave_encounter = 1
    change_player_relation_with_troop(_g_talk_troop,-5)
lord_ask_pardon_terms_rejected_close_window.codeBlock = code


lord_talk_lord_ask_pardon = Dialog("anyone|plyr", "I wish to make peace with the {s4}.", starting_state="lord_talk", ending_state="lord_ask_pardon")
def condition():
    if not troop_slot_ge(_g_talk_troop,8,0) and _g_talk_x_troop_faction_relation < 0:
        faction_relation_001 = store_relation(_g_talk_x_troop_faction,_players_kingdom)
        if faction_relation_001 >= 0 or _players_kingdom == 0 or _players_kingdom == fac.player_supporters_faction and _players_oath_renounced_against_kingdom != _g_talk_x_troop_faction:
            var002 = 1
            if _supported_pretender > 0 and _supported_pretender_old_faction == _g_talk_x_troop_faction:
                var002 = 0
            #end
        #end
    #end
    if var002 == 1 and is_between(_g_talk_x_troop_faction,fac.player_supporters_faction,fac.kingdoms_end):
        s4 = str_store_faction_name(_g_talk_x_troop_faction)
lord_talk_lord_ask_pardon.conditionBlock = condition


lord_ask_pardon_lord_pretalk = Dialog("anyone", "Do you indeed, {playername}? Then go and trip on your sword. Give us all peace.", starting_state="lord_ask_pardon", ending_state="lord_pretalk")
def condition():
    if _g_talk_troop_relation < -10:
        pass
lord_ask_pardon_lord_pretalk.conditionBlock = condition


lord_ask_pardon_lord_pretalk_1 = Dialog("anyone", "{playername}, you are a {lord/lady} without a master, holding lands in your name, with only the barest scrap of a claim to legitimacy. No king in Calradia would accept a lasting peace with you.", starting_state="lord_ask_pardon", ending_state="lord_pretalk")
def condition():
    if faction_slot_eq(fac.player_supporters_faction,11,trp.player):
        var001 = 0
        for p_002 in range(p.town_1, p.salt_mine):
            party_faction_003 = store_faction_of_party(p_002)
            if party_faction_003 == fac.player_supporters_faction:
                var001 = 1
                if var001 == 1 and _player_right_to_rule < 10:
                    pass
                #end
            #end
        #end
    #end
lord_ask_pardon_lord_pretalk_1.conditionBlock = condition


lord_ask_pardon_lord_pretalk_2 = Dialog("anyone", "Make peace when I have you at an advantage? I think not.", starting_state="lord_ask_pardon", ending_state="lord_pretalk")
def condition():
    var001 = 0
    for p_002 in range(p.town_1, p.salt_mine):
        party_faction_003 = store_faction_of_party(p_002)
        if party_faction_003 == fac.player_supporters_faction:
            var001 = 1
            if var001 == 1 and encountered_party_is_attacker():
                pass
            #end
        #end
    #end
lord_ask_pardon_lord_pretalk_2.conditionBlock = condition


lord_ask_pardon_lord_pretalk_3 = Dialog("anyone", "I do not see it as being in my current interest to make peace.", starting_state="lord_ask_pardon", ending_state="lord_pretalk")
def condition():
    if faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop):
        var001 = 0
        for p_002 in range(p.town_1, p.salt_mine):
            party_faction_003 = store_faction_of_party(p_002)
            if party_faction_003 == fac.player_supporters_faction:
                var001 = 1
            #end
        #end
    #end
    if var001 == 1:
        if reg0 < 0:
            npc_decision_checklist_peace_or_war(_g_talk_x_troop_faction,fac.player_supporters_faction,trp.player)
lord_ask_pardon_lord_pretalk_3.conditionBlock = condition


lord_ask_pardon_lord_truce_offer = Dialog("anyone", "Yes... I am weary of fighting you. I could offer you a truce of forty days. If you keep your word and do not molest my lands and subjects, we may talk again...", starting_state="lord_ask_pardon", ending_state="lord_truce_offer")
def condition():
    if faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop):
        var001 = 0
        for p_002 in range(p.town_1, p.salt_mine):
            party_faction_003 = store_faction_of_party(p_002)
            if party_faction_003 == fac.player_supporters_faction:
                var001 = 1
                if var001 == 1:
                    pass
                #end
            #end
        #end
    #end
lord_ask_pardon_lord_truce_offer.conditionBlock = condition


lord_truce_offer_close_window = Dialog("anyone|plyr", "I accept. Let us stop making war upon each other, for the time being anyway", starting_state="lord_truce_offer", ending_state="close_window")
def condition():
    diplomacy_start_peace_between_kingdoms(_g_talk_x_troop_faction,_players_kingdom,1)
lord_truce_offer_close_window.conditionBlock = condition


lord_truce_offer_lord_pretalk = Dialog("anyone|plyr", "On second thought, such an accord would not be in my interests.", starting_state="lord_truce_offer", ending_state="lord_pretalk")


lord_ask_pardon_lord_ask_pardon_2 = Dialog("anyone", "Hmm. I could use my considerable influence to arrange a pardon for you, {playername}, but there are some who see you as an enemy and will not be satisfied unless you pay tribute. All in all, you'd need to bring no less than {reg16} denars to make any friends in {s4}.", starting_state="lord_ask_pardon", ending_state="lord_ask_pardon_2")
def condition():
    if not faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop) and faction_slot_eq(fac.player_supporters_faction,11,trp.player):
        var001 = 0
        for p_002 in range(p.town_1, p.salt_mine):
            party_faction_003 = store_faction_of_party(p_002)
            if party_faction_003 == fac.player_supporters_faction:
                var001 = 1
            #end
        #end
    #end
    if var001 == 0:
        var004 = 4 - _g_talk_x_troop_faction_relation
        var004 *= var004
        reg16 = var004 * 10
        s4 = str_store_faction_name(_g_talk_x_troop_faction)
lord_ask_pardon_lord_ask_pardon_2.conditionBlock = condition


lord_ask_pardon_lord_pretalk_4 = Dialog("anyone", "I am in no position to offer you anything. You must speak to {s7}.", starting_state="lord_ask_pardon", ending_state="lord_pretalk")
def condition():
    faction_slot_001 = faction_get_slot(_g_talk_x_troop_faction,11)
    if _g_talk_troop != faction_slot_001:
        s7 = str_store_troop_name(faction_slot_001)
lord_ask_pardon_lord_pretalk_4.conditionBlock = condition


lord_ask_pardon_lord_ask_pardon_2_1 = Dialog("anyone", "Yes... I have bigger worries than you or your followers. However, you have wronged my subjects, and wrongs demand compensation. For the sume of {reg16} denars, I suppose that I could agree to grant you a pardon. What do you say?", starting_state="lord_ask_pardon", ending_state="lord_ask_pardon_2")
def condition():
    if faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop) and not faction_slot_ge(fac.player_supporters_faction,11,1):
        var001 = 4 - _g_talk_x_troop_faction_relation
        var001 *= var001
        reg16 = var001 * 10
        s4 = str_store_faction_name(_g_talk_x_troop_faction)
lord_ask_pardon_lord_ask_pardon_2_1.conditionBlock = condition


lord_ask_pardon_lord_pretalk_5 = Dialog("anyone", "I am sorry. I am in no position to offer you a pardon", starting_state="lord_ask_pardon", ending_state="lord_pretalk")


lord_ask_pardon_2_lord_ask_pardon_tribue_accept = Dialog("anyone|plyr", "I have the money here. {reg16} denars.", starting_state="lord_ask_pardon_2", ending_state="lord_ask_pardon_tribue_accept")
def condition():
    if troop_gold_001 >= reg16:
        troop_gold_001 = store_troop_gold(trp.player)
lord_ask_pardon_2_lord_ask_pardon_tribue_accept.conditionBlock = condition


lord_ask_pardon_2_lord_ask_pardon_tribue_deny = Dialog("anyone|plyr", "I fear I cannot pay that much.", starting_state="lord_ask_pardon_2", ending_state="lord_ask_pardon_tribue_deny")


lord_ask_pardon_tribue_accept_close_window = Dialog("anyone", "Excellent, {playername}. I will use this to make amends to those you have wronged, and I will let it be known that you are no longer an enemy of the {s4}.", starting_state="lord_ask_pardon_tribue_accept", ending_state="close_window")
def condition():
    if faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop):
        pass
lord_ask_pardon_tribue_accept_close_window.conditionBlock = condition
def code():
    troop_remove_gold(trp.player,reg16)
    faction_relation_001 = store_relation(_g_talk_x_troop_faction,_players_kingdom)
    if _players_kingdom == 0 or faction_relation_001 >= 0:
        set_player_relation_with_faction(_g_talk_x_troop_faction,0)
    #end
    _g_leave_town_outside = 1
    _g_leave_encounter = 1
lord_ask_pardon_tribue_accept_close_window.codeBlock = code


lord_ask_pardon_tribue_accept_close_window_1 = Dialog("anyone", "Excellent, {playername}. I'll use the coin to smooth the feathers of those that can oppose your pardon, and I'm sure that word will soon spread that you are no longer an enemy of {s4}.", starting_state="lord_ask_pardon_tribue_accept", ending_state="close_window")
def code():
    troop_remove_gold(trp.player,reg16)
    faction_relation_001 = store_relation(_g_talk_x_troop_faction,_players_kingdom)
    if _players_kingdom == 0 or faction_relation_001 >= 0:
        set_player_relation_with_faction(_g_talk_x_troop_faction,0)
    else:
        diplomacy_start_peace_between_kingdoms(_g_talk_x_troop_faction,_players_kingdom,1)
    #end
    _g_leave_town_outside = 1
    _g_leave_encounter = 1
lord_ask_pardon_tribue_accept_close_window_1.codeBlock = code


lord_ask_pardon_tribue_deny_lord_pretalk = Dialog("anyone", "Then there's nothing I can do for you, {playername}. No silver, no pardon.", starting_state="lord_ask_pardon_tribue_deny", ending_state="lord_pretalk")


lord_talk_lord_active_mission_1 = Dialog("anyone|plyr", "About the task you gave me...", starting_state="lord_talk", ending_state="lord_active_mission_1")
def condition():
    if partner_quest_001 >= 0:
        partner_quest_001 = store_partner_quest()
lord_talk_lord_active_mission_1.conditionBlock = condition


lord_talk_lord_switch_to_spouse = Dialog("anyone|plyr", "Let us discuss matters related to our household.", starting_state="lord_talk", ending_state="lord_switch_to_spouse")
def condition():
    if troop_slot_eq(trp.player,30,_g_talk_troop):
        pass
lord_talk_lord_switch_to_spouse.conditionBlock = condition


lord_switch_to_spouse_lord_pretalk = Dialog("anyone", "Let us wait until we are in a hall, my wife, as it is difficult to deal with household inventories and such matters in the field.", starting_state="lord_switch_to_spouse", ending_state="lord_pretalk")
def condition():
    var001 = -1
    if is_between(_current_town,p.town_1,p.village_1) and party_slot_eq(_current_town,7,trp.player) or party_slot_eq(_current_town,7,_g_talk_troop):
        var001 = _current_town
    else:
        for p_002 in range(p.town_1, p.village_1):
            if var001 == -1 and party_slot_eq(p_002,7,trp.player) or party_slot_eq(p_002,7,_g_talk_troop):
                var001 = p_002
            #end
        #end
        if is_between(var001,p.town_1,p.village_1):
            pass
        elif is_between(_current_town,p.town_1,p.village_1):
            var001 = _current_town
            if not is_between(var001,p.town_1,p.village_1):
                pass
            #end
        #end
    #end
lord_switch_to_spouse_lord_pretalk.conditionBlock = condition


lord_switch_to_spouse_spouse_talk = Dialog("anyone", "Certainly, my wife", starting_state="lord_switch_to_spouse", ending_state="spouse_talk")


lord_talk_lord_request_mission_ask = Dialog("anyone|plyr", "Do you have any tasks for me?", starting_state="lord_talk", ending_state="lord_request_mission_ask")
def condition():
    if not troop_slot_ge(_g_talk_troop,8,0) and _g_talk_x_troop_faction_relation >= 0:
        if partner_quest_001 < 0 and not faction_slot_eq(_g_talk_x_troop_faction,11,trp.player) and not troop_slot_eq(trp.player,30,_g_talk_troop):
            partner_quest_001 = store_partner_quest()
lord_talk_lord_request_mission_ask.conditionBlock = condition


lord_talk_combined_political_quests = Dialog("anyone|plyr", "Do you think we can work together to advance our standings in this realm?", starting_state="lord_talk", ending_state="combined_political_quests")
def condition():
    if _g_talk_x_troop_faction == _players_kingdom and _player_has_homage == 1 and not faction_slot_eq(_g_talk_x_troop_faction,11,trp.player) and not faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop):
        pass
lord_talk_combined_political_quests.conditionBlock = condition
def code():
    get_political_quest(_g_talk_troop)
    _political_quest_found = reg0
    _political_quest_target_troop = reg1
    _political_quest_object_troop = reg2
lord_talk_combined_political_quests.codeBlock = code


combined_political_quests_lord_pretalk = Dialog("anyone", "I do not imagine that you and I have many mutual interests.", starting_state="combined_political_quests", ending_state="lord_pretalk")
def condition():
    if troop_slot_eq(_g_talk_troop,2,2) and _g_talk_troop_effective_relation < -5:
        pass
combined_political_quests_lord_pretalk.conditionBlock = condition


combined_political_quests_lord_pretalk_1 = Dialog("anyone", "Hmm.. Perhaps we can discuss this matter in a more private setting, at a later date.", starting_state="combined_political_quests", ending_state="lord_pretalk")
def condition():
    if troop_slot_eq(_g_talk_troop,2,2) and _political_quest_found > 0:
        var001 = 1
        if cf_troop_can_intrigue(_g_talk_troop,1):
            var001 = 0
            if var001 == 1:
                pass
            #end
        #end
    #end
combined_political_quests_lord_pretalk_1.conditionBlock = condition


combined_political_quests_lord_pretalk_2 = Dialog("anyone", "Hmm.. I do have an idea, but it would require you that you be free of controversy. If you were to wait some time without getting into any arguments with the other lords of our realm, perhaps we could proceed further.", starting_state="combined_political_quests", ending_state="lord_pretalk")
def condition():
    if _political_quest_found == qst.intrigue_against_lord or _political_quest_found == qst.denounce_lord and troop_slot_ge(trp.player,150,30):
        pass
combined_political_quests_lord_pretalk_2.conditionBlock = condition


lord_talk_lord_ask_resign_marshalship = Dialog("anyone|plyr", "I wish to resign the marshalship", starting_state="lord_talk", ending_state="lord_ask_resign_marshalship")
def condition():
    if _talk_context <= 2 and faction_slot_eq(_players_kingdom,11,_g_talk_troop) and faction_slot_eq(_players_kingdom,8,trp.player):
        pass
lord_talk_lord_ask_resign_marshalship.conditionBlock = condition


lord_ask_resign_marshalship_lord_pretalk = Dialog("anyone", "So be it. I shall have to find someone else.", starting_state="lord_ask_resign_marshalship", ending_state="lord_pretalk")
def code():
    faction_id_001 = _players_kingdom
    faction_set_slot(faction_id_001,64,1)
    cur_hours_002 = store_current_hours()
    val_max(cur_hours_002,0)
    faction_set_slot(faction_id_001,65,cur_hours_002)
    faction_slot_003 = faction_get_slot(faction_id_001,8)
    if faction_slot_003 >= 0:
        troop_slot_004 = troop_get_slot(faction_slot_003,10)
        if party_is_active(troop_slot_004):
            party_set_marshall(troop_slot_004,0)
        #end
    #end
    faction_set_slot(faction_id_001,8,-1)
    for trp_005 in range(trp.npc1, trp.knight_1_1_wife):
        troop_faction_006 = store_faction_of_troop(trp_005)
        if troop_faction_006 == faction_id_001:
            troop_set_slot(trp_005,154,-1)
        #end
    #end
    if _players_kingdom == faction_id_001:
        troop_set_slot(trp.player,154,-1)
    #end
    add_notification_menu(mnu.notification_relieved_as_marshal,0,0)
lord_ask_resign_marshalship_lord_pretalk.codeBlock = code


lord_talk_lord_ask_enter_service = Dialog("anyone|plyr", "{s66}, I have come to offer you my sword in vassalage!", starting_state="lord_talk", ending_state="lord_ask_enter_service")
def condition():
    if _talk_context <= 2 and _g_talk_x_troop_faction_relation >= 0 and not troop_slot_ge(_g_talk_troop,8,0) and faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop) and _players_kingdom != _g_talk_x_troop_faction:
        if partner_quest_001 != qst.join_faction:
            partner_quest_001 = store_partner_quest()
lord_talk_lord_ask_enter_service.conditionBlock = condition


lord_talk_lord_ask_enter_service_1 = Dialog("anyone|plyr", "{s66}, I wish to become your sworn {man/woman} and fight for your honour.", starting_state="lord_talk", ending_state="lord_ask_enter_service")
def condition():
    if _talk_context <= 2 and faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop) and _players_kingdom == _g_talk_x_troop_faction and _player_has_homage == 0:
        if partner_quest_001 != qst.join_faction:
            partner_quest_001 = store_partner_quest()
lord_talk_lord_ask_enter_service_1.conditionBlock = condition


lord_talk_lord_ask_leave_service = Dialog("anyone|plyr", "{s66}, I wish to be released from my oath to you.", starting_state="lord_talk", ending_state="lord_ask_leave_service")
def condition():
    if _talk_context <= 2 and _g_talk_x_troop_faction_relation >= 0 and not troop_slot_ge(_g_talk_troop,8,0) and faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop) and _players_kingdom == _g_talk_x_troop_faction and _player_has_homage == 1:
        pass
lord_talk_lord_ask_leave_service.conditionBlock = condition


lord_talk_lord_talk_preoffer = Dialog("anyone|plyr", "I have an offer for you.", starting_state="lord_talk", ending_state="lord_talk_preoffer")
def condition():
    if 1 == 0 and _talk_context <= 2 and _g_talk_x_troop_faction_relation >= 0:
        pass
lord_talk_lord_talk_preoffer.conditionBlock = condition


lord_talk_lord_give_troops = Dialog("anyone|plyr", "I want to give some troops to you.", starting_state="lord_talk", ending_state="lord_give_troops")
def condition():
    if _g_talk_x_troop_faction == fac.player_supporters_faction and not troop_slot_ge(_g_talk_troop,8,0):
        pass
lord_talk_lord_give_troops.conditionBlock = condition


lord_give_troops_lord_pretalk = Dialog("anyone", "Well, I could use some good soldiers. Thank you.", starting_state="lord_give_troops", ending_state="lord_pretalk")
def code():
    change_screen_give_members(_g_talk_troop_party)
lord_give_troops_lord_pretalk.codeBlock = code


lord_talk_lord_give_order_ask = Dialog("anyone|plyr", "I have a new task for you.", starting_state="lord_talk", ending_state="lord_give_order_ask")
def condition():
    if _g_talk_x_troop_faction == _players_kingdom and faction_slot_eq(_players_kingdom,8,trp.player) and not troop_slot_ge(_g_talk_troop,8,0):
        pass
lord_talk_lord_give_order_ask.conditionBlock = condition


lord_talk_lord_give_suggestion_ask = Dialog("anyone|plyr", "May I suggest a course of action?", starting_state="lord_talk", ending_state="lord_give_suggestion_ask")
def condition():
    if _g_talk_x_troop_faction == _players_kingdom and not faction_slot_eq(_players_kingdom,8,trp.player) and not troop_slot_ge(_g_talk_troop,8,0):
        pass
lord_talk_lord_give_suggestion_ask.conditionBlock = condition


lord_give_order_ask_lord_give_order = Dialog("anyone", "Yes?", starting_state="lord_give_order_ask", ending_state="lord_give_order")


lord_give_suggestion_ask_lord_give_order = Dialog("anyone", "I will gladly follow your direction, {sire/your Highness}. If you intend to direct an extensive campaign, however, you may also wish to declare yourself marshal, so there is no cause for confusion.", starting_state="lord_give_suggestion_ask", ending_state="lord_give_order")
def condition():
    if faction_slot_eq(_players_kingdom,11,trp.player):
        pass
lord_give_suggestion_ask_lord_give_order.conditionBlock = condition


lord_give_suggestion_ask_lord_pretalk = Dialog("anyone", "My apologies. I don't know you well enough to take your advice.", starting_state="lord_give_suggestion_ask", ending_state="lord_pretalk")
def condition():
    if _g_talk_troop_effective_relation < 5:
        pass
lord_give_suggestion_ask_lord_pretalk.conditionBlock = condition


lord_give_suggestion_ask_lord_give_order_1 = Dialog("anyone", "What is it?", starting_state="lord_give_suggestion_ask", ending_state="lord_give_order")


lord_give_order_lord_give_order_answer = Dialog("anyone|plyr", "Follow me.", starting_state="lord_give_order", ending_state="lord_give_order_answer")
def condition():
    if faction_slot_eq(_players_kingdom,8,trp.player):
        pass
lord_give_order_lord_give_order_answer.conditionBlock = condition
def code():
    _temp = 11
    _tmp_2 = p.main_party
    cur_hours_001 = store_current_hours()
    party_set_slot(_g_talk_troop_party,244,trp.kingdom_heroes_including_player_begin)
    party_set_slot(_g_talk_troop_party,245,_temp)
    party_set_slot(_g_talk_troop_party,246,_tmp_2)
    party_set_slot(_g_talk_troop_party,247,cur_hours_001)
lord_give_order_lord_give_order_answer.codeBlock = code


lord_give_order_lord_give_order_answer_1 = Dialog("anyone|plyr", "Will you follow me? I have a plan...", starting_state="lord_give_order", ending_state="lord_give_order_answer")
def condition():
    if not faction_slot_eq(_players_kingdom,8,trp.player):
        pass
lord_give_order_lord_give_order_answer_1.conditionBlock = condition
def code():
    _temp = 11
    _tmp_2 = p.main_party
    cur_hours_001 = store_current_hours()
    party_set_slot(_g_talk_troop_party,244,trp.kingdom_heroes_including_player_begin)
    party_set_slot(_g_talk_troop_party,245,_temp)
    party_set_slot(_g_talk_troop_party,246,_tmp_2)
    party_set_slot(_g_talk_troop_party,247,cur_hours_001)
lord_give_order_lord_give_order_answer_1.codeBlock = code


lord_give_order_lord_give_order_details_ask = Dialog("anyone|plyr", "Go to...", starting_state="lord_give_order", ending_state="lord_give_order_details_ask")
def condition():
    if faction_slot_eq(_players_kingdom,8,trp.player):
        pass
lord_give_order_lord_give_order_details_ask.conditionBlock = condition
def code():
    _temp = 7
lord_give_order_lord_give_order_details_ask.codeBlock = code


lord_give_order_lord_give_order_details_ask_1 = Dialog("anyone|plyr", "Raid around the village of...", starting_state="lord_give_order", ending_state="lord_give_order_details_ask")
def condition():
    if faction_slot_eq(_players_kingdom,8,trp.player):
        pass
lord_give_order_lord_give_order_details_ask_1.conditionBlock = condition
def code():
    _temp = 5
lord_give_order_lord_give_order_details_ask_1.codeBlock = code


lord_give_order_lord_give_order_details_ask_2 = Dialog("anyone|plyr", "Patrol around...", starting_state="lord_give_order", ending_state="lord_give_order_details_ask")
def condition():
    if faction_slot_eq(_players_kingdom,8,trp.player):
        pass
lord_give_order_lord_give_order_details_ask_2.conditionBlock = condition
def code():
    _temp = 4
lord_give_order_lord_give_order_details_ask_2.codeBlock = code


lord_give_order_lord_give_order_assault = Dialog("anyone|plyr", "Together, you and I can take {s11}. You should assault immediately...", starting_state="lord_give_order", ending_state="lord_give_order_assault")
def condition():
    if party_slot_eq(_g_talk_troop_party,4,1):
        party_slot_001 = party_get_slot(_g_talk_troop_party,5)
        if party_slot_eq(party_slot_001,54,_g_talk_troop_party) and party_slot_eq(party_slot_001,35,5):
            s11 = str_store_party_name(party_slot_001)
lord_give_order_lord_give_order_assault.conditionBlock = condition


lord_give_order_lord_give_order_details_ask_3 = Dialog("anyone|plyr", "We are under attack, but the enemy can be repulsed. You should ride towards...", starting_state="lord_give_order", ending_state="lord_give_order_details_ask")
def condition():
    if not faction_slot_eq(_players_kingdom,8,trp.player):
        pass
lord_give_order_lord_give_order_details_ask_3.conditionBlock = condition
def code():
    _temp = 4
lord_give_order_lord_give_order_details_ask_3.codeBlock = code


lord_give_order_lord_give_order_details_ask_4 = Dialog("anyone|plyr", "We are under attack, but the enemy can be repulsed. You should assemble the army and march to...", starting_state="lord_give_order", ending_state="lord_give_order_details_ask")
def condition():
    if faction_slot_eq(_g_talk_x_troop_faction,8,_g_talk_troop):
        pass
lord_give_order_lord_give_order_details_ask_4.conditionBlock = condition
def code():
    _temp = 4
lord_give_order_lord_give_order_details_ask_4.codeBlock = code


lord_give_order_assault_lord_pretalk = Dialog("anyone", "{s4} is directing this siege. I suggest you speak to {reg4?her:him}", starting_state="lord_give_order_assault", ending_state="lord_pretalk")
def condition():
    party_slot_001 = party_get_slot(_g_talk_troop_party,5)
    party_slot_002 = party_get_slot(party_slot_001,54)
    if party_slot_002 != _g_talk_troop_party:
        troop_id_003 = party_stack_get_troop_id(party_slot_002,0)
        s4 = str_store_troop_name(troop_id_003)
        reg4 = troop_get_type(troop_id_003)
lord_give_order_assault_lord_pretalk.conditionBlock = condition


lord_give_order_assault_lord_pretalk_1 = Dialog("anyone", "Our preparations are not yet ready. We need another {s11}", starting_state="lord_give_order_assault", ending_state="lord_pretalk")
def condition():
    party_slot_001 = party_get_slot(_g_talk_troop_party,5)
    party_slot_002 = party_get_slot(party_slot_001,64)
    cur_hours_003 = store_current_hours()
    var004 = cur_hours_003 - party_slot_002
    if True:
        var005 = 9
    #end
    var005 -= var004
    if var005 > 0:
        if var005 > 1:
            reg3 = var005
            s11 = str_store_string(gstr.reg3_hours)
        else:
            s11 = str_store_string(gstr.hour)
        #end
    #end
lord_give_order_assault_lord_pretalk_1.conditionBlock = condition


lord_give_order_assault_close_window = Dialog("anyone", "Very well -- to the walls!", starting_state="lord_give_order_assault", ending_state="close_window")
def code():
    party_slot_001 = party_get_slot(_g_talk_troop_party,5)
    begin_assault_on_center(party_slot_001)
    party_set_slot(_g_talk_troop_party,249,1)
    _g_leave_encounter = 1
lord_give_order_assault_close_window.codeBlock = code


lord_give_order_lord_give_order_details_ask_5 = Dialog("anyone|plyr", "There is a fortress which can easily be taken. Go to..", starting_state="lord_give_order", ending_state="lord_give_order_details_ask")
def condition():
    if not faction_slot_eq(_players_kingdom,8,trp.player):
        pass
lord_give_order_lord_give_order_details_ask_5.conditionBlock = condition
def code():
    _temp = 1
lord_give_order_lord_give_order_details_ask_5.codeBlock = code


lord_give_order_lord_give_order_details_ask_6 = Dialog("anyone|plyr", "The enemy is coming in force. Flee in the direction of...", starting_state="lord_give_order", ending_state="lord_give_order_details_ask")
def code():
    _temp = 14
lord_give_order_lord_give_order_details_ask_6.codeBlock = code


lord_give_order_lord_give_order_stop = Dialog("anyone|plyr", "I won't need you for some time. You are free to do as you like.", starting_state="lord_give_order", ending_state="lord_give_order_stop")
def condition():
    if faction_slot_eq(_players_kingdom,8,trp.player):
        pass
lord_give_order_lord_give_order_stop.conditionBlock = condition


lord_give_order_lord_give_order_stop_1 = Dialog("anyone|plyr", "You no longer need to accompany me.", starting_state="lord_give_order", ending_state="lord_give_order_stop")
def condition():
    if not faction_slot_eq(_players_kingdom,8,trp.player) and party_slot_eq(_g_talk_troop_party,4,11) and party_slot_eq(_g_talk_troop_party,5,p.main_party):
        pass
lord_give_order_lord_give_order_stop_1.conditionBlock = condition


lord_give_order_lord_pretalk = Dialog("anyone|plyr", "Never mind.", starting_state="lord_give_order", ending_state="lord_pretalk")


lord_give_order_details_ask_lord_pretalk = Dialog("anyone", "It is not my way to turn tail and run, without even laying eyes on the enemy.", starting_state="lord_give_order_details_ask", ending_state="lord_pretalk")
def condition():
    if not faction_slot_eq(_players_kingdom,8,trp.player) and troop_slot_eq(_g_talk_troop,52,1) and _temp == 14:
        pass
lord_give_order_details_ask_lord_pretalk.conditionBlock = condition


lord_give_order_details_ask_lord_pretalk_1 = Dialog("anyone", "You want me to shed my blood outside a fortress while others stand by and watch? I think not.", starting_state="lord_give_order_details_ask", ending_state="lord_pretalk")
def condition():
    if not faction_slot_eq(_players_kingdom,8,trp.player) and troop_slot_eq(_g_talk_troop,52,5) and _temp == 1:
        pass
lord_give_order_details_ask_lord_pretalk_1.conditionBlock = condition


lord_give_order_details_ask_lord_give_order_details = Dialog("anyone", "Where?", starting_state="lord_give_order_details_ask", ending_state="lord_give_order_details")


lord_give_order_details_lord_give_order_answer = Dialog("anyone|repeat_for_parties|plyr", "{s1}", starting_state="lord_give_order_details", ending_state="lord_give_order_answer")
def condition():
    _temp_list1 = [
    7,
    14,
    ]
    var001 = store_repeat_object()
    party_faction_002 = store_faction_of_party(var001)
    faction_relation_003 = store_relation(party_faction_002,_players_kingdom)
    var004 = 0
    if _temp in _temp_list1:
        if party_slot_eq(var001,0,2) or party_slot_eq(var001,0,3) and party_faction_002 == _players_kingdom:
            var004 = 1
        #end
    elif _temp == 5:
        if party_slot_eq(var001,0,4) and faction_relation_003 < 0:
            var004 = 1
        #end
    elif _temp == 1:
        if party_slot_eq(var001,0,2) or party_slot_eq(var001,0,3) and party_slot_eq(var001,54,-1) and faction_relation_003 < 0:
            var004 = 1
        #end
    elif _temp == 4:
        if party_faction_002 == _players_kingdom and is_between(var001,p.town_1,p.salt_mine):
            var004 = 1
        elif is_between(var001,p.town_1,p.salt_mine):
            distance_parties_005 = store_distance_to_party_from_party(var001,p.main_party)
            if distance_parties_005 <= 25:
                var004 = 1
            #end
        #end
    #end
    if var004 == 1 and var001 != _g_encountered_party:
        s1 = str_store_party_name(var001)
lord_give_order_details_lord_give_order_answer.conditionBlock = condition
def code():
    _tmp_2 = store_repeat_object()
    cur_hours_001 = store_current_hours()
    party_set_slot(_g_talk_troop_party,244,trp.kingdom_heroes_including_player_begin)
    party_set_slot(_g_talk_troop_party,245,_temp)
    party_set_slot(_g_talk_troop_party,246,_tmp_2)
    party_set_slot(_g_talk_troop_party,247,cur_hours_001)
lord_give_order_details_lord_give_order_answer.codeBlock = code


lord_give_order_details_lord_pretalk = Dialog("anyone|plyr", "Never mind.", starting_state="lord_give_order_details", ending_state="lord_pretalk")


lord_give_order_stop_lord_pretalk = Dialog("anyone", "All right. I will stop here.", starting_state="lord_give_order_stop", ending_state="lord_pretalk")
def code():
    party_set_slot(_g_talk_troop_party,245,-1)
    party_set_slot(_g_talk_troop_party,246,-1)
    cur_hours_001 = store_current_hours()
    cur_hours_001 -= 36
    val_max(cur_hours_001,0)
    party_set_slot(_g_talk_troop_party,244,trp.kingdom_heroes_including_player_begin)
    party_set_slot(_g_talk_troop_party,245,-1)
    party_set_slot(_g_talk_troop_party,246,-1)
    party_set_slot(_g_talk_troop_party,247,cur_hours_001)
    troop_slot_002 = troop_get_slot(_g_talk_troop,10)
    if troop_slot_002 > 0:
        party_set_ai_state(troop_slot_002,-1,-1)
        party_set_slot(troop_slot_002,30,-1)
    #end
lord_give_order_stop_lord_pretalk.codeBlock = code


lord_give_order_answer_lord_give_order = Dialog("anyone", "That would hardly be proper. It would be more appropriate for you to follow me instead. Did you have any other ideas?", starting_state="lord_give_order_answer", ending_state="lord_give_order")
def condition():
    if _temp == 11 and not faction_slot_eq(_players_kingdom,8,trp.player) and not faction_slot_eq(_players_kingdom,11,trp.player):
        troop_get_player_relation(_g_talk_troop)
        var001 = reg0
        troop_slot_002 = troop_get_slot(_g_talk_troop,7)
        troop_slot_003 = troop_get_slot(trp.player,7)
        skill_lvl_004 = store_skill_level(skl.persuasion,trp.player)
        var005 = var001 / 5
        val_min(var005,10)
        var006 = var005 + skill_lvl_004
        var007 = 20 - var006
        var007 *= troop_slot_002
        if troop_slot_003 >= var007 or var001 < 0:
            var007 /= 10
lord_give_order_answer_lord_give_order.conditionBlock = condition
def code():
    party_set_slot(_g_talk_troop_party,244,0)
    party_set_slot(_g_talk_troop_party,245,0)
    party_set_slot(_g_talk_troop_party,246,0)
    party_set_slot(_g_talk_troop_party,247,0)
lord_give_order_answer_lord_give_order.codeBlock = code


lord_give_order_answer_lord_pretalk = Dialog("anyone", "All right. I will do that.{s12}", starting_state="lord_give_order_answer", ending_state="lord_pretalk")
def condition():
    npc_decision_checklist_party_ai(_g_talk_troop)
    if reg0 == _temp and reg1 == _tmp_2:
        str_clear(12)
        if not faction_slot_eq(_g_talk_x_troop_faction,8,trp.player) and not faction_slot_eq(_g_talk_x_troop_faction,11,trp.player):
            s12 = str_store_string(gstr.but_if_this_goes_badly)
        #end
    #end
lord_give_order_answer_lord_pretalk.conditionBlock = condition
def code():
    party_set_ai_state(_g_talk_troop_party,_temp,_tmp_2)
    str_clear(12)
    if not faction_slot_eq(_g_talk_x_troop_faction,8,trp.player) and not faction_slot_eq(_g_talk_x_troop_faction,11,trp.player):
        s12 = str_store_string(gstr.but_if_this_goes_badly)
    #end
    _g_leave_encounter = 1
lord_give_order_answer_lord_pretalk.codeBlock = code


lord_give_order_answer_lord_pretalk_1 = Dialog("anyone", "I am sorry. I need to attend my own business at the moment.", starting_state="lord_give_order_answer", ending_state="lord_pretalk")
def code():
    npc_decision_checklist_party_ai(_g_talk_troop)
    party_set_ai_state(_g_talk_troop_party,reg0,reg1)
lord_give_order_answer_lord_pretalk_1.codeBlock = code


lord_start_lord_talk_5 = Dialog("anyone", "What is it?", starting_state="lord_start", ending_state="lord_talk")


lord_talk_lord_give_order_call_to_arms_verify = Dialog("anyone|plyr", "I want to start a new campaign. Let us assemble the army here.", starting_state="lord_talk", ending_state="lord_give_order_call_to_arms_verify")
def condition():
    if _g_talk_x_troop_faction == _players_kingdom and faction_slot_eq(_players_kingdom,8,trp.player) and not troop_slot_ge(_g_talk_troop,8,0) and faction_slot_eq(_players_kingdom,4,0) or faction_slot_eq(_players_kingdom,4,6):
        pass
lord_talk_lord_give_order_call_to_arms_verify.conditionBlock = condition


lord_give_order_call_to_arms_verify_lord_give_order_call_to_arms_verify_2 = Dialog("anyone", "You wish to summon all lords for a new campaign?", starting_state="lord_give_order_call_to_arms_verify", ending_state="lord_give_order_call_to_arms_verify_2")


lord_give_order_call_to_arms_verify_2_lord_give_order_call_to_arms = Dialog("anyone|plyr", "Yes. We must gather all our forces before we march on the enemy.", starting_state="lord_give_order_call_to_arms_verify_2", ending_state="lord_give_order_call_to_arms")


lord_give_order_call_to_arms_verify_2_lord_pretalk = Dialog("anyone|plyr", "On second thought, it won't be necessary to summon everyone.", starting_state="lord_give_order_call_to_arms_verify_2", ending_state="lord_pretalk")


lord_give_order_call_to_arms_lord_pretalk = Dialog("anyone", "All right then. I will send messengers and tell everyone to come here.", starting_state="lord_give_order_call_to_arms", ending_state="lord_pretalk")
def code():
    _player_marshal_ai_state = 1
    _player_marshal_ai_object = p.main_party
    decide_faction_ai(_players_kingdom)
    _g_recalculate_ais = 1
lord_give_order_call_to_arms_lord_pretalk.codeBlock = code


lord_talk_lord_give_order_disband_army_verify = Dialog("anyone|plyr", "I want to end the campaign and let everyone return home.", starting_state="lord_talk", ending_state="lord_give_order_disband_army_verify")
def condition():
    if _g_talk_x_troop_faction == _players_kingdom and faction_slot_eq(_players_kingdom,8,trp.player) and not troop_slot_ge(_g_talk_troop,8,0) and not faction_slot_eq(_players_kingdom,4,0) and not faction_slot_eq(_players_kingdom,4,6):
        pass
lord_talk_lord_give_order_disband_army_verify.conditionBlock = condition


lord_give_order_disband_army_verify_lord_give_order_disband_army_2 = Dialog("anyone", "You want to end the current campaign and release all lords from duty?", starting_state="lord_give_order_disband_army_verify", ending_state="lord_give_order_disband_army_2")


lord_give_order_disband_army_2_lord_give_order_disband_army = Dialog("anyone|plyr", "Yes. We no longer need all our forces here.", starting_state="lord_give_order_disband_army_2", ending_state="lord_give_order_disband_army")


lord_give_order_disband_army_2_lord_pretalk = Dialog("anyone|plyr", "On second thought, it will be better to stay together for now.", starting_state="lord_give_order_disband_army_2", ending_state="lord_pretalk")


lord_give_order_disband_army_lord_pretalk = Dialog("anyone", "All right. I will let everyone know that they are released from duty.", starting_state="lord_give_order_disband_army", ending_state="lord_pretalk")
def code():
    _player_marshal_ai_state = 0
    _player_marshal_ai_object = -1
    decide_faction_ai(_players_kingdom)
    _g_recalculate_ais = 1
lord_give_order_disband_army_lord_pretalk.codeBlock = code


lord_talk_lord_talk_ask_something = Dialog("anyone|plyr", "I wish to ask you something.", starting_state="lord_talk", ending_state="lord_talk_ask_something")
def condition():
    if _g_encountered_party_relation >= 0 and not troop_slot_ge(_g_talk_troop,8,0):
        pass
lord_talk_lord_talk_ask_something.conditionBlock = condition


lord_talk_ask_something_lord_talk_ask_something_2 = Dialog("anyone", "Aye? What is it?", starting_state="lord_talk_ask_something", ending_state="lord_talk_ask_something_2")


lord_talk_ask_something_again_lord_talk_ask_something_2 = Dialog("anyone", "Is there anything else?", starting_state="lord_talk_ask_something_again", ending_state="lord_talk_ask_something_2")


lord_talk_ask_something_2_lord_talk_ask_location = Dialog("anyone|plyr", "I want to know the location of someone.", starting_state="lord_talk_ask_something_2", ending_state="lord_talk_ask_location")
def condition():
    if not troop_slot_ge(_g_talk_troop,8,0):
        pass
lord_talk_ask_something_2_lord_talk_ask_location.conditionBlock = condition


lord_talk_ask_something_2_lord_tell_objective = Dialog("anyone|plyr", "What are you and your men doing?", starting_state="lord_talk_ask_something_2", ending_state="lord_tell_objective")
def condition():
    if not troop_slot_eq(_g_talk_troop,10,-1):
        pass
lord_talk_ask_something_2_lord_tell_objective.conditionBlock = condition
def code():
    party_slot_001 = party_get_slot(_g_talk_troop_party,4)
    party_slot_002 = party_get_slot(_g_talk_troop_party,5)
    if _cheat_mode == 1:
        reg4 = party_get_ai_initiative(_g_talk_troop_party)
        reg5 = party_get_helpfulness(_g_talk_troop_party)
        print("@{!}DEBUG : Initiative {reg4};;; helpfulness {reg5}")
    #end
    str_clear(14)
    str_clear(15)
    str_clear(16)
    if True:
        npc_decision_checklist_party_ai(_g_talk_troop)
        if reg0 == party_slot_001 and reg1 == party_slot_002:
            pass
        else:
            party_set_ai_state(_g_talk_troop_party,reg0,reg1)
            s14 = str_store_string(gstr.however_circumstances_have_changed_since_we_made_that_decision_and_i_may_reconsider_shortly_s16)
            if _cheat_mode >= 1:
                print("@{!}DEBUG -- ai behavior: {reg0};;; ai object: {reg1}")
            #end
        #end
    #end
lord_talk_ask_something_2_lord_tell_objective.codeBlock = code


lord_talk_ask_something_2_lord_talk_ask_about_strategy = Dialog("anyone|plyr", "What is the realm doing?", starting_state="lord_talk_ask_something_2", ending_state="lord_talk_ask_about_strategy")
def condition():
    if not troop_slot_ge(_g_talk_troop,8,0):
        pass
lord_talk_ask_something_2_lord_talk_ask_about_strategy.conditionBlock = condition


lord_talk_ask_about_strategy_lord_pretalk = Dialog("anyone", "You should decide that, as you are the marshal.", starting_state="lord_talk_ask_about_strategy", ending_state="lord_pretalk")
def condition():
    if _players_kingdom == _g_talk_x_troop_faction and faction_slot_eq(_g_talk_x_troop_faction,8,trp.player) and not faction_slot_eq(_g_talk_x_troop_faction,4,6):
        pass
lord_talk_ask_about_strategy_lord_pretalk.conditionBlock = condition


lord_talk_ask_something_2_lord_talk_ask_about_war = Dialog("anyone|plyr", "How goes the war?", starting_state="lord_talk_ask_something_2", ending_state="lord_talk_ask_about_war")
def condition():
    if not troop_slot_ge(_g_talk_troop,8,0):
        pass
lord_talk_ask_something_2_lord_talk_ask_about_war.conditionBlock = condition


lord_talk_ask_something_2_lord_marriage_permission = Dialog("anyone|plyr", "{s19}", starting_state="lord_talk_ask_something_2", ending_state="lord_marriage_permission")
def condition():
    if check_quest_active(qst.formal_marriage_proposal) and not check_quest_failed(qst.formal_marriage_proposal) and not check_quest_succeeded(qst.formal_marriage_proposal) and not troop_slot_ge(trp.player,30,trp.npc1) and quest_slot_eq(qst.formal_marriage_proposal,2,_g_talk_troop):
        quest_slot_001 = quest_get_slot(qst.formal_marriage_proposal,6)
        s10 = str_store_troop_name(quest_slot_001)
        troop_get_family_relation_to_troop(quest_slot_001,_g_talk_troop)
        troop_get_relation_with_troop(trp.player,quest_slot_001)
        if reg0 > 20:
            s19 = str_store_string(gstr.i_wish_to_marry_your_s11_s10_i_ask_for_your_blessing)
        else:
            s19 = str_store_string(gstr.i_wish_to_marry_your_s11_s10_i_ask_for_your_help)
        #end
    #end
lord_talk_ask_something_2_lord_marriage_permission.conditionBlock = condition


lord_marriage_permission_lord_pretalk = Dialog("anyone", "Great heaven, man -- if I haven't given you permission to see her, do you think I'm going to give you permission to marry her?", starting_state="lord_marriage_permission", ending_state="lord_pretalk")
def condition():
    if not troop_slot_eq(_g_talk_troop,38,1):
        pass
lord_marriage_permission_lord_pretalk.conditionBlock = condition
def code():
    fail_quest(qst.formal_marriage_proposal)
    end_quest(qst.formal_marriage_proposal)
lord_marriage_permission_lord_pretalk.codeBlock = code


lord_marriage_permission_lord_pretalk_1 = Dialog("anyone", "It is not my way to push my {s11} to marry against her will or her better judgment", starting_state="lord_marriage_permission", ending_state="lord_pretalk")
def condition():
    if troop_slot_eq(_g_talk_troop,38,1):
        quest_slot_001 = quest_get_slot(qst.formal_marriage_proposal,6)
        troop_get_relation_with_troop(trp.player,quest_slot_001)
        if reg0 < 20 and not troop_slot_eq(_g_talk_troop,52,5) and not troop_slot_eq(_g_talk_troop,52,3) and not troop_slot_eq(_g_talk_troop,52,2):
            troop_get_family_relation_to_troop(quest_slot_001,_g_talk_troop)
lord_marriage_permission_lord_pretalk_1.conditionBlock = condition
def code():
    fail_quest(qst.formal_marriage_proposal)
    end_quest(qst.formal_marriage_proposal)
lord_marriage_permission_lord_pretalk_1.codeBlock = code


lord_marriage_permission_lord_pretalk_2 = Dialog("anyone", "Sorry, lad -- I'm not going to make my {s11} marry you, when I'd rather see her married to {s12}", starting_state="lord_marriage_permission", ending_state="lord_pretalk")
def condition():
    if troop_slot_eq(_g_talk_troop,38,1):
        quest_slot_001 = quest_get_slot(qst.formal_marriage_proposal,6)
        troop_get_relation_with_troop(trp.player,quest_slot_001)
        if reg0 < 20:
            var002 = _g_talk_troop_relation
            for trp_003 in range(trp.knight_1_1, trp.kingdom_1_pretender):
                if troop_slot_eq(trp_003,35,quest_slot_001) or troop_slot_eq(trp_003,36,quest_slot_001) or troop_slot_eq(trp_003,37,quest_slot_001):
                    troop_get_relation_with_troop(_g_talk_troop,trp_003)
                    if reg0 > var002:
                        var002 = reg0
                        s12 = str_store_troop_name(trp_003)
                    #end
                #end
            #end
        #end
    #end
    if var002 > _g_talk_troop_relation:
        troop_get_family_relation_to_troop(quest_slot_001,_g_talk_troop)
lord_marriage_permission_lord_pretalk_2.conditionBlock = condition
def code():
    fail_quest(qst.formal_marriage_proposal)
    end_quest(qst.formal_marriage_proposal)
lord_marriage_permission_lord_pretalk_2.codeBlock = code


lord_marriage_permission_lord_marriage_permission_endowment = Dialog("anyone", "Splendid news, my young man -- I shall be proud to have you in our family. Now, let us talk the terms of the marriage. As per our custom, the two of us must make sure that {s11} has sufficient finances to support herself, in the event of any unforeseen circumstances..", starting_state="lord_marriage_permission", ending_state="lord_marriage_permission_endowment")
def condition():
    quest_slot_001 = quest_get_slot(qst.formal_marriage_proposal,6)
    s11 = str_store_troop_name(quest_slot_001)
lord_marriage_permission_lord_marriage_permission_endowment.conditionBlock = condition
def code():
    troop_slot_001 = troop_get_slot(trp.player,7)
    troop_slot_002 = troop_get_slot(_g_talk_troop,7)
    _marriage_dowry = troop_slot_001 * 20
    val_min(_marriage_dowry,20000)
    _marriage_dower = troop_slot_002 * 20
    val_min(_marriage_dower,20000)
lord_marriage_permission_lord_marriage_permission_endowment.codeBlock = code


lord_marriage_permission_endowment_lord_marriage_permission_endowment_answer = Dialog("anyone", "I would say that, taking into consideration the prestige of our two houses, that you can provide a dower of {reg3} denars, while I will supply a dowry of {reg4} denars. This shall be her ladyship's property, as a security, lest for any reason you are unable to provide for her. What say you to that?", starting_state="lord_marriage_permission_endowment", ending_state="lord_marriage_permission_endowment_answer")
def condition():
    reg3 = _marriage_dower
    reg4 = _marriage_dowry
lord_marriage_permission_endowment_lord_marriage_permission_endowment_answer.conditionBlock = condition


lord_marriage_permission_endowment_answer_lord_marriage_permission_engagement_date = Dialog("anyone|plyr", "Very well -- so let it be.", starting_state="lord_marriage_permission_endowment_answer", ending_state="lord_marriage_permission_engagement_date")
def condition():
    if troop_gold_001 >= _marriage_dower:
        troop_gold_001 = store_troop_gold(trp.player)
lord_marriage_permission_endowment_answer_lord_marriage_permission_engagement_date.conditionBlock = condition


lord_marriage_permission_endowment_answer_lord_marriage_permission_endowment_answer_delay = Dialog("anyone|plyr", "I cannot afford that right now.", starting_state="lord_marriage_permission_endowment_answer", ending_state="lord_marriage_permission_endowment_answer_delay")


lord_marriage_permission_endowment_answer_lord_marriage_permission_endowment_answer_no = Dialog("anyone|plyr", "That is too much to pay.", starting_state="lord_marriage_permission_endowment_answer", ending_state="lord_marriage_permission_endowment_answer_no")
def condition():
    if 1 == 0:
        pass
lord_marriage_permission_endowment_answer_lord_marriage_permission_endowment_answer_no.conditionBlock = condition


lord_marriage_permission_endowment_answer_no_close_window = Dialog("anyone", "Well. I cannot in all decency allow my daughter to marry without some security, can I? Let me know if you change your mind.", starting_state="lord_marriage_permission_endowment_answer_no", ending_state="close_window")
def code():
    _g_leave_encounter = 1
lord_marriage_permission_endowment_answer_no_close_window.codeBlock = code


lord_marriage_permission_engagement_date_close_window = Dialog("anyone", "Splendid! You two may now consider yourselves offically betrothed. Very well -- I shall plan to hold a great feast in {s24}, as soon as circumstances permit. We will be sure to notify you when the day comes.", starting_state="lord_marriage_permission_engagement_date", ending_state="close_window")
def condition():
    quest_slot_001 = quest_get_slot(qst.formal_marriage_proposal,6)
    get_kingdom_lady_social_determinants(quest_slot_001)
    var002 = reg1
    if is_between(var002,p.town_1,p.village_1) and party_slot_eq(var002,35,0):
        s24 = str_store_party_name(var002)
lord_marriage_permission_engagement_date_close_window.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(qst.formal_marriage_proposal,6)
    troop_set_slot(trp.player,34,quest_slot_001)
    troop_set_slot(quest_slot_001,34,trp.player)
    end_quest(qst.formal_marriage_proposal)
    troop_remove_gold(trp.player,_marriage_dower)
    get_kingdom_lady_social_determinants(quest_slot_001)
    var002 = reg1
    s3 = str_store_troop_name(quest_slot_001)
    s4 = str_store_troop_name(_g_talk_troop)
    s5 = str_store_party_name(var002)
    setup_quest_text(qst.wed_betrothed)
    s2 = str_store_string(gstr.you_plan_to_marry_s3_at_a_feast_hosted_by_s4_in_s5_you_should_be_notifed_of_the_feast_as_soon_as_it_is_held)
    start_quest(qst.wed_betrothed,_g_talk_troop)
    quest_set_slot(qst.wed_betrothed,23,365)
    quest_set_slot(qst.wed_betrothed,6,_g_talk_troop)
    quest_set_slot(qst.wed_betrothed,2,quest_slot_001)
    if _talk_context == 2:
        _g_leave_encounter = 1
    #end
lord_marriage_permission_engagement_date_close_window.codeBlock = code


lord_marriage_permission_engagement_date_close_window_1 = Dialog("anyone", "Unfortunately, there is one final complication -- there is no safe place to hold the wedding. Let us hold off on finalizing this, for the time being.", starting_state="lord_marriage_permission_engagement_date", ending_state="close_window")


lord_marriage_permission_endowment_answer_delay_lord_pretalk = Dialog("anyone", "No matter -- take the time you need to raise the money. I want her ladyship to be well looked after.", starting_state="lord_marriage_permission_endowment_answer_delay", ending_state="lord_pretalk")


lord_marriage_permission_endowment_answer_delay_lord_pretalk_1 = Dialog("anyone", "That is a shame, but I would be remiss in my duty if I allowed her ladyship to face an uncertain future.", starting_state="lord_marriage_permission_endowment_answer_delay", ending_state="lord_pretalk")
def code():
    fail_quest(qst.formal_marriage_proposal)
    end_quest(qst.formal_marriage_proposal)
lord_marriage_permission_endowment_answer_delay_lord_pretalk_1.codeBlock = code


lord_talk_ask_something_2_lord_courtship_permission = Dialog("anyone|plyr", "{s10} I have the honor of visiting with {s14}{s12}?", starting_state="lord_talk_ask_something_2", ending_state="lord_courtship_permission")
def condition():
    if not troop_slot_eq(_g_talk_troop,38,1):
        _marriage_candidate = 0
        for trp_001 in range(trp.knight_1_1_wife, trp.heroes_end):
            if _marriage_candidate == 0 and troop_slot_ge(trp_001,5,2) and not troop_slot_eq(trp_001,5,4) and not troop_slot_ge(trp_001,30,0):
                get_kingdom_lady_social_determinants(trp_001)
                if reg0 == _g_talk_troop:
                    _marriage_candidate = trp_001
                    str_clear(14)
                    troop_get_family_relation_to_troop(trp_001,_g_talk_troop)
                    if reg0 > 0:
                        s14 = str_store_string(gstr.your_s11_)
                    #end
                #end
            #end
        #end
    #end
    if _marriage_candidate > 0:
        s12 = str_store_troop_name(_marriage_candidate)
        str_clear(10)
        if troop_slot_eq(_g_talk_troop,38,-1):
            s10 = str_store_string(gstr.i_ask_again_may)
        else:
            s10 = str_store_string(gstr.may)
        #end
    #end
lord_talk_ask_something_2_lord_courtship_permission.conditionBlock = condition


lord_courtship_permission_lord_pretalk = Dialog("anyone", "From what I hear, you have already spoken to her -- without my permission. Let me tell you this: I am her lord and guardian, and I have plans for her. I will not be mocked behind my back as a man who cannot control the women of his household. I would ask you not to discuss this matter with me again.", starting_state="lord_courtship_permission", ending_state="lord_pretalk")
def condition():
    if troop_slot_ge(_marriage_candidate,5,2) and not troop_slot_eq(_marriage_candidate,5,4) and troop_slot_eq(_g_talk_troop,52,5) or troop_slot_eq(_g_talk_troop,52,2):
        if reg0 > 0:
            troop_get_relation_with_troop(_marriage_candidate,trp.player)
lord_courtship_permission_lord_pretalk.conditionBlock = condition
def code():
    troop_set_slot(_g_talk_troop,38,-1)
    troop_change_relation_with_troop(_g_talk_troop,trp.player,-1)
lord_courtship_permission_lord_pretalk.codeBlock = code


lord_courtship_permission_lord_pretalk_1 = Dialog("anyone", "{s14}", starting_state="lord_courtship_permission", ending_state="lord_pretalk")
def condition():
    npc_decision_checklist_male_guardian_assess_suitor(_g_talk_troop,trp.player)
    if reg0 < 1:
        s14 = str_store_string(reg1)
lord_courtship_permission_lord_pretalk_1.conditionBlock = condition
def code():
    troop_set_slot(_g_talk_troop,38,-1)
lord_courtship_permission_lord_pretalk_1.codeBlock = code


lord_courtship_permission_lord_pretalk_2 = Dialog("anyone", "{s12}", starting_state="lord_courtship_permission", ending_state="lord_pretalk")
def condition():
    if troop_slot_eq(_g_talk_troop,52,6):
        s12 = str_store_string(gstr.very_well_as_far_as_im_concerned_i_suppose_she_can_see_most_anyone_she_likes__within_reason_of_course)
    elif troop_slot_eq(_g_talk_troop,52,5) or troop_slot_eq(_g_talk_troop,52,2):
        s12 = str_store_string(gstr.very_well_an_alliance_with_you_could_be_valuable_go_chat_with_her_and_see_if_you_can_get_her_to_take_a_fancy_to_you_if_she_doesnt_and_if_we_still_want_to_conclude_this_business_then_i_can_make_her_see_reason)
    else:
        s12 = str_store_string(gstr.you_have_my_blessing_to_pay_suit_to_her__so_long_as_your_intentions_are_honorable_of_course_depending_on_how_things_proceed_between_you_two_we_may_have_more_to_discuss_at_a_later_date)
    #end
lord_courtship_permission_lord_pretalk_2.conditionBlock = condition
def code():
    troop_set_slot(_g_talk_troop,38,1)
lord_courtship_permission_lord_pretalk_2.codeBlock = code


lord_talk_ask_something_2_lord_talk_ask_marriage_1 = Dialog("anyone|plyr", "What would it take to cement a lasting alliance with your house?", starting_state="lord_talk_ask_something_2", ending_state="lord_talk_ask_marriage_1")
def condition():
    if not troop_slot_eq(_g_talk_troop,38,1) and not troop_slot_ge(trp.player,30,trp.npc1):
        if troop_type_001 != 1:
            troop_type_001 = troop_get_type(_g_talk_troop)
lord_talk_ask_something_2_lord_talk_ask_marriage_1.conditionBlock = condition


lord_talk_ask_something_2_lord_pretalk = Dialog("anyone|plyr", "Never mind.", starting_state="lord_talk_ask_something_2", ending_state="lord_pretalk")


lord_talk_ask_location_lord_talk_ask_location_2 = Dialog("anyone", "Very well, I may or may not have an answer for you. About whom do you wish to hear?", starting_state="lord_talk_ask_location", ending_state="lord_talk_ask_location_2")


lord_talk_ask_location_2_lord_talk_ask_location_3 = Dialog("anyone|repeat_for_troops|plyr", "{s1}", starting_state="lord_talk_ask_location_2", ending_state="lord_talk_ask_location_3")
def condition():
    troop_id_001 = store_repeat_object()
    if _g_talk_troop != troop_id_001 and is_between(troop_id_001,trp.npc1,trp.heroes_end) and troop_id_001 != trp.player and troop_slot_eq(troop_id_001,2,2) or troop_slot_eq(troop_id_001,2,6):
        troop_faction_002 = store_faction_of_troop(troop_id_001)
        if _g_encountered_party_faction == troop_faction_002:
            s1 = str_store_troop_name(troop_id_001)
            if faction_slot_eq(_players_kingdom,8,troop_id_001):
                s1 = str_store_string("@Our marshal;;; {s1}")
            #end
        #end
    #end
lord_talk_ask_location_2_lord_talk_ask_location_3.conditionBlock = condition
def code():
    _hero_requested_to_learn_location = store_repeat_object()
lord_talk_ask_location_2_lord_talk_ask_location_3.codeBlock = code


lord_talk_ask_location_2_lady_pretalk = Dialog("anyone|plyr", "Never mind.", starting_state="lord_talk_ask_location_2", ending_state="lady_pretalk")
def condition():
    if is_between(_g_talk_troop,trp.knight_1_1_wife,trp.heroes_end):
        pass
lord_talk_ask_location_2_lady_pretalk.conditionBlock = condition


lord_talk_ask_location_2_lord_pretalk = Dialog("anyone|plyr", "Never mind.", starting_state="lord_talk_ask_location_2", ending_state="lord_pretalk")
def condition():
    if not is_between(_g_talk_troop,trp.knight_1_1_wife,trp.heroes_end):
        pass
lord_talk_ask_location_2_lord_pretalk.conditionBlock = condition


lord_talk_ask_location_3_lady_pretalk = Dialog("anyone", "{s1}", starting_state="lord_talk_ask_location_3", ending_state="lady_pretalk")
def condition():
    if is_between(_g_talk_troop,trp.knight_1_1_wife,trp.heroes_end):
        update_troop_location_notes(_hero_requested_to_learn_location,1)
        get_information_about_troops_position(_hero_requested_to_learn_location,0)
lord_talk_ask_location_3_lady_pretalk.conditionBlock = condition


lord_talk_ask_location_3_lord_pretalk = Dialog("anyone", "{s1}", starting_state="lord_talk_ask_location_3", ending_state="lord_pretalk")
def condition():
    update_troop_location_notes(_hero_requested_to_learn_location,1)
    get_information_about_troops_position(_hero_requested_to_learn_location,0)
lord_talk_ask_location_3_lord_pretalk.conditionBlock = condition


lord_talk_ask_about_war_lord_talk_ask_about_war_2 = Dialog("anyone", "{s12}", starting_state="lord_talk_ask_about_war", ending_state="lord_talk_ask_about_war_2")
def code():
    var001 = 0
    for fac_002 in range(fac.player_supporters_faction, fac.kingdoms_end):
        if faction_slot_eq(fac_002,21,0):
            faction_relation_003 = store_relation(fac_002,_g_talk_x_troop_faction)
            if faction_relation_003 < 0:
                if var001 == 0:
                    s12 = str_store_faction_name_link(fac_002)
                elif var001 == 1:
                    s11 = str_store_faction_name_link(fac_002)
                    s12 = str_store_string("@{s11} and {s12}")
                else:
                    s11 = str_store_faction_name_link(fac_002)
                    s12 = str_store_string("@{!}{s11};;; {s12}")
                #end
            #end
        #end
        var001 += 1
    #end
    if var001 == 0:
        s12 = str_store_string("@We are not at war with anyone.")
    else:
        s12 = str_store_string("@We are at war with {s12}.")
    #end
lord_talk_ask_about_war_lord_talk_ask_about_war_2.codeBlock = code


lord_talk_ask_about_war_2_lord_talk_ask_about_war_details = Dialog("anyone|repeat_for_factions|plyr", "Tell me more about the war with {s1}.", starting_state="lord_talk_ask_about_war_2", ending_state="lord_talk_ask_about_war_details")
def condition():
    var001 = store_repeat_object()
    if is_between(var001,fac.player_supporters_faction,fac.kingdoms_end) and faction_slot_eq(var001,21,0):
        faction_relation_002 = store_relation(var001,_g_talk_x_troop_faction)
        if faction_relation_002 < 0:
            s1 = str_store_faction_name(var001)
lord_talk_ask_about_war_2_lord_talk_ask_about_war_details.conditionBlock = condition
def code():
    _faction_requested_to_learn_more_details_about_the_war_against = store_repeat_object()
lord_talk_ask_about_war_2_lord_talk_ask_about_war_details.codeBlock = code


lord_talk_ask_about_war_2_lord_pretalk = Dialog("anyone|plyr", "That's all I wanted to know. Thank you.", starting_state="lord_talk_ask_about_war_2", ending_state="lord_pretalk")


lord_talk_ask_about_war_details_lord_talk_ask_about_war_2 = Dialog("anyone", "{s9}.", starting_state="lord_talk_ask_about_war_details", ending_state="lord_talk_ask_about_war_2")
def code():
    slot_no_001 = _faction_requested_to_learn_more_details_about_the_war_against + 140
    slot_no_001 -= fac.player_supporters_faction
    faction_slot_002 = faction_get_slot(_g_talk_x_troop_faction,slot_no_001)
    slot_no_001 = _g_talk_x_troop_faction + 140
    slot_no_001 -= fac.player_supporters_faction
    faction_slot_003 = faction_get_slot(_faction_requested_to_learn_more_details_about_the_war_against,slot_no_001)
    val_max(faction_slot_003,1)
    var004 = faction_slot_002 * 100
    var004 /= faction_slot_003
    if _cheat_mode == 1:
        reg3 = faction_slot_002
        reg4 = faction_slot_003
        reg5 = var004
        print(gstr.war_damage_inflicted_reg3_suffered_reg4_ratio_reg5)
    #end
    s9 = str_store_string(gstr.error__did_not_calculate_war_progress_string_properly)
    if faction_slot_002 < 5:
        s9 = str_store_string(gstr.the_war_has_barely_begun_so_and_it_is_too_early_to_say_who_is_winning_and_who_is_losing)
    elif faction_slot_002 > 100 and var004 > 200:
        s9 = str_store_string(gstr.we_have_been_hitting_them_very_hard_and_giving_them_little_chance_to_recover)
    elif faction_slot_002 > 80 and var004 > 150:
        s9 = str_store_string(gstr.the_fighting_has_been_hard_but_we_have_definitely_been_getting_the_better_of_them)
    elif faction_slot_003 > 100 and var004 < 50:
        s9 = str_store_string(gstr.they_have_been_hitting_us_very_hard_and_causing_great_suffering)
    elif faction_slot_003 > 80 and var004 < 68:
        s9 = str_store_string(gstr.the_fighting_has_been_hard_and_i_am_afraid_that_we_have_been_having_the_worst_of_it)
    elif faction_slot_003 > 50 and faction_slot_002 > 50 and var004 > 65:
        s9 = str_store_string(gstr.both_sides_have_suffered_in_the_fighting)
    elif var004 > 125:
        s9 = str_store_string(gstr.no_clear_winner_has_yet_emerged_in_the_fighting_but_i_think_we_are_getting_the_better_of_them)
    elif var004 > 80:
        s9 = str_store_string(gstr.no_clear_winner_has_yet_emerged_in_the_fighting_but_i_fear_they_may_be_getting_the_better_of_us)
    else:
        s9 = str_store_string(gstr.no_clear_winner_has_yet_emerged_in_the_fighting)
    #end
    if not faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop):
        npc_decision_checklist_peace_or_war(_g_talk_x_troop_faction,_faction_requested_to_learn_more_details_about_the_war_against,-1)
        s9 = str_store_string(gstr.s9_s14)
    #end
lord_talk_ask_about_war_details_lord_talk_ask_about_war_2.codeBlock = code


lord_talk_ask_about_strategy_lord_strategy_follow_evaluation = Dialog("anyone", "{s7} {s9} {s14}", starting_state="lord_talk_ask_about_strategy", ending_state="lord_strategy_follow_evaluation")
def condition():
    faction_slot_001 = faction_get_slot(_g_encountered_party_faction,4)
    faction_slot_002 = faction_get_slot(_g_encountered_party_faction,5)
    faction_slot_003 = faction_get_slot(_g_encountered_party_faction,8)
    if faction_slot_003 == -1:
        faction_slot_003 = faction_get_slot(_g_encountered_party_faction,11)
    #end
    npc_decision_checklist_faction_ai_alt(faction_slot_003)
    var004 = reg0
    var005 = reg1
    if faction_slot_002 > -1:
        s8 = str_store_party_name(faction_slot_002)
    #end
    if faction_slot_001 == 0:
        s7 = str_store_string(gstr.there_is_no_campaign_currently_in_progress)
    elif faction_slot_001 == 1:
        s7 = str_store_string(gstr.we_are_assembling_the_army)
    elif faction_slot_001 == 2:
        s7 = str_store_string(gstr.we_aim_to_take_the_fortress_of_s8)
    elif faction_slot_001 == 3:
        s7 = str_store_string(gstr.we_are_on_a_raid_and_are_now_targeting_s8)
    elif faction_slot_001 == 4:
        s7 = str_store_string(gstr.we_are_trying_to_seek_out_and_defeat_s8)
    elif faction_slot_001 == 5:
        s7 = str_store_string(gstr.we_are_riding_to_the_defense_of_s8)
    elif faction_slot_001 == 6:
        s7 = str_store_string(gstr.we_are_gathering_for_a_feast_at_s8)
    #end
    str_clear(9)
    if faction_slot_001 == 1:
        faction_slot_006 = faction_get_slot(_g_talk_x_troop_faction,8)
        if faction_slot_006 > -1:
            troop_slot_007 = troop_get_slot(faction_slot_006,10)
            if party_is_active(troop_slot_007) and _g_talk_troop == faction_slot_006 or party_slot_eq(_g_talk_troop_party,5,troop_slot_007):
                party_slot_008 = party_get_slot(troop_slot_007,5)
                if party_slot_008 == -1:
                    s9 = str_store_string(gstr.we_are_waiting_here_for_vassals)
                else:
                    s11 = str_store_party_name(party_slot_008)
                    s9 = str_store_string(gstr.we_are_travelling_to_s11_for_vassals)
                #end
            #end
        #end
    #end
    if faction_slot_001 == var004 or faction_slot_002 != var005:
        s14 = str_store_string(gstr._however_that_may_change_shortly_s14)
    #end
lord_talk_ask_about_strategy_lord_strategy_follow_evaluation.conditionBlock = condition


lord_strategy_follow_evaluation_lord_talk_ask_something_2 = Dialog("anyone", "Did you have any other questions?", starting_state="lord_strategy_follow_evaluation", ending_state="lord_talk_ask_something_2")
def condition():
    if faction_slot_eq(_g_talk_x_troop_faction,8,_g_talk_troop) or faction_slot_eq(_g_talk_x_troop_faction,4,0) or faction_slot_eq(_g_talk_x_troop_faction,4,6):
        pass
lord_strategy_follow_evaluation_lord_talk_ask_something_2.conditionBlock = condition


lord_strategy_follow_evaluation_lord_strategy_follow_up = Dialog("anyone", "Our leader {s4} is far too cautious. {reg4?She:He} should either use the army to attack the enemy, or let it go home.", starting_state="lord_strategy_follow_evaluation", ending_state="lord_strategy_follow_up")
def condition():
    if faction_slot_eq(_g_talk_x_troop_faction,4,1):
        npc_decision_checklist_faction_ai_alt(_g_talk_troop)
        var001 = reg0
        if var001 != 1:
            cur_hours_002 = store_current_hours()
            faction_slot_003 = faction_get_slot(_g_talk_x_troop_faction,97)
            cur_hours_002 -= faction_slot_003
            if cur_hours_002 >= 40:
                faction_slot_004 = faction_get_slot(_g_talk_x_troop_faction,8)
                if is_between(faction_slot_004,trp.npc1,trp.knight_1_1_wife) and faction_slot_004 != _g_talk_troop:
                    s4 = str_store_troop_name(faction_slot_004)
lord_strategy_follow_evaluation_lord_strategy_follow_up.conditionBlock = condition
def code():
    _g_talk_troop_disagrees_with_marshal = 1
lord_strategy_follow_evaluation_lord_strategy_follow_up.codeBlock = code


lord_strategy_follow_evaluation_lord_strategy_follow_up_1 = Dialog("anyone", "Our army sits, doing nothing. Apparently, too few vassals have answered the call to arms. Perhaps {s4} does not enjoy the confidence of the great lords of this realm.", starting_state="lord_strategy_follow_evaluation", ending_state="lord_strategy_follow_up")
def condition():
    if faction_slot_eq(_g_talk_x_troop_faction,4,1):
        cur_hours_001 = store_current_hours()
        faction_slot_002 = faction_get_slot(_g_talk_x_troop_faction,97)
        cur_hours_001 -= faction_slot_002
        if cur_hours_001 >= 40:
            faction_slot_003 = faction_get_slot(_g_talk_x_troop_faction,8)
            if is_between(faction_slot_003,trp.npc1,trp.knight_1_1_wife) and faction_slot_003 != _g_talk_troop:
                troop_get_relation_with_troop(_g_talk_troop,faction_slot_003)
                if reg0 < 5:
                    s4 = str_store_troop_name(faction_slot_003)
lord_strategy_follow_evaluation_lord_strategy_follow_up_1.conditionBlock = condition
def code():
    _g_talk_troop_disagrees_with_marshal = 1
lord_strategy_follow_evaluation_lord_strategy_follow_up_1.codeBlock = code


lord_strategy_follow_evaluation_lord_strategy_follow_up_2 = Dialog("anyone", "I disagree with this strategy. I would prefer to {s4}.", starting_state="lord_strategy_follow_evaluation", ending_state="lord_strategy_follow_up")
def condition():
    npc_decision_checklist_faction_ai_alt(_g_talk_troop)
    var001 = reg0
    if not faction_slot_eq(_g_talk_x_troop_faction,4,var001):
        var002 = 1
        if var001 == 3:
            s4 = str_store_string("@go on the offensive now.")
        elif var001 == 2:
            s4 = str_store_string("@go on the offensive now.")
        elif var001 == 5:
            s4 = str_store_string("@act to defend our lands.")
        elif var001 == 1:
            s4 = str_store_string("@take more time to gather the army.")
        else:
            var002 = 0
        #end
    #end
    if var002 == 1:
        faction_slot_003 = faction_get_slot(_g_talk_x_troop_faction,8)
        if is_between(faction_slot_003,trp.npc1,trp.knight_1_1_wife) and faction_slot_003 != _g_talk_troop:
            s10 = str_store_troop_name(faction_slot_003)
            _g_talk_troop_disagrees_with_marshal = 1
lord_strategy_follow_evaluation_lord_strategy_follow_up_2.conditionBlock = condition
def code():
    _g_talk_troop_disagrees_with_marshal = 1
lord_strategy_follow_evaluation_lord_strategy_follow_up_2.codeBlock = code


lord_strategy_follow_evaluation_lord_strategy_follow_up_3 = Dialog("anyone", "I personally would prefer to attack {s8}, but our marshal {s10} believes that it {s9}", starting_state="lord_strategy_follow_evaluation", ending_state="lord_strategy_follow_up")
def condition():
    if faction_slot_eq(_g_talk_x_troop_faction,4,2) or faction_slot_eq(_g_talk_x_troop_faction,4,3):
        find_center_to_attack_alt(_g_talk_troop,1,0)
        var001 = reg0
        if is_between(var001,p.town_1,p.salt_mine):
            faction_slot_002 = faction_get_slot(_g_talk_x_troop_faction,5)
            if faction_slot_002 != var001:
                faction_slot_003 = faction_get_slot(_g_talk_x_troop_faction,8)
                if is_between(faction_slot_003,trp.npc1,trp.knight_1_1_wife) and faction_slot_003 != _g_talk_troop:
                    npc_decision_checklist_evaluate_enemy_center_for_attack(faction_slot_003,var001,1,0)
                    s9 = str_store_string(reg1)
                    s8 = str_store_party_name(var001)
                    faction_slot_003 = faction_get_slot(_g_talk_x_troop_faction,8)
                    if is_between(faction_slot_003,trp.npc1,trp.knight_1_1_wife) and faction_slot_003 != _g_talk_troop:
                        s10 = str_store_troop_name(faction_slot_003)
lord_strategy_follow_evaluation_lord_strategy_follow_up_3.conditionBlock = condition
def code():
    _g_talk_troop_disagrees_with_marshal = 1
lord_strategy_follow_evaluation_lord_strategy_follow_up_3.codeBlock = code


lord_strategy_follow_evaluation_lord_strategy_follow_up_4 = Dialog("anyone", "I personally would prefer to defend {s8}, instead of {s9}.", starting_state="lord_strategy_follow_evaluation", ending_state="lord_strategy_follow_up")
def condition():
    if faction_slot_eq(_g_talk_x_troop_faction,4,5):
        find_center_to_defend(_g_talk_troop)
        var001 = reg0
        if is_between(var001,p.town_1,p.salt_mine):
            faction_slot_002 = faction_get_slot(_g_talk_x_troop_faction,5)
            if faction_slot_002 != var001:
                faction_slot_003 = faction_get_slot(_g_talk_x_troop_faction,8)
                if is_between(faction_slot_003,trp.npc1,trp.knight_1_1_wife) and faction_slot_003 != _g_talk_troop:
                    s8 = str_store_party_name(var001)
                    s9 = str_store_party_name(faction_slot_002)
lord_strategy_follow_evaluation_lord_strategy_follow_up_4.conditionBlock = condition
def code():
    _g_talk_troop_disagrees_with_marshal = 1
lord_strategy_follow_evaluation_lord_strategy_follow_up_4.codeBlock = code


lord_strategy_follow_evaluation_lord_talk = Dialog("anyone", "Is there anything else?", starting_state="lord_strategy_follow_evaluation", ending_state="lord_talk")
def condition():
    if is_between(faction_slot_001,trp.npc1,trp.knight_1_1_wife) or faction_slot_001 == _g_talk_troop:
        faction_slot_001 = faction_get_slot(_g_talk_x_troop_faction,8)
lord_strategy_follow_evaluation_lord_talk.conditionBlock = condition


lord_strategy_follow_evaluation_lord_strategy_follow_up_5 = Dialog("anyone", "This strategy seems reasonable to me.", starting_state="lord_strategy_follow_evaluation", ending_state="lord_strategy_follow_up")
def code():
    _g_talk_troop_disagrees_with_marshal = 0
lord_strategy_follow_evaluation_lord_strategy_follow_up_5.codeBlock = code


lord_strategy_follow_up_lord_strategy_why_not = Dialog("anyone|plyr", "If you're attacking, why aren't you...", starting_state="lord_strategy_follow_up", ending_state="lord_strategy_why_not")
def condition():
    if faction_slot_eq(_g_talk_x_troop_faction,4,2) or faction_slot_eq(_g_talk_x_troop_faction,4,3):
        pass
lord_strategy_follow_up_lord_strategy_why_not.conditionBlock = condition


lord_strategy_follow_up_lord_talk_ask_something_again = Dialog("anyone|plyr", "I see....", starting_state="lord_strategy_follow_up", ending_state="lord_talk_ask_something_again")


lord_strategy_follow_up_lord_talk_replace_marshal = Dialog("anyone|plyr", "Would you say, then, that {s4} should no longer be marshal?", starting_state="lord_strategy_follow_up", ending_state="lord_talk_replace_marshal")
def condition():
    if _g_talk_troop_disagrees_with_marshal == 1 and not faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop):
        faction_slot_001 = faction_get_slot(_g_talk_x_troop_faction,8)
        if is_between(faction_slot_001,trp.npc1,trp.knight_1_1_wife):
            s4 = str_store_troop_name(faction_slot_001)
lord_strategy_follow_up_lord_talk_replace_marshal.conditionBlock = condition


lord_talk_replace_marshal_lord_talk_ask_something_again = Dialog("anyone", "I believe that our realm should resolve the issue of {s4} before we begin to debate replacing the marshal.", starting_state="lord_talk_replace_marshal", ending_state="lord_talk_ask_something_again")
def condition():
    faction_slot_001 = faction_get_slot(_g_talk_x_troop_faction,64)
    if is_between(faction_slot_001,p.town_1,p.salt_mine):
        s4 = str_store_party_name(faction_slot_001)
lord_talk_replace_marshal_lord_talk_ask_something_again.conditionBlock = condition


lord_talk_replace_marshal_lord_talk_ask_something_again_1 = Dialog("anyone", "Yes. I have already made my position on this matter clear. I believe that {s4} should be marshal instead of {s5}.", starting_state="lord_talk_replace_marshal", ending_state="lord_talk_ask_something_again")
def condition():
    if faction_slot_eq(_g_talk_x_troop_faction,64,1):
        troop_slot_001 = troop_get_slot(_g_talk_troop,154)
        faction_slot_002 = faction_get_slot(_g_talk_x_troop_faction,8)
        if troop_slot_001 != faction_slot_002:
            s4 = str_store_troop_name(troop_slot_001)
            s5 = str_store_troop_name(faction_slot_002)
lord_talk_replace_marshal_lord_talk_ask_something_again_1.conditionBlock = condition


lord_talk_replace_marshal_lord_talk_ask_something_again_2 = Dialog("anyone", "I will make up my mind on this matter without your persuasion, {sir/my lady}.", starting_state="lord_talk_replace_marshal", ending_state="lord_talk_ask_something_again")
def condition():
    faction_slot_001 = faction_get_slot(_g_talk_x_troop_faction,8)
    troop_get_relation_with_troop(_g_talk_troop,faction_slot_001)
    if var002 > _g_talk_troop_effective_relation:
        var002 = reg0
lord_talk_replace_marshal_lord_talk_ask_something_again_2.conditionBlock = condition


lord_talk_replace_marshal_lord_talk_replace_marshal_decision = Dialog("anyone", "Hmm...", starting_state="lord_talk_replace_marshal", ending_state="lord_talk_replace_marshal_decision")
def code():
    faction_set_slot(_g_talk_x_troop_faction,64,1)
lord_talk_replace_marshal_lord_talk_replace_marshal_decision.codeBlock = code


lord_talk_replace_marshal_decision_lord_talk_ask_something_again = Dialog("anyone", "Yes, I would say that. At this point, I would be tempted to say that I support {s15} instead. I am glad that you and I had this discussion, so that I know that we are of the same mind on this matter.", starting_state="lord_talk_replace_marshal_decision", ending_state="lord_talk_ask_something_again")
def condition():
    npc_decision_checklist_take_stand_on_issue(_g_talk_troop)
    var001 = reg0
    if not faction_slot_eq(_g_talk_x_troop_faction,8,var001):
        troop_describes_troop_to_s15(_g_talk_troop,var001)
lord_talk_replace_marshal_decision_lord_talk_ask_something_again.conditionBlock = condition
def code():
    npc_decision_checklist_take_stand_on_issue(_g_talk_troop)
    var001 = reg0
    troop_set_slot(_g_talk_troop,154,var001)
    faction_slot_002 = faction_get_slot(_g_talk_x_troop_faction,8)
    troop_slot_003 = troop_get_slot(faction_slot_002,150)
    troop_slot_003 += 5
    troop_set_slot(faction_slot_002,150,troop_slot_003)
    troop_describes_troop_to_s15(_g_talk_troop,var001)
lord_talk_replace_marshal_decision_lord_talk_ask_something_again.codeBlock = code


lord_talk_replace_marshal_decision_lord_talk_ask_something_again_1 = Dialog("anyone", "Not necessarily. It is possible for {s4} and I have to have an honest disagreement over strategy, without my seeking to replace him.", starting_state="lord_talk_replace_marshal_decision", ending_state="lord_talk_ask_something_again")
def condition():
    faction_slot_001 = faction_get_slot(_g_talk_x_troop_faction,8)
    s4 = str_store_troop_name(faction_slot_001)
lord_talk_replace_marshal_decision_lord_talk_ask_something_again_1.conditionBlock = condition


lord_strategy_why_not_lord_strategy_why_not_select = Dialog("anyone", "Yes?", starting_state="lord_strategy_why_not", ending_state="lord_strategy_why_not_select")


lord_strategy_why_not_select_lord_talk_ask_something_again = Dialog("anyone|plyr", "Never mind", starting_state="lord_strategy_why_not_select", ending_state="lord_talk_ask_something_again")


lord_strategy_why_not_select_lord_strategy_why_not_reason = Dialog("anyone|plyr", "..planning to continue with the attack on {s4}?", starting_state="lord_strategy_why_not_select", ending_state="lord_strategy_why_not_reason")
def condition():
    if faction_slot_eq(_g_talk_x_troop_faction,4,3) or faction_slot_eq(_g_talk_x_troop_faction,4,2):
        faction_slot_001 = faction_get_slot(_g_talk_x_troop_faction,5)
        faction_slot_002 = faction_get_slot(_g_talk_x_troop_faction,8)
        if faction_slot_002 > -1:
            find_center_to_attack_alt(faction_slot_002,1,0)
            if reg0 != faction_slot_001:
                s4 = str_store_party_name(faction_slot_001)
lord_strategy_why_not_select_lord_strategy_why_not_reason.conditionBlock = condition


lord_strategy_why_not_select_lord_strategy_why_not_reason_1 = Dialog("anyone|repeat_for_parties|plyr", "..defending {s4}?", starting_state="lord_strategy_why_not_select", ending_state="lord_strategy_why_not_reason")
def condition():
    var001 = store_repeat_object()
    if is_between(var001,p.town_1,p.salt_mine):
        party_faction_002 = store_faction_of_party(var001)
        if party_faction_002 == _g_talk_x_troop_faction and not faction_slot_eq(_g_talk_x_troop_faction,5,var001) and _g_target_after_gathering != var001 and party_slot_ge(var001,67,1):
            s4 = str_store_party_name(var001)
lord_strategy_why_not_select_lord_strategy_why_not_reason_1.conditionBlock = condition
def code():
    _temp = store_repeat_object()
lord_strategy_why_not_select_lord_strategy_why_not_reason_1.codeBlock = code


lord_strategy_why_not_select_lord_strategy_why_not_reason_2 = Dialog("anyone|repeat_for_parties|plyr", "..attacking {s4}?", starting_state="lord_strategy_why_not_select", ending_state="lord_strategy_why_not_reason")
def condition():
    var001 = store_repeat_object()
    if is_between(var001,p.town_1,p.salt_mine):
        party_faction_002 = store_faction_of_party(var001)
        faction_relation_003 = store_relation(party_faction_002,_g_talk_x_troop_faction)
        if faction_relation_003 < 0 and not faction_slot_eq(_g_talk_x_troop_faction,5,var001):
            s4 = str_store_party_name(var001)
lord_strategy_why_not_select_lord_strategy_why_not_reason_2.conditionBlock = condition
def code():
    _temp = store_repeat_object()
    if _cheat_mode == 1:
        slot_no_001 = _g_talk_x_troop_faction - fac.player_supporters_faction
        slot_no_001 += 350
        cur_hours_002 = store_current_hours()
        party_slot_003 = party_get_slot(_temp,slot_no_001)
        cur_hours_002 -= party_slot_003
    #end
lord_strategy_why_not_select_lord_strategy_why_not_reason_2.codeBlock = code


lord_strategy_why_not_reason_lord_talk_why_not_repeat = Dialog("anyone", "{s9}", starting_state="lord_strategy_why_not_reason", ending_state="lord_talk_why_not_repeat")
def condition():
    var001 = _temp
    party_faction_002 = store_faction_of_party(var001)
    if party_faction_002 == _g_talk_x_troop_faction:
        faction_slot_003 = faction_get_slot(_g_talk_x_troop_faction,8)
        find_center_to_defend(faction_slot_003)
        var004 = reg0
        var005 = reg1
        var006 = reg2
        if True:
            find_center_to_attack_alt(faction_slot_003,1,0)
            var007 = reg1
            find_center_to_attack_alt(faction_slot_003,1,1)
            var008 = reg1
            if var008 >= var007:
                var009 = var008
            else:
                var009 = var007
            #end
        #end
        if var009 > var005:
            reg4 = var007
            reg5 = var005
            s9 = str_store_string(gstr.reason_1)
        else:
            var010 = 0
            if is_between(var001,p.village_1,p.salt_mine) and is_between(var004,p.town_1,p.village_1):
                var010 = 1
            #end
        #end
        if is_between(var001,p.castle_1,p.village_1) and is_between(var004,p.town_1,p.castle_1):
            var010 = 1
        #end
        if var010 == 1:
            s8 = str_store_party_name(var004)
            s9 = str_store_string(gstr.reason_2)
        elif var004 != var001:
            s8 = str_store_party_name(var004)
            s9 = str_store_string(gstr.reason_3)
        else:
            troop_slot_011 = troop_get_slot(faction_slot_003,10)
            if party_is_active(troop_slot_011):
                party_slot_012 = party_get_slot(troop_slot_011,56)
                party_slot_013 = party_get_slot(troop_slot_011,59)
                var014 = party_slot_012 + party_slot_013
                if var006 >= var014:
                    reg4 = var006
                    reg5 = var014
                    s9 = str_store_string(gstr.reason_4)
                else:
                    s9 = str_store_string(gstr.reason_5)
                #end
            #end
        #end
    #end
lord_strategy_why_not_reason_lord_talk_why_not_repeat.conditionBlock = condition


lord_strategy_why_not_reason_lord_talk_why_not_repeat_1 = Dialog("anyone", "Our marshal {s11} believes that {s8} {s9}{s10}", starting_state="lord_strategy_why_not_reason", ending_state="lord_talk_why_not_repeat")
def condition():
    var001 = _temp
    faction_slot_002 = faction_get_slot(_g_talk_x_troop_faction,8)
    faction_slot_003 = faction_get_slot(_g_talk_x_troop_faction,5)
    npc_decision_checklist_evaluate_enemy_center_for_attack(faction_slot_002,faction_slot_003,1,0)
    _g_faction_object_score = reg0
    _g_do_not_skip_other_than_current_ai_object = 1
    npc_decision_checklist_evaluate_enemy_center_for_attack(faction_slot_002,var001,1,0)
    _g_do_not_skip_other_than_current_ai_object = 0
    if reg0 < 0:
        var004 = reg1
        if _g_use_current_ai_object_as_s8 == 0:
            s8 = str_store_party_name(var001)
        else:
            s8 = str_store_party_name(faction_slot_003)
        #end
    #end
    s9 = str_store_string(var004)
    str_clear(10)
    s11 = str_store_troop_name(faction_slot_002)
lord_strategy_why_not_reason_lord_talk_why_not_repeat_1.conditionBlock = condition


lord_strategy_why_not_reason_lord_talk_why_not_repeat_2 = Dialog("anyone", "We could go there. {s7} However, {s5} {s3} {s4}. {s6} {s8}.", starting_state="lord_strategy_why_not_reason", ending_state="lord_talk_why_not_repeat")
def condition():
    faction_slot_001 = faction_get_slot(_g_talk_x_troop_faction,8)
    faction_slot_002 = faction_get_slot(_g_talk_x_troop_faction,5)
    npc_decision_checklist_evaluate_enemy_center_for_attack(faction_slot_001,faction_slot_002,1,0)
    var003 = reg2
    npc_decision_checklist_evaluate_enemy_center_for_attack(faction_slot_001,_temp,1,0)
    var004 = reg2
    if var004 == 0:
        s7 = str_store_string(gstr.reason_6)
    elif var004 < 200:
        s7 = str_store_string(gstr.reason_7)
    elif is_between(var004,200,300):
        s7 = str_store_string(gstr.reason_8)
    elif var004 >= 300:
        s7 = str_store_string(gstr.reason_9)
    else:
        s7 = str_store_string(gstr.error_string)
    #end
    if var003 == 0:
        s8 = str_store_string(gstr.reason_6)
    elif var003 < 200:
        s8 = str_store_string(gstr.reason_7)
    elif is_between(var003,200,300):
        s8 = str_store_string(gstr.reason_8)
    elif var003 >= 300:
        s8 = str_store_string(gstr.reason_9)
    else:
        s8 = str_store_string(gstr.error_string)
    #end
    if faction_slot_002 >= 0:
        s4 = str_store_party_name(faction_slot_002)
    elif _g_target_after_gathering >= 0:
        s4 = str_store_party_name(_g_target_after_gathering)
    else:
        s4 = str_store_party_name(gstr.error_string)
    #end
    s5 = str_store_troop_name(faction_slot_001)
    if _cheat_mode == 1:
        slot_no_005 = _g_talk_x_troop_faction - fac.player_supporters_faction
        slot_no_005 += 350
        cur_hours_006 = store_current_hours()
        party_slot_007 = party_get_slot(_temp,slot_no_005)
        cur_hours_006 -= party_slot_007
        slot_no_005 = _g_talk_x_troop_faction - fac.player_supporters_faction
        slot_no_005 += 350
        cur_hours_006 = store_current_hours()
        party_slot_007 = party_get_slot(faction_slot_002,slot_no_005)
        cur_hours_006 -= party_slot_007
    #end
    if True:
        var008 = 0
        if party_slot_eq(_g_talk_troop_party,4,1) and _g_target_after_gathering < 0:
            var008 = 1
        #end
        if var008 == 1 or faction_slot_eq(_g_talk_x_troop_faction,4,2) or faction_slot_eq(_g_talk_x_troop_faction,4,3):
            s3 = str_store_string(gstr.has_decided_that_an_attack_on_)
            s6 = str_store_string(gstr.this_would_be_better_worth_the_effort)
        else:
            s3 = str_store_string(gstr.has_decided_to_defend_)
            s9 = str_store_party_name(_temp)
            s6 = str_store_string(gstr.before_going_offensive_we_should_protect_our_lands_if_there_is_any_threat_so_this_can_be_reason_marshall_choosed_defending_s4)
            str_clear(8)
        #end
    #end
lord_strategy_why_not_reason_lord_talk_why_not_repeat_2.conditionBlock = condition


lord_talk_why_not_repeat_lord_strategy_why_not_select = Dialog("anyone", "Did you have any similar questions? Why we are not...", starting_state="lord_talk_why_not_repeat", ending_state="lord_strategy_why_not_select")


lord_talk_ask_marriage_1_lord_pretalk = Dialog("anyone", "You will not take offense if I tell you that, as a king, I have other plans for my children.", starting_state="lord_talk_ask_marriage_1", ending_state="lord_pretalk")
def condition():
    if faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop):
        pass
lord_talk_ask_marriage_1_lord_pretalk.conditionBlock = condition


lord_talk_ask_marriage_1_lord_pretalk_1 = Dialog("anyone", "It is our custom to seal any such alliances with marriage. Unfortunately, no one in my household is eligible to wed.", starting_state="lord_talk_ask_marriage_1", ending_state="lord_pretalk")
def condition():
    _marriage_candidate = -1
    if True:
        troop_type_001 = troop_get_type(trp.player)
        if troop_type_001 == 1 and troop_slot_eq(_g_talk_troop,30,-1):
            _marriage_candidate = _g_talk_troop
        else:
            troop_type_001 = troop_get_type(trp.player)
            if troop_type_001 == 0:
                _marriage_candidate = -1
                for trp_002 in range(trp.knight_1_1_wife, trp.heroes_end):
                    if troop_slot_eq(trp_002,30,-1) and troop_slot_eq(trp_002,34,-1):
                        get_kingdom_lady_social_determinants(trp_002)
                        if reg0 == _g_talk_troop:
                            troop_get_family_relation_to_troop(trp_002,_g_talk_troop)
                            _marriage_candidate = trp_002
                            s14 = str_store_troop_name(_marriage_candidate)
                            s15 = str_store_string(gstr.it_is_our_custom_to_seal_any_such_alliances_with_marriage_and_in_fact_we_have_been_looking_for_a_suitable_groom_for_my_s11_s14)
                        #end
                    #end
                #end
            #end
        #end
        if _marriage_candidate == -1:
            pass
        #end
    #end
lord_talk_ask_marriage_1_lord_pretalk_1.conditionBlock = condition


lord_talk_ask_marriage_1_lord_courtship_pre_permission = Dialog("anyone", "{s15}", starting_state="lord_talk_ask_marriage_1", ending_state="lord_courtship_pre_permission")
def condition():
    if troop_type_001 == 0:
        troop_type_001 = troop_get_type(trp.player)
lord_talk_ask_marriage_1_lord_courtship_pre_permission.conditionBlock = condition


lord_talk_ask_marriage_1_lord_marriage_proposal_female_pc_confirm = Dialog("anyone", "Are you proposing that you and I marry?", starting_state="lord_talk_ask_marriage_1", ending_state="lord_marriage_proposal_female_pc_confirm")
def condition():
    if _marriage_candidate == _g_talk_troop:
        pass
lord_talk_ask_marriage_1_lord_marriage_proposal_female_pc_confirm.conditionBlock = condition


lord_courtship_pre_permission_lord_courtship_permission = Dialog("anyone|plyr", "May I {s15}suggest that I be considered as a groom?", starting_state="lord_courtship_pre_permission", ending_state="lord_courtship_permission")
def condition():
    if not troop_slot_ge(trp.player,30,1) and not troop_slot_ge(trp.player,34,1):
        troop_type_001 = troop_get_type(trp.player)
        if troop_type_001 == 0:
            str_clear(15)
            if troop_slot_eq(_g_talk_troop,38,-1):
                s15 = str_store_string(gstr.once_again_)
            #end
        #end
    #end
lord_courtship_pre_permission_lord_courtship_permission.conditionBlock = condition


lord_courtship_pre_permission_lord_marriage_permission_engagement_date = Dialog("anyone|plyr", "CHEAT -- Start engagement", starting_state="lord_courtship_pre_permission", ending_state="lord_marriage_permission_engagement_date")
def condition():
    if _cheat_mode == 2:
        pass
lord_courtship_pre_permission_lord_marriage_permission_engagement_date.conditionBlock = condition
def code():
    setup_quest_text(qst.formal_marriage_proposal)
    s2 = str_store_string(gstr.cheat__marriage_proposal)
    start_quest(qst.formal_marriage_proposal,_marriage_candidate)
    quest_set_slot(qst.formal_marriage_proposal,6,_marriage_candidate)
lord_courtship_pre_permission_lord_marriage_permission_engagement_date.codeBlock = code


lord_courtship_pre_permission_lord_pretalk = Dialog("anyone|plyr", "Never mind", starting_state="lord_courtship_pre_permission", ending_state="lord_pretalk")


lord_marriage_proposal_female_pc_confirm_lord_marriage_proposal_female_pc_reax = Dialog("anyone|plyr", "Yes. That is my proposal.", starting_state="lord_marriage_proposal_female_pc_confirm", ending_state="lord_marriage_proposal_female_pc_reax")


lord_marriage_proposal_female_pc_confirm_lord_pretalk = Dialog("anyone|plyr", "No, I think you have misunderstood me.", starting_state="lord_marriage_proposal_female_pc_confirm", ending_state="lord_pretalk")


lord_marriage_proposal_female_pc_reax_lord_pretalk = Dialog("anyone", "{s14}", starting_state="lord_marriage_proposal_female_pc_reax", ending_state="lord_pretalk")
def condition():
    if reg0 <= 0:
        npc_decision_checklist_marry_female_pc(_g_talk_troop)
lord_marriage_proposal_female_pc_reax_lord_pretalk.conditionBlock = condition


lord_marriage_proposal_female_pc_reax_lord_pretalk = Dialog("anyone", "{s14}", starting_state="lord_marriage_proposal_female_pc_reax", ending_state="lord_pretalk")
def condition():
    if reg0 == 2:
        npc_decision_checklist_marry_female_pc(_g_talk_troop)
lord_marriage_proposal_female_pc_reax_lord_pretalk.conditionBlock = condition
def code():
    troop_set_slot(_g_talk_troop,5,2)
lord_marriage_proposal_female_pc_reax_lord_pretalk.codeBlock = code


lord_marriage_proposal_female_pc_reax_lord_marriage_proposal_female_pc_next_step = Dialog("anyone", "{s14}", starting_state="lord_marriage_proposal_female_pc_reax", ending_state="lord_marriage_proposal_female_pc_next_step")


lord_marriage_proposal_female_pc_next_step_lord_marriage_proposal_female_pc_next_step_4 = Dialog("anyone", "I suppose the next step would be for me to send a message to your family, asking for their permission to marry you, but I suppose that you make your own decisions.", starting_state="lord_marriage_proposal_female_pc_next_step", ending_state="lord_marriage_proposal_female_pc_next_step_4")


lord_marriage_proposal_female_pc_next_step_4_lord_marriage_proposal_female_pc_next_step_5 = Dialog("anyone|plyr", "You assume correctly.", starting_state="lord_marriage_proposal_female_pc_next_step_4", ending_state="lord_marriage_proposal_female_pc_next_step_5")


lord_marriage_proposal_female_pc_next_step_5_lord_marriage_proposal_female_pc_confirm_engagement = Dialog("anyone", "Very well, then. As there are no obstacles to our marriage, should we then consider ourselves engaged to be wed? I will organize a great feast, and we can exchange our vows before all the lords of the realm. If you are willing, that is...", starting_state="lord_marriage_proposal_female_pc_next_step_5", ending_state="lord_marriage_proposal_female_pc_confirm_engagement")


lord_marriage_proposal_female_pc_confirm_engagement_lord_marriage_proposal_female_pc_confirm_engagement_yes = Dialog("anyone|plyr", "I am willing.", starting_state="lord_marriage_proposal_female_pc_confirm_engagement", ending_state="lord_marriage_proposal_female_pc_confirm_engagement_yes")
def code():
    troop_set_slot(_g_talk_troop,34,trp.player)
    troop_set_slot(trp.player,34,_g_talk_troop)
    _g_other_quest = 0
    if True:
        partner_quest_001 = store_partner_quest(_g_talk_troop)
        if partner_quest_001 > 0:
            _g_other_quest = partner_quest_001
        #end
    #end
    s4 = str_store_troop_name(_g_talk_troop)
    setup_quest_text(qst.wed_betrothed_female)
    s2 = str_store_string(gstr.you_plan_to_marry_s4_as_you_have_no_family_in_calradia_he_will_organize_the_wedding_feast)
    start_quest(qst.wed_betrothed_female,_g_talk_troop)
    quest_set_slot(qst.wed_betrothed_female,23,120)
    quest_set_slot(qst.wed_betrothed_female,6,_g_talk_troop)
lord_marriage_proposal_female_pc_confirm_engagement_lord_marriage_proposal_female_pc_confirm_engagement_yes.codeBlock = code


lord_marriage_proposal_female_pc_confirm_engagement_lord_marriage_proposal_female_pc_confirm_engagement_no = Dialog("anyone|plyr", "Actually, I would like to reconsider.", starting_state="lord_marriage_proposal_female_pc_confirm_engagement", ending_state="lord_marriage_proposal_female_pc_confirm_engagement_no")


lord_marriage_proposal_female_pc_confirm_engagement_yes_close_window = Dialog("anyone", "Very well. Hopefully, a little over a month from now, we shall be wed.{s12}", starting_state="lord_marriage_proposal_female_pc_confirm_engagement_yes", ending_state="close_window")
def condition():
    str_clear(12)
    if _g_other_quest > 0:
        succeed_quest(_g_other_quest)
        end_quest(_g_other_quest)
        s12 = str_store_string(gstr.cancel_fiancee_quest)
    #end
lord_marriage_proposal_female_pc_confirm_engagement_yes_close_window.conditionBlock = condition
def code():
    _g_leave_encounter = 1
lord_marriage_proposal_female_pc_confirm_engagement_yes_close_window.codeBlock = code


lord_marriage_proposal_female_pc_confirm_engagement_no_close_window = Dialog("anyone", "Take whatever time you need, my lady.", starting_state="lord_marriage_proposal_female_pc_confirm_engagement_no", ending_state="close_window")
def code():
    _g_leave_encounter = 1
lord_marriage_proposal_female_pc_confirm_engagement_no_close_window.codeBlock = code


lord_talk_party_encounter_lord_hostile_ultimatum_surrender = Dialog("anyone|plyr", "I say this only once, {s4}! Surrender or die!", starting_state="lord_talk", ending_state="party_encounter_lord_hostile_ultimatum_surrender")
def condition():
    if _talk_context == 2 and _g_encountered_party_relation < 0:
        s4 = str_store_troop_name(_g_talk_troop)
lord_talk_party_encounter_lord_hostile_ultimatum_surrender.conditionBlock = condition


party_encounter_lord_hostile_ultimatum_surrender_close_window = Dialog("anyone", "{s43}", starting_state="party_encounter_lord_hostile_ultimatum_surrender", ending_state="close_window")
def code():
    lord_comment_to_s43(_g_talk_troop,gstr.lord_challenged_default)
    make_kingdom_hostile_to_player(_g_encountered_party_faction,-3)
    if _g_talk_troop_relation > -10:
        change_player_relation_with_troop(_g_talk_troop,-1)
    #end
    _encountered_party_hostile = 1
    _encountered_party_friendly = 0
party_encounter_lord_hostile_ultimatum_surrender_close_window.codeBlock = code


lord_talk_lord_predemand = Dialog("anyone|plyr", "I'm here to deliver you my demands!", starting_state="lord_talk", ending_state="lord_predemand")
def condition():
    if _talk_context == 2 and _g_encountered_party_faction != _players_kingdom and _g_encountered_party_relation >= 0:
        pass
lord_talk_lord_predemand.conditionBlock = condition


lord_predemand_lord_demand = Dialog("anyone", "Eh? What do you want?", starting_state="lord_predemand", ending_state="lord_demand")


lord_demand_lord_ultimatum_surrender = Dialog("anyone|plyr", "I offer you one chance to surrender or die.", starting_state="lord_demand", ending_state="lord_ultimatum_surrender")
def condition():
    if _g_encountered_party_faction != _players_kingdom and _g_encountered_party_relation >= 0:
        pass
lord_demand_lord_ultimatum_surrender.conditionBlock = condition


lord_ultimatum_surrender_lord_attack_verify = Dialog("anyone", "{s43}", starting_state="lord_ultimatum_surrender", ending_state="lord_attack_verify")
def condition():
    if _g_encountered_party_relation >= 0:
        pass
lord_ultimatum_surrender_lord_attack_verify.conditionBlock = condition
def code():
    lord_comment_to_s43(_g_talk_troop,gstr.unprovoked_attack_default)
    if faction_slot_ge(_g_encountered_party_faction,120,1):
        s34 = str_store_faction_name(_g_encountered_party_faction)
        s43 = str_store_string(gstr.s43_just_so_you_know_if_you_attack_me_you_will_be_in_violation_of_the_truce_you_signed_with_the_s34)
    #end
    if _players_kingdom == fac.player_supporters_faction and faction_slot_eq(fac.player_supporters_faction,11,trp.player):
        s43 = str_store_string(gstr.s43_also_you_should_know_that_an_unprovoked_assault_is_declaration_of_war)
    #end
lord_ultimatum_surrender_lord_attack_verify.codeBlock = code


lord_attack_verify_lord_attack_verify_cancel = Dialog("anyone|plyr", "Forgive me sir. I don't know what I was thinking.", starting_state="lord_attack_verify", ending_state="lord_attack_verify_cancel")


lord_attack_verify_cancel_close_window = Dialog("anyone", "Be gone, then.", starting_state="lord_attack_verify_cancel", ending_state="close_window")
def code():
    change_player_relation_with_troop(_g_talk_troop,-1)
    _g_leave_encounter = 1
lord_attack_verify_cancel_close_window.codeBlock = code


lord_attack_verify_lord_attack_verify_commit = Dialog("anyone|plyr", "That is none of your business. Prepare to fight!", starting_state="lord_attack_verify", ending_state="lord_attack_verify_commit")


lord_ultimatum_surrender_lord_attack_verify_b = Dialog("anyone", "{s43}", starting_state="lord_ultimatum_surrender", ending_state="lord_attack_verify_b")
def code():
    lord_comment_to_s43(_g_talk_troop,gstr.unnecessary_attack_default)
    make_kingdom_hostile_to_player(_g_encountered_party_faction,-3)
    change_player_relation_with_troop(_g_talk_troop,-5)
    _encountered_party_hostile = 1
    _encountered_party_friendly = 0
lord_ultimatum_surrender_lord_attack_verify_b.codeBlock = code


lord_attack_verify_b_lord_attack_verify_cancel = Dialog("anyone|plyr", "Forgive me sir. I don't know what I was thinking.", starting_state="lord_attack_verify_b", ending_state="lord_attack_verify_cancel")


lord_attack_verify_b_lord_attack_verify_commit = Dialog("anyone|plyr", "I stand my ground. Prepare to fight!", starting_state="lord_attack_verify_b", ending_state="lord_attack_verify_commit")


lord_attack_verify_commit_close_window = Dialog("anyone", "{s43}", starting_state="lord_attack_verify_commit", ending_state="close_window")
def code():
    lord_comment_to_s43(_g_talk_troop,gstr.lord_challenged_default)
    if _g_encountered_party_relation >= 0:
        diplomacy_party_attacks_neutral(p.main_party,_g_encountered_party)
    #end
    if _players_kingdom != fac.player_supporters_faction:
        make_kingdom_hostile_to_player(_g_encountered_party_faction,-3)
    elif _players_kingdom == fac.player_supporters_faction:
        diplomacy_start_war_between_kingdoms(fac.player_supporters_faction,_g_encountered_party_faction,1)
    #end
    _encountered_party_hostile = 1
    _encountered_party_friendly = 0
    change_player_relation_with_troop(_g_talk_troop,-30)
lord_attack_verify_commit_close_window.codeBlock = code


lord_demand_lord_pretalk = Dialog("anyone|plyr", "Forgive me. It's nothing.", starting_state="lord_demand", ending_state="lord_pretalk")


lord_talk_liege_defends_claim_1 = Dialog("anyone|plyr", "I have met in my travels one who calls {reg3?herself:himself} {s45}...", starting_state="lord_talk", ending_state="liege_defends_claim_1")
def condition():
    if faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop) and troop_slot_eq(_g_talk_troop,78,0):
        troop_id_001 = 0
        for trp_002 in range(trp.kingdom_1_pretender, trp.knight_1_1_wife):
            if troop_slot_eq(trp_002,14,_g_talk_x_troop_faction):
                troop_id_001 = trp_002
            #end
        #end
    #end
    if troop_slot_ge(troop_id_001,5,1):
        s45 = str_store_troop_name(troop_id_001)
        reg3 = troop_get_type(troop_id_001)
lord_talk_liege_defends_claim_1.conditionBlock = condition


liege_defends_claim_1_liege_defends_claim_2 = Dialog("anyone", "Oh really? It is not everyone who dares mention that name in my presence. I am not sure whether to reward your bravery, or punish you for your impudence.", starting_state="liege_defends_claim_1", ending_state="liege_defends_claim_2")
def code():
    troop_set_slot(_g_talk_troop,78,1)
liege_defends_claim_1_liege_defends_claim_2.codeBlock = code


liege_defends_claim_2_liege_defends_claim_3 = Dialog("anyone", "Very well. I will indulge your curiosity. But listen closely, because I do not wish to speak of this matter again.", starting_state="liege_defends_claim_2", ending_state="liege_defends_claim_3")


liege_defends_claim_3_liege_defends_claim_4 = Dialog("anyone", "{s48}", starting_state="liege_defends_claim_3", ending_state="liege_defends_claim_4")
def code():
    var001 = _g_talk_x_troop_faction - fac.kingdom_1
    var001 += gstr.swadian_rebellion_monarch_response_1
    s48 = str_store_string(var001)
liege_defends_claim_3_liege_defends_claim_4.codeBlock = code


liege_defends_claim_4_lord_talk = Dialog("anyone", "{s48}", starting_state="liege_defends_claim_4", ending_state="lord_talk")
def code():
    var001 = _g_talk_x_troop_faction - fac.kingdom_1
    var001 += gstr.swadian_rebellion_monarch_response_2
    s48 = str_store_string(var001)
liege_defends_claim_4_lord_talk.codeBlock = code


lord_talk_lord_join_rebellion_suggest_cheat = Dialog("anyone|plyr", "{!}CHEAT - Join our cause by force.", starting_state="lord_talk", ending_state="lord_join_rebellion_suggest_cheat")
def condition():
    if _cheat_mode == 2 and _supported_pretender > 0 and _supported_pretender_old_faction == _g_talk_x_troop_faction and not faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop) and troop_slot_ge(_g_talk_troop,10,1):
        pass
lord_talk_lord_join_rebellion_suggest_cheat.conditionBlock = condition


party_encounter_lord_hostile_attacker_2_lord_join_rebellion_suggest_cheat = Dialog("anyone|plyr", "{!}CHEAT - Join our cause by force.", starting_state="party_encounter_lord_hostile_attacker_2", ending_state="lord_join_rebellion_suggest_cheat")
def condition():
    if _cheat_mode == 2 and _supported_pretender > 0 and _supported_pretender_old_faction == _g_talk_x_troop_faction and not faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop) and troop_slot_ge(_g_talk_troop,10,1):
        pass
party_encounter_lord_hostile_attacker_2_lord_join_rebellion_suggest_cheat.conditionBlock = condition


lord_join_rebellion_suggest_cheat_close_window = Dialog("anyone", "Cheat:Allright.", starting_state="lord_join_rebellion_suggest_cheat", ending_state="close_window")
def code():
    troop_set_slot(_g_talk_troop,78,1)
    change_troop_faction(_g_talk_troop,_players_kingdom)
    _g_leave_encounter = 1
lord_join_rebellion_suggest_cheat_close_window.codeBlock = code


lord_talk_lord_prison_break_chains = Dialog("anyone|plyr", "I've come to break you out of here.", starting_state="lord_talk", ending_state="lord_prison_break_chains")
def condition():
    if is_between(troop_slot_001,p.town_1,p.salt_mine) and not party_slot_eq(troop_slot_001,7,trp.player) and _talk_context != 18:
        troop_slot_001 = troop_get_slot(_g_talk_troop,8)
lord_talk_lord_prison_break_chains.conditionBlock = condition


lord_prison_break_chains_close_window = Dialog("anyone", "Thank the heavens you came! However, I'm not going anywhere with these chains on my legs. You'll need to get the key away from the guard somehow.", starting_state="lord_prison_break_chains", ending_state="close_window")


lord_talk_lord_suggest_action_ask = Dialog("anyone|plyr", "{!}CHEAT - Take the following action.", starting_state="lord_talk", ending_state="lord_suggest_action_ask")
def condition():
    if _cheat_mode >= 1 and not troop_slot_ge(_g_talk_troop,8,0):
        pass
lord_talk_lord_suggest_action_ask.conditionBlock = condition


lord_tell_objective_lord_pretalk = Dialog("anyone", "What am I doing? What does it look like I'm doing?! I'm a prisoner here!", starting_state="lord_tell_objective", ending_state="lord_pretalk")
def condition():
    if troop_slot_ge(_g_talk_troop,8,0):
        pass
lord_tell_objective_lord_pretalk.conditionBlock = condition


lord_tell_objective_lord_pretalk_1 = Dialog("anyone", "I am not commanding any men at the moment.", starting_state="lord_tell_objective", ending_state="lord_pretalk")
def condition():
    if troop_slot_eq(_g_talk_troop,10,-1):
        pass
lord_tell_objective_lord_pretalk_1.conditionBlock = condition


lord_tell_objective_lord_pretalk_2 = Dialog("anyone", "We are resting at {s1}. {s14}{s15}", starting_state="lord_tell_objective", ending_state="lord_pretalk")
def condition():
    if party_slot_eq(_g_talk_troop_party,4,7):
        party_attached_001 = party_get_attached_to(_g_talk_troop_party)
        if party_attached_001 < 0:
            party_attached_001 = party_get_cur_town(_g_talk_troop_party)
            if is_between(party_attached_001,p.town_1,p.salt_mine):
                pass
            #end
        #end
    #end
lord_tell_objective_lord_pretalk_2.conditionBlock = condition
def code():
    party_slot_001 = party_get_slot(_g_talk_troop_party,5)
    s1 = str_store_party_name(party_slot_001)
lord_tell_objective_lord_pretalk_2.codeBlock = code


lord_tell_objective_lord_pretalk_3 = Dialog("anyone", "We are travelling to {s1}. {s14}{s15}", starting_state="lord_tell_objective", ending_state="lord_pretalk")
def condition():
    if party_slot_eq(_g_talk_troop_party,4,7):
        pass
lord_tell_objective_lord_pretalk_3.conditionBlock = condition
def code():
    party_slot_001 = party_get_slot(_g_talk_troop_party,5)
    s1 = str_store_party_name(party_slot_001)
lord_tell_objective_lord_pretalk_3.codeBlock = code


lord_tell_objective_lord_tell_objective_2 = Dialog("anyone|auto_proceed", "{!}Warning: This line should never display.", starting_state="lord_tell_objective", ending_state="lord_tell_objective_2")
def condition():
    if faction_slot_eq(_g_talk_x_troop_faction,8,_g_talk_troop) and party_slot_eq(_g_talk_troop_party,4,16):
        pass
lord_tell_objective_lord_tell_objective_2.conditionBlock = condition


lord_tell_objective_2_lord_pretalk = Dialog("anyone", "I am heading to the vicinity of {s1}. {s14}{s15}", starting_state="lord_tell_objective_2", ending_state="lord_pretalk")
def code():
    party_slot_001 = party_get_slot(_g_talk_troop_party,5)
    s1 = str_store_party_name(party_slot_001)
lord_tell_objective_2_lord_pretalk.codeBlock = code


lord_tell_objective_lord_pretalk_4 = Dialog("anyone", "We are recruiting new soldiers from {s1}. {s14}{s15}", starting_state="lord_tell_objective", ending_state="lord_pretalk")
def condition():
    if party_slot_eq(_g_talk_troop_party,4,16):
        pass
lord_tell_objective_lord_pretalk_4.conditionBlock = condition
def code():
    party_slot_001 = party_get_slot(_g_talk_troop_party,5)
    s1 = str_store_party_name(party_slot_001)
lord_tell_objective_lord_pretalk_4.codeBlock = code


lord_tell_objective_lord_pretalk_5 = Dialog("anyone", "We are scouting for the enemy around {s1}. {s14}{s15}", starting_state="lord_tell_objective", ending_state="lord_pretalk")
def condition():
    if party_slot_eq(_g_talk_troop_party,4,4):
        pass
lord_tell_objective_lord_pretalk_5.conditionBlock = condition
def code():
    party_slot_001 = party_get_slot(_g_talk_troop_party,5)
    s1 = str_store_party_name(party_slot_001)
lord_tell_objective_lord_pretalk_5.codeBlock = code


lord_tell_objective_lord_pretalk_6 = Dialog("anyone", "We are laying waste to the village of {s1}. {s14}{s15}", starting_state="lord_tell_objective", ending_state="lord_pretalk")
def condition():
    if party_slot_eq(_g_talk_troop_party,4,5):
        party_slot_001 = party_get_slot(_g_talk_troop_party,5)
        s1 = str_store_party_name(party_slot_001)
lord_tell_objective_lord_pretalk_6.conditionBlock = condition


lord_tell_objective_lord_pretalk_7 = Dialog("anyone", "We are retreating to {s1}. {s14}{s15}", starting_state="lord_tell_objective", ending_state="lord_pretalk")
def condition():
    if party_slot_eq(_g_talk_troop_party,4,14):
        pass
lord_tell_objective_lord_pretalk_7.conditionBlock = condition
def code():
    party_slot_001 = party_get_slot(_g_talk_troop_party,5)
    s1 = str_store_party_name(party_slot_001)
lord_tell_objective_lord_pretalk_7.codeBlock = code


lord_tell_objective_lord_pretalk_8 = Dialog("anyone", "We are besieging {s1}. {s14}{s15}", starting_state="lord_tell_objective", ending_state="lord_pretalk")
def condition():
    if party_slot_eq(_g_talk_troop_party,4,1):
        pass
lord_tell_objective_lord_pretalk_8.conditionBlock = condition
def code():
    party_slot_001 = party_get_slot(_g_talk_troop_party,5)
    s1 = str_store_party_name(party_slot_001)
lord_tell_objective_lord_pretalk_8.codeBlock = code


lord_tell_objective_lord_pretalk_9 = Dialog("anyone", "We are fighting against {s1}. {s14}{s15}", starting_state="lord_tell_objective", ending_state="lord_pretalk")
def condition():
    if party_slot_eq(_g_talk_troop_party,4,10):
        if party_is_active(party_slot_001):
            party_slot_001 = party_get_slot(_g_talk_troop_party,5)
lord_tell_objective_lord_pretalk_9.conditionBlock = condition
def code():
    party_slot_001 = party_get_slot(_g_talk_troop_party,5)
    s1 = str_store_party_name(party_slot_001)
lord_tell_objective_lord_pretalk_9.codeBlock = code


lord_tell_objective_lord_pretalk_10 = Dialog("anyone", "I am screening {s1}'s advance. {s14}{s15}", starting_state="lord_tell_objective", ending_state="lord_pretalk")
def condition():
    if party_slot_eq(_g_talk_troop_party,4,12):
        pass
lord_tell_objective_lord_pretalk_10.conditionBlock = condition
def code():
    party_slot_001 = party_get_slot(_g_talk_troop_party,5)
    troop_id_002 = party_stack_get_troop_id(party_slot_001,0)
    s1 = str_store_troop_name(troop_id_002)
lord_tell_objective_lord_pretalk_10.codeBlock = code


lord_tell_objective_lord_pretalk_11 = Dialog("anyone", "We are accompanying {s1}. {s14}{s15}", starting_state="lord_tell_objective", ending_state="lord_pretalk")
def condition():
    if party_slot_eq(_g_talk_troop_party,4,11):
        pass
lord_tell_objective_lord_pretalk_11.conditionBlock = condition
def code():
    party_slot_001 = party_get_slot(_g_talk_troop_party,5)
    s1 = str_store_party_name(party_slot_001)
lord_tell_objective_lord_pretalk_11.codeBlock = code


lord_tell_objective_lord_talk_ask_about_strategy = Dialog("anyone", "I am leading the army of the realm.", starting_state="lord_tell_objective", ending_state="lord_talk_ask_about_strategy")
def condition():
    if faction_slot_eq(_g_talk_x_troop_faction,8,_g_talk_troop) and not faction_slot_eq(_g_talk_x_troop_faction,4,0) and not faction_slot_eq(_g_talk_x_troop_faction,4,6):
        pass
lord_tell_objective_lord_talk_ask_about_strategy.conditionBlock = condition


lord_tell_objective_lord_pretalk_12 = Dialog("anyone", "We are reconsidering our next objective.", starting_state="lord_tell_objective", ending_state="lord_pretalk")
def condition():
    var001 = 0
    if party_slot_eq(_g_talk_troop_party,4,-1):
        var001 = 1
    elif party_slot_eq(_g_talk_troop_party,4,10):
        party_slot_002 = party_get_slot(_g_talk_troop_party,5)
        if not party_is_active(party_slot_002):
            var001 = 1
            if var001 == 1:
                pass
            #end
        #end
    #end
lord_tell_objective_lord_pretalk_12.conditionBlock = condition


lord_tell_objective_lord_pretalk_13 = Dialog("anyone", "I don't know: {reg1} {s1} (ERROR)", starting_state="lord_tell_objective", ending_state="lord_pretalk")
def code():
    reg1 = party_get_slot(_g_talk_troop_party,4)
    party_slot_001 = party_get_slot(_g_talk_troop_party,5)
    s1 = str_store_party_name(party_slot_001)
lord_tell_objective_lord_pretalk_13.codeBlock = code


lord_talk_lord_ask_follow = Dialog("anyone|plyr", "Will you follow me? I have a plan.", starting_state="lord_talk", ending_state="lord_ask_follow")
def condition():
    if _talk_context == 2 and 1 == 0 and _g_talk_x_troop_faction == _players_kingdom and party_slot_eq(_g_encountered_party,31,0) and not faction_slot_eq(_g_talk_x_troop_faction,8,trp.player):
        pass
lord_talk_lord_ask_follow.conditionBlock = condition


lord_ask_follow_close_window = Dialog("anyone", "I enjoy your company, {playername}, but there are other things I must attend to. Perhaps in a few days I can ride with you again.", starting_state="lord_ask_follow", ending_state="close_window")
def condition():
    party_slot_001 = party_get_slot(_g_encountered_party,33)
    if cur_hours_002 < party_slot_001:
        cur_hours_002 = store_current_hours()
lord_ask_follow_close_window.conditionBlock = condition
def code():
    _g_leave_encounter = 1
lord_ask_follow_close_window.codeBlock = code


lord_ask_follow_close_window_1 = Dialog("anyone", "That would hardly be proper, {playername}. Why don't you follow me instead?", starting_state="lord_ask_follow", ending_state="close_window")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,7)
    troop_slot_002 = troop_get_slot(trp.player,7)
    troop_slot_001 *= 3
    if troop_slot_002 < troop_slot_001:
        troop_slot_001 /= 4
lord_ask_follow_close_window_1.conditionBlock = condition
def code():
    _g_leave_encounter = 1
lord_ask_follow_close_window_1.codeBlock = code


lord_ask_follow_close_window_2 = Dialog("anyone", "{s43}", starting_state="lord_ask_follow", ending_state="close_window")
def condition():
    if _g_talk_troop_effective_relation < 25:
        pass
lord_ask_follow_close_window_2.conditionBlock = condition
def code():
    lord_comment_to_s43(_g_talk_troop,gstr.lord_follow_refusal_default)
    _g_leave_encounter = 1
lord_ask_follow_close_window_2.codeBlock = code


lord_ask_follow_close_window_3 = Dialog("anyone", "Lead the way, {playername}! Let us bring death and defeat to all our enemies.", starting_state="lord_ask_follow", ending_state="close_window")
def code():
    party_set_slot(_g_talk_troop_party,30,p.main_party)
    npc_decision_checklist_party_ai(_g_talk_troop)
    party_set_ai_state(_g_talk_troop_party,reg0,reg1)
    cur_hours_001 = store_current_hours()
    var002 = 30 + _g_talk_troop_relation
    var002 /= 2
    cur_hours_001 += var002
    party_set_slot(_g_encountered_party,32,cur_hours_001)
    party_set_slot(_g_encountered_party,31,1)
    _g_leave_encounter = 1
lord_ask_follow_close_window_3.codeBlock = code


lord_talk_preoffer_lord_talk_offer = Dialog("anyone", "Yes?", starting_state="lord_talk_preoffer", ending_state="lord_talk_offer")


lord_talk_offer_knight_offer_join = Dialog("anyone|plyr", "I wish to ransom one of your prisoners.", starting_state="lord_talk_offer", ending_state="knight_offer_join")
def condition():
    if 1 == 0:
        pass
lord_talk_offer_knight_offer_join.conditionBlock = condition


lord_talk_offer_lord_pretalk = Dialog("anyone|plyr", "Never mind.", starting_state="lord_talk_offer", ending_state="lord_pretalk")


knight_offer_join_hero_pretalk = Dialog("anyone", "I fear I cannot join you at the moment, {playername}, I've important business to attend to and it cannot wait.", starting_state="knight_offer_join", ending_state="hero_pretalk")
def condition():
    if call_script(script.cf_is_quest_troop,_g_talk_troop):
        pass
knight_offer_join_hero_pretalk.conditionBlock = condition


knight_offer_join_hero_pretalk_1 = Dialog("anyone", "You forget your place, {sir/madam}. I do not take orders from the likes of you.", starting_state="knight_offer_join", ending_state="hero_pretalk")
def condition():
    if _g_talk_troop_relation < 5:
        character_lvl_001 = store_character_level(trp.player)
        character_lvl_002 = store_character_level(_g_talk_troop)
        if character_lvl_001 < character_lvl_002:
            character_lvl_001 *= 2
knight_offer_join_hero_pretalk_1.conditionBlock = condition


knight_offer_join_knight_offer_join_2 = Dialog("anyone", "I would be glad to fight at your side, my friend, but there is a problem... The thing is, I've found myself in a bit of debt that I must repay very soon. {reg6} denars altogether, and I am honour-bound to return every coin. Unless you've got {reg6} denars with you that you can spare, I've to keep my mind on getting this weight off my neck.", starting_state="knight_offer_join", ending_state="knight_offer_join_2")
def condition():
    var001 = 0
    for trp_002 in range(trp.npc1, trp.heroes_end):
        if troop_slot_eq(trp_002,2,5):
            var001 += 1
        #end
    #end
    reg5 = var001
    reg6 = reg5 + 1
    reg6 *= reg6
    if reg6 > 0:
        reg6 *= 1000
knight_offer_join_knight_offer_join_2.conditionBlock = condition


knight_offer_join_close_window = Dialog("anyone", "Join you? I think not.", starting_state="knight_offer_join", ending_state="close_window")
def condition():
    if reg6 > 100000:
        pass
knight_offer_join_close_window.conditionBlock = condition


knight_offer_join_knight_offer_join_2_1 = Dialog("anyone", "Aye, my friend, I'll be happy to join you.", starting_state="knight_offer_join", ending_state="knight_offer_join_2")


knight_offer_join_2_knight_offer_join_accept = Dialog("anyone|plyr", "Here, take it, all {reg6} denars you need. 'Tis only money.", starting_state="knight_offer_join_2", ending_state="knight_offer_join_accept")
def condition():
    if reg6 > 0:
        if troop_gold_001 > reg6:
            troop_gold_001 = store_troop_gold(trp.player)
knight_offer_join_2_knight_offer_join_accept.conditionBlock = condition
def code():
    troop_remove_gold(trp.player,reg6)
knight_offer_join_2_knight_offer_join_accept.codeBlock = code


knight_offer_join_2_knight_offer_join_accept_1 = Dialog("anyone|plyr", "Then let us ride together, my friend.", starting_state="knight_offer_join_2", ending_state="knight_offer_join_accept")
def condition():
    if reg6 <= 0:
        pass
knight_offer_join_2_knight_offer_join_accept_1.conditionBlock = condition


knight_offer_join_2_close_window = Dialog("anyone|plyr", "That's good to know. I will think on it.", starting_state="knight_offer_join_2", ending_state="close_window")
def condition():
    if _talk_context == 8:
        pass
knight_offer_join_2_close_window.conditionBlock = condition


knight_offer_join_2_hero_pretalk = Dialog("anyone|plyr", "That's good to know. I will think on it.", starting_state="knight_offer_join_2", ending_state="hero_pretalk")
def condition():
    if _talk_context != 8:
        pass
knight_offer_join_2_hero_pretalk.conditionBlock = condition


knight_offer_join_accept_knight_offer_join_accept_party = Dialog("anyone", "I've some trusted men in my band who could be of use to you. What do you wish to do with them?", starting_state="knight_offer_join_accept", ending_state="knight_offer_join_accept_party")
def condition():
    if troop_slot_ge(_g_talk_troop,10,1):
        pass
knight_offer_join_accept_knight_offer_join_accept_party.conditionBlock = condition


knight_offer_join_accept_close_window = Dialog("anyone", "Ah, certainly, it might be fun!", starting_state="knight_offer_join_accept", ending_state="close_window")
def code():
    recruit_troop_as_companion(_g_talk_troop)
    _g_leave_encounter = 1
knight_offer_join_accept_close_window.codeBlock = code


knight_offer_join_accept_party_knight_join_party_disband = Dialog("anyone|plyr", "You may disband your men. I've no need for other troops.", starting_state="knight_offer_join_accept_party", ending_state="knight_join_party_disband")


knight_offer_join_accept_party_knight_join_party_join = Dialog("anyone|plyr", "Your men may join as well. We need every soldier we can muster.", starting_state="knight_offer_join_accept_party", ending_state="knight_join_party_join")
def condition():
    if party_can_join_party(troop_slot_001,p.main_party):
        troop_slot_001 = troop_get_slot(_g_talk_troop,10)
knight_offer_join_accept_party_knight_join_party_join.conditionBlock = condition


knight_offer_join_accept_party_knight_join_party_lead_out = Dialog("anyone|plyr", "Lead your men out of the town. I shall catch up with you on the road.", starting_state="knight_offer_join_accept_party", ending_state="knight_join_party_lead_out")
def condition():
    if is_between(_g_encountered_party,p.town_1,p.salt_mine):
        pass
knight_offer_join_accept_party_knight_join_party_lead_out.conditionBlock = condition


knight_offer_join_accept_party_knight_join_party_lead_out_1 = Dialog("anyone|plyr", "Keep doing what you were doing. I'll catch up with you later.", starting_state="knight_offer_join_accept_party", ending_state="knight_join_party_lead_out")
def condition():
    if not is_between(_g_encountered_party,p.town_1,p.salt_mine):
        pass
knight_offer_join_accept_party_knight_join_party_lead_out_1.conditionBlock = condition


knight_join_party_disband_close_window = Dialog("anyone", "Ah . . . Very well, {playername}. Much as I dislike losing good men, the decision is yours. I'll disband my troops and join you.", starting_state="knight_join_party_disband", ending_state="close_window")
def code():
    recruit_troop_as_companion(_g_talk_troop)
    troop_slot_001 = troop_get_slot(_g_talk_troop,10)
    party_detach(troop_slot_001)
    remove_party(troop_slot_001)
    _g_leave_encounter = 1
knight_join_party_disband_close_window.codeBlock = code


knight_join_party_join_close_window = Dialog("anyone", "Excellent. My lads and I will ride with you.", starting_state="knight_join_party_join", ending_state="close_window")
def code():
    recruit_troop_as_companion(_g_talk_troop)
    party_remove_members(p.main_party,_g_talk_troop,1)
    troop_slot_001 = troop_get_slot(_g_talk_troop,10)
    _g_move_heroes = 1
    party_add_party(p.main_party,troop_slot_001)
    party_detach(troop_slot_001)
    remove_party(troop_slot_001)
    _g_leave_encounter = 1
knight_join_party_join_close_window.codeBlock = code


knight_join_party_lead_out_close_window = Dialog("anyone", "Very well then. I shall maintain a patrol of this area. Return if you have further orders for me.", starting_state="knight_join_party_lead_out", ending_state="close_window")
def code():
    recruit_troop_as_companion(_g_talk_troop)
    party_remove_members(p.main_party,_g_talk_troop,1)
    troop_slot_001 = troop_get_slot(_g_talk_troop,10)
    party_set_faction(troop_slot_001,fac.player_supporters_faction)
    party_detach(troop_slot_001)
    party_set_ai_behavior(troop_slot_001,2)
    party_set_flags(troop_slot_001,65536,0)
knight_join_party_lead_out_close_window.codeBlock = code


lord_enter_service_reject_close_window = Dialog("anyone", "Indeed.... Did you offer vassalage, then, just to by time? Very well -- you shall have time to reconsider, but if you are toying with me, it will do your reputation no credit.", starting_state="lord_enter_service_reject", ending_state="close_window")
def condition():
    if _players_kingdom == fac.player_supporters_faction:
        pass
lord_enter_service_reject_close_window.conditionBlock = condition
def code():
    _g_leave_encounter = 1
lord_enter_service_reject_close_window.codeBlock = code


lord_give_oath_give_up_close_window = Dialog("anyone", "Indeed.... Did you offer vassalage, then, just to buy time? Very well -- you shall have time to reconsider, but if you are toying with me, it will do your reputation no credit.", starting_state="lord_give_oath_give_up", ending_state="close_window")
def condition():
    if _players_kingdom == fac.player_supporters_faction:
        pass
lord_give_oath_give_up_close_window.conditionBlock = condition
def code():
    _g_leave_encounter = 1
lord_give_oath_give_up_close_window.codeBlock = code


lord_enter_service_reject_close_window_1 = Dialog("anyone", "What pigswill! And to think I would offer you a place among my nobles. Begone, beggar, before I lose my temper!", starting_state="lord_enter_service_reject", ending_state="close_window")
def code():
    if True:
        partner_quest_001 = store_partner_quest()
        if partner_quest_001 == qst.join_faction:
            abort_quest(qst.join_faction,1)
        #end
    #end
    _g_invite_faction = 0
    _g_invite_faction_lord = 0
    _g_invite_offered_center = 0
    _g_leave_encounter = 1
lord_enter_service_reject_close_window_1.codeBlock = code


lord_ask_enter_service_lord_give_oath_under_oath_already = Dialog("anyone", "You are already oath-bound to serve {s5}, are you not?", starting_state="lord_ask_enter_service", ending_state="lord_give_oath_under_oath_already")
def condition():
    if _players_kingdom > 0 and _players_kingdom != _g_talk_x_troop_faction:
        faction_slot_001 = faction_get_slot(_players_kingdom,11)
        if faction_slot_001 != trp.player:
            s5 = str_store_troop_name(faction_slot_001)
lord_ask_enter_service_lord_give_oath_under_oath_already.conditionBlock = condition


lord_give_oath_under_oath_already_lord_pretalk = Dialog("anyone|plyr", "Indeed I am, {s65}. Forgive my rambling.", starting_state="lord_give_oath_under_oath_already", ending_state="lord_pretalk")


lord_ask_enter_service_lord_pretalk = Dialog("anyone", "I accept oaths only from those I can trust to keep them, {playername}.", starting_state="lord_ask_enter_service", ending_state="lord_pretalk")
def condition():
    if _g_talk_troop_effective_relation < -5:
        pass
lord_ask_enter_service_lord_pretalk.conditionBlock = condition


lord_ask_enter_service_lord_ask_enter_service_female_2 = Dialog("anyone", "My lady, you seem to have the makings of a good war leader. For a woman to show such skill is an uncommon thing in Calradia, but not completely without precedent. Noblewomen have often taken command of armies after their husbands or fathers were slain or captured, for example.", starting_state="lord_ask_enter_service", ending_state="lord_ask_enter_service_female_2")
def condition():
    troop_type_001 = troop_get_type(trp.player)
    if troop_type_001 == 1:
        for p_002 in range(p.town_1, p.salt_mine):
            if party_slot_eq(p_002,7,trp.player):
                _bypass_female_vassal_explanation = 1
                if _bypass_female_vassal_explanation == 0:
                    pass
                #end
            #end
        #end
    #end
lord_ask_enter_service_lord_ask_enter_service_female_2.conditionBlock = condition
def code():
    _bypass_female_vassal_explanation = 1
lord_ask_enter_service_lord_ask_enter_service_female_2.codeBlock = code


lord_ask_enter_service_female_2_lord_ask_enter_service_female_response = Dialog("anyone", "However, I have never heard of a king who granted a fief to a woman, no matter how valorous, simply because he needed an extra vassal. Were I to do such a thing, I would raise eyebrows across Calradia. Men would say that I was besotted or bewitched, or that I aimed to overturn the natural order of things. As much as I regret it, I cannot afford to grant you a fief.", starting_state="lord_ask_enter_service_female_2", ending_state="lord_ask_enter_service_female_response")


lord_ask_enter_service_female_response_lord_ask_enter_service_female_solution_capture = Dialog("anyone|plyr", "What if I were to take one of your enemy's castles by force?", starting_state="lord_ask_enter_service_female_response", ending_state="lord_ask_enter_service_female_solution_capture")


lord_ask_enter_service_female_response_lord_ask_enter_service_female_solution_marriage = Dialog("anyone|plyr", "What if I were to marry one of your lords?", starting_state="lord_ask_enter_service_female_response", ending_state="lord_ask_enter_service_female_solution_marriage")
def condition():
    if not troop_slot_ge(trp.player,30,trp.npc1):
        pass
lord_ask_enter_service_female_response_lord_ask_enter_service_female_solution_marriage.conditionBlock = condition


lord_ask_enter_service_female_response_lord_ask_enter_service_female_solution_competitor = Dialog("anyone|plyr", "Perhaps one of your competitors will prove to be more open-minded.", starting_state="lord_ask_enter_service_female_response", ending_state="lord_ask_enter_service_female_solution_competitor")


lord_ask_enter_service_female_response_lord_ask_enter_service = Dialog("anyone|plyr", "I would be willing to fight for you, even without the fief.", starting_state="lord_ask_enter_service_female_response", ending_state="lord_ask_enter_service")


lord_ask_enter_service_female_response_lord_pretalk = Dialog("anyone|plyr", "Never mind.", starting_state="lord_ask_enter_service_female_response", ending_state="lord_pretalk")


lord_ask_enter_service_female_solution_marriage_lord_ask_enter_service_female_response = Dialog("anyone", "Well, I still would not be willing to grant you any fiefs. However, you would no doubt have the use of your husband's properties, which would allow you to act as one of my vassals in all but name. Did you have an other questions?", starting_state="lord_ask_enter_service_female_solution_marriage", ending_state="lord_ask_enter_service_female_response")


lord_ask_enter_service_female_solution_competitor_lord_ask_enter_service_female_response = Dialog("anyone", "Oh, perhaps you might find someone who was truly desperate -- but then, I would think, they would not have many fiefs to bestow. Did you have an other questions?", starting_state="lord_ask_enter_service_female_solution_competitor", ending_state="lord_ask_enter_service_female_response")


lord_ask_enter_service_female_solution_capture_lord_ask_enter_service_female_response = Dialog("anyone", "Well, in that case, depending on the circumstances, I might be inclined to let you keep it. Did you have an other questions?", starting_state="lord_ask_enter_service_female_solution_capture", ending_state="lord_ask_enter_service_female_response")


lord_ask_enter_service_lord_give_oath_1 = Dialog("anyone", "You are known as a brave {man-at-arms/warrior} and a fine leader of men, {playername}. I shall be pleased to accept your sword into my service and bestow vassalage upon you, if you are ready to swear homage to me.", starting_state="lord_ask_enter_service", ending_state="lord_give_oath_1")
def condition():
    _g_invite_offered_center = -1
    troop_slot_001 = troop_get_slot(trp.player,7)
    var002 = _g_talk_troop_effective_relation * 5
    var002 += troop_slot_001
    get_number_of_hero_centers(trp.player)
    var003 = reg0
    var004 = var003 * 50
    var002 += var004
    if var002 >= 150:
        if True:
            troop_type_005 = troop_get_type(trp.player)
            if troop_type_005 == 0 and var003 == 0:
                get_poorest_village_of_faction(_g_talk_x_troop_faction)
                if reg0 > 0:
                    _g_invite_offered_center = reg0
                #end
            #end
        #end
    #end
lord_ask_enter_service_lord_give_oath_1.conditionBlock = condition


lord_ask_enter_service_lord_pretalk_1 = Dialog("anyone", "You've yet to show yourself as a competent commander, {playername}. Take your sword to my enemies and prove to me that you are worthy of becoming my vassal. Then we may speak more of this.", starting_state="lord_ask_enter_service", ending_state="lord_pretalk")


lord_give_oath_1_lord_give_oath_2 = Dialog("anyone|plyr", "I am ready, {s65}.", starting_state="lord_give_oath_1", ending_state="lord_give_oath_2")


lord_give_oath_1_lord_give_oath_give_up = Dialog("anyone|plyr", "Forgive me, {s65}, I must give the matter more thought first...", starting_state="lord_give_oath_1", ending_state="lord_give_oath_give_up")


lord_give_oath_give_up_lord_pretalk = Dialog("anyone", "Take whatever time you need, my lady.", starting_state="lord_give_oath_give_up", ending_state="lord_pretalk")
def condition():
    if troop_type_001 == 1:
        troop_type_001 = troop_get_type(trp.player)
lord_give_oath_give_up_lord_pretalk.conditionBlock = condition


lord_give_oath_give_up_close_window_1 = Dialog("anyone", "What are you playing at, {playername}? Go and make up your mind, and stop wasting my time.", starting_state="lord_give_oath_give_up", ending_state="close_window")
def code():
    _g_leave_encounter = 1
lord_give_oath_give_up_close_window_1.codeBlock = code


lord_give_oath_2_lord_give_oath_3 = Dialog("anyone", "Good. Then repeat the words of the oath with me: I swear homage to you as lawful ruler of the {s41}.", starting_state="lord_give_oath_2", ending_state="lord_give_oath_3")
def code():
    s41 = str_store_faction_name(_g_talk_x_troop_faction)
    if is_between(_g_talk_troop,trp.kingdom_1_pretender,trp.knight_1_1_wife) and not troop_slot_eq(_g_talk_troop,2,2):
        troop_slot_001 = troop_get_slot(_g_talk_troop,14)
        s41 = str_store_faction_name(troop_slot_001)
    #end
lord_give_oath_2_lord_give_oath_3.codeBlock = code


lord_give_oath_3_lord_give_oath_4 = Dialog("anyone|plyr", "I pledge homage to you as lawful ruler of the {s41}.", starting_state="lord_give_oath_3", ending_state="lord_give_oath_4")


lord_give_oath_3_lord_give_oath_give_up = Dialog("anyone|plyr", "Excuse me, {reg65?my lady:sir}. But I feel I need to think about this.", starting_state="lord_give_oath_3", ending_state="lord_give_oath_give_up")


lord_give_oath_4_lord_give_oath_5 = Dialog("anyone", "I will remain as your loyal and devoted {man/follower} as long as my breath remains....", starting_state="lord_give_oath_4", ending_state="lord_give_oath_5")


lord_give_oath_5_lord_give_oath_6 = Dialog("anyone|plyr", "I will remain as your loyal and devoted {man/follower} as long as my breath remains...", starting_state="lord_give_oath_5", ending_state="lord_give_oath_6")


lord_give_oath_5_lord_give_oath_give_up = Dialog("anyone|plyr", "{reg65?My lady:Sir}, may I ask for some time to think about this?", starting_state="lord_give_oath_5", ending_state="lord_give_oath_give_up")


lord_give_oath_6_lord_give_oath_7 = Dialog("anyone", "...and I will be at your side to fight your enemies should you need my sword.", starting_state="lord_give_oath_6", ending_state="lord_give_oath_7")


lord_give_oath_7_lord_give_oath_8 = Dialog("anyone|plyr", "...and I will be at your side to fight your enemies should you need my sword.", starting_state="lord_give_oath_7", ending_state="lord_give_oath_8")


lord_give_oath_7_lord_give_oath_give_up = Dialog("anyone|plyr", "{reg65?My lady:My lord}, please give me more time to think about this.", starting_state="lord_give_oath_7", ending_state="lord_give_oath_give_up")


lord_give_oath_8_lord_give_oath_9 = Dialog("anyone", "Finally, I will uphold your lawful claims and those of your legitimate heirs.", starting_state="lord_give_oath_8", ending_state="lord_give_oath_9")


lord_give_oath_9_lord_give_oath_10 = Dialog("anyone|plyr", "Finally, I will uphold your lawful claims and those of your legitimate heirs.", starting_state="lord_give_oath_9", ending_state="lord_give_oath_10")


lord_give_oath_9_lord_give_oath_give_up = Dialog("anyone|plyr", "{reg65?My lady:Sir}, I must have more time to consider this.", starting_state="lord_give_oath_9", ending_state="lord_give_oath_give_up")


lord_give_oath_10_lord_give_oath_go_on_2 = Dialog("anyone", "Very well. You have given me your solemn oath, {playername}. May you uphold it always, with proper courage and devotion.", starting_state="lord_give_oath_10", ending_state="lord_give_oath_go_on_2")


lord_give_oath_go_on_2_lord_give_oath_go_on_3 = Dialog("anyone", "Let it be known that from this day forward, you are my sworn {man/follower} and vassal. I give you my protection and grant you the right to bear arms in my name, and I pledge that I shall not deprive you of your life, liberty or properties except by the lawful judgment of your peers or by the law and custom of the land.{reg1? Furthermore I give you the fief of {s1} with all its rents and revenues.:}", starting_state="lord_give_oath_go_on_2", ending_state="lord_give_oath_go_on_3")
def condition():
    reg1 = 1
    if _g_invite_offered_center <= 0:
        reg1 = 0
    else:
        s1 = str_store_party_name(_g_invite_offered_center)
    #end
lord_give_oath_go_on_2_lord_give_oath_go_on_3.conditionBlock = condition


lord_give_oath_go_on_3_lord_give_conclude = Dialog("anyone", "You have done a wise thing, {playername}. Serve me well and I promise, you will rise high.", starting_state="lord_give_oath_go_on_3", ending_state="lord_give_conclude")


lord_give_conclude_lord_give_conclude_2 = Dialog("anyone|plyr", "{s41}", starting_state="lord_give_conclude", ending_state="lord_give_conclude_2")
def condition():
    reg39 = troop_get_type(_g_talk_troop)
    if troop_slot_eq(_g_talk_troop,30,trp.player):
        s41 = str_store_string(gstr.very_well__you_are_now_my_liege_as_well_as_my_husband)
    else:
        s41 = str_store_string(gstr.i_thank_you_reg39my_ladylord)
    #end
lord_give_conclude_lord_give_conclude_2.conditionBlock = condition
def code():
    var001 = 0
    if is_between(_g_talk_troop,trp.kingdom_1_pretender,trp.knight_1_1_wife) or troop_slot_eq(_g_talk_troop,30,trp.player) and not faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop):
        var001 = 1
        _supported_pretender = _g_talk_troop
        _supported_pretender_old_faction = troop_get_slot(_g_talk_troop,14)
        troop_set_faction(_g_talk_troop,fac.player_supporters_faction)
        faction_set_slot(fac.player_supporters_faction,11,_g_talk_troop)
        _g_talk_x_troop_faction = fac.player_supporters_faction
        quest_set_slot(qst.rebel_against_kingdom,6,_g_talk_troop)
        quest_set_slot(qst.rebel_against_kingdom,3,_supported_pretender_old_faction)
        s14 = str_store_faction_name_link(_supported_pretender_old_faction)
        s13 = str_store_troop_name_link(_g_talk_troop)
        setup_quest_text(qst.rebel_against_kingdom)
        s2 = str_store_string("@You promised to help {s13} claim the throne of {s14}.")
        start_quest(qst.rebel_against_kingdom,_g_talk_troop)
    #end
    if _players_kingdom == fac.player_supporters_faction:
        deactivate_player_faction()
        for trp_002 in range(trp.npc1, trp.knight_1_1_wife):
            troop_faction_003 = store_faction_of_troop(trp_002)
            if troop_faction_003 == fac.player_supporters_faction and troop_slot_eq(trp_002,2,2):
                change_troop_faction(trp_002,_g_talk_x_troop_faction)
            #end
        #end
    #end
    if is_between(_players_oath_renounced_against_kingdom,fac.player_supporters_faction,fac.kingdoms_end) and _players_oath_renounced_against_kingdom != _g_talk_x_troop_faction:
        faction_relation_004 = store_relation(fac.player_supporters_faction,_players_oath_renounced_against_kingdom)
        val_min(faction_relation_004,-40)
        set_player_relation_with_faction(_players_oath_renounced_against_kingdom,faction_relation_004)
        update_all_notes()
        _g_recalculate_ais = 1
    #end
    if is_between(_players_kingdom,fac.player_supporters_faction,fac.kingdoms_end) and _players_kingdom != fac.player_supporters_faction and _players_kingdom != _g_talk_x_troop_faction:
        faction_slot_005 = faction_get_slot(_players_kingdom,11)
        add_log_entry(23,trp.player,-1,faction_slot_005,_players_kingdom)
        if var001 == 1:
            activate_player_faction(_g_talk_troop)
        #end
        player_leave_faction(0)
    #end
    player_join_faction(_g_talk_x_troop_faction)
    if _g_invite_offered_center > 0:
        give_center_to_lord(_g_invite_offered_center,trp.player,0)
        if faction_slot_eq(_players_kingdom,64,_g_invite_offered_center):
            faction_set_slot(_players_kingdom,64,-1)
        #end
    #end
    add_log_entry(21,trp.player,-1,_g_talk_troop,_g_talk_x_troop_faction)
    if check_quest_active(qst.join_faction) and _g_invite_faction_lord == _g_talk_troop:
        end_quest(qst.join_faction)
    elif check_quest_active(qst.join_faction):
        abort_quest(qst.join_faction,0)
    #end
    _player_has_homage = 1
    _g_player_banner_granted = 1
    _g_invite_faction = 0
    _g_invite_faction_lord = 0
    _g_invite_offered_center = 0
    _g_leave_encounter = 1
lord_give_conclude_lord_give_conclude_2.codeBlock = code


lord_give_conclude_2_close_window_1 = Dialog("anyone", "So be it, my wife. May all my vassals be as valiant and loyal as you.", starting_state="lord_give_conclude_2", ending_state="close_window")
def condition():
    if troop_slot_eq(_g_talk_troop,30,trp.player):
        pass
lord_give_conclude_2_close_window_1.conditionBlock = condition
def code():
    _g_leave_encounter = 1
lord_give_conclude_2_close_window_1.codeBlock = code


lord_give_conclude_2_close_window_2 = Dialog("anyone", "I have great hopes for you {playername}. I know you shall prove yourself worthy of the trust I have placed in you.", starting_state="lord_give_conclude_2", ending_state="close_window")
def code():
    _g_leave_encounter = 1
lord_give_conclude_2_close_window_2.codeBlock = code


lord_ask_enter_service_lord_enter_service_swear = Dialog("anyone", "Heh, a wise move, {playername}. With loyal service, a {man/woman} in my service could become wealthy and powerful, and our enemies... Well, our enemies are as wheat before a scythe. However, to enter my service you must first renounce all worldly oaths and bonds, and swear to serve only the {s5}.", starting_state="lord_ask_enter_service", ending_state="lord_enter_service_swear")
def condition():
    s5 = str_store_faction_name(_g_talk_x_troop_faction)
lord_ask_enter_service_lord_enter_service_swear.conditionBlock = condition


lord_enter_service_swear_lord_enter_service_swear_accepted = Dialog("anyone|plyr", "I do so swear, {s65}.", starting_state="lord_enter_service_swear", ending_state="lord_enter_service_swear_accepted")


lord_enter_service_swear_lord_enter_service_swear_denied = Dialog("anyone|plyr", "I need some time to think about this.", starting_state="lord_enter_service_swear", ending_state="lord_enter_service_swear_denied")


lord_enter_service_swear_denied_close_window = Dialog("anyone", "Are you having me on? I've no time for games, {playername}. Make up your mind and stop wasting my time.", starting_state="lord_enter_service_swear_denied", ending_state="close_window")
def code():
    _g_leave_encounter = 1
lord_enter_service_swear_denied_close_window.codeBlock = code


lord_enter_service_swear_accepted_lord_enter_service_swear_accepted_2 = Dialog("anyone", "Then it is my pleasure to welcome you to the service of my house. From this day on, {playername}, you are a soldier of the {s5} with all the duties and privileges that come with it.", starting_state="lord_enter_service_swear_accepted", ending_state="lord_enter_service_swear_accepted_2")
def condition():
    s5 = str_store_faction_name(_g_talk_x_troop_faction)
lord_enter_service_swear_accepted_lord_enter_service_swear_accepted_2.conditionBlock = condition


lord_enter_service_swear_accepted_2_close_window = Dialog("anyone", "I charge you with rooting out and destroying the forces of our enemies wherever you may find them. Moreover, I will have special tasks for you from time to time, as may some of my other vassal lords. Serve, fight, and honour your oaths. These things will take you far, if you've a mind for promotion. May God grant us long lives and many victories to toast in my hall!", starting_state="lord_enter_service_swear_accepted_2", ending_state="close_window")
def condition():
    s5 = str_store_faction_name(_g_talk_x_troop_faction)
lord_enter_service_swear_accepted_2_close_window.conditionBlock = condition
def code():
    _g_leave_encounter = 1
lord_enter_service_swear_accepted_2_close_window.codeBlock = code


lord_ask_leave_service_lord_ask_leave_service_verify = Dialog("anyone", "Hrm. Has your oath become burdensome, {playername}? It is unusual to request release from homage, but in respect of your fine service, I will not hold you if you truly wish to end it. Though you would be sorely missed.", starting_state="lord_ask_leave_service", ending_state="lord_ask_leave_service_verify")
def condition():
    if _g_talk_troop_relation >= 1:
        pass
lord_ask_leave_service_lord_ask_leave_service_verify.conditionBlock = condition


lord_ask_leave_service_lord_ask_leave_service_verify_1 = Dialog("anyone", "Release from homage? Hmm, perhaps it would be for the best... However, {playername}, you must be sure that release is what you desire. This is not a thing done lightly.", starting_state="lord_ask_leave_service", ending_state="lord_ask_leave_service_verify")


lord_ask_leave_service_verify_lord_ask_leave_service_2 = Dialog("anyone|plyr", "It is something I must do, {s65}.", starting_state="lord_ask_leave_service_verify", ending_state="lord_ask_leave_service_2")


lord_ask_leave_service_verify_lord_ask_leave_service_giveup = Dialog("anyone|plyr", "You are right, {s65}. My place is here.", starting_state="lord_ask_leave_service_verify", ending_state="lord_ask_leave_service_giveup")


lord_ask_leave_service_giveup_lord_pretalk = Dialog("anyone", "I am pleased to hear it, {playername}. I hope you'll banish such unworthy thoughts from your mind from now on.", starting_state="lord_ask_leave_service_giveup", ending_state="lord_pretalk")


lord_ask_leave_service_2_lord_ask_leave_service_verify_again = Dialog("anyone", "Then you are sure? Also, be aware that if you leave my services, you will be surrendering to me all the fiefs which you hold in my name.", starting_state="lord_ask_leave_service_2", ending_state="lord_ask_leave_service_verify_again")


lord_ask_leave_service_verify_again_lord_ask_leave_service_3 = Dialog("anyone|plyr", "Yes, {s65}.", starting_state="lord_ask_leave_service_verify_again", ending_state="lord_ask_leave_service_3")


lord_ask_leave_service_verify_again_lord_ask_leave_service_giveup = Dialog("anyone|plyr", "Of course not, {s65}. I am ever your loyal vassal.", starting_state="lord_ask_leave_service_verify_again", ending_state="lord_ask_leave_service_giveup")


lord_ask_leave_service_3_lord_ask_leave_service_end = Dialog("anyone", "As you wish. I hereby declare your oaths to be null and void. You will no longer hold land or titles in my name, and you are released from your duties to my house. You are free, {playername}.", starting_state="lord_ask_leave_service_3", ending_state="lord_ask_leave_service_end")
def code():
    add_log_entry(23,trp.player,-1,_g_talk_troop,_g_talk_x_troop_faction)
    player_leave_faction(1)
lord_ask_leave_service_3_lord_ask_leave_service_end.codeBlock = code


lord_ask_leave_service_end_lord_ask_leave_service_end_2 = Dialog("anyone|plyr", "Thank you, sir. It was an honour to serve you..", starting_state="lord_ask_leave_service_end", ending_state="lord_ask_leave_service_end_2")


lord_ask_leave_service_end_lord_ask_leave_service_end_2_1 = Dialog("anyone|plyr", "My thanks. It feels good to be {a free man/free} once again.", starting_state="lord_ask_leave_service_end", ending_state="lord_ask_leave_service_end_2")


lord_ask_leave_service_end_2_close_window = Dialog("anyone", "Farewell then, {playername}, and good luck go with you.", starting_state="lord_ask_leave_service_end_2", ending_state="close_window")
def code():
    _g_leave_encounter = 1
lord_ask_leave_service_end_2_close_window.codeBlock = code


lord_active_mission_1_lord_lend_companion_end = Dialog("anyone", "Oh, you want your companion back? I see...", starting_state="lord_active_mission_1", ending_state="lord_lend_companion_end")
def condition():
    partner_quest_001 = store_partner_quest()
    if partner_quest_001 == qst.lend_companion and not troop_slot_ge(_g_talk_troop,8,0) and check_quest_active(qst.lend_companion) and quest_slot_eq(qst.lend_companion,6,_g_talk_troop):
        cur_day_002 = store_current_day()
        if cur_day_002 >= quest_slot_003:
            quest_slot_003 = quest_get_slot(qst.lend_companion,10)
lord_active_mission_1_lord_lend_companion_end.conditionBlock = condition


lord_active_mission_1_lord_pretalk = Dialog("anyone", "{playername}, I must beg your patience, I still have need of your companion. Please return later when things have settled.", starting_state="lord_active_mission_1", ending_state="lord_pretalk")
def condition():
    if partner_quest_001 == qst.lend_companion:
        partner_quest_001 = store_partner_quest()
lord_active_mission_1_lord_pretalk.conditionBlock = condition


lord_active_mission_1_lord_active_mission_2 = Dialog("anyone", "Yes, have you made any progress on it?", starting_state="lord_active_mission_1", ending_state="lord_active_mission_2")


lord_active_mission_2_lord_generic_mission_thank = Dialog("anyone|plyr", "Indeed. I brought you {reg1} {s1} as prisoners.", starting_state="lord_active_mission_2", ending_state="lord_generic_mission_thank")
def condition():
    if not troop_slot_ge(_g_talk_troop,8,0) and check_quest_active(qst.capture_prisoners) and quest_slot_eq(qst.capture_prisoners,6,_g_talk_troop):
        quest_slot_001 = quest_get_slot(qst.capture_prisoners,10)
        quest_slot_002 = quest_get_slot(qst.capture_prisoners,2)
        party_count_prisoners_of_type(party_prisoners_of_type_003,p.main_party,quest_slot_002)
        if party_prisoners_of_type_003 >= quest_slot_001:
            reg1 = quest_slot_001
            s1 = str_store_troop_name_plural(quest_slot_002)
lord_active_mission_2_lord_generic_mission_thank.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(qst.capture_prisoners,10)
    quest_slot_002 = quest_get_slot(qst.capture_prisoners,2)
    party_remove_prisoners(p.main_party,quest_slot_002,quest_slot_001)
    party_add_prisoners(_g_encountered_party,quest_slot_002,quest_slot_001)
    finish_quest(qst.capture_prisoners,100)
lord_active_mission_2_lord_generic_mission_thank.codeBlock = code


lord_active_mission_2_capture_enemy_hero_thank = Dialog("anyone|plyr", "Oh, indeed. I've captured a lord from {s13} for you.", starting_state="lord_active_mission_2", ending_state="capture_enemy_hero_thank")
def condition():
    if not troop_slot_ge(_g_talk_troop,8,0):
        partner_quest_001 = store_partner_quest()
        if partner_quest_001 == qst.capture_enemy_hero:
            var002 = 0
            quest_slot_003 = quest_get_slot(qst.capture_enemy_hero,3)
            party_num_prisoners_stacks_004 = party_get_num_prisoner_stacks(p.main_party)
            for var005 in range(0, party_num_prisoners_stacks_004):
                party_prisoner_troop_id_006 = party_prisoner_stack_get_troop_id(p.main_party,var005)
                if troop_is_hero(party_prisoner_troop_id_006):
                    troop_faction_007 = store_faction_of_troop(party_prisoner_troop_id_006)
                    if quest_slot_003 == troop_faction_007 and troop_slot_eq(party_prisoner_troop_id_006,2,2):
                        var002 = 1
                        quest_set_slot(qst.capture_enemy_hero,2,party_prisoner_troop_id_006)
                    #end
                #end
            #end
        #end
    #end
    if var002 == 1:
        s13 = str_store_faction_name(quest_slot_003)
lord_active_mission_2_capture_enemy_hero_thank.conditionBlock = condition


capture_enemy_hero_thank_capture_enemy_hero_thank_2 = Dialog("anyone", "Many thanks, my friend. He will serve very well for a bargain. You've done a fine work here. Please accept these {reg5} denars for your help.", starting_state="capture_enemy_hero_thank", ending_state="capture_enemy_hero_thank_2")
def code():
    quest_slot_001 = quest_get_slot(qst.capture_enemy_hero,2)
    quest_slot_002 = quest_get_slot(qst.capture_enemy_hero,3)
    party_remove_prisoners(p.main_party,quest_slot_001,1)
    faction_relation_003 = store_relation(_g_encountered_party_faction,quest_slot_002)
    if faction_relation_003 < 0:
        party_add_prisoners(_g_encountered_party,quest_slot_001,1)
    else:
        troop_set_slot(quest_slot_001,8,-1)
    #end
    quest_slot_004 = quest_get_slot(qst.capture_enemy_hero,22)
    reg5 = quest_slot_004
    troop_add_gold(trp.player,quest_slot_004)
    add_xp_as_reward(2500)
    change_player_relation_with_troop(_g_talk_troop,4)
    end_quest(qst.capture_enemy_hero)
capture_enemy_hero_thank_capture_enemy_hero_thank_2.codeBlock = code


capture_enemy_hero_thank_2_lord_pretalk = Dialog("anyone|plyr", "Certainly, {s65}.", starting_state="capture_enemy_hero_thank_2", ending_state="lord_pretalk")


capture_enemy_hero_thank_2_lord_pretalk_1 = Dialog("anyone|plyr", "It was nothing.", starting_state="capture_enemy_hero_thank_2", ending_state="lord_pretalk")


capture_enemy_hero_thank_2_lord_pretalk_2 = Dialog("anyone|plyr", "Give me more of a challenge next time.", starting_state="capture_enemy_hero_thank_2", ending_state="lord_pretalk")


lord_active_mission_2_lord_raise_troops_thank = Dialog("anyone|plyr", "Indeed. I have raised {reg1} {s13}. You can take them.", starting_state="lord_active_mission_2", ending_state="lord_raise_troops_thank")
def condition():
    if not troop_slot_ge(_g_talk_troop,8,0):
        partner_quest_001 = store_partner_quest()
        if partner_quest_001 == qst.raise_troops:
            quest_slot_002 = quest_get_slot(partner_quest_001,2)
            quest_slot_003 = quest_get_slot(partner_quest_001,10)
            party_count_companions_of_type(party_companions_of_type_004,p.main_party,quest_slot_002)
            if party_companions_of_type_004 >= quest_slot_003:
                reg1 = quest_slot_003
                s13 = str_store_troop_name_plural(quest_slot_002)
lord_active_mission_2_lord_raise_troops_thank.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(qst.raise_troops,2)
    quest_slot_002 = quest_get_slot(qst.raise_troops,10)
    change_player_relation_with_troop(_g_talk_troop,3)
    party_remove_members(p.main_party,quest_slot_001,quest_slot_002)
    end_quest(qst.raise_troops)
    troop_slot_003 = troop_get_slot(_g_talk_troop,10)
    if troop_slot_003 > 0:
        party_add_members(troop_slot_003,quest_slot_001,quest_slot_002)
lord_active_mission_2_lord_raise_troops_thank.codeBlock = code


lord_raise_troops_thank_lord_raise_troops_thank_2 = Dialog("anyone", "These men may well turn the tide in my plans, {playername}. I am confident you've trained them well. My thanks and my compliments to you.", starting_state="lord_raise_troops_thank", ending_state="lord_raise_troops_thank_2")


lord_raise_troops_thank_2_lord_pretalk = Dialog("anyone|plyr", "Well, the lads are at your command now, sir. I am sure you will take good care of them.", starting_state="lord_raise_troops_thank_2", ending_state="lord_pretalk")


lord_active_mission_2_lord_collect_taxes_success = Dialog("anyone|plyr", "Here are all the taxes from {s3}. It comes up to {reg19} denars.", starting_state="lord_active_mission_2", ending_state="lord_collect_taxes_success")
def condition():
    if not troop_slot_ge(_g_talk_troop,8,0) and check_quest_active(qst.collect_taxes) and quest_slot_eq(qst.collect_taxes,6,_g_talk_troop) and check_quest_succeeded(qst.collect_taxes) and _qst_collect_taxes_halve_taxes == 0:
        quest_slot_001 = quest_get_slot(qst.collect_taxes,22)
        var002 = quest_slot_001 * 8
        var002 /= 10
        troop_gold_003 = store_troop_gold(trp.player)
        if troop_gold_003 >= var002:
            reg19 = quest_slot_001
            quest_slot_004 = quest_get_slot(qst.collect_taxes,1)
            s3 = str_store_party_name(quest_slot_004)
lord_active_mission_2_lord_collect_taxes_success.conditionBlock = condition


lord_active_mission_2_lord_collect_taxes_half_success = Dialog("anyone|plyr", "Here are the taxes from {s3}. It comes up to {reg19} denars.", starting_state="lord_active_mission_2", ending_state="lord_collect_taxes_half_success")
def condition():
    if not troop_slot_ge(_g_talk_troop,8,0) and check_quest_active(qst.collect_taxes) and quest_slot_eq(qst.collect_taxes,6,_g_talk_troop) and check_quest_succeeded(qst.collect_taxes) and _qst_collect_taxes_halve_taxes == 1:
        quest_slot_001 = quest_get_slot(qst.collect_taxes,22)
        var002 = quest_slot_001 * 95
        var002 /= 100
        troop_gold_003 = store_troop_gold(trp.player)
        if troop_gold_003 >= var002:
            reg19 = quest_slot_001
            quest_slot_004 = quest_get_slot(qst.collect_taxes,1)
            s3 = str_store_party_name(quest_slot_004)
lord_active_mission_2_lord_collect_taxes_half_success.conditionBlock = condition


lord_active_mission_2_lord_collect_taxes_fail = Dialog("anyone|plyr", "Unfortunately, a revolt broke up while I was collecting the taxes. I could only collect {reg19} denars.", starting_state="lord_active_mission_2", ending_state="lord_collect_taxes_fail")
def condition():
    if not troop_slot_ge(_g_talk_troop,8,0) and check_quest_active(qst.collect_taxes) and quest_slot_eq(qst.collect_taxes,6,_g_talk_troop) and check_quest_failed(qst.collect_taxes):
        quest_slot_001 = quest_get_slot(qst.collect_taxes,22)
        troop_gold_002 = store_troop_gold(trp.player)
        if troop_gold_002 >= quest_slot_001:
            reg19 = quest_slot_001
            quest_slot_003 = quest_get_slot(qst.collect_taxes,1)
            s3 = str_store_party_name(quest_slot_003)
lord_active_mission_2_lord_collect_taxes_fail.conditionBlock = condition


lord_collect_taxes_success_lord_pretalk = Dialog("anyone", "Well done, {playername}, very well done indeed! You were truly the right {man/person} for the job. I promised you a fifth of the taxes, so that amounts to {reg21} denars. If you give me {reg20} denars, you may keep the difference. A good result for everyone, eh?", starting_state="lord_collect_taxes_success", ending_state="lord_pretalk")
def condition():
    quest_slot_001 = quest_get_slot(qst.collect_taxes,22)
    var002 = quest_slot_001 * 8
    var002 /= 10
    reg20 = var002
    reg21 = quest_slot_001 - var002
lord_collect_taxes_success_lord_pretalk.conditionBlock = condition
def code():
    troop_remove_gold(trp.player,reg20)
    quest_set_slot(qst.collect_taxes,22,0)
    change_player_relation_with_troop(_g_talk_troop,2)
    end_quest(qst.collect_taxes)
lord_collect_taxes_success_lord_pretalk.codeBlock = code


lord_collect_taxes_half_success_lord_pretalk = Dialog("anyone", "What?! Is this some scheme of yours, {playername}? That's less than half the taxes I'm owed! You have let them get away with murder as well as my money. What a farce! You can forget the money I promised you, I'm taking {reg20} denars from what you collected, and you're lucky I'm leaving you a few coins for honour's sake.", starting_state="lord_collect_taxes_half_success", ending_state="lord_pretalk")
def condition():
    quest_slot_001 = quest_get_slot(qst.collect_taxes,22)
    quest_slot_001 *= 95
    quest_slot_001 /= 100
    reg20 = quest_slot_001
lord_collect_taxes_half_success_lord_pretalk.conditionBlock = condition
def code():
    troop_remove_gold(trp.player,reg20)
    quest_set_slot(qst.collect_taxes,22,0)
    end_quest(qst.collect_taxes)
lord_collect_taxes_half_success_lord_pretalk.codeBlock = code


lord_collect_taxes_fail_lord_pretalk = Dialog("anyone", "God, what a bloody mess you've gotten us into, {playername}.This could turn very ugly if I do not take immediate action.I certainly hope you're not here expecting to be paid for failure.Hand over my {reg19} denars, if you please, and end our business together.", starting_state="lord_collect_taxes_fail", ending_state="lord_pretalk")
def code():
    change_player_relation_with_troop(_g_talk_troop,-1)
    quest_slot_001 = quest_get_slot(qst.collect_taxes,22)
    troop_remove_gold(trp.player,quest_slot_001)
    quest_set_slot(qst.collect_taxes,22,0)
    end_quest(qst.collect_taxes)
lord_collect_taxes_fail_lord_pretalk.codeBlock = code


lord_active_mission_2_lord_hunt_down_fugitive_success = Dialog("anyone|plyr", "I found {s4} hiding at {s3} and gave him his punishment.", starting_state="lord_active_mission_2", ending_state="lord_hunt_down_fugitive_success")
def condition():
    if check_quest_active(qst.hunt_down_fugitive) and quest_slot_eq(qst.hunt_down_fugitive,6,_g_talk_troop) and check_quest_succeeded(qst.hunt_down_fugitive):
        quest_slot_001 = quest_get_slot(qst.hunt_down_fugitive,1)
        s3 = str_store_party_name(quest_slot_001)
        quest_slot_002 = quest_get_slot(qst.hunt_down_fugitive,13)
        get_name_from_dna_to_s50(quest_slot_002)
        s4 = str_store_string(50)
lord_active_mission_2_lord_hunt_down_fugitive_success.conditionBlock = condition


lord_active_mission_2_lord_hunt_down_fugitive_fail = Dialog("anyone|plyr", "I'm afraid he got away.", starting_state="lord_active_mission_2", ending_state="lord_hunt_down_fugitive_fail")
def condition():
    if check_quest_active(qst.hunt_down_fugitive) and quest_slot_eq(qst.hunt_down_fugitive,6,_g_talk_troop) and check_quest_failed(qst.hunt_down_fugitive):
        pass
lord_active_mission_2_lord_hunt_down_fugitive_fail.conditionBlock = condition


lord_hunt_down_fugitive_success_lord_hunt_down_fugitive_success_2 = Dialog("anyone", "And we'll all be a lot better off without him! Thank you, {playername}, for removing this long-festering thorn from my side. 'Tis good to know you can be trusted to handle things with an appropriate level of tactfulness. A bounty I promised, and a bounty you shall have. 300 denars and not a copper less!", starting_state="lord_hunt_down_fugitive_success", ending_state="lord_hunt_down_fugitive_success_2")
def code():
    add_xp_as_reward(300)
lord_hunt_down_fugitive_success_lord_hunt_down_fugitive_success_2.codeBlock = code


lord_hunt_down_fugitive_success_2_lord_hunt_down_fugitive_reward_accept = Dialog("anyone|plyr", "Let me take the money, {s65}. Thank you.", starting_state="lord_hunt_down_fugitive_success_2", ending_state="lord_hunt_down_fugitive_reward_accept")


lord_hunt_down_fugitive_success_2_lord_hunt_down_fugitive_reward_reject = Dialog("anyone|plyr", "This is blood money. I can't accept it.", starting_state="lord_hunt_down_fugitive_success_2", ending_state="lord_hunt_down_fugitive_reward_reject")


lord_hunt_down_fugitive_reward_accept_lord_pretalk = Dialog("anyone", "Of course, {playername}. Here you are. Once again, you've my thanks for ridding me of that {s43}.", starting_state="lord_hunt_down_fugitive_reward_accept", ending_state="lord_pretalk")
def code():
    lord_comment_to_s43(_g_talk_troop,gstr.lord_insult_default)
    troop_add_gold(trp.player,300)
    change_player_relation_with_troop(_g_talk_troop,1)
    end_quest(qst.hunt_down_fugitive)
lord_hunt_down_fugitive_reward_accept_lord_pretalk.codeBlock = code


lord_hunt_down_fugitive_reward_reject_lord_pretalk = Dialog("anyone", "You are a {man/woman} for whom justice is its own reward, eh? As you wish it, {playername}, as you wish it. An honourable sentiment, to be true. Regardless, you've my thanks for ridding me of that {s43}.", starting_state="lord_hunt_down_fugitive_reward_reject", ending_state="lord_pretalk")
def code():
    lord_comment_to_s43(_g_talk_troop,gstr.lord_insult_default)
    change_player_honor(3)
    change_player_relation_with_troop(_g_talk_troop,1)
    end_quest(qst.hunt_down_fugitive)
lord_hunt_down_fugitive_reward_reject_lord_pretalk.codeBlock = code


lord_hunt_down_fugitive_fail_lord_pretalk = Dialog("anyone", "It is a sad day when that {s43} manages to avoid the hand of justice yet again. I thought you would be able to do this, {playername}. Clearly I was wrong.", starting_state="lord_hunt_down_fugitive_fail", ending_state="lord_pretalk")
def code():
    lord_comment_to_s43(_g_talk_troop,gstr.lord_insult_default)
    change_player_relation_with_troop(_g_talk_troop,-1)
    end_quest(qst.hunt_down_fugitive)
lord_hunt_down_fugitive_fail_lord_pretalk.codeBlock = code


lord_active_mission_2_lord_active_mission_3 = Dialog("anyone|plyr", "I am still working on it.", starting_state="lord_active_mission_2", ending_state="lord_active_mission_3")


lord_active_mission_2_lord_mission_failed = Dialog("anyone|plyr", "I am afraid I won't be able to do this quest.", starting_state="lord_active_mission_2", ending_state="lord_mission_failed")


lord_active_mission_3_lord_pretalk = Dialog("anyone", "Good. Remember, I am counting on you.", starting_state="lord_active_mission_3", ending_state="lord_pretalk")


lord_mission_failed_lord_pretalk = Dialog("anyone", "{s43}", starting_state="lord_mission_failed", ending_state="lord_pretalk")
def code():
    lord_comment_to_s43(_g_talk_troop,gstr.lord_mission_failed_default)
    partner_quest_001 = store_partner_quest()
    abort_quest(partner_quest_001,1)
lord_mission_failed_lord_pretalk.codeBlock = code


lord_suggest_action_ask_lord_suggest_action = Dialog("anyone", "{!}What do you suggest?", starting_state="lord_suggest_action_ask", ending_state="lord_suggest_action")


lord_suggest_action_lord_suggest_join_faction = Dialog("anyone|plyr", "{!}CHEAT: I want to join your faction.", starting_state="lord_suggest_action", ending_state="lord_suggest_join_faction")


lord_suggest_join_faction_lord_give_oath_5 = Dialog("anyone", "{!}Alright then.", starting_state="lord_suggest_join_faction", ending_state="lord_give_oath_5")


lord_suggest_action_lord_suggest_learn_party_id = Dialog("anyone|plyr", "{!}CHEAT: I want to know your leaded party ID.", starting_state="lord_suggest_action", ending_state="lord_suggest_learn_party_id")


lord_suggest_learn_party_id_lord_pretalk = Dialog("anyone", "{!}It is {reg0}. Encountered party is {reg1}", starting_state="lord_suggest_learn_party_id", ending_state="lord_pretalk")
def condition():
    reg1 = _g_encountered_party
    reg0 = troop_get_slot(_g_talk_troop,10)
lord_suggest_learn_party_id_lord_pretalk.conditionBlock = condition


lord_suggest_action_lord_suggest_learn_ai_initiative = Dialog("anyone|plyr", "{!}CHEAT: I want to know your AI initiative.", starting_state="lord_suggest_action", ending_state="lord_suggest_learn_ai_initiative")


lord_suggest_learn_ai_initiative_lord_pretalk = Dialog("anyone", "{!}It is {reg0}.", starting_state="lord_suggest_learn_ai_initiative", ending_state="lord_pretalk")
def condition():
    reg0 = party_get_ai_initiative(_g_encountered_party)
lord_suggest_learn_ai_initiative_lord_pretalk.conditionBlock = condition


lord_suggest_action_lord_suggest_become_marshall = Dialog("anyone|plyr", "{!}CHEAT: I want to be your kingdom's marshall.", starting_state="lord_suggest_action", ending_state="lord_suggest_become_marshall")
def condition():
    if _players_kingdom == _g_talk_x_troop_faction:
        pass
lord_suggest_action_lord_suggest_become_marshall.conditionBlock = condition


lord_suggest_become_marshall_lord_pretalk = Dialog("anyone", "{!}Alright then.", starting_state="lord_suggest_become_marshall", ending_state="lord_pretalk")
def code():
    faction_slot_001 = faction_get_slot(_g_talk_x_troop_faction,8)
    if faction_slot_001 >= 0:
        troop_slot_002 = troop_get_slot(faction_slot_001,10)
        if party_is_active(troop_slot_002):
            party_set_marshall(troop_slot_002,0)
        #end
    #end
    faction_set_slot(_g_talk_x_troop_faction,8,trp.player)
    faction_set_slot(_g_talk_x_troop_faction,4,0)
    _g_recalculate_ais = 1
lord_suggest_become_marshall_lord_pretalk.codeBlock = code


lord_suggest_action_lord_suggest_attack_enemy_castle = Dialog("anyone|plyr", "{!}CHEAT: Let us attack an enemy town or castle.", starting_state="lord_suggest_action", ending_state="lord_suggest_attack_enemy_castle")
def condition():
    if _talk_context != 4:
        pass
lord_suggest_action_lord_suggest_attack_enemy_castle.conditionBlock = condition


lord_suggest_action_lord_suggest_go_to_friendly_town = Dialog("anyone|plyr", "{!}CHEAT: Let us return back to a friendly town.", starting_state="lord_suggest_action", ending_state="lord_suggest_go_to_friendly_town")
def condition():
    if _talk_context != 4:
        pass
lord_suggest_action_lord_suggest_go_to_friendly_town.conditionBlock = condition


lord_suggest_action_lord_suggest_attack_enemy_party = Dialog("anyone|plyr", "{!}CHEAT: Let us attack an enemy war party.", starting_state="lord_suggest_action", ending_state="lord_suggest_attack_enemy_party")
def condition():
    if _talk_context != 4:
        pass
lord_suggest_action_lord_suggest_attack_enemy_party.conditionBlock = condition


lord_suggest_action_lord_suggest_lift_siege = Dialog("anyone|plyr", "{!}CHEAT: Let us lift this siege.", starting_state="lord_suggest_action", ending_state="lord_suggest_lift_siege")
def condition():
    if _talk_context == 4:
        pass
lord_suggest_action_lord_suggest_lift_siege.conditionBlock = condition


lord_suggest_action_lord_suggest_follow_me = Dialog("anyone|plyr", "{!}CHEAT: Follow me.", starting_state="lord_suggest_action", ending_state="lord_suggest_follow_me")
def condition():
    if _talk_context != 4:
        pass
lord_suggest_action_lord_suggest_follow_me.conditionBlock = condition


lord_suggest_action_lord_suggest_follow_other = Dialog("anyone|plyr", "{!}CHEAT: Follow someone.", starting_state="lord_suggest_action", ending_state="lord_suggest_follow_other")
def condition():
    if _talk_context != 4:
        pass
lord_suggest_action_lord_suggest_follow_other.conditionBlock = condition


lord_suggest_action_lord_suggest_raid_village = Dialog("anyone|plyr", "{!}CHEAT: Raid a village.", starting_state="lord_suggest_action", ending_state="lord_suggest_raid_village")
def condition():
    if _talk_context != 4:
        pass
lord_suggest_action_lord_suggest_raid_village.conditionBlock = condition


lord_suggest_action_lord_pretalk = Dialog("anyone|plyr", "{!}CHEAT: Like me.", starting_state="lord_suggest_action", ending_state="lord_pretalk")
def code():
    change_player_relation_with_troop(_g_talk_troop,20)
lord_suggest_action_lord_pretalk.codeBlock = code


lord_suggest_lift_siege_close_window = Dialog("anyone", "{!}As you wish, {playername}.", starting_state="lord_suggest_lift_siege", ending_state="close_window")
def code():
    party_set_ai_state(_g_talk_troop_party,-1)
    party_leave_cur_battle(_g_talk_troop_party)
    _g_leave_encounter = 1
lord_suggest_lift_siege_close_window.codeBlock = code


lord_suggest_go_to_friendly_town_lord_suggest_go_to_friendly_town2 = Dialog("anyone", "{!}Hmm. Which town or castle do you suggest we go to?", starting_state="lord_suggest_go_to_friendly_town", ending_state="lord_suggest_go_to_friendly_town2")


lord_suggest_go_to_friendly_town2_lord_suggest_go_to_friendly_town3 = Dialog("anyone|repeat_for_parties|plyr", "{!}CHEAT: {s1}", starting_state="lord_suggest_go_to_friendly_town2", ending_state="lord_suggest_go_to_friendly_town3")
def condition():
    var001 = store_repeat_object()
    if party_slot_eq(var001,0,2) or party_slot_eq(var001,0,3) and var001 != _g_encountered_party:
        party_faction_002 = store_faction_of_party(var001)
        if party_faction_002 == _g_talk_x_troop_faction:
            s1 = str_store_party_name(var001)
lord_suggest_go_to_friendly_town2_lord_suggest_go_to_friendly_town3.conditionBlock = condition
def code():
    _town_suggested_to_go_to = store_repeat_object()
lord_suggest_go_to_friendly_town2_lord_suggest_go_to_friendly_town3.codeBlock = code


lord_suggest_go_to_friendly_town2_lord_pretalk = Dialog("anyone|plyr", "{!}CHEAT: Never mind.", starting_state="lord_suggest_go_to_friendly_town2", ending_state="lord_pretalk")


lord_suggest_go_to_friendly_town3_lord_pretalk = Dialog("anyone", "{!}Very well, we go to {s1}.", starting_state="lord_suggest_go_to_friendly_town3", ending_state="lord_pretalk")
def condition():
    s1 = str_store_party_name(_town_suggested_to_go_to)
lord_suggest_go_to_friendly_town3_lord_pretalk.conditionBlock = condition
def code():
    party_set_ai_state(_g_talk_troop_party,7,_town_suggested_to_go_to)
lord_suggest_go_to_friendly_town3_lord_pretalk.codeBlock = code


lord_suggest_attack_enemy_party_lord_suggest_attack_enemy_party2 = Dialog("anyone", "{!}Hmm. Which party do you suggest we attack?", starting_state="lord_suggest_attack_enemy_party", ending_state="lord_suggest_attack_enemy_party2")


lord_suggest_attack_enemy_party2_lord_suggest_attack_enemy_party3 = Dialog("anyone|repeat_for_parties|plyr", "{!}CHEAT: {s1} of {s2} around {s3}", starting_state="lord_suggest_attack_enemy_party2", ending_state="lord_suggest_attack_enemy_party3")
def condition():
    var001 = store_repeat_object()
    if party_slot_eq(var001,0,13) and party_is_active(var001):
        party_faction_002 = store_faction_of_party(var001)
        faction_relation_003 = store_relation(party_faction_002,_g_talk_x_troop_faction)
        if faction_relation_003 <= -10:
            get_closest_walled_center(var001)
            var004 = reg0
            s3 = str_store_party_name(var004)
            s2 = str_store_faction_name(party_faction_002)
            s1 = str_store_party_name(var001)
lord_suggest_attack_enemy_party2_lord_suggest_attack_enemy_party3.conditionBlock = condition
def code():
    _suggested_to_attack_party = store_repeat_object()
lord_suggest_attack_enemy_party2_lord_suggest_attack_enemy_party3.codeBlock = code


lord_suggest_attack_enemy_party2_lord_pretalk = Dialog("anyone|plyr", "{!}CHEAT: Never mind.", starting_state="lord_suggest_attack_enemy_party2", ending_state="lord_pretalk")


lord_suggest_attack_enemy_party3_lord_pretalk = Dialog("anyone", "{!}As you wish, we will attack {s1}.", starting_state="lord_suggest_attack_enemy_party3", ending_state="lord_pretalk")
def condition():
    s1 = str_store_party_name(_suggested_to_attack_party)
lord_suggest_attack_enemy_party3_lord_pretalk.conditionBlock = condition
def code():
    party_set_ai_state(_g_talk_troop_party,10,_suggested_to_attack_party)
lord_suggest_attack_enemy_party3_lord_pretalk.codeBlock = code


lord_suggest_attack_enemy_castle_lord_suggets_attack_enemy_castle2 = Dialog("anyone", "{!}Hmm. Which one do you suggest we attack?", starting_state="lord_suggest_attack_enemy_castle", ending_state="lord_suggets_attack_enemy_castle2")


lord_suggets_attack_enemy_castle2_lord_suggets_attack_enemy_castle3 = Dialog("anyone|repeat_for_parties|plyr", "{!}CHEAT: {s1} of {s2}", starting_state="lord_suggets_attack_enemy_castle2", ending_state="lord_suggets_attack_enemy_castle3")
def condition():
    var001 = store_repeat_object()
    if party_slot_eq(var001,0,2) or party_slot_eq(var001,0,3):
        party_faction_002 = store_faction_of_party(var001)
        faction_relation_003 = store_relation(party_faction_002,_g_talk_x_troop_faction)
        if faction_relation_003 <= -10:
            s2 = str_store_faction_name(party_faction_002)
            s1 = str_store_party_name(var001)
lord_suggets_attack_enemy_castle2_lord_suggets_attack_enemy_castle3.conditionBlock = condition
def code():
    _suggested_to_attack_center = store_repeat_object()
lord_suggets_attack_enemy_castle2_lord_suggets_attack_enemy_castle3.codeBlock = code


lord_suggets_attack_enemy_castle2_lord_pretalk = Dialog("anyone|plyr", "{!}CHEAT: Never mind my lord.", starting_state="lord_suggets_attack_enemy_castle2", ending_state="lord_pretalk")


lord_suggets_attack_enemy_castle3_lord_pretalk = Dialog("anyone", "That should be possible. Very well, we'll attack {s1}.", starting_state="lord_suggets_attack_enemy_castle3", ending_state="lord_pretalk")
def condition():
    s1 = str_store_party_name(_suggested_to_attack_center)
lord_suggets_attack_enemy_castle3_lord_pretalk.conditionBlock = condition
def code():
    party_set_ai_state(_g_talk_troop_party,1,_suggested_to_attack_center)
lord_suggets_attack_enemy_castle3_lord_pretalk.codeBlock = code


lord_suggest_raid_village_lord_suggest_raid_village_2 = Dialog("anyone", "{!}Hmm. Which village do you suggest we attack?", starting_state="lord_suggest_raid_village", ending_state="lord_suggest_raid_village_2")


lord_suggest_raid_village_2_lord_suggest_raid_village_3 = Dialog("anyone|repeat_for_parties|plyr", "{!}CHEAT: {s1} of {s2}", starting_state="lord_suggest_raid_village_2", ending_state="lord_suggest_raid_village_3")
def condition():
    var001 = store_repeat_object()
    if party_slot_eq(var001,0,4):
        party_faction_002 = store_faction_of_party(var001)
        faction_relation_003 = store_relation(party_faction_002,_g_talk_x_troop_faction)
        if faction_relation_003 <= -10:
            s2 = str_store_faction_name(party_faction_002)
            s1 = str_store_party_name(var001)
lord_suggest_raid_village_2_lord_suggest_raid_village_3.conditionBlock = condition
def code():
    _suggested_to_attack_center = store_repeat_object()
lord_suggest_raid_village_2_lord_suggest_raid_village_3.codeBlock = code


lord_suggest_raid_village_2_lord_pretalk = Dialog("anyone|plyr", "{!}CHEAT: Never mind.", starting_state="lord_suggest_raid_village_2", ending_state="lord_pretalk")


lord_suggest_raid_village_3_lord_pretalk = Dialog("anyone", "{!}That should be possible. Very well, we'll attack {s1}.", starting_state="lord_suggest_raid_village_3", ending_state="lord_pretalk")
def condition():
    s1 = str_store_party_name(_suggested_to_attack_center)
lord_suggest_raid_village_3_lord_pretalk.conditionBlock = condition
def code():
    party_set_ai_state(_g_talk_troop_party,5,_suggested_to_attack_center)
lord_suggest_raid_village_3_lord_pretalk.codeBlock = code


lord_suggest_follow_me_lord_pretalk = Dialog("anyone", "{!}Aye, I'll follow you.", starting_state="lord_suggest_follow_me", ending_state="lord_pretalk")
def code():
    party_set_slot(_g_talk_troop_party,30,p.main_party)
    npc_decision_checklist_party_ai(_g_talk_troop)
    party_set_ai_state(_g_talk_troop_party,reg0,reg1)
lord_suggest_follow_me_lord_pretalk.codeBlock = code


lord_suggest_follow_other_lord_suggest_follow_other_2 = Dialog("anyone", "{!}Who do you want me to follow?", starting_state="lord_suggest_follow_other", ending_state="lord_suggest_follow_other_2")


lord_suggest_follow_other_2_lord_suggest_follow_other_3 = Dialog("anyone|repeat_for_parties|plyr", "{!}CHEAT: {s1}", starting_state="lord_suggest_follow_other_2", ending_state="lord_suggest_follow_other_3")
def condition():
    var001 = store_repeat_object()
    if party_slot_eq(var001,0,13) and var001 != _g_talk_troop:
        party_faction_002 = store_faction_of_party(var001)
        if party_faction_002 == _g_talk_x_troop_faction:
            s1 = str_store_party_name(var001)
lord_suggest_follow_other_2_lord_suggest_follow_other_3.conditionBlock = condition
def code():
    _town_suggested_to_go_to = store_repeat_object()
lord_suggest_follow_other_2_lord_suggest_follow_other_3.codeBlock = code


lord_suggest_follow_other_2_lord_pretalk = Dialog("anyone|plyr", "{!}CHEAT: Never mind.", starting_state="lord_suggest_follow_other_2", ending_state="lord_pretalk")


lord_suggest_follow_other_3_lord_pretalk = Dialog("anyone", "{!}As you wish, I shall be accompanying {s1}.", starting_state="lord_suggest_follow_other_3", ending_state="lord_pretalk")
def condition():
    s1 = str_store_party_name(_town_suggested_to_go_to)
lord_suggest_follow_other_3_lord_pretalk.conditionBlock = condition
def code():
    party_set_slot(_g_talk_troop_party,30,_town_suggested_to_go_to)
    npc_decision_checklist_party_ai(_g_talk_troop)
    party_set_ai_state(_g_talk_troop_party,reg0,reg1)
lord_suggest_follow_other_3_lord_pretalk.codeBlock = code


lord_suggest_action_lord_pretalk_1 = Dialog("anyone|plyr", "{!}CHEAT: Nothing, {s65}. It's not important.", starting_state="lord_suggest_action", ending_state="lord_pretalk")


lord_request_mission_ask_lord_propose_mercenary = Dialog("anyone|auto_proceed", "{!}Warning: This line should never display.", starting_state="lord_request_mission_ask", ending_state="lord_propose_mercenary")
def condition():
    if _players_kingdom == 0 and _g_talk_x_troop_faction_relation >= 0 and _g_talk_troop_relation >= 0 and troop_slot_ge(trp.player,7,30) and not faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop):
        faction_slot_001 = faction_get_slot(_g_talk_x_troop_faction,31)
        var002 = 0
        for fac_003 in range(fac.player_supporters_faction, fac.kingdoms_end):
            if faction_slot_eq(_g_talk_x_troop_faction,21,0):
                faction_relation_004 = store_relation(_g_talk_x_troop_faction,fac_003)
                if faction_relation_004 < 0:
                    var002 += 1
                #end
            #end
        #end
    #end
    if var002 >= 1:
        cur_hours_005 = store_current_hours()
        var006 = faction_slot_001 + 168
        faction_slot_001 += 24
        if cur_hours_005 >= faction_slot_001:
            random_x_007 = store_random_in_range(0,100)
            if random_x_007 >= 20 or cur_hours_005 >= var006:
                if troop_type_008 == 0 or troop_slot_eq(_g_talk_troop,52,4) or troop_slot_eq(_g_talk_troop,52,6):
                    troop_type_008 = troop_get_type(trp.player)
lord_request_mission_ask_lord_propose_mercenary.conditionBlock = condition
def code():
    cur_hours_001 = store_current_hours()
    faction_set_slot(_g_talk_x_troop_faction,31,cur_hours_001)
lord_request_mission_ask_lord_propose_mercenary.codeBlock = code


lord_propose_mercenary_lord_mercenary_service = Dialog("anyone", "As it happens, {playername}, I promised {s10} that I would hire a company of mercenaries for an upcoming campaign.", starting_state="lord_propose_mercenary", ending_state="lord_mercenary_service")
def condition():
    party_calculate_strength(p.main_party,0)
    var001 = reg0
    var001 += 100
    round_value(var001)
    var001 = reg0
    _temp = var001
    faction_slot_002 = faction_get_slot(_g_talk_x_troop_faction,11)
    if faction_slot_002 != _g_talk_troop:
        s9 = str_store_faction_name(_g_talk_x_troop_faction)
        s10 = str_store_troop_name(faction_slot_002)
        troop_type_003 = troop_get_type(trp.player)
        if troop_type_003 == 3 and troop_slot_eq(_g_talk_troop,52,1):
            s11 = str_store_string(gstr.now_some_might_say_that_women_have_no_business_leading_mercenary_companies_but_i_suspect_that_you_would_prove_them_wrong_what_do_you_say)
        else:
            s11 = str_store_string("@What do you say to entering the service of {s9} as a mercenary captain? I have no doubt that you would be up to the task.")
        #end
    #end
lord_propose_mercenary_lord_mercenary_service.conditionBlock = condition


lord_mercenary_service_lord_mercenary_service_reject = Dialog("anyone|plyr", "I'm not interested, thank you.", starting_state="lord_mercenary_service", ending_state="lord_mercenary_service_reject")


lord_mercenary_service_lord_mercenary_service_accept = Dialog("anyone|plyr", "Aye, I'll join {s9}.", starting_state="lord_mercenary_service", ending_state="lord_mercenary_service_accept")


lord_mercenary_service_lord_mercenary_elaborate_pay = Dialog("anyone|plyr", "I'm interested. Please tell me more.", starting_state="lord_mercenary_service", ending_state="lord_mercenary_elaborate_pay")


lord_mercenary_service_accept_lord_mercenary_service_verify = Dialog("anyone", "Perfect. Of course you shall have to make a formal declaration of allegiance, and give your oath that you and your company will remain in service to {s9} for a period of no less than one month.", starting_state="lord_mercenary_service_accept", ending_state="lord_mercenary_service_verify")
def condition():
    s9 = str_store_faction_name(_g_talk_x_troop_faction)
lord_mercenary_service_accept_lord_mercenary_service_verify.conditionBlock = condition


lord_mercenary_service_verify_lord_mercenary_service_verify_2 = Dialog("anyone|plyr", "As you wish. Your enemies are my enemies.", starting_state="lord_mercenary_service_verify", ending_state="lord_mercenary_service_verify_2")


lord_mercenary_service_verify_lord_mercenary_service_reject = Dialog("anyone|plyr", "On second thought, forget it.", starting_state="lord_mercenary_service_verify", ending_state="lord_mercenary_service_reject")


lord_mercenary_service_verify_2_lord_mercenary_service_accept_3 = Dialog("anyone", "That will do. You've made a wise choice, my friend. {s9} does well by its loyal fighters, you will receive many rewards for your service.", starting_state="lord_mercenary_service_verify_2", ending_state="lord_mercenary_service_accept_3")
def code():
    troop_add_gold(trp.player,_temp)
    cur_day_001 = store_current_day()
    _mercenary_service_next_renew_day = cur_day_001 + 30
    player_join_faction(_g_talk_x_troop_faction)
    s9 = str_store_faction_name(_g_talk_x_troop_faction)
lord_mercenary_service_verify_2_lord_mercenary_service_accept_3.codeBlock = code


lord_mercenary_service_accept_3_lord_pretalk = Dialog("anyone", "Now, I suggest you prepare for a serious campaign. Train and equip your soldiers as best you can in the meantime, and respond quickly when you are summoned for duty.", starting_state="lord_mercenary_service_accept_3", ending_state="lord_pretalk")


lord_mercenary_service_reject_lord_pretalk = Dialog("anyone", "I'm very sorry to hear that. You'll find no better place than {s9}, be sure of that.", starting_state="lord_mercenary_service_reject", ending_state="lord_pretalk")
def condition():
    s9 = str_store_faction_name(_g_talk_x_troop_faction)
lord_mercenary_service_reject_lord_pretalk.conditionBlock = condition


lord_mercenary_elaborate_pay_lord_mercenary_elaborate_1 = Dialog("anyone", "I can offer you a contract for one month. At the end of this period, it can be extended on a monthly basis. An initial sum of {reg12} denars will be paid to you to seal the contract. After that, you'll receive wages from {s10} each week, according to the number and quality of the soldiers in your company. You still have your rights to battlefield loot and salvage, as well as any prisoners you capture. War can be very profitable at times...", starting_state="lord_mercenary_elaborate_pay", ending_state="lord_mercenary_elaborate_1")
def condition():
    reg12 = _temp
lord_mercenary_elaborate_pay_lord_mercenary_elaborate_1.conditionBlock = condition
def code():
    faction_slot_001 = faction_get_slot(_g_talk_x_troop_faction,11)
    s10 = str_store_troop_name(faction_slot_001)
lord_mercenary_elaborate_pay_lord_mercenary_elaborate_1.codeBlock = code


lord_mercenary_service_elaborate_duty_lord_mercenary_elaborate_1 = Dialog("anyone", "Duties... There are only a few, none of them difficult. The very first thing is to declare your allegiance. An oath of loyalty to our cause. Once that's done, you shall be required to fulfill certain responsibilities. You'll participate in military campaigns, fulfill any duties given to you by your commanders, and most of all you shall attack the enemies of our kingdom wherever you might find them.", starting_state="lord_mercenary_service_elaborate_duty", ending_state="lord_mercenary_elaborate_1")
def code():
    faction_slot_001 = faction_get_slot(_g_talk_x_troop_faction,11)
    s10 = str_store_troop_name(faction_slot_001)
lord_mercenary_service_elaborate_duty_lord_mercenary_elaborate_1.codeBlock = code


lord_mercenary_elaborate_1_lord_mercenary_service_elaborate_duty = Dialog("anyone|plyr", "And what about my duties as a mercenary?", starting_state="lord_mercenary_elaborate_1", ending_state="lord_mercenary_service_elaborate_duty")


lord_mercenary_elaborate_1_lord_mercenary_elaborate_castle = Dialog("anyone|plyr", "Can I hold on to any castles I take?", starting_state="lord_mercenary_elaborate_1", ending_state="lord_mercenary_elaborate_castle")


lord_mercenary_elaborate_1_lord_mercenary_elaborate_banner = Dialog("anyone|plyr", "Can I fly my own banner?", starting_state="lord_mercenary_elaborate_1", ending_state="lord_mercenary_elaborate_banner")
def condition():
    if not troop_slot_ge(trp.player,13,1):
        pass
lord_mercenary_elaborate_1_lord_mercenary_elaborate_banner.conditionBlock = condition


lord_mercenary_elaborate_1_lord_mercenary_elaborate_pay = Dialog("anyone|plyr", "How much will you pay me for my service?", starting_state="lord_mercenary_elaborate_1", ending_state="lord_mercenary_elaborate_pay")


lord_mercenary_elaborate_1_lord_mercenary_service_accept = Dialog("anyone|plyr", "Sounds good. I wish to enter your service as a mercenary.", starting_state="lord_mercenary_elaborate_1", ending_state="lord_mercenary_service_accept")


lord_mercenary_elaborate_1_lord_mercenary_service_reject = Dialog("anyone|plyr", "Apologies, my sword is not for hire.", starting_state="lord_mercenary_elaborate_1", ending_state="lord_mercenary_service_reject")


lord_mercenary_elaborate_castle_lord_mercenary_elaborate_1 = Dialog("anyone", "Only my loyal vassals can own lands and castles in my realm -- and all my vassals are men.\I am not inclined to depart from this tradition without a very good reason. If you prove yourself in battle, you can swear an oath of homage to me and become my vassal.\We may then discuss how you may obtain a castle.", starting_state="lord_mercenary_elaborate_castle", ending_state="lord_mercenary_elaborate_1")
def condition():
    if troop_type_001 == 1 and faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop):
        troop_type_001 = troop_get_type(trp.player)
lord_mercenary_elaborate_castle_lord_mercenary_elaborate_1.conditionBlock = condition


lord_mercenary_elaborate_castle_lord_mercenary_elaborate_1_1 = Dialog("anyone", "Hmm... Only loyal vassals of {s10} can own lands and castles. While kings will sometimes accept vassalage from men who prove themselves in battle, and grant them land, I have never heard of a king who gave fiefs to women. You had best discuss that issue with {s10} himself.", starting_state="lord_mercenary_elaborate_castle", ending_state="lord_mercenary_elaborate_1")
def condition():
    if troop_type_001 == 1:
        troop_type_001 = troop_get_type(trp.player)
lord_mercenary_elaborate_castle_lord_mercenary_elaborate_1_1.conditionBlock = condition


lord_mercenary_elaborate_castle_lord_mercenary_elaborate_1_2 = Dialog("anyone", "Only my loyal vassals can own lands and castles in my realm. A mercenary can not be trusted with such a responsibility. However, after serving for some time, you can swear homage to me and become my vassal. Then you will be rewarded with a fief.", starting_state="lord_mercenary_elaborate_castle", ending_state="lord_mercenary_elaborate_1")
def condition():
    if faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop):
        pass
lord_mercenary_elaborate_castle_lord_mercenary_elaborate_1_2.conditionBlock = condition


lord_mercenary_elaborate_castle_lord_mercenary_elaborate_1_3 = Dialog("anyone", "Only loyal vassals of {s10} can own lands and castles. You understand, a simple mercenary cannot be trusted with such responsibility. However, after serving for some time, you may earn the right to swear homage to {s10} and become his vassal. Then you would be rewarded with a fief.", starting_state="lord_mercenary_elaborate_castle", ending_state="lord_mercenary_elaborate_1")


lord_mercenary_elaborate_banner_lord_mercenary_elaborate_1 = Dialog("anyone", "Only my noble vassals have the honour of carrying their own banners. However, after some time in mercenary service, you may earn the opportunity to swear homage to me and become my vassal, gaining the right to choose a banner of your own and fight under it in battle.", starting_state="lord_mercenary_elaborate_banner", ending_state="lord_mercenary_elaborate_1")
def condition():
    if faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop):
        pass
lord_mercenary_elaborate_banner_lord_mercenary_elaborate_1.conditionBlock = condition


lord_mercenary_elaborate_banner_lord_mercenary_elaborate_1_1 = Dialog("anyone", "Only noble vassals of {s10} have the honour of carrying their own banners. However, after some time of mercenary service, perhaps you can earn the opportunity to swear homage to {s10} and become his vassal, gaining the right to choose a banner of your own and fight under it in battle.", starting_state="lord_mercenary_elaborate_banner", ending_state="lord_mercenary_elaborate_1")


lord_request_mission_ask_lord_pretalk = Dialog("anyone", "You still haven't finished the last job I gave you, {playername}. You should be working on that, not asking me for other things to do.", starting_state="lord_request_mission_ask", ending_state="lord_pretalk")
def condition():
    if partner_quest_001 >= 0:
        partner_quest_001 = store_partner_quest()
lord_request_mission_ask_lord_pretalk.conditionBlock = condition


lord_request_mission_ask_lord_pretalk_1 = Dialog("anyone", "I don't have any other jobs for you right now.", starting_state="lord_request_mission_ask", ending_state="lord_pretalk")
def condition():
    if troop_slot_eq(_g_talk_troop,20,1):
        pass
lord_request_mission_ask_lord_pretalk_1.conditionBlock = condition


lord_request_mission_ask_lord_tell_mission = Dialog("anyone|auto_proceed", "A task?", starting_state="lord_request_mission_ask", ending_state="lord_tell_mission")
def code():
    get_quest(_g_talk_troop)
    _random_quest_no = reg0
lord_request_mission_ask_lord_tell_mission.codeBlock = code


lord_request_mission_ask_lord_pretalk_2 = Dialog("anyone", "My lady, by the traditions of courtship, I should be offering my services to you. Unfortunately, I have little time right now, so I beg you to take this declaration of my esteem in its place.", starting_state="lord_request_mission_ask", ending_state="lord_pretalk")
def condition():
    if troop_slot_eq(_g_talk_troop,5,2) or troop_slot_eq(trp.player,34,_g_talk_troop):
        if troop_type_001 == 1:
            troop_type_001 = troop_get_type(trp.player)
lord_request_mission_ask_lord_pretalk_2.conditionBlock = condition


lord_tell_mission_lord_tell_mission_sworn_vassal = Dialog("anyone", "There are some minor errands which I need completed, but it would be more appropriate to give them to one of my own men, not to a sworn vassal of the realm.", starting_state="lord_tell_mission", ending_state="lord_tell_mission_sworn_vassal")
def condition():
    if _player_has_homage == 1 and _random_quest_no != qst.rescue_prisoner and _random_quest_no != qst.destroy_bandit_lair and _random_quest_no != qst.raise_troops and _random_quest_no != qst.escort_lady and _random_quest_no != qst.lend_companion and _random_quest_no != qst.capture_enemy_hero and _random_quest_no != qst.cause_provocation:
        pass
lord_tell_mission_lord_tell_mission_sworn_vassal.conditionBlock = condition


lord_tell_mission_sworn_vassal_lord_pretalk = Dialog("anyone", "If you are looking for action against our foes, you may join our attack on {s4}. The enemy may come in force to oppose us, so it is good to have as many men as possible.", starting_state="lord_tell_mission_sworn_vassal", ending_state="lord_pretalk")
def condition():
    if party_slot_eq(_g_talk_troop_party,4,1) or party_slot_eq(_g_talk_troop_party,4,5):
        party_slot_001 = party_get_slot(_g_talk_troop_party,5)
        if is_between(party_slot_001,p.town_1,p.salt_mine):
            s4 = str_store_party_name(party_slot_001)
lord_tell_mission_sworn_vassal_lord_pretalk.conditionBlock = condition


lord_tell_mission_sworn_vassal_lord_pretalk_1 = Dialog("anyone", "If you are looking for action against our foes, you may try venturing out to {s4}. We have received word that a force of the {s5} is in the area, and I am going there myself. I cannot guarantee you that our enemies will be there when you arrive, of course.", starting_state="lord_tell_mission_sworn_vassal", ending_state="lord_pretalk")
def condition():
    if _g_talk_x_troop_faction == _players_kingdom:
        party_slot_001 = party_get_slot(_g_talk_troop_party,5)
        if is_between(party_slot_001,p.town_1,p.salt_mine):
            party_slot_002 = party_get_slot(party_slot_001,55)
            if party_is_active(party_slot_002):
                party_faction_003 = store_faction_of_party(party_slot_002)
                faction_relation_004 = store_relation(party_faction_003,_g_talk_x_troop_faction)
                if faction_relation_004 < 0 and is_between(party_faction_003,fac.player_supporters_faction,fac.kingdoms_end):
                    s4 = str_store_party_name(party_slot_001)
                    s5 = str_store_faction_name(party_faction_003)
lord_tell_mission_sworn_vassal_lord_pretalk_1.conditionBlock = condition


lord_tell_mission_sworn_vassal_lord_pretalk_2 = Dialog("anyone", "If you are looking for action against our foes, you may try venturing out to {s4}. We have received word that a force of the {s5} is in the area. I am not currently headed that way, but others may be.  I cannot guarantee you that our enemies will be there when you arrive, of course.", starting_state="lord_tell_mission_sworn_vassal", ending_state="lord_pretalk")
def condition():
    if _g_talk_x_troop_faction == _players_kingdom:
        var001 = -1
        var002 = 9999
        for p_003 in range(p.town_1, p.salt_mine):
            party_faction_004 = store_faction_of_party(p_003)
            if party_faction_004 == _g_talk_x_troop_faction:
                party_slot_005 = party_get_slot(p_003,55)
                if party_is_active(party_slot_005):
                    party_faction_006 = store_faction_of_party(party_slot_005)
                    if is_between(party_faction_006,fac.player_supporters_faction,fac.kingdoms_end):
                        faction_relation_007 = store_relation(party_faction_006,_g_talk_x_troop_faction)
                        if faction_relation_007 < 0:
                            distance_parties_008 = store_distance_to_party_from_party(p_003,p.main_party)
                            if distance_parties_008 < var002:
                                var001 = p_003
                                var002 = distance_parties_008
                                s5 = str_store_faction_name(party_faction_006)
                            #end
                        #end
                    #end
                #end
            #end
        #end
    #end
    if is_between(var001,p.town_1,p.salt_mine):
        s4 = str_store_party_name(var001)
lord_tell_mission_sworn_vassal_lord_pretalk_2.conditionBlock = condition


lord_tell_mission_sworn_vassal_lord_pretalk_3 = Dialog("anyone", "If a worthy task presents itself, however, I may have a favor to ask of you at a later date.", starting_state="lord_tell_mission_sworn_vassal", ending_state="lord_pretalk")


lord_tell_mission_destroy_lair_quest_brief = Dialog("anyone", "Yes -- there is something you can do for us. We have heard reports that a group of {s4} have established a hideout in this area, and have been attacking travellers. If you could find their lair and destroy it, we would be very grateful.", starting_state="lord_tell_mission", ending_state="destroy_lair_quest_brief")
def condition():
    if _random_quest_no == qst.destroy_bandit_lair:
        quest_slot_001 = quest_get_slot(qst.destroy_bandit_lair,8)
        troop_id_002 = party_stack_get_troop_id(quest_slot_001,0)
        s4 = str_store_troop_name_plural(troop_id_002)
lord_tell_mission_destroy_lair_quest_brief.conditionBlock = condition


lord_tell_mission_lord_mission_rescue_prisoner = Dialog("anyone", "My {s11}, {s13}, has been taken prisoner by {s14} of the {s15}. Normally, honorable nobles will grant prisoners of gentle blood the privilege of parole, and treat them as honored guests so long as they give their word that they will not attempt to escape, until such time as a ransom can be paid.  But {s14}, instead of granting {s13} parole, has consigned my {s11} to his dungeons -- no doubt in the hope that he can demand more from us.", starting_state="lord_tell_mission", ending_state="lord_mission_rescue_prisoner")
def condition():
    if _random_quest_no == qst.rescue_prisoner:
        pass
lord_tell_mission_lord_mission_rescue_prisoner.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(_random_quest_no,2)
    troop_slot_002 = troop_get_slot(quest_slot_001,8)
    troop_get_family_relation_to_troop(quest_slot_001,_g_talk_troop)
    s9 = str_store_troop_name_link(_g_talk_troop)
    s13 = str_store_troop_name_link(quest_slot_001)
    s24 = str_store_party_name_link(troop_slot_002)
    party_slot_003 = party_get_slot(troop_slot_002,7)
    s14 = str_store_troop_name(party_slot_003)
    party_faction_004 = store_faction_of_party(troop_slot_002)
    s15 = str_store_faction_name(party_faction_004)
    setup_quest_text(_random_quest_no)
    s2 = str_store_string(gstr.s9_asked_you_to_rescue_s13_who_is_prisoner_at_s24)
lord_tell_mission_lord_mission_rescue_prisoner.codeBlock = code


lord_mission_rescue_prisoner_lord_mission_rescue_prisoner_confirm = Dialog("anyone", "We need you to get my {s11} out of prison. You may be able to pay a ransom -- in which case we could cover your expenses, up to 5000 denars. If you have connections within {s24}, you may be able to use them to sneak him out. Or, you may try a more direct approach -- walk up to the gaoler, take the keys by force, and then fight your way out. Can you do this for us?", starting_state="lord_mission_rescue_prisoner", ending_state="lord_mission_rescue_prisoner_confirm")


lord_mission_rescue_prisoner_confirm_lord_mission_rescue_prisoner_accepted = Dialog("anyone|plyr", "I can try.", starting_state="lord_mission_rescue_prisoner_confirm", ending_state="lord_mission_rescue_prisoner_accepted")


lord_mission_rescue_prisoner_confirm_lord_mission_rescue_prisoner_rejected = Dialog("anyone|plyr", "I don't think that I can help you.", starting_state="lord_mission_rescue_prisoner_confirm", ending_state="lord_mission_rescue_prisoner_rejected")


lord_mission_rescue_prisoner_rejected_close_window = Dialog("anyone", "It would not have been an easy task. Perhaps we will find another way.", starting_state="lord_mission_rescue_prisoner_rejected", ending_state="close_window")
def code():
    _g_leave_encounter = 1
lord_mission_rescue_prisoner_rejected_close_window.codeBlock = code


lord_mission_rescue_prisoner_accepted_lord_mission_rescue_prisoner_method = Dialog("anyone", "We are most grateful. Could I ask you how you were planning to proceed?", starting_state="lord_mission_rescue_prisoner_accepted", ending_state="lord_mission_rescue_prisoner_method")
def code():
    start_quest(_random_quest_no,_g_talk_troop)
    change_player_relation_with_troop(_g_talk_troop,1)
lord_mission_rescue_prisoner_accepted_lord_mission_rescue_prisoner_method.codeBlock = code


lord_mission_rescue_other_ideas_lord_mission_rescue_prisoner_method = Dialog("anyone", "Did you have any other ideas which you wished to discuss?", starting_state="lord_mission_rescue_other_ideas", ending_state="lord_mission_rescue_prisoner_method")


lord_mission_rescue_prisoner_method_lord_mission_rescue_prisoner_method_ransom = Dialog("anyone|plyr", "{!}I am thinking of paying the ransom.", starting_state="lord_mission_rescue_prisoner_method", ending_state="lord_mission_rescue_prisoner_method_ransom")
def condition():
    if 1 == 0:
        pass
lord_mission_rescue_prisoner_method_lord_mission_rescue_prisoner_method_ransom.conditionBlock = condition


lord_mission_rescue_prisoner_method_close_window = Dialog("anyone|plyr", "{!}I am thinking of using my connections in {s24}.", starting_state="lord_mission_rescue_prisoner_method", ending_state="close_window")
def condition():
    if 1 == 0:
        pass
lord_mission_rescue_prisoner_method_close_window.conditionBlock = condition


lord_mission_rescue_prisoner_method_lord_mission_rescue_prisoner_method_prisonbreak = Dialog("anyone|plyr", "I am thinking of breaking into the prison in {s24}, finding {s13}, and fighting my way out.", starting_state="lord_mission_rescue_prisoner_method", ending_state="lord_mission_rescue_prisoner_method_prisonbreak")


lord_mission_rescue_prisoner_method_lord_mission_rescue_prisoner_method_siege = Dialog("anyone|plyr", "I am thinking of taking {s24} by storm.", starting_state="lord_mission_rescue_prisoner_method", ending_state="lord_mission_rescue_prisoner_method_siege")


lord_mission_rescue_prisoner_method_lord_mission_rescue_prisoner_planning_end = Dialog("anyone|plyr", "I have done enough planning. Time to act!", starting_state="lord_mission_rescue_prisoner_method", ending_state="lord_mission_rescue_prisoner_planning_end")


lord_mission_rescue_prisoner_planning_end_close_window = Dialog("anyone", "May the heavens protect you.", starting_state="lord_mission_rescue_prisoner_planning_end", ending_state="close_window")
def code():
    _g_leave_encounter = 1
lord_mission_rescue_prisoner_planning_end_close_window.codeBlock = code


lord_mission_rescue_prisoner_method_ransom_lord_mission_rescue_other_ideas = Dialog("anyone", "{!}[Ransom option not yet implemented]", starting_state="lord_mission_rescue_prisoner_method_ransom", ending_state="lord_mission_rescue_other_ideas")


lord_mission_rescue_prisoner_method_prisonbreak_lord_mission_rescue_prisoner_method_prisonbreak_2 = Dialog("anyone", "I had discussed this idea with some of my men. One could enter {s24}, either in disguise or openly, then walk up to the prison guard and try to take the keys by force. However, getting out may be difficult. The garrison may be slow to react, but even so, you are likely to find yourself fighting a half dozen or more of the enemy at once, with limited space in which to maneuver. If you can fight your way past them, though, you can probably get out.", starting_state="lord_mission_rescue_prisoner_method_prisonbreak", ending_state="lord_mission_rescue_prisoner_method_prisonbreak_2")


lord_mission_rescue_prisoner_method_prisonbreak_2_lord_mission_rescue_other_ideas = Dialog("anyone", "You may find it useful to create a distraction, to divert the attention of some of the garrison. If you have any connections in the villages near {s24}, this may be a time to put them to use.", starting_state="lord_mission_rescue_prisoner_method_prisonbreak_2", ending_state="lord_mission_rescue_other_ideas")


lord_mission_rescue_prisoner_method_siege_lord_mission_rescue_other_ideas = Dialog("anyone", "Well, that is certainly the most direct approach.", starting_state="lord_mission_rescue_prisoner_method_siege", ending_state="lord_mission_rescue_other_ideas")


lord_tell_mission_lord_mission_deliver_message = Dialog("anyone", "I need to send a letter to {s13} who should be currently at {s4}. If you will be heading towards there, would you deliver it to him? The letter needs to be in his hands in 30 days.", starting_state="lord_tell_mission", ending_state="lord_mission_deliver_message")
def condition():
    if _random_quest_no == qst.deliver_message:
        pass
lord_tell_mission_lord_mission_deliver_message.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(_random_quest_no,2)
    quest_slot_002 = quest_get_slot(_random_quest_no,1)
    s9 = str_store_troop_name_link(_g_talk_troop)
    s13 = str_store_troop_name_link(quest_slot_001)
    s4 = str_store_party_name_link(quest_slot_002)
    setup_quest_text(_random_quest_no)
    s2 = str_store_string("@{s9} asked you to take a message to {s13}. {s13} was believed to be at {s4} when you were given this quest.")
lord_tell_mission_lord_mission_deliver_message.codeBlock = code


lord_mission_deliver_message_lord_mission_deliver_message_accepted = Dialog("anyone|plyr", "Certainly, I intend to pass by {s4} and it would be no trouble.", starting_state="lord_mission_deliver_message", ending_state="lord_mission_deliver_message_accepted")


lord_mission_deliver_message_lord_mission_deliver_message_rejected = Dialog("anyone|plyr", "I doubt I'll be seeing {s13} anytime soon, {s65}. You'd best send it with someone else.", starting_state="lord_mission_deliver_message", ending_state="lord_mission_deliver_message_rejected")


lord_mission_deliver_message_lord_mission_deliver_message_rejected_rudely = Dialog("anyone|plyr", "I am no errand boy, sir. Hire a courier for your trivialities.", starting_state="lord_mission_deliver_message", ending_state="lord_mission_deliver_message_rejected_rudely")


lord_mission_deliver_message_accepted_close_window = Dialog("anyone", "I appreciate it, {playername}. Here's the letter, and a small sum to cover your travel expenses. Give my regards to {s13} when you see him.", starting_state="lord_mission_deliver_message_accepted", ending_state="close_window")
def code():
    start_quest(_random_quest_no,_g_talk_troop)
    troop_add_gold(trp.player,30)
    _g_leave_encounter = 1
lord_mission_deliver_message_accepted_close_window.codeBlock = code


lord_mission_deliver_message_rejected_lord_pretalk = Dialog("anyone", "Ah, all right then. Well, I am sure I will find someone else.", starting_state="lord_mission_deliver_message_rejected", ending_state="lord_pretalk")
def code():
    troop_set_slot(_g_talk_troop,20,1)
lord_mission_deliver_message_rejected_lord_pretalk.codeBlock = code


lord_mission_deliver_message_rejected_rudely_lord_mission_deliver_message_rejected_rudely_2 = Dialog("anyone", "Hm, is this how you respond to a polite request for a small favor? A poor show, {playername}. I didn't know you would take offence.", starting_state="lord_mission_deliver_message_rejected_rudely", ending_state="lord_mission_deliver_message_rejected_rudely_2")


lord_mission_deliver_message_rejected_rudely_2_lord_mission_deliver_message_rejected_rudely_3 = Dialog("anyone|plyr", "Then you shall know better from now on.", starting_state="lord_mission_deliver_message_rejected_rudely_2", ending_state="lord_mission_deliver_message_rejected_rudely_3")


lord_mission_deliver_message_rejected_rudely_2_lord_mission_deliver_message_accepted = Dialog("anyone|plyr", "Forgive my temper, {s65}. I'll deliver your letter.", starting_state="lord_mission_deliver_message_rejected_rudely_2", ending_state="lord_mission_deliver_message_accepted")


lord_mission_deliver_message_rejected_rudely_3_close_window = Dialog("anyone", "All right. I will remember that.", starting_state="lord_mission_deliver_message_rejected_rudely_3", ending_state="close_window")
def code():
    change_player_relation_with_troop(_g_talk_troop,-4)
    quest_set_slot(_random_quest_no,25,150)
    troop_set_slot(_g_talk_troop,20,1)
    _g_leave_encounter = 1
lord_mission_deliver_message_rejected_rudely_3_close_window.codeBlock = code


lord_tell_mission_lord_mission_deliver_message_1 = Dialog("anyone", "I need to deliver a letter to {s13} of {s15}, who must be at {s4} currently. If you are going towards there, would you deliver my letter to him? The letter needs to reach him in 40 days.", starting_state="lord_tell_mission", ending_state="lord_mission_deliver_message")
def condition():
    if _random_quest_no == qst.deliver_message_to_enemy_lord:
        pass
lord_tell_mission_lord_mission_deliver_message_1.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(_random_quest_no,2)
    quest_slot_002 = quest_get_slot(_random_quest_no,1)
    s9 = str_store_troop_name_link(_g_talk_troop)
    s13 = str_store_troop_name_link(quest_slot_001)
    s4 = str_store_party_name_link(quest_slot_002)
    troop_faction_003 = store_faction_of_troop(quest_slot_001)
    s15 = str_store_faction_name_link(troop_faction_003)
    setup_quest_text(_random_quest_no)
    s2 = str_store_string("@{s9} asked you to take a message to {s13} of {s15}. {s13} was believed to be at {s4} when you were given this quest.")
lord_tell_mission_lord_mission_deliver_message_1.codeBlock = code


lord_tell_mission_lord_mission_told = Dialog("anyone", "There is a small thing... My {s17} {s13} is due for a visit to her relatives at {s14}. The visit has been postponed several times already with all the trouble on the roads, but this time she is adamant about going. So, I want to at least make sure she's well-guarded. I trust you well, {playername} so I would be very grateful if you could escort her to {s14} and make sure she arrives safe and sound.", starting_state="lord_tell_mission", ending_state="lord_mission_told")
def condition():
    if _random_quest_no == qst.escort_lady:
        pass
lord_tell_mission_lord_mission_told.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(_random_quest_no,4)
    quest_slot_002 = quest_get_slot(_random_quest_no,1)
    if troop_slot_eq(quest_slot_001,31,_g_talk_troop):
        s17 = str_store_string(gstr.daughter)
    else:
        s17 = str_store_string(gstr.wife)
    #end
    s11 = str_store_troop_name_link(_g_talk_troop)
    s13 = str_store_troop_name_link(quest_slot_001)
    s14 = str_store_party_name_link(quest_slot_002)
    setup_quest_text(_random_quest_no)
    s2 = str_store_string("@{s11} asked you to escort his {s17} {s13} to {s14}.")
lord_tell_mission_lord_mission_told.codeBlock = code


lord_tell_mission_lord_mission_deal_with_bandits_told = Dialog("anyone", "A group of bandits have taken refuge in my village of {s15}. They are plundering nearby farms, and getting rich and fat stealing my taxes and feasting on my cattle.I'd like nothing better than to go out there and teach them a lesson, but I have my hands full at the moment, so I can't do anything about it.", starting_state="lord_tell_mission", ending_state="lord_mission_deal_with_bandits_told")
def condition():
    if _random_quest_no == qst.deal_with_bandits_at_lords_village:
        pass
lord_tell_mission_lord_mission_deal_with_bandits_told.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(_random_quest_no,1)
    s15 = str_store_party_name_link(quest_slot_001)
    s13 = str_store_troop_name_link(_g_talk_troop)
    setup_quest_text(_random_quest_no)
    s2 = str_store_string("@{s13} asked you to deal with the bandits who are occupying the village of {s15} and then report back to him.")
lord_tell_mission_lord_mission_deal_with_bandits_told.codeBlock = code


lord_mission_deal_with_bandits_told_lord_mission_deal_with_bandits_accepted = Dialog("anyone|plyr", "Worry not, I can go to {s15} and deal with these scum for you.", starting_state="lord_mission_deal_with_bandits_told", ending_state="lord_mission_deal_with_bandits_accepted")


lord_mission_deal_with_bandits_told_lord_mission_deal_with_bandits_rejected = Dialog("anyone|plyr", "You shall have to find help elsewhere, I am too busy.", starting_state="lord_mission_deal_with_bandits_told", ending_state="lord_mission_deal_with_bandits_rejected")


lord_mission_deal_with_bandits_accepted_close_window = Dialog("anyone", "Will you do that? Know that, I will be grateful to you. Here is some money for the expenses of your campaign. Make an example of those {s43}s.", starting_state="lord_mission_deal_with_bandits_accepted", ending_state="close_window")
def code():
    lord_comment_to_s43(_g_talk_troop,gstr.lord_insult_default)
    start_quest(_random_quest_no,_g_talk_troop)
    troop_add_gold(trp.player,200)
    change_player_relation_with_troop(_g_talk_troop,1)
    _g_leave_encounter = 1
lord_mission_deal_with_bandits_accepted_close_window.codeBlock = code


lord_mission_deal_with_bandits_rejected_lord_pretalk = Dialog("anyone", "Ah... Very well then, forget I brought it up.", starting_state="lord_mission_deal_with_bandits_rejected", ending_state="lord_pretalk")
def code():
    troop_set_slot(_g_talk_troop,20,1)
lord_mission_deal_with_bandits_rejected_lord_pretalk.codeBlock = code


lord_tell_mission_lord_tell_mission_raise_troops = Dialog("anyone", "No lord should have to admit this, {playername}, but I was inspecting my soldiers the other day and there are men here who don't know which end of a sword to hold. {s43} You are a warrior of renown, {playername}. Will you train some troops for me? I would be grateful to you.", starting_state="lord_tell_mission", ending_state="lord_tell_mission_raise_troops")
def condition():
    if _random_quest_no == qst.raise_troops:
        pass
lord_tell_mission_lord_tell_mission_raise_troops.conditionBlock = condition
def code():
    lord_comment_to_s43(_g_talk_troop,gstr.troop_train_request_default)
lord_tell_mission_lord_tell_mission_raise_troops.codeBlock = code


lord_tell_mission_raise_troops_lord_tell_mission_raise_troops_2 = Dialog("anyone|plyr", "How many men do you need?", starting_state="lord_tell_mission_raise_troops", ending_state="lord_tell_mission_raise_troops_2")


lord_tell_mission_raise_troops_2_lord_mission_raise_troops_told = Dialog("anyone", "If you can raise {reg1} {s14} and bring them to me, that will probably be enough.", starting_state="lord_tell_mission_raise_troops_2", ending_state="lord_mission_raise_troops_told")
def code():
    quest_slot_001 = quest_get_slot(_random_quest_no,2)
    reg1 = quest_get_slot(_random_quest_no,10)
    s9 = str_store_troop_name_link(_g_talk_troop)
    s14 = str_store_troop_name_plural(quest_slot_001)
    setup_quest_text(_random_quest_no)
    s2 = str_store_string("@{s9} asked you to raise {reg1} {s14} and bring them to him.")
lord_tell_mission_raise_troops_2_lord_mission_raise_troops_told.codeBlock = code


lord_mission_raise_troops_told_lord_mission_raise_troops_accepted = Dialog("anyone|plyr", "Of course, {s65}. Give me {reg1} fresh recruits and I'll train them to be {s14}.", starting_state="lord_mission_raise_troops_told", ending_state="lord_mission_raise_troops_accepted")
def condition():
    reg1 = quest_get_slot(_random_quest_no,10)
lord_mission_raise_troops_told_lord_mission_raise_troops_accepted.conditionBlock = condition


lord_mission_raise_troops_told_lord_mission_raise_troops_rejected = Dialog("anyone|plyr", "I am too busy these days to train anyone.", starting_state="lord_mission_raise_troops_told", ending_state="lord_mission_raise_troops_rejected")


lord_mission_raise_troops_accepted_close_window = Dialog("anyone", "You've taken a weight off my shoulders, {playername}. I shall tell my sergeants to send you the recruits and attach them to your command. Also, I'll advance you some money to help with expenses. Here, this purse should do it. Thank you for your help.", starting_state="lord_mission_raise_troops_accepted", ending_state="close_window")
def code():
    start_quest(_random_quest_no,_g_talk_troop)
    troop_add_gold(trp.player,100)
    quest_slot_001 = quest_get_slot(_random_quest_no,4)
    quest_slot_002 = quest_get_slot(_random_quest_no,10)
    party_add_members(p.main_party,quest_slot_001,quest_slot_002)
    change_player_relation_with_troop(_g_talk_troop,1)
    _g_leave_encounter = 1
lord_mission_raise_troops_accepted_close_window.codeBlock = code


lord_mission_raise_troops_rejected_lord_pretalk = Dialog("anyone", "Oh, of course. I had expected as much. Well, good luck to you then.", starting_state="lord_mission_raise_troops_rejected", ending_state="lord_pretalk")
def code():
    troop_set_slot(_g_talk_troop,20,1)
lord_mission_raise_troops_rejected_lord_pretalk.codeBlock = code


lord_tell_mission_lord_mission_collect_taxes_told = Dialog("anyone", "You probably know that I am the lord of the {reg9?town:village} of {s3}. However, it has been months since {s3} has delivered the taxes and rents due me as its rightful lord. Apparently the populace there has grown unruly lately and I need someone to go there and remind them of their obligations. And to . . . persuade them if they won't listen. If you go there and raise the taxes they owe me, I will grant you one-fifth of everything you collect.", starting_state="lord_tell_mission", ending_state="lord_mission_collect_taxes_told")
def condition():
    if _random_quest_no == qst.collect_taxes:
        reg9 = 0
        if True:
            quest_slot_001 = quest_get_slot(_random_quest_no,1)
            if party_slot_eq(quest_slot_001,0,3):
                reg9 = 1
            #end
        #end
    #end
lord_tell_mission_lord_mission_collect_taxes_told.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(_random_quest_no,1)
    s9 = str_store_troop_name_link(_g_talk_troop)
    s3 = str_store_party_name_link(quest_slot_001)
    setup_quest_text(_random_quest_no)
    s2 = str_store_string("@{s9} asked you to collect taxes from {s3}. He offered to leave you one-fifth of all the money you collect there.")
lord_tell_mission_lord_mission_collect_taxes_told.codeBlock = code


lord_mission_collect_taxes_told_lord_mission_collect_taxes_accepted = Dialog("anyone|plyr", "A fair offer, {s65}. We have an agreement.", starting_state="lord_mission_collect_taxes_told", ending_state="lord_mission_collect_taxes_accepted")


lord_mission_collect_taxes_told_lord_mission_collect_taxes_rejected = Dialog("anyone|plyr", "Forgive me, I don't have the time.", starting_state="lord_mission_collect_taxes_told", ending_state="lord_mission_collect_taxes_rejected")


lord_mission_collect_taxes_accepted_close_window = Dialog("anyone", "Welcome news, {playername}. I will entrust this matter to you. Remember, those {reg9?townsmen:peasants} are foxy beasts, they will make every excuse not to pay me my rightful incomes. Do not let them fool you.", starting_state="lord_mission_collect_taxes_accepted", ending_state="close_window")
def code():
    start_quest(_random_quest_no,_g_talk_troop)
    change_player_relation_with_troop(_g_talk_troop,1)
    _g_leave_encounter = 1
    reg9 = 0
    quest_slot_001 = quest_get_slot(_random_quest_no,1)
    if party_slot_eq(quest_slot_001,0,3):
        reg9 = 1
    #end
lord_mission_collect_taxes_accepted_close_window.codeBlock = code


lord_mission_collect_taxes_rejected_lord_pretalk = Dialog("anyone", "Oh, yes. Well, good luck to you then.", starting_state="lord_mission_collect_taxes_rejected", ending_state="lord_pretalk")
def code():
    troop_set_slot(_g_talk_troop,20,1)
lord_mission_collect_taxes_rejected_lord_pretalk.codeBlock = code


lord_tell_mission_lord_mission_hunt_down_fugitive_told = Dialog("anyone", "I have something you could help with, an issue with the lawless villain known as {s4}.  He murdered one of my men and has been on the run from his judgment ever since. I can't let him get away with avoiding justice, so I've put a bounty of 300 denars on his head. Friends of the murdered man reckon that this assassin may have taken refuge with his kinsmen at {s3}. You might be able to hunt him down and give him what he deserves, and claim the bounty for yourself.", starting_state="lord_tell_mission", ending_state="lord_mission_hunt_down_fugitive_told")
def condition():
    if _random_quest_no == qst.hunt_down_fugitive:
        pass
lord_tell_mission_lord_mission_hunt_down_fugitive_told.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(_random_quest_no,1)
    quest_slot_002 = quest_get_slot(_random_quest_no,13)
    s9 = str_store_troop_name_link(_g_talk_troop)
    s3 = str_store_party_name_link(quest_slot_001)
    get_name_from_dna_to_s50(quest_slot_002)
    s4 = str_store_string(50)
    setup_quest_text(_random_quest_no)
    s2 = str_store_string("@{s9} asked you to hunt down a fugitive named {s4}. He is currently believed to be at {s3}.")
lord_tell_mission_lord_mission_hunt_down_fugitive_told.codeBlock = code


lord_mission_hunt_down_fugitive_told_lord_mission_hunt_down_fugitive_accepted = Dialog("anyone|plyr", "Then I will hunt him down and execute the law.", starting_state="lord_mission_hunt_down_fugitive_told", ending_state="lord_mission_hunt_down_fugitive_accepted")


lord_mission_hunt_down_fugitive_told_lord_mission_hunt_down_fugitive_rejected = Dialog("anyone|plyr", "I am too busy to go after him at the moment.", starting_state="lord_mission_hunt_down_fugitive_told", ending_state="lord_mission_hunt_down_fugitive_rejected")


lord_mission_hunt_down_fugitive_accepted_close_window = Dialog("anyone", "That's excellent, {playername}. I will be grateful to you and so will the family of the man he murdered. And of course the bounty on his head will be yours if you can get him. Well, good hunting to you.", starting_state="lord_mission_hunt_down_fugitive_accepted", ending_state="close_window")
def code():
    start_quest(_random_quest_no,_g_talk_troop)
    change_player_relation_with_troop(_g_talk_troop,1)
    _g_leave_encounter = 1
lord_mission_hunt_down_fugitive_accepted_close_window.codeBlock = code


lord_mission_hunt_down_fugitive_rejected_lord_pretalk = Dialog("anyone", "As you wish, {playername}.I suppose there are plenty of bounty hunters around to get the job done . . .", starting_state="lord_mission_hunt_down_fugitive_rejected", ending_state="lord_pretalk")
def code():
    troop_set_slot(_g_talk_troop,20,1)
lord_mission_hunt_down_fugitive_rejected_lord_pretalk.codeBlock = code


lord_tell_mission_lord_mission_told_kill_local_merchant = Dialog("anyone", "The wretched truth is that I owe a considerable sum of money to one of the merchants here in {s3}. I've no intention of paying it back, of course, but that loud-mouthed fool is making a terrible fuss about it. He even had the audacity to come and threaten me -- me! -- with a letter of complaint to the trade guilds and bankers. Why, he'd ruin my good reputation! So I need a {man/woman} I can trust, someone who will guarantee the man's silence. For good.", starting_state="lord_tell_mission", ending_state="lord_mission_told_kill_local_merchant")
def condition():
    if _random_quest_no == qst.kill_local_merchant:
        pass
lord_tell_mission_lord_mission_told_kill_local_merchant.conditionBlock = condition
def code():
    s9 = str_store_troop_name_link(_g_talk_troop)
    s3 = str_store_party_name_link(_current_town)
    setup_quest_text(_random_quest_no)
    s2 = str_store_string("@{s9} asked you to assassinate a local merchant at {s3}.")
lord_tell_mission_lord_mission_told_kill_local_merchant.codeBlock = code


lord_mission_told_kill_local_merchant_lord_mission_accepted_kill_local_merchant = Dialog("anyone|plyr", "Worry not, he shan't breathe a word.", starting_state="lord_mission_told_kill_local_merchant", ending_state="lord_mission_accepted_kill_local_merchant")


lord_mission_told_kill_local_merchant_lord_mission_rejected = Dialog("anyone|plyr", "I'm no common murderer, sir. Find someone else for your dirty job.", starting_state="lord_mission_told_kill_local_merchant", ending_state="lord_mission_rejected")


lord_mission_accepted_kill_local_merchant_close_window = Dialog("anyone", "Very good. I trust in your skill and discretion, {playername}. Do not disappoint me. Go now and wait for my word, I'll send you a message telling when and where you can catch the merchant. Dispose of him for me and I shall reward you generously.", starting_state="lord_mission_accepted_kill_local_merchant", ending_state="close_window")
def code():
    start_quest(_random_quest_no,_g_talk_troop)
    _g_leave_town = 1
    _qst_kill_local_merchant_center = _current_town
    rest_for_hours(10,4,0)
    finish_mission()
lord_mission_accepted_kill_local_merchant_close_window.codeBlock = code


lord_tell_mission_lord_mission_told_meet_spy_in_enemy_town = Dialog("anyone", "I have a sensitive matter which needs tending to, {playername}, and no trustworthy retainers to take care of it. The fact is that I have a spy in {s13} to keep an eye on things for me, and report anything that might warrant my attention. Every week I send someone to collect the spy's reports and bring them back to me. The job's yours if you wish it.", starting_state="lord_tell_mission", ending_state="lord_mission_told_meet_spy_in_enemy_town")
def condition():
    if _random_quest_no == qst.meet_spy_in_enemy_town:
        quest_slot_001 = quest_get_slot(_random_quest_no,1)
        s13 = str_store_party_name(quest_slot_001)
        party_faction_002 = store_faction_of_party()
        s14 = str_store_faction_name(party_faction_002)
lord_tell_mission_lord_mission_told_meet_spy_in_enemy_town.conditionBlock = condition


lord_mission_told_meet_spy_in_enemy_town_quest_meet_spy_in_enemy_town_accepted = Dialog("anyone|plyr", "I don't mind a bit of skullduggery. Count me in.", starting_state="lord_mission_told_meet_spy_in_enemy_town", ending_state="quest_meet_spy_in_enemy_town_accepted")


lord_mission_told_meet_spy_in_enemy_town_quest_meet_spy_in_enemy_town_rejected = Dialog("anyone|plyr", "I must decline. This cloak-and-dagger work isn't fit for me.", starting_state="lord_mission_told_meet_spy_in_enemy_town", ending_state="quest_meet_spy_in_enemy_town_rejected")


quest_meet_spy_in_enemy_town_accepted_quest_meet_spy_in_enemy_town_accepted_response = Dialog("anyone", "Excellent! Make your way to {s13} as soon as you can, the spy will be waiting.", starting_state="quest_meet_spy_in_enemy_town_accepted", ending_state="quest_meet_spy_in_enemy_town_accepted_response")
def code():
    quest_slot_001 = quest_get_slot(_random_quest_no,1)
    quest_slot_002 = quest_get_slot(_random_quest_no,10)
    var003 = quest_slot_002 - gstr.secret_sign_1
    var003 += gstr.countersign_1
    s9 = str_store_troop_name_link(_g_talk_troop)
    s11 = str_store_string(quest_slot_002)
    s12 = str_store_string(var003)
    s13 = str_store_party_name_link(quest_slot_001)
    setup_quest_text(_random_quest_no)
    s2 = str_store_string("@{s9} has asked you to meet with a spy in {s13}.")
    start_quest(_random_quest_no,_g_talk_troop)
    if cf_center_get_free_walker(quest_slot_001):
        center_set_walker_to_type(quest_slot_001,reg0,3)
        s14 = str_store_item_name(_spy_item_worn)
        change_player_relation_with_troop(_g_talk_troop,1)
        _g_leave_encounter = 1
quest_meet_spy_in_enemy_town_accepted_quest_meet_spy_in_enemy_town_accepted_response.codeBlock = code


quest_meet_spy_in_enemy_town_accepted_response_quest_meet_spy_in_enemy_town_accepted_2 = Dialog("anyone|plyr", "{s13} is heavily defended. How can I get close without being noticed?", starting_state="quest_meet_spy_in_enemy_town_accepted_response", ending_state="quest_meet_spy_in_enemy_town_accepted_2")
def condition():
    quest_slot_001 = quest_get_slot(_random_quest_no,1)
    s13 = str_store_party_name_link(quest_slot_001)
quest_meet_spy_in_enemy_town_accepted_response_quest_meet_spy_in_enemy_town_accepted_2.conditionBlock = condition


quest_meet_spy_in_enemy_town_accepted_2_quest_meet_spy_in_enemy_town_accepted_response = Dialog("anyone", "You shall have to use stealth. Take care to avoid enemy strongholds, villages and patrols, and don't bring too many men with you. If you fail to sneak in the first time, give it a while for the garrison to lower its guard again, or you may have a difficult time infiltrating the town.", starting_state="quest_meet_spy_in_enemy_town_accepted_2", ending_state="quest_meet_spy_in_enemy_town_accepted_response")


quest_meet_spy_in_enemy_town_accepted_response_quest_meet_spy_in_enemy_town_accepted_3 = Dialog("anyone|plyr", "How will I recognise the spy?", starting_state="quest_meet_spy_in_enemy_town_accepted_response", ending_state="quest_meet_spy_in_enemy_town_accepted_3")


quest_meet_spy_in_enemy_town_accepted_3_quest_meet_spy_in_enemy_town_accepted_response = Dialog("anyone", "Once you get to {s13} you must talk to the locals, the spy will be one of them. If you think you've found the spy, say the phrase '{s11}' The spy will respond with the phrase '{s12}' Thus you will know the other, and {reg7?she:he} will give you any information {reg7?she:he}'s gathered in my service.", starting_state="quest_meet_spy_in_enemy_town_accepted_3", ending_state="quest_meet_spy_in_enemy_town_accepted_response")
def condition():
    quest_slot_001 = quest_get_slot(_random_quest_no,1)
    s13 = str_store_party_name_link(quest_slot_001)
    reg7 = troop_get_type(_spy_quest_troop)
    quest_slot_002 = quest_get_slot(_random_quest_no,10)
    var003 = quest_slot_002 - gstr.secret_sign_1
    var003 += gstr.countersign_1
    s11 = str_store_string(quest_slot_002)
    s12 = str_store_string(var003)
quest_meet_spy_in_enemy_town_accepted_3_quest_meet_spy_in_enemy_town_accepted_response.conditionBlock = condition


quest_meet_spy_in_enemy_town_accepted_response_quest_meet_spy_in_enemy_town_accepted_4 = Dialog("anyone|plyr", "Will I be paid?", starting_state="quest_meet_spy_in_enemy_town_accepted_response", ending_state="quest_meet_spy_in_enemy_town_accepted_4")


quest_meet_spy_in_enemy_town_accepted_4_quest_meet_spy_in_enemy_town_accepted_response = Dialog("anyone", "Of course, I have plenty of silver in my coffers for loyal {men/women} like you. Do well by me, {playername}, and you'll rise high.", starting_state="quest_meet_spy_in_enemy_town_accepted_4", ending_state="quest_meet_spy_in_enemy_town_accepted_response")


quest_meet_spy_in_enemy_town_accepted_response_quest_meet_spy_in_enemy_town_accepted_end = Dialog("anyone|plyr", "I know what to do. Farewell, my lord.", starting_state="quest_meet_spy_in_enemy_town_accepted_response", ending_state="quest_meet_spy_in_enemy_town_accepted_end")


quest_meet_spy_in_enemy_town_accepted_end_lord_pretalk = Dialog("anyone", "Good luck, {playername}. Remember, the secret phrase is '{s11}' The counterphrase is '{s12}' Bring any reports back to me, and I'll compensate you for your trouble.", starting_state="quest_meet_spy_in_enemy_town_accepted_end", ending_state="lord_pretalk")
def condition():
    quest_slot_001 = quest_get_slot(_random_quest_no,10)
    var002 = quest_slot_001 - gstr.secret_sign_1
    var002 += gstr.countersign_1
    s11 = str_store_string(quest_slot_001)
    s12 = str_store_string(var002)
quest_meet_spy_in_enemy_town_accepted_end_lord_pretalk.conditionBlock = condition


quest_meet_spy_in_enemy_town_rejected_lord_pretalk = Dialog("anyone", "As you wish, {playername}, but I strongly advise you to forget anything I told you about any spies. They do not exist, have never existed, and no one will ever find them. Remember that.", starting_state="quest_meet_spy_in_enemy_town_rejected", ending_state="lord_pretalk")
def code():
    troop_set_slot(_g_talk_troop,20,1)
quest_meet_spy_in_enemy_town_rejected_lord_pretalk.codeBlock = code


lord_tell_mission_lord_mission_told_raid_caravan_to_start_war = Dialog("anyone", "This peace with {s13} ill suits me, {playername}. We've let those swine have their way for far too long. Now they get stronger with each passing and their arrogance knows no bounds. I say, we must wage war on them before it's too late! Unfortunately, some of the bleeding hearts among our realm's lords are blocking a possible declaration of war. Witless cowards with no stomach for blood.", starting_state="lord_tell_mission", ending_state="lord_mission_told_raid_caravan_to_start_war")
def condition():
    if _random_quest_no == qst.cause_provocation:
        quest_slot_001 = quest_get_slot(_random_quest_no,3)
        s13 = str_store_faction_name_link(quest_slot_001)
lord_tell_mission_lord_mission_told_raid_caravan_to_start_war.conditionBlock = condition


lord_mission_told_raid_caravan_to_start_war_lord_mission_tell_raid_caravan_to_start_war_2 = Dialog("anyone|plyr", "You are right, {s65}, but what can we do?", starting_state="lord_mission_told_raid_caravan_to_start_war", ending_state="lord_mission_tell_raid_caravan_to_start_war_2")


lord_mission_told_raid_caravan_to_start_war_quest_raid_caravan_to_start_war_rejected_1 = Dialog("anyone|plyr", "I disagree, sir. It is better that there be peace.", starting_state="lord_mission_told_raid_caravan_to_start_war", ending_state="quest_raid_caravan_to_start_war_rejected_1")


lord_mission_tell_raid_caravan_to_start_war_2_lord_mission_tell_raid_caravan_to_start_war_3 = Dialog("anyone", "Ah, 'tis good to hear someone who understands! As a matter of fact, there is something we can do, {playername}. A little bit of provocation... If one of our war parties managed to enter their territory and pillage one of their caravans, or raided one of their villages, and perhaps left behind a little token or two of the {s14}, they would have ample cause to declare war on us. And then, well, even the cowards among us must rise to defend themselves. So what do you say? Are you interested?", starting_state="lord_mission_tell_raid_caravan_to_start_war_2", ending_state="lord_mission_tell_raid_caravan_to_start_war_3")
def condition():
    quest_slot_001 = quest_get_slot(_random_quest_no,3)
    s13 = str_store_faction_name_link(quest_slot_001)
    s14 = str_store_faction_name(_g_talk_x_troop_faction)
lord_mission_tell_raid_caravan_to_start_war_2_lord_mission_tell_raid_caravan_to_start_war_3.conditionBlock = condition


lord_mission_tell_raid_caravan_to_start_war_3_quest_raid_caravan_to_start_war_accepted = Dialog("anyone|plyr", "An excellent plan. Count me in.", starting_state="lord_mission_tell_raid_caravan_to_start_war_3", ending_state="quest_raid_caravan_to_start_war_accepted")


lord_mission_tell_raid_caravan_to_start_war_3_lord_mission_tell_raid_caravan_to_start_war_4 = Dialog("anyone|plyr", "Why don't you do that yourself?", starting_state="lord_mission_tell_raid_caravan_to_start_war_3", ending_state="lord_mission_tell_raid_caravan_to_start_war_4")


lord_mission_tell_raid_caravan_to_start_war_4_lord_mission_tell_raid_caravan_to_start_war_5 = Dialog("anyone", "Well, {playername}, some of the lords in our kingdom won't like the idea of someone inciting a war without their consent. They are already looking for an excuse to get at me, and if I did this they could make me pay for it dearly. You, on the other hand, are young and well-liked and daring, so you might just get away with it. And of course I will back you up and defend your actions against your opponents. All in all, a few lords might be upset at your endeavour, but I am sure you won't be bothered with that.", starting_state="lord_mission_tell_raid_caravan_to_start_war_4", ending_state="lord_mission_tell_raid_caravan_to_start_war_5")


lord_mission_tell_raid_caravan_to_start_war_5_quest_raid_caravan_to_start_war_accepted = Dialog("anyone|plyr", "That seems reasonable. I am willing to do this.", starting_state="lord_mission_tell_raid_caravan_to_start_war_5", ending_state="quest_raid_caravan_to_start_war_accepted")


lord_mission_tell_raid_caravan_to_start_war_5_quest_raid_caravan_to_start_war_rejected_2 = Dialog("anyone|plyr", "I don't like this. Find yourself someone else to take the blame for your schemes.", starting_state="lord_mission_tell_raid_caravan_to_start_war_5", ending_state="quest_raid_caravan_to_start_war_rejected_2")


quest_raid_caravan_to_start_war_accepted_close_window = Dialog("anyone", "Very good! A raid on a caravan, or, if you can't manage that, an attack on one of their villages, should do the trick. Now, good luck and good hunting. Go set the borders aflame!", starting_state="quest_raid_caravan_to_start_war_accepted", ending_state="close_window")
def code():
    quest_slot_001 = quest_get_slot(_random_quest_no,3)
    quest_slot_002 = quest_get_slot(_random_quest_no,10)
    s9 = str_store_troop_name_link(_g_talk_troop)
    s13 = str_store_faction_name_link(quest_slot_001)
    reg13 = quest_slot_002
    setup_quest_text(_random_quest_no)
    s2 = str_store_string(gstr.s9_asked_you_to_attack_a_village_or_some_caravans_as_to_provoke_a_war_with_s13)
    start_quest(_random_quest_no,_g_talk_troop)
    _g_leave_encounter = 1
quest_raid_caravan_to_start_war_accepted_close_window.codeBlock = code


quest_raid_caravan_to_start_war_rejected_1_lord_pretalk = Dialog("anyone", "Ah, you think so? But how long will your precious peace last? Not long, believe me.", starting_state="quest_raid_caravan_to_start_war_rejected_1", ending_state="lord_pretalk")
def code():
    troop_set_slot(_g_talk_troop,20,1)
quest_raid_caravan_to_start_war_rejected_1_lord_pretalk.codeBlock = code


quest_raid_caravan_to_start_war_rejected_2_lord_pretalk = Dialog("anyone", "Hm. As you wish, {playername}. I thought you had some fire in you, but it seems I was wrong.", starting_state="quest_raid_caravan_to_start_war_rejected_2", ending_state="lord_pretalk")
def code():
    troop_set_slot(_g_talk_troop,20,1)
quest_raid_caravan_to_start_war_rejected_2_lord_pretalk.codeBlock = code


lord_tell_mission_lord_mission_told_1 = Dialog("anyone", "Well, some of the serfs working my fields in {s4} have run away. The ungrateful swine, I let them plough my fields and rent my cottages, and this is how they repay me! From what I've been hearing, they're running to {s3} as fast as they can, and have split up into three groups to try and avoid capture. I want you to capture all three groups and fetch them back to {s4} by whatever means necessary. I should really have them hanged for attempting to escape, but we need hands for the upcoming harvest, so I'll let them go off this time with a good beating.", starting_state="lord_tell_mission", ending_state="lord_mission_told")
def condition():
    if _random_quest_no == qst.bring_back_runaway_serfs:
        pass
lord_tell_mission_lord_mission_told_1.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(_random_quest_no,1)
    quest_slot_002 = quest_get_slot(_random_quest_no,7)
    s9 = str_store_troop_name_link(_g_talk_troop)
    s3 = str_store_party_name_link(quest_slot_001)
    s4 = str_store_party_name_link(quest_slot_002)
    setup_quest_text(_random_quest_no)
    s2 = str_store_string(gstr.s9_asked_you_to_catch_the_three_groups_of_runaway_serfs_and_bring_them_back_to_s4_alive_and_breathing_he_said_that_all_three_groups_are_heading_towards_s3)
lord_tell_mission_lord_mission_told_1.codeBlock = code


lord_tell_mission_lord_tell_mission_follow_spy = Dialog("anyone", "I have good information that a man in this very town is actually an enemy spy. He should be seized and hanged for his impudence, but we also believe that very soon he will leave town to meet with his master, the man to whom the spy feeds all his little whispers. The spy himself is of little import, but the master is a dangerous man, and could tell us a great deal if we could only get our hands on him...", starting_state="lord_tell_mission", ending_state="lord_tell_mission_follow_spy")
def condition():
    if _random_quest_no == qst.follow_spy:
        pass
lord_tell_mission_lord_tell_mission_follow_spy.conditionBlock = condition


lord_tell_mission_follow_spy_lord_tell_mission_follow_spy_2 = Dialog("anyone", "I want you to wait here until the spy leaves town. Then you must follow him, stealthily, to the meeting place. You must take absolute care not to be seen by the spy on your way, else he may suspect foul play and turn back. When the master appears, you must ambush and arrest them and bring the pair back to me. Alive, if you please.", starting_state="lord_tell_mission_follow_spy", ending_state="lord_tell_mission_follow_spy_2")


lord_tell_mission_follow_spy_2_lord_tell_mission_follow_spy_accepted = Dialog("anyone|plyr", "I'll do it, {s65}.", starting_state="lord_tell_mission_follow_spy_2", ending_state="lord_tell_mission_follow_spy_accepted")


lord_tell_mission_follow_spy_2_lord_tell_mission_follow_spy_rejected = Dialog("anyone|plyr", "No, this skulking is not for me.", starting_state="lord_tell_mission_follow_spy_2", ending_state="lord_tell_mission_follow_spy_rejected")


lord_tell_mission_follow_spy_accepted_close_window = Dialog("anyone", "Good, I'm sure you'll do a fine job of it. One of my men will point the spy out to you when he leaves, so you will know the man to follow. Remember, I want them both, and I want them alive.", starting_state="lord_tell_mission_follow_spy_accepted", ending_state="close_window")
def code():
    s11 = str_store_troop_name_link(_g_talk_troop)
    s12 = str_store_party_name_link(_g_encountered_party)
    setup_quest_text(_random_quest_no)
    s2 = str_store_string("@{s11} asked you to follow the spy that will leave {s12}. Be careful not to let the spy see you on the way;;; or he may get suspicious and turn back. Once the spy meets with his accomplice;;; you are to capture them and bring them back to {s11}.")
    start_quest(_random_quest_no,_g_talk_troop)
    change_player_relation_with_troop(_g_talk_troop,1)
    spawn_around_party(p.main_party,pt.spy_partners)
    _qst_follow_spy_spy_partners_party = reg0
    party_set_position(_qst_follow_spy_spy_partners_party,63)
    party_set_ai_behavior(_qst_follow_spy_spy_partners_party,0)
    party_set_flags(_qst_follow_spy_spy_partners_party,65536,0)
    set_spawn_radius(0)
    spawn_around_party(_g_encountered_party,pt.spy)
    _qst_follow_spy_spy_party = reg0
    party_set_ai_behavior(_qst_follow_spy_spy_party,1)
    party_set_ai_object(_qst_follow_spy_spy_party,_qst_follow_spy_spy_partners_party)
    party_set_flags(_qst_follow_spy_spy_party,65536,0)
    _g_leave_town = 1
    rest_for_hours(2,4,0)
lord_tell_mission_follow_spy_accepted_close_window.codeBlock = code


lord_tell_mission_follow_spy_rejected_lord_pretalk = Dialog("anyone", "A shame. Well, carry on as you were, {playername}...", starting_state="lord_tell_mission_follow_spy_rejected", ending_state="lord_pretalk")
def code():
    troop_set_slot(_g_talk_troop,20,1)
lord_tell_mission_follow_spy_rejected_lord_pretalk.codeBlock = code


lord_tell_mission_lord_tell_mission_capture_enemy_hero = Dialog("anyone", "There is a difficult job I need done, {playername}, and you may be the {man/one} who can carry it off. I need someone to capture one of the noble lords of {s13} and bring him to me. Afterwards, I'll be able to exchange him in return for a relative of mine held by {s13}. It is a simple enough job, but whomever you choose will be guarded by an elite band of personal retainers. Are you up for a fight?", starting_state="lord_tell_mission", ending_state="lord_tell_mission_capture_enemy_hero")
def condition():
    if _random_quest_no == qst.capture_enemy_hero:
        pass
lord_tell_mission_lord_tell_mission_capture_enemy_hero.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(_random_quest_no,3)
    s13 = str_store_faction_name(quest_slot_001)
lord_tell_mission_lord_tell_mission_capture_enemy_hero.codeBlock = code


lord_tell_mission_capture_enemy_hero_lord_tell_mission_capture_enemy_hero_accepted = Dialog("anyone|plyr", "Consider it done, {s65}.", starting_state="lord_tell_mission_capture_enemy_hero", ending_state="lord_tell_mission_capture_enemy_hero_accepted")


lord_tell_mission_capture_enemy_hero_lord_tell_mission_capture_enemy_hero_rejected = Dialog("anyone|plyr", "I must refuse, {s65}. I am not a kidnapper.", starting_state="lord_tell_mission_capture_enemy_hero", ending_state="lord_tell_mission_capture_enemy_hero_rejected")


lord_tell_mission_capture_enemy_hero_accepted_close_window = Dialog("anyone", "I like your spirit! Go and bring me one of our enemies, and I'll toast your name in my hall when you return! And reward you for your efforts, of course...", starting_state="lord_tell_mission_capture_enemy_hero_accepted", ending_state="close_window")
def code():
    quest_slot_001 = quest_get_slot(_random_quest_no,3)
    s11 = str_store_troop_name_link(_g_talk_troop)
    s13 = str_store_faction_name_link(quest_slot_001)
    setup_quest_text(_random_quest_no)
    s2 = str_store_string("@{s11} asked you to capture a lord from {s13};;; any lord;;; and then drag your victim back to {s11} for safekeeping.")
    start_quest(_random_quest_no,_g_talk_troop)
    change_player_relation_with_troop(_g_talk_troop,1)
    _g_leave_encounter = 1
lord_tell_mission_capture_enemy_hero_accepted_close_window.codeBlock = code


lord_tell_mission_capture_enemy_hero_rejected_lord_pretalk = Dialog("anyone", "Clearly you lack the mettle I had thought you possessed. Very well, {playername}, I will find someone else.", starting_state="lord_tell_mission_capture_enemy_hero_rejected", ending_state="lord_pretalk")
def code():
    troop_set_slot(_g_talk_troop,20,1)
lord_tell_mission_capture_enemy_hero_rejected_lord_pretalk.codeBlock = code


lord_tell_mission_lord_tell_mission_lend_companion = Dialog("anyone", "I don't have a job for you right now, but your companion {s3} is a skilled {reg3?lass:fellow} and I need someone with {reg3?her:his} talents. Will you lend {reg3?her:him} to me for a while?", starting_state="lord_tell_mission", ending_state="lord_tell_mission_lend_companion")
def condition():
    if _random_quest_no == qst.lend_companion:
        pass
lord_tell_mission_lord_tell_mission_lend_companion.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(_random_quest_no,2)
    quest_slot_002 = quest_get_slot(_random_quest_no,10)
    quest_slot_002 += 1
    reg1 = quest_slot_002
    s9 = str_store_troop_name_link(_g_talk_troop)
    s3 = str_store_troop_name(quest_slot_001)
    setup_quest_text(_random_quest_no)
    reg3 = troop_get_type(quest_slot_001)
    s2 = str_store_string("@{s9} asked you to lend your companion {s3} to him for a week.")
lord_tell_mission_lord_tell_mission_lend_companion.codeBlock = code


lord_tell_mission_lend_companion_lord_tell_mission_lend_companion_2 = Dialog("anyone|plyr", "How long will you be needing {reg3?her:him}?", starting_state="lord_tell_mission_lend_companion", ending_state="lord_tell_mission_lend_companion_2")


lord_tell_mission_lend_companion_2_lord_mission_lend_companion_told = Dialog("anyone", "Just a few days, a week at most.", starting_state="lord_tell_mission_lend_companion_2", ending_state="lord_mission_lend_companion_told")


lord_mission_lend_companion_told_lord_tell_mission_lend_companion_accepted = Dialog("anyone|plyr", "Then I will leave {s3} with you for one week.", starting_state="lord_mission_lend_companion_told", ending_state="lord_tell_mission_lend_companion_accepted")
def condition():
    quest_slot_001 = quest_get_slot(_random_quest_no,2)
    s3 = str_store_troop_name(quest_slot_001)
lord_mission_lend_companion_told_lord_tell_mission_lend_companion_accepted.conditionBlock = condition


lord_mission_lend_companion_told_lord_tell_mission_lend_companion_rejected = Dialog("anyone|plyr", "I am sorry, but I cannot do without {s3} for a whole week.", starting_state="lord_mission_lend_companion_told", ending_state="lord_tell_mission_lend_companion_rejected")
def condition():
    quest_slot_001 = quest_get_slot(_random_quest_no,2)
    s3 = str_store_troop_name(quest_slot_001)
lord_mission_lend_companion_told_lord_tell_mission_lend_companion_rejected.conditionBlock = condition


lord_tell_mission_lend_companion_accepted_close_window = Dialog("anyone", "I cannot thank you enough, {playername}. Worry not, your companion shall be returned to you with due haste.", starting_state="lord_tell_mission_lend_companion_accepted", ending_state="close_window")
def code():
    start_quest(_random_quest_no,_g_talk_troop)
    change_player_relation_with_troop(_g_talk_troop,1)
    quest_slot_001 = quest_get_slot(_random_quest_no,2)
    party_remove_members(p.main_party,quest_slot_001,1)
    _g_leave_encounter = 1
lord_tell_mission_lend_companion_accepted_close_window.codeBlock = code


lord_tell_mission_lend_companion_rejected_lord_pretalk = Dialog("anyone", "Well, that's damned unfortunate, but I suppose I cannot force you or {s3} to agree. I shall have to make do without.", starting_state="lord_tell_mission_lend_companion_rejected", ending_state="lord_pretalk")
def code():
    troop_set_slot(_g_talk_troop,20,1)
lord_tell_mission_lend_companion_rejected_lord_pretalk.codeBlock = code


lord_tell_mission_lord_tell_mission_collect_debt = Dialog("anyone", "Some time ago, I loaned out a considerable sum of money to {s3}. {reg4} denars, to be precise. He was supposed to pay it back within a month but I haven't received a copper from him since. That was months ago. If you could collect the debt from him on my behalf, I would be grateful indeed. I would even let you keep one fifth of the money for your trouble. What do you say?", starting_state="lord_tell_mission", ending_state="lord_tell_mission_collect_debt")
def condition():
    if _random_quest_no == qst.collect_debt:
        pass
lord_tell_mission_lord_tell_mission_collect_debt.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(_random_quest_no,2)
    quest_slot_002 = quest_get_slot(_random_quest_no,1)
    reg4 = quest_get_slot(_random_quest_no,10)
    s9 = str_store_troop_name_link(_g_talk_troop)
    s3 = str_store_troop_name_link(quest_slot_001)
    s4 = str_store_party_name_link(quest_slot_002)
    setup_quest_text(_random_quest_no)
    s2 = str_store_string("@{s9} asked you to collect the debt of {reg4} denars {s3} owes to him. {s3} was at {s4} when you were given this quest.")
lord_tell_mission_lord_tell_mission_collect_debt.codeBlock = code


lord_tell_mission_collect_debt_lord_tell_mission_collect_debt_2 = Dialog("anyone|plyr", "Do you know where I can find {s3}, {s65}?", starting_state="lord_tell_mission_collect_debt", ending_state="lord_tell_mission_collect_debt_2")


lord_tell_mission_collect_debt_2_lord_tell_mission_collect_debt_3 = Dialog("anyone", "If you leave now, you should be able to find him at {s4}. I've no doubt that he will be suitably embarassed by his conduct and give you all the money he owes me.", starting_state="lord_tell_mission_collect_debt_2", ending_state="lord_tell_mission_collect_debt_3")


lord_tell_mission_collect_debt_3_lord_tell_mission_collect_debt_accepted = Dialog("anyone|plyr", "Then I will talk to {s3} on your behalf.", starting_state="lord_tell_mission_collect_debt_3", ending_state="lord_tell_mission_collect_debt_accepted")


lord_tell_mission_collect_debt_3_lord_tell_mission_collect_debt_rejected = Dialog("anyone|plyr", "Forgive me, {s65}, but I doubt I would be more successful than yourself.", starting_state="lord_tell_mission_collect_debt_3", ending_state="lord_tell_mission_collect_debt_rejected")


lord_tell_mission_collect_debt_accepted_close_window = Dialog("anyone", "You made me very happy by accepting this {playername}. Please, talk to {s3} and don't leave him without my money.", starting_state="lord_tell_mission_collect_debt_accepted", ending_state="close_window")
def code():
    start_quest(_random_quest_no,_g_talk_troop)
    change_player_relation_with_troop(_g_talk_troop,1)
    _g_leave_encounter = 1
lord_tell_mission_collect_debt_accepted_close_window.codeBlock = code


lord_tell_mission_collect_debt_rejected_lord_pretalk = Dialog("anyone", "Perhaps not, {playername}. I suppose I'm never getting that money back...", starting_state="lord_tell_mission_collect_debt_rejected", ending_state="lord_pretalk")
def code():
    troop_set_slot(_g_talk_troop,20,1)
lord_tell_mission_collect_debt_rejected_lord_pretalk.codeBlock = code


lord_tell_mission_lord_tell_mission_incriminate_commander = Dialog("anyone", "I tell you, that blubbering fool {s13} is not fit to rule {s14}. God knows he would be divested of his lands in an instant were it not for one of his loyal vassals, {s15}. As long as he has his vassal aiding him, it will be a difficult job beating him. So I need to get {s15} out of the picture, and I have a plan just to do that... With your help, naturally.", starting_state="lord_tell_mission", ending_state="lord_tell_mission_incriminate_commander")
def condition():
    if _random_quest_no == qst.incriminate_loyal_commander:
        quest_slot_001 = quest_get_slot(qst.incriminate_loyal_commander,2)
        quest_slot_002 = quest_get_slot(qst.incriminate_loyal_commander,4)
        quest_slot_003 = quest_get_slot(qst.incriminate_loyal_commander,1)
        s13 = str_store_troop_name_link(quest_slot_001)
        s14 = str_store_party_name_link(quest_slot_003)
        s15 = str_store_troop_name_link(quest_slot_002)
lord_tell_mission_lord_tell_mission_incriminate_commander.conditionBlock = condition


lord_tell_mission_incriminate_commander_lord_tell_mission_incriminate_commander_2 = Dialog("anyone|plyr", "{s66}, I am all ears.", starting_state="lord_tell_mission_incriminate_commander", ending_state="lord_tell_mission_incriminate_commander_2")


lord_tell_mission_incriminate_commander_lord_tell_mission_incriminate_commander_rejected = Dialog("anyone|plyr", "I don't wish to involve myself in anything dishonourable against {s15}.", starting_state="lord_tell_mission_incriminate_commander", ending_state="lord_tell_mission_incriminate_commander_rejected")


lord_tell_mission_incriminate_commander_rejected_lord_pretalk = Dialog("anyone", "Dishonourable? Bah! I was hoping I could count on you, {playername}, but you've shown me what a fool I was. I shall have to find someone whose loyalty I can trust.", starting_state="lord_tell_mission_incriminate_commander_rejected", ending_state="lord_pretalk")
def code():
    change_player_relation_with_troop(_g_talk_troop,-5)
    change_player_honor(2)
lord_tell_mission_incriminate_commander_rejected_lord_pretalk.codeBlock = code


lord_tell_mission_incriminate_commander_2_lord_tell_mission_incriminate_commander_3 = Dialog("anyone", "I have written a fake letter to {s15}, bearing my own seal, which implicates him in a conspiracy with us to stage a coup in {s14}, in my favour. If we can make {s13} believe the letter is genuine, he will deal with {s15} very swiftly. Of course, the challenge there is to convince {s13} that the letter is indeed real...", starting_state="lord_tell_mission_incriminate_commander_2", ending_state="lord_tell_mission_incriminate_commander_3")


lord_tell_mission_incriminate_commander_3_lord_tell_mission_incriminate_commander_4 = Dialog("anyone|plyr", "Please continue, {s65}...", starting_state="lord_tell_mission_incriminate_commander_3", ending_state="lord_tell_mission_incriminate_commander_4")


lord_tell_mission_incriminate_commander_3_lord_tell_mission_incriminate_commander_rejected = Dialog("anyone|plyr", "No, I will not sully myself with this dishonourable scheme.", starting_state="lord_tell_mission_incriminate_commander_3", ending_state="lord_tell_mission_incriminate_commander_rejected")


lord_tell_mission_incriminate_commander_4_lord_tell_mission_incriminate_commander_5 = Dialog("anyone", "This is where you come into play. You'll take the letter to {s14}, then give it to one of your soldiers and instruct him to take it to {s15}. I will have one of my spies inform the town garrison so that your man will be arrested on his way. The guards will then find the letter and take it to {s13}. They'll torture your man, of course, to try and get the truth out of him, but all he knows is that you ordered the letter to be delivered to {s15} under the utmost secrecy. {s13} knows you serve me, and the fool will certainly believe the whole charade.", starting_state="lord_tell_mission_incriminate_commander_4", ending_state="lord_tell_mission_incriminate_commander_5")


lord_tell_mission_incriminate_commander_5_lord_tell_mission_incriminate_commander_7 = Dialog("anyone|plyr", "Is that all?", starting_state="lord_tell_mission_incriminate_commander_5", ending_state="lord_tell_mission_incriminate_commander_7")


lord_tell_mission_incriminate_commander_7_lord_tell_mission_incriminate_commander_8 = Dialog("anyone", "There is one more thing... Your messenger must be someone trustworthy. If you sent the letter with a simple peasant, someone expendable, {s13} might suspect a plot. He may have the wits of a snail, but even a snail can see the obvious. Give the letter to someone of rank. One of your {s9}, perhaps.", starting_state="lord_tell_mission_incriminate_commander_7", ending_state="lord_tell_mission_incriminate_commander_8")
def condition():
    s8 = str_store_troop_name(_incriminate_quest_sacrificed_troop)
    s9 = str_store_troop_name_plural(_incriminate_quest_sacrificed_troop)
lord_tell_mission_incriminate_commander_7_lord_tell_mission_incriminate_commander_8.conditionBlock = condition


lord_tell_mission_incriminate_commander_8_lord_tell_mission_incriminate_commander_9 = Dialog("anyone|plyr", "What? I can't send one of my trusted {s9} to his death!", starting_state="lord_tell_mission_incriminate_commander_8", ending_state="lord_tell_mission_incriminate_commander_9")


lord_tell_mission_incriminate_commander_8_lord_tell_mission_incriminate_commander_fin = Dialog("anyone|plyr", "Then a {s8} it will be.", starting_state="lord_tell_mission_incriminate_commander_8", ending_state="lord_tell_mission_incriminate_commander_fin")


lord_tell_mission_incriminate_commander_9_lord_tell_mission_incriminate_commander_10 = Dialog("anyone", "Come now, {playername}. There is a place for sentimentality, but this is not it. Believe me, you shall be generously compensated, and what is the purpose of soldiers if not to die at our say-so?", starting_state="lord_tell_mission_incriminate_commander_9", ending_state="lord_tell_mission_incriminate_commander_10")


lord_tell_mission_incriminate_commander_10_lord_tell_mission_incriminate_commander_fin = Dialog("anyone|plyr", "A {s8} it is.", starting_state="lord_tell_mission_incriminate_commander_10", ending_state="lord_tell_mission_incriminate_commander_fin")


lord_tell_mission_incriminate_commander_10_lord_tell_mission_incriminate_commander_rejected = Dialog("anyone|plyr", "No, I'll not sacrifice one of my chosen men.", starting_state="lord_tell_mission_incriminate_commander_10", ending_state="lord_tell_mission_incriminate_commander_rejected")


lord_tell_mission_incriminate_commander_fin_lord_pretalk = Dialog("anyone", "I can't tell you how pleased I am to hear that, {playername}. You are removing one of the greatest obstacles in my path. Here is the letter, as well as 300 denars for your expenses. Remember, there'll be more once you succeed. Much, much more...", starting_state="lord_tell_mission_incriminate_commander_fin", ending_state="lord_pretalk")
def code():
    quest_slot_001 = quest_get_slot(qst.incriminate_loyal_commander,2)
    quest_slot_002 = quest_get_slot(qst.incriminate_loyal_commander,4)
    quest_slot_003 = quest_get_slot(qst.incriminate_loyal_commander,1)
    troop_add_gold(trp.player,300)
    change_player_relation_with_troop(_g_talk_troop,2)
    s11 = str_store_troop_name_link(_g_talk_troop)
    s13 = str_store_troop_name_link(quest_slot_001)
    s14 = str_store_party_name_link(quest_slot_003)
    s15 = str_store_troop_name_plural(_incriminate_quest_sacrificed_troop)
    s16 = str_store_troop_name_link(quest_slot_002)
    setup_quest_text(_random_quest_no)
    s2 = str_store_string("@{s11} gave you a fake letter to fool {s13} into banishing his vassal {s16}. You are to go near {s14};;; give the letter to one of your {s15} and send him into the town as a messenger;;; believing his orders to be genuine.")
    start_quest(_random_quest_no,_g_talk_troop)
lord_tell_mission_incriminate_commander_fin_lord_pretalk.codeBlock = code


lord_tell_mission_lord_mission_told_2 = Dialog("anyone", "A group of my soldiers were captured in a recent skirmish with the enemy. Thankfully we have a mutual agreement of prisoner exchange, and they will release my men, but they want us to give them prisoners of equal rank and number. Prisoners I don't currently have. So, I need a good {man/warrior} to find me {reg1} {s3} as prisoners, that I may exchange them.", starting_state="lord_tell_mission", ending_state="lord_mission_told")
def condition():
    if _random_quest_no == qst.capture_prisoners:
        pass
lord_tell_mission_lord_mission_told_2.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(qst.capture_prisoners,2)
    quest_slot_002 = quest_get_slot(qst.capture_prisoners,10)
    reg1 = quest_slot_002
    s9 = str_store_troop_name_link(_g_talk_troop)
    s3 = str_store_troop_name_by_count(quest_slot_001,quest_slot_002)
    setup_quest_text(_random_quest_no)
    s2 = str_store_string("@{s9} has requested you to bring him {reg1} {s3} as prisoners.")
lord_tell_mission_lord_mission_told_2.codeBlock = code


lord_tell_mission_lord_pretalk = Dialog("anyone", "No {playername}. I do not need your help at this time.", starting_state="lord_tell_mission", ending_state="lord_pretalk")


lord_mission_told_lord_mission_accepted = Dialog("anyone|plyr", "You can count on me, {s65}.", starting_state="lord_mission_told", ending_state="lord_mission_accepted")


lord_mission_told_lord_mission_rejected = Dialog("anyone|plyr", "I fear I cannot accept such a mission at the moment.", starting_state="lord_mission_told", ending_state="lord_mission_rejected")


lord_mission_accepted_close_window = Dialog("anyone", "Excellent, {playername}, excellent. I have every confidence in you.", starting_state="lord_mission_accepted", ending_state="close_window")
def code():
    _g_leave_encounter = 1
    if _random_quest_no == qst.escort_lady:
        quest_slot_001 = quest_get_slot(_random_quest_no,4)
        troop_set_slot(quest_slot_001,12,0)
        troop_join(quest_slot_001)
    elif _random_quest_no == qst.deliver_message_to_enemy_lord:
        troop_add_gold(trp.player,10)
    elif _random_quest_no == qst.bring_back_runaway_serfs:
        quest_slot_002 = quest_get_slot(_random_quest_no,12)
        quest_slot_003 = quest_get_slot(_random_quest_no,1)
        quest_slot_004 = quest_get_slot(_random_quest_no,9)
        set_spawn_radius(3)
        spawn_around_party(quest_slot_002,quest_slot_004)
        _qst_bring_back_runaway_serfs_party_1 = reg0
        party_set_ai_behavior(_qst_bring_back_runaway_serfs_party_1,1)
        party_set_ai_object(_qst_bring_back_runaway_serfs_party_1,quest_slot_003)
        party_set_flags(_qst_bring_back_runaway_serfs_party_1,65536,0)
        spawn_around_party(quest_slot_002,quest_slot_004)
        _qst_bring_back_runaway_serfs_party_2 = reg0
        party_set_ai_behavior(_qst_bring_back_runaway_serfs_party_2,1)
        party_set_ai_object(_qst_bring_back_runaway_serfs_party_2,quest_slot_003)
        party_set_flags(_qst_bring_back_runaway_serfs_party_2,65536,0)
        spawn_around_party(quest_slot_002,quest_slot_004)
        _qst_bring_back_runaway_serfs_party_3 = reg0
        party_set_ai_behavior(_qst_bring_back_runaway_serfs_party_3,1)
        party_set_ai_object(_qst_bring_back_runaway_serfs_party_3,quest_slot_003)
        party_set_flags(_qst_bring_back_runaway_serfs_party_3,65536,0)
        rest_for_hours(1,4)
    #end
    start_quest(_random_quest_no,_g_talk_troop)
    if _random_quest_no == qst.lend_surgeon:
        _g_leave_town_outside = 1
        _auto_enter_town = _g_encountered_party
        rest_for_hours(4)
        _lord_requested_to_talk_to = _g_talk_troop
    #end
lord_mission_accepted_close_window.codeBlock = code


lord_mission_rejected_close_window = Dialog("anyone", "Is that so? Well, I suppose you're just not up to the task. I shall have to look for somebody with more mettle.", starting_state="lord_mission_rejected", ending_state="close_window")
def code():
    _g_leave_encounter = 1
    change_player_relation_with_troop(_g_talk_troop,-1)
    if quest_slot_eq(_random_quest_no,25,0):
        quest_set_slot(_random_quest_no,25,1)
    #end
    troop_set_slot(_g_talk_troop,20,1)
lord_mission_rejected_close_window.codeBlock = code


lord_talk_lord_leave_prison = Dialog("anyone|plyr", "I must leave now.", starting_state="lord_talk", ending_state="lord_leave_prison")
def condition():
    if troop_slot_ge(_g_talk_troop,8,0):
        pass
lord_talk_lord_leave_prison.conditionBlock = condition


lord_talk_lord_leave = Dialog("anyone|plyr", "This audience is over. I leave now.", starting_state="lord_talk", ending_state="lord_leave")
def condition():
    if _g_talk_x_troop_faction_relation < 0 and not troop_slot_ge(_g_talk_troop,8,0):
        pass
lord_talk_lord_leave.conditionBlock = condition


lord_talk_lord_leave_1 = Dialog("anyone|plyr", "I must beg my leave.", starting_state="lord_talk", ending_state="lord_leave")
def condition():
    if _g_talk_x_troop_faction_relation >= 0 and not troop_slot_ge(_g_talk_troop,8,0):
        pass
lord_talk_lord_leave_1.conditionBlock = condition


lord_leave_lord_leave_give_quest = Dialog("anyone", "Before you go, {playername}, I have something to ask of you... We may be enemies in this war, but I pray that you believe, as I do, that we can still be civil towards each other. Thus I hoped that you would be kind enough to assist me in something important to me.", starting_state="lord_leave", ending_state="lord_leave_give_quest")
def condition():
    if not troop_slot_ge(_g_talk_troop,8,0) and _g_talk_x_troop_faction_relation < 0:
        partner_quest_001 = store_partner_quest()
        if partner_quest_001 < 0 and troop_slot_eq(_g_talk_troop,20,0):
            get_quest(_g_talk_troop)
            if _random_quest_no >= 0 and _random_quest_no == qst.lend_surgeon or 2 == 1:
                _random_quest_no = reg0
lord_leave_lord_leave_give_quest.conditionBlock = condition


lord_leave_give_quest_enemy_lord_tell_mission = Dialog("anyone|plyr", "I am listening.", starting_state="lord_leave_give_quest", ending_state="enemy_lord_tell_mission")


enemy_lord_tell_mission_lord_mission_told = Dialog("anyone", "I have a friend here, an old warrior, who is very sick. Pestilence has infected an old battle wound, and unless he is seen to by a surgeon soon,  he will surely die. This man is dear to me, {playername}, but he's also stubborn as a hog and refuses to have anyone look at his injury because he doesn't trust the physicians here. I have heard that you've a capable surgeon with you. If you would let your surgeon come here and have a look, {reg3?she:he} may be able to convince him to give his consent to an operation. Please, I will be deeply indebted to you if you grant me this request.", starting_state="enemy_lord_tell_mission", ending_state="lord_mission_told")
def condition():
    if _random_quest_no == qst.lend_surgeon:
        pass
enemy_lord_tell_mission_lord_mission_told.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(_random_quest_no,4)
    s1 = str_store_troop_name_link(_g_talk_troop)
    s3 = str_store_troop_name(quest_slot_001)
    reg3 = troop_get_type(quest_slot_001)
    setup_quest_text(_random_quest_no)
    s2 = str_store_string("@Lend your experienced surgeon {s3} to {s1}.")
enemy_lord_tell_mission_lord_mission_told.codeBlock = code


enemy_lord_tell_mission_close_window = Dialog("anyone", "{!}ERROR: MATCHED WITH QUEST: {s7}.", starting_state="enemy_lord_tell_mission", ending_state="close_window")
def condition():
    s7 = str_store_quest_name(_random_quest_no)
enemy_lord_tell_mission_close_window.conditionBlock = condition


lord_leave_prison_close_window = Dialog("anyone", "We'll meet again.", starting_state="lord_leave_prison", ending_state="close_window")


lord_leave_close_window = Dialog("anyone|auto_proceed", "Farewell, my lady. I shall remain your most ardent admirer.", starting_state="lord_leave", ending_state="close_window")
def condition():
    troop_type_001 = troop_get_type(trp.player)
    if troop_type_001 == 1:
        if reg0 > 7 and _g_talk_troop_relation >= 0 and not troop_slot_ge(_g_talk_troop,34,trp.npc1) and not troop_slot_ge(_g_talk_troop,30,trp.npc1) and not troop_slot_ge(trp.player,34,trp.npc1) and not troop_slot_ge(trp.player,30,trp.npc1) and not faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop):
            troop_get_romantic_chemistry_with_troop(trp.player,_g_talk_troop)
lord_leave_close_window.conditionBlock = condition
def code():
    if _talk_context == 2:
        _g_leave_encounter = 1
lord_leave_close_window.codeBlock = code


lord_leave_close_window_1 = Dialog("anyone|auto_proceed", "Of course, {playername}. Farewell.", starting_state="lord_leave", ending_state="close_window")
def condition():
    if faction_slot_eq(_g_talk_x_troop_faction,11,_g_talk_troop):
        pass
lord_leave_close_window_1.conditionBlock = condition
def code():
    if _talk_context == 2:
        _g_leave_encounter = 1
lord_leave_close_window_1.codeBlock = code


lord_leave_close_window_2 = Dialog("anyone|auto_proceed", "Good journeys to you, {playername}.", starting_state="lord_leave", ending_state="close_window")
def condition():
    if _g_talk_troop_relation >= 10:
        pass
lord_leave_close_window_2.conditionBlock = condition
def code():
    if _talk_context == 2:
        _g_leave_encounter = 1
lord_leave_close_window_2.codeBlock = code


lord_leave_close_window_3 = Dialog("anyone|auto_proceed", "Yes, yes. Farewell.", starting_state="lord_leave", ending_state="close_window")
def condition():
    if _g_talk_x_troop_faction_relation >= 0:
        pass
lord_leave_close_window_3.conditionBlock = condition
def code():
    if _talk_context == 2:
        _g_leave_encounter = 1
lord_leave_close_window_3.codeBlock = code


lord_leave_close_window_4 = Dialog("anyone|auto_proceed", "We will meet again.", starting_state="lord_leave", ending_state="close_window")
def code():
    if _talk_context == 2:
        _g_leave_encounter = 1
lord_leave_close_window_4.codeBlock = code


member_chat_lady_journey_1 = Dialog("anyone|plyr", "Are you enjoying the journey, {s65}?", starting_state="member_chat", ending_state="lady_journey_1")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6):
        pass
member_chat_lady_journey_1.conditionBlock = condition


lady_journey_1_close_window = Dialog("anyone", "I am doing quite fine, {playername}. Thank you for your concern.", starting_state="lady_journey_1", ending_state="close_window")


start_spouse_talk = Dialog("anyone", "Yes, my husband?", starting_state="start", ending_state="spouse_talk")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and troop_slot_eq(trp.player,30,_g_talk_troop):
        pass
start_spouse_talk.conditionBlock = condition


spouse_talk_minister_issues = Dialog("anyone|plyr", "As you are my chief minister, I wish to speak to about affairs of state", starting_state="spouse_talk", ending_state="minister_issues")
def condition():
    if _g_player_minister == _g_talk_troop:
        pass
spouse_talk_minister_issues.conditionBlock = condition


spouse_talk_offer_gift_quest_complete = Dialog("anyone|plyr", "I have the materials for {s4}'s gift.", starting_state="spouse_talk", ending_state="offer_gift_quest_complete")
def condition():
    if check_quest_active(qst.offer_gift) and quest_slot_eq(qst.offer_gift,6,_g_talk_troop):
        quest_slot_001 = quest_get_slot(qst.offer_gift,2)
        if player_has_item(itm.furs) and player_has_item(itm.velvet):
            s4 = str_store_troop_name(quest_slot_001)
spouse_talk_offer_gift_quest_complete.conditionBlock = condition


offer_gift_quest_complete_close_window = Dialog("anyone", "Ah, let me take those. Hopefully this will mend the quarrel between you two. You may wish to speak to {reg4?her:him}, and see if I had any success.", starting_state="offer_gift_quest_complete", ending_state="close_window")
def condition():
    quest_slot_001 = quest_get_slot(qst.offer_gift,2)
    reg4 = troop_get_type(quest_slot_001)
offer_gift_quest_complete_close_window.conditionBlock = condition
def code():
    quest_set_slot(qst.offer_gift,11,2)
    quest_set_slot(qst.offer_gift,23,365)
    troop_remove_item(trp.player,itm.furs)
    troop_remove_item(trp.player,itm.velvet)
    _g_leave_encounter = 1
offer_gift_quest_complete_close_window.codeBlock = code


spouse_talk_spouse_cancel_political_quest = Dialog("anyone|plyr", "Let's abandon our plan to {s10}.", starting_state="spouse_talk", ending_state="spouse_cancel_political_quest")
def condition():
    _political_quest_to_cancel = -1
    if check_quest_active(qst.offer_gift) and quest_slot_eq(qst.offer_gift,6,_g_talk_troop):
        _political_quest_to_cancel = qst.offer_gift
        s10 = str_store_string(gstr.offer_gift_description)
    elif check_quest_active(qst.resolve_dispute) and quest_slot_eq(qst.resolve_dispute,6,_g_talk_troop):
        _political_quest_to_cancel = qst.resolve_dispute
        s10 = str_store_string(gstr.resolve_dispute_description)
        if _political_quest_to_cancel > 0:
            pass
        #end
    #end
spouse_talk_spouse_cancel_political_quest.conditionBlock = condition


spouse_cancel_political_quest_spouse_cancel_political_quest_confirm = Dialog("anyone", "Are you sure you want to drop that idea?", starting_state="spouse_cancel_political_quest", ending_state="spouse_cancel_political_quest_confirm")


spouse_cancel_political_quest_confirm_spouse_pretalk = Dialog("anyone|plyr", "Yes, I am sure. Let's abandon that idea.", starting_state="spouse_cancel_political_quest_confirm", ending_state="spouse_pretalk")
def code():
    abort_quest(_political_quest_to_cancel,1)
spouse_cancel_political_quest_confirm_spouse_pretalk.codeBlock = code


spouse_cancel_political_quest_confirm_spouse_pretalk_1 = Dialog("anyone|plyr", "Actually, never mind.", starting_state="spouse_cancel_political_quest_confirm", ending_state="spouse_pretalk")


spouse_talk_combined_political_quests = Dialog("anyone|plyr", "Let us think of a way to improve our standing in this realm", starting_state="spouse_talk", ending_state="combined_political_quests")
def code():
    get_political_quest(_g_talk_troop)
    _political_quest_found = reg0
    _political_quest_target_troop = reg1
    _political_quest_object_troop = reg2
spouse_talk_combined_political_quests.codeBlock = code


spouse_talk_spouse_organize_feast = Dialog("anyone|plyr", "I was thinking that perhaps we could host a feast", starting_state="spouse_talk", ending_state="spouse_organize_feast")
def condition():
    if not check_quest_active(qst.organize_feast):
        pass
spouse_talk_spouse_organize_feast.conditionBlock = condition


spouse_talk_spouse_household_possessions = Dialog("anyone|plyr", "Let us take inventory of our household possessions", starting_state="spouse_talk", ending_state="spouse_household_possessions")
def code():
    change_screen_loot(trp.household_possessions)
spouse_talk_spouse_household_possessions.codeBlock = code


spouse_household_possessions_spouse_pretalk = Dialog("anyone", "Anyway, that is the content of our larder.", starting_state="spouse_household_possessions", ending_state="spouse_pretalk")


spouse_talk_close_window = Dialog("anyone|plyr", "We shall speak later, my {wife/husband}", starting_state="spouse_talk", ending_state="close_window")
def code():
    _g_leave_encounter = 1
spouse_talk_close_window.codeBlock = code


wedding_ceremony_bride_vow_wedding_ceremony_player_vow = Dialog("anyone", "My husband, I hearby pledge to be your wife, to stand with you in good times and bad. May the heavens smile upon us and bless us with children, livestock, and land.", starting_state="wedding_ceremony_bride_vow", ending_state="wedding_ceremony_player_vow")
def code():
    quest_slot_001 = quest_get_slot(qst.wed_betrothed,2)
    set_conversation_speaker_troop(quest_slot_001)
wedding_ceremony_bride_vow_wedding_ceremony_player_vow.codeBlock = code


wedding_ceremony_player_vow_wedding_ceremony_vows_complete = Dialog("anyone|plyr", "I pledge the same. Let us be husband and wife.", starting_state="wedding_ceremony_player_vow", ending_state="wedding_ceremony_vows_complete")


wedding_ceremony_player_vow_close_window = Dialog("anyone|plyr", "Wait -- hold on... I'm not quite ready for this.", starting_state="wedding_ceremony_player_vow", ending_state="close_window")


wedding_ceremony_vows_complete_close_window = Dialog("anyone", "I now declare you and {s3} to be husband and wife. Go now to the chamber prepared for you, and we shall make arrangements for your bride to join you in your hall in {s11}.", starting_state="wedding_ceremony_vows_complete", ending_state="close_window")
def code():
    courtship_event_bride_marry_groom(_g_player_bride,trp.player,0)
    get_kingdom_lady_social_determinants(_g_player_bride)
    s3 = str_store_troop_name(_g_player_bride)
    if reg0 != trp.player:
        s11 = str_store_string(gstr.error__player_not_logged_as_groom)
    else:
        s11 = str_store_party_name(reg1)
        troop_set_slot(_g_player_bride,12,reg1)
    #end
wedding_ceremony_vows_complete_close_window.codeBlock = code


spouse_pretalk_spouse_talk = Dialog("anyone", "Is there anything else, my {husband/wife}?", starting_state="spouse_pretalk", ending_state="spouse_talk")


spouse_organize_feast_spouse_pretalk = Dialog("anyone", "A splendid idea, my {husband/wife}. However, let us wait for the current feast here to conclude, before organizing another.", starting_state="spouse_organize_feast", ending_state="spouse_pretalk")
def condition():
    if faction_slot_eq(_players_kingdom,4,6) and faction_slot_eq(_players_kingdom,5,_g_encountered_party):
        pass
spouse_organize_feast_spouse_pretalk.conditionBlock = condition


spouse_organize_feast_spouse_pretalk_1 = Dialog("anyone", "A splendid idea, my {husband/wife}. However, we must establish a court before hosting a feast.", starting_state="spouse_organize_feast", ending_state="spouse_pretalk")
def condition():
    if _players_kingdom == fac.player_supporters_faction and not is_between(_g_player_court,p.town_1,p.salt_mine):
        pass
spouse_organize_feast_spouse_pretalk_1.conditionBlock = condition


spouse_organize_feast_spouse_pretalk_2 = Dialog("anyone", "A splendid idea, my {husband/wife}. However, our realm has recently had a feast. Perhaps we should wait another {reg3} days before we organize another one.", starting_state="spouse_organize_feast", ending_state="spouse_pretalk")
def condition():
    if _players_kingdom == fac.player_supporters_faction:
        cur_hours_001 = store_current_hours()
        faction_slot_002 = faction_get_slot(_players_kingdom,94)
        cur_hours_001 -= faction_slot_002
        if _cheat_mode >= 1:
            reg4 = cur_hours_001
            s4 = str_store_faction_name(_players_kingdom)
            print("@{!}DEBUG -- {reg4} hours since last feast for {s4}")
        #end
    #end
    if cur_hours_001 < 120:
        var003 = 168 - cur_hours_001
        var003 /= 24
        reg3 = var003
spouse_organize_feast_spouse_pretalk_2.conditionBlock = condition


spouse_organize_feast_spouse_evaluate_larder_for_feast = Dialog("anyone", "A splendid idea, my {husband/wife}. However, to not insult our guests, we must make sure that we can provide a large and varied repast, for the lords, their families, and their retinues. All told, we should count on a couple of hundred mouths to feed, over several days. Let us take an inventory of our household possessions...", starting_state="spouse_organize_feast", ending_state="spouse_evaluate_larder_for_feast")


spouse_evaluate_larder_for_feast_spouse_feast_confirm = Dialog("anyone", "{s9}", starting_state="spouse_evaluate_larder_for_feast", ending_state="spouse_feast_confirm")
def condition():
    internal_politics_rate_feast_to_s9(trp.household_possessions,600,_players_kingdom,0)
    _feast_quality = reg0
spouse_evaluate_larder_for_feast_spouse_feast_confirm.conditionBlock = condition


spouse_feast_confirm_spouse_feast_added_items = Dialog("anyone|plyr", "Let me add more items to our storehouses", starting_state="spouse_feast_confirm", ending_state="spouse_feast_added_items")
def code():
    change_screen_loot(trp.household_possessions)
spouse_feast_confirm_spouse_feast_added_items.codeBlock = code


spouse_feast_added_items_spouse_evaluate_larder_for_feast = Dialog("anyone", "All right -- let me reevalute what is there...", starting_state="spouse_feast_added_items", ending_state="spouse_evaluate_larder_for_feast")


spouse_feast_confirm_spouse_feast_confirm_yes = Dialog("anyone|plyr", "Let us dispatch the invitations", starting_state="spouse_feast_confirm", ending_state="spouse_feast_confirm_yes")
def condition():
    if _feast_quality > 1:
        pass
spouse_feast_confirm_spouse_feast_confirm_yes.conditionBlock = condition


spouse_feast_confirm_spouse_pretalk = Dialog("anyone|plyr", "Let us wait, then", starting_state="spouse_feast_confirm", ending_state="spouse_pretalk")


spouse_feast_confirm_yes_spouse_pretalk = Dialog("anyone", "I shall send word, then, that we will host a feast as soon as conditions in the realm permit. You perhaps should continue to stock our larder, so that we may do justice to our reputation for hospitality.", starting_state="spouse_feast_confirm_yes", ending_state="spouse_pretalk")
def condition():
    if _players_kingdom != fac.player_supporters_faction:
        pass
spouse_feast_confirm_yes_spouse_pretalk.conditionBlock = condition
def code():
    var001 = -1
    if is_between(_g_encountered_party,p.town_1,p.village_1) and party_slot_eq(_g_encountered_party,7,trp.player) or party_slot_eq(_g_encountered_party,7,_g_talk_troop):
        var001 = _g_encountered_party
    else:
        for p_002 in range(p.town_1, p.village_1):
            if var001 == -1 and party_slot_eq(p_002,7,trp.player) or party_slot_eq(p_002,7,_g_talk_troop):
                var001 = p_002
            #end
        #end
    #elif is_between(_g_encountered_party,p.town_1,p.village_1):
    #    var001 = _g_encountered_party
    #end
    s9 = str_store_party_name(var001)
    setup_quest_text(qst.organize_feast)
    s2 = str_store_string(gstr.you_intend_to_bring_goods_to_s9_in_preparation_for_the_feast_which_will_be_held_as_soon_as_conditions_permit)
    quest_set_slot(qst.organize_feast,1,var001)
    quest_set_slot(qst.organize_feast,23,30)
    start_quest(qst.organize_feast,_g_talk_troop)
spouse_feast_confirm_yes_spouse_pretalk.codeBlock = code


spouse_feast_confirm_yes_spouse_pretalk_1 = Dialog("anyone", "Very well, then. Let the feast begin immediately at our court {reg4?here:} in {s9}. You perhaps should continue to stock our larder, so that we may do justice to our reputation for hospitality. You may declare the feast to be concluded at any time, either by beginning a campaign or by letting it be known that the vassals can return to their homes.", starting_state="spouse_feast_confirm_yes", ending_state="spouse_pretalk")
def code():
    s9 = str_store_party_name(_g_player_court)
    setup_quest_text(qst.organize_feast)
    s2 = str_store_string(gstr.you_intend_to_bring_goods_to_s9_in_preparation_for_the_feast_which_will_be_held_as_soon_as_conditions_permit)
    quest_set_slot(qst.organize_feast,1,_g_player_court)
    quest_set_slot(qst.organize_feast,23,30)
    start_quest(qst.organize_feast,_g_talk_troop)
    faction_set_slot(_players_kingdom,4,6)
    faction_set_slot(_players_kingdom,5,_g_player_court)
    _player_marshal_ai_state = 6
    _player_marshal_ai_object = _g_player_court
    _g_recalculate_ais = 1
    reg4 = 1
    if _g_encountered_party != _g_player_court:
        reg4 = 0
    #end
spouse_feast_confirm_yes_spouse_pretalk_1.codeBlock = code


start_close_window_16 = Dialog("anyone", "How wonderful it is... In a short while we shall be married! However, I should point out that, in the remaining few days, it is not customary for us to speak too much together.", starting_state="start", ending_state="close_window")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and check_quest_active(qst.wed_betrothed) and quest_slot_eq(qst.wed_betrothed,2,_g_talk_troop) and quest_slot_ge(qst.wed_betrothed,23,2):
        pass
start_close_window_16.conditionBlock = condition
def code():
    if check_quest_active(qst.visit_lady) and quest_slot_eq(qst.visit_lady,6,_g_talk_troop):
        end_quest(qst.visit_lady)
    #end
start_close_window_16.codeBlock = code


start_close_window_17 = Dialog("anyone", "Em, {playername}, you might not be used to our wedding customs, but I had hoped that someone would tell you... Speak first to my {s11}, {s4}.", starting_state="start", ending_state="close_window")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and check_quest_active(qst.wed_betrothed) and quest_slot_eq(qst.wed_betrothed,2,_g_talk_troop):
        get_kingdom_lady_social_determinants(_g_talk_troop)
        troop_id_001 = reg0
        troop_slot_002 = troop_get_slot(troop_id_001,10)
        if party_is_active(troop_slot_002):
            party_attached_003 = party_get_attached_to(troop_slot_002)
            if party_attached_003 == _g_encountered_party:
                troop_get_family_relation_to_troop(troop_id_001,_g_talk_troop)
                s4 = str_store_troop_name(troop_id_001)
start_close_window_17.conditionBlock = condition


start_close_window_18 = Dialog("anyone", "I do not know where to find my {s11} {s10}, who by tradition should preside over our wedding. Perhaps we should wait until he can be found...", starting_state="start", ending_state="close_window")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and check_quest_active(qst.wed_betrothed) and quest_slot_eq(qst.wed_betrothed,2,_g_talk_troop):
        quest_slot_001 = quest_get_slot(qst.wed_betrothed,6)
        troop_get_family_relation_to_troop(quest_slot_001,_g_talk_troop)
        s10 = str_store_troop_name(quest_slot_001)
start_close_window_18.conditionBlock = condition
def code():
    _g_leave_encounter = 1
start_close_window_18.codeBlock = code


start_close_window_19 = Dialog("anyone", "The honorable {s12} has agreed to allow us to return home to our families. We shall be departing shortly.", starting_state="start", ending_state="close_window")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and _g_talk_x_troop_faction != _g_encountered_party_faction:
        party_slot_001 = party_get_slot(_g_encountered_party,0)
        if party_slot_001 >= trp.npc1:
            s12 = str_store_troop_name(party_slot_001)
start_close_window_19.conditionBlock = condition


start_kingdom_lady_captive = Dialog("anyone", "So great is my loneliness! How I miss my family!", starting_state="start", ending_state="kingdom_lady_captive")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and not troop_slot_eq(trp.player,30,_g_talk_troop) and _g_talk_x_troop_faction != _g_encountered_party_faction and troop_slot_eq(_g_talk_troop,8,_g_encountered_party) and _g_time_since_last_talk > 24:
        pass
start_kingdom_lady_captive.conditionBlock = condition


start_kingdom_lady_captive_1 = Dialog("anyone", "You are a cad, {sir/madame}, to hold a lady like this...", starting_state="start", ending_state="kingdom_lady_captive")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and not troop_slot_eq(trp.player,30,_g_talk_troop) and _g_talk_x_troop_faction != _g_encountered_party_faction and troop_slot_eq(_g_talk_troop,8,_g_encountered_party) and _g_talk_troop_relation < 1:
        pass
start_kingdom_lady_captive_1.conditionBlock = condition


start_kingdom_lady_captive_2 = Dialog("anyone", "It is strange. On occasion you have shown me such kindness, and yet you continue to hold me here against my will.", starting_state="start", ending_state="kingdom_lady_captive")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and not troop_slot_eq(trp.player,30,_g_talk_troop) and _g_talk_x_troop_faction != _g_encountered_party_faction and troop_slot_eq(_g_talk_troop,8,_g_encountered_party) and _g_talk_troop_relation < 11:
        pass
start_kingdom_lady_captive_2.conditionBlock = condition


start_kingdom_lady_captive_3 = Dialog("anyone", "Why haven't my family paid my ransom? You may hold me as prisoner, but it seems that you care for me more than they do!", starting_state="start", ending_state="kingdom_lady_captive")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and not troop_slot_eq(trp.player,30,_g_talk_troop) and _g_talk_x_troop_faction != _g_encountered_party_faction and troop_slot_eq(_g_talk_troop,8,_g_encountered_party):
        pass
start_kingdom_lady_captive_3.conditionBlock = condition


start_lady_stranded_next = Dialog("anyone|auto_proceed", "{!}.", starting_state="start", ending_state="lady_stranded_next")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and not troop_slot_eq(trp.player,30,_g_talk_troop) and _g_talk_x_troop_faction != _g_encountered_party_faction and troop_slot_eq(_g_talk_troop,12,_g_encountered_party):
        get_kingdom_lady_social_determinants(_g_talk_troop)
        troop_id_001 = reg0
        if _g_encountered_party_faction != fac.player_supporters_faction:
            if troop_faction_002 != _g_encountered_party_faction:
                troop_faction_002 = store_faction_of_troop(troop_id_001)
start_lady_stranded_next.conditionBlock = condition


lady_stranded_next_close_window = Dialog("anyone", "Greetings, {sir/my lady}. The tides of war have left me stranded here in this fortress, but I will shortly be departing. ", starting_state="lady_stranded_next", ending_state="close_window")


start_lady_talk_refugee = Dialog("anyone", "{playername} -- I assume that you, as a {man/lady} of honor, will accord gentle-born ladies such as ourselves the right to return to our families, and not demand a ransom.", starting_state="start", ending_state="lady_talk_refugee")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and not troop_slot_eq(trp.player,30,_g_talk_troop) and _g_talk_x_troop_faction != _g_encountered_party_faction and troop_slot_eq(_g_talk_troop,12,_g_encountered_party):
        get_kingdom_lady_social_determinants(_g_talk_troop)
        troop_id_001 = reg0
        if troop_faction_002 != _g_encountered_party_faction:
            troop_faction_002 = store_faction_of_troop(troop_id_001)
start_lady_talk_refugee.conditionBlock = condition


start_lady_escort_lady_succeeded = Dialog("anyone", "Thank you for escorting me here, {playername}. Please accept this gift as a token of my gratitude. I hope we shall meet again sometime in the future.", starting_state="start", ending_state="lady_escort_lady_succeeded")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and check_quest_active(qst.escort_lady) and _talk_context == 10 and quest_slot_eq(qst.escort_lady,4,_g_talk_troop):
        pass
start_lady_escort_lady_succeeded.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(qst.escort_lady,1)
    add_xp_as_reward(300)
    troop_add_gold(trp.player,250)
    end_quest(qst.escort_lady)
    change_player_relation_with_troop(_g_talk_troop,2)
    troop_set_slot(_g_talk_troop,12,quest_slot_001)
    remove_member_from_party(_g_talk_troop)
start_lady_escort_lady_succeeded.codeBlock = code


lady_escort_lady_succeeded_close_window = Dialog("anyone|plyr", "It was an honor to serve you, {s65}.", starting_state="lady_escort_lady_succeeded", ending_state="close_window")


start_close_window_20 = Dialog("anyone", "We will shortly depart{s5}. It is good to know that some people in this world retain a sense of honor.", starting_state="start", ending_state="close_window")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and not troop_slot_eq(trp.player,30,_g_talk_troop) and _g_talk_x_troop_faction != _g_encountered_party_faction:
        troop_slot_001 = troop_get_slot(_g_talk_troop,12)
        str_clear(5)
        if is_between(troop_slot_001,p.town_1,p.salt_mine):
            s4 = str_store_party_name(troop_slot_001)
            s5 = str_store_string(gstr.for_s4)
        #end
    #end
start_close_window_20.conditionBlock = condition


lady_talk_refugee_close_window = Dialog("anyone|plyr", "Of course, my lady", starting_state="lady_talk_refugee", ending_state="close_window")
def code():
    troop_slot_001 = troop_get_slot(_g_talk_troop,12)
    get_kingdom_lady_social_determinants(_g_talk_troop)
    var002 = reg1
    troop_set_slot(_g_talk_troop,12,var002)
    if troop_slot_001 != var002:
        troop_change_relation_with_troop(trp.player,_g_talk_troop,1)
    #end
lady_talk_refugee_close_window.codeBlock = code


lady_talk_refugee_lady_captive_talk = Dialog("anyone|plyr", "You assume wrong, my lady!", starting_state="lady_talk_refugee", ending_state="lady_captive_talk")


lady_captive_talk_lady_captive_confirm = Dialog("anyone", "What?! What infamy is this?", starting_state="lady_captive_talk", ending_state="lady_captive_confirm")


lady_captive_confirm_close_window = Dialog("anyone|plyr", "My apologies - you must have misunderstood me. Of course you may leave.", starting_state="lady_captive_confirm", ending_state="close_window")


lady_captive_confirm_close_window_1 = Dialog("anyone|plyr", "Contact your family to arrange for a ransom, my lady.", starting_state="lady_captive_confirm", ending_state="close_window")
def code():
    troop_set_slot(_g_talk_troop,8,_g_encountered_party)
    change_player_honor(-2)
    troop_change_relation_with_troop(trp.player,_g_talk_troop,-10)
lady_captive_confirm_close_window_1.codeBlock = code


kingdom_lady_captive_close_window = Dialog("anyone|plyr", "Then write to your family, and ask them to hurry up with the ransom!", starting_state="kingdom_lady_captive", ending_state="close_window")


kingdom_lady_captive_close_window_1 = Dialog("anyone|plyr", "I have changed my mind -- you are free to go", starting_state="kingdom_lady_captive", ending_state="close_window")
def code():
    troop_set_slot(_g_talk_troop,8,-1)
    troop_set_slot(_g_talk_troop,5,1)
kingdom_lady_captive_close_window_1.codeBlock = code


start_close_window_21 = Dialog("anyone", "Well, {playername} -- you fought a duel with {s10}, and lost. According to our custom and tradition, I should no longer receive you. Farewell, {playername}.", starting_state="start", ending_state="close_window")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and check_quest_active(qst.duel_courtship_rival) and check_quest_failed(qst.duel_courtship_rival) and quest_slot_eq(qst.duel_courtship_rival,6,_g_talk_troop):
        quest_slot_001 = quest_get_slot(qst.duel_courtship_rival,2)
        if _g_talk_troop_relation < 0:
            s10 = str_store_troop_name(quest_slot_001)
start_close_window_21.conditionBlock = condition
def code():
    end_quest(qst.duel_courtship_rival)
    troop_set_slot(_g_talk_troop,5,4)
start_close_window_21.codeBlock = code


start_lady_duel_lost = Dialog("anyone", "Oh {playername} -- I heard of your duel with {s10}. I wish now that you had never fought him, for our honor and tradition demand that, having lost to him, you now break off your suit with me. Farewell, {playername}.", starting_state="start", ending_state="lady_duel_lost")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and check_quest_active(qst.duel_courtship_rival) and check_quest_failed(qst.duel_courtship_rival) and quest_slot_eq(qst.duel_courtship_rival,6,_g_talk_troop):
        quest_slot_001 = quest_get_slot(qst.duel_courtship_rival,2)
        s10 = str_store_troop_name(quest_slot_001)
start_lady_duel_lost.conditionBlock = condition
def code():
    troop_set_slot(_g_talk_troop,5,4)
    end_quest(qst.duel_courtship_rival)
start_lady_duel_lost.codeBlock = code


lady_duel_lost_close_window = Dialog("anyone|plyr", "Very well - we must do as tradition demands... Farewell, my lady", starting_state="lady_duel_lost", ending_state="close_window")


lady_duel_lost_lady_duel_lost_flaunt_conventions = Dialog("anyone|plyr", "Let honor and tradition hang!", starting_state="lady_duel_lost", ending_state="lady_duel_lost_flaunt_conventions")


lady_duel_lost_flaunt_conventions_close_window = Dialog("anyone", "Oh, {playername}! Although people will talk, it would so break my heart to no longer be able to see you. We shall ignore this silly, cruel tradition.", starting_state="lady_duel_lost_flaunt_conventions", ending_state="close_window")
def code():
    troop_set_slot(_g_talk_troop,5,2)
    change_player_honor(-5)
lady_duel_lost_flaunt_conventions_close_window.codeBlock = code


lady_duel_lost_flaunt_conventions_close_window_1 = Dialog("anyone", "No, {playername} -- I cannot afford to fritter away my good name, and neither can you.", starting_state="lady_duel_lost_flaunt_conventions", ending_state="close_window")


start_lady_start = Dialog("anyone", "Oh, {playername} -- I have heard that you won your duel with {s10}. I'm grateful that you have delivered me from that man's attentions!", starting_state="start", ending_state="lady_start")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and check_quest_active(qst.duel_courtship_rival) and check_quest_succeeded(qst.duel_courtship_rival) and quest_slot_eq(qst.duel_courtship_rival,6,_g_talk_troop):
        quest_slot_001 = quest_get_slot(qst.duel_courtship_rival,2)
        troop_get_relation_with_troop(_g_talk_troop,quest_slot_001)
        if reg0 < 0:
            s10 = str_store_troop_name_link(quest_slot_001)
start_lady_start.conditionBlock = condition
def code():
    end_quest(qst.duel_courtship_rival)
    troop_change_relation_with_troop(trp.player,_g_talk_troop,3)
    add_xp_as_reward(1000)
start_lady_start.codeBlock = code


start_lady_start_1 = Dialog("anyone", "Well, {playername} --  you won your duel with {s10}. Clearly, he was not worthy of my affections.", starting_state="start", ending_state="lady_start")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and check_quest_active(qst.duel_courtship_rival) and check_quest_succeeded(qst.duel_courtship_rival) and quest_slot_eq(qst.duel_courtship_rival,6,_g_talk_troop):
        quest_slot_001 = quest_get_slot(qst.duel_courtship_rival,2)
        if troop_slot_eq(_g_talk_troop,52,24):
            troop_get_relation_with_troop(_g_talk_troop,quest_slot_001)
            s10 = str_store_troop_name_link(quest_slot_001)
start_lady_start_1.conditionBlock = condition
def code():
    end_quest(qst.duel_courtship_rival)
    troop_change_relation_with_troop(trp.player,_g_talk_troop,2)
    add_xp_as_reward(1000)
start_lady_start_1.codeBlock = code


start_lady_duel_rep_1 = Dialog("anyone|auto_proceed", "{!}.", starting_state="start", ending_state="lady_duel_rep_1")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and check_quest_active(qst.duel_courtship_rival) and check_quest_succeeded(qst.duel_courtship_rival) and quest_slot_eq(qst.duel_courtship_rival,6,_g_talk_troop):
        quest_slot_001 = quest_get_slot(qst.duel_courtship_rival,2)
        if troop_slot_eq(_g_talk_troop,52,21):
            troop_get_relation_with_troop(_g_talk_troop,quest_slot_001)
            s10 = str_store_troop_name_link(quest_slot_001)
start_lady_duel_rep_1.conditionBlock = condition


lady_duel_rep_1_lady_start = Dialog("anyone", "Well, {playername} --  you won your duel with {s10}. Oh, such foolishness, that men should fight over me! Sigh... But it is a bit romantic, I suppose.", starting_state="lady_duel_rep_1", ending_state="lady_start")
def code():
    end_quest(qst.duel_courtship_rival)
    troop_change_relation_with_troop(trp.player,_g_talk_troop,1)
    add_xp_as_reward(1000)
lady_duel_rep_1_lady_start.codeBlock = code


start_lady_duel_rep_2 = Dialog("anyone|auto_proceed", "{!}.", starting_state="start", ending_state="lady_duel_rep_2")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and check_quest_active(qst.duel_courtship_rival) and check_quest_succeeded(qst.duel_courtship_rival) and quest_slot_eq(qst.duel_courtship_rival,6,_g_talk_troop):
        quest_slot_001 = quest_get_slot(qst.duel_courtship_rival,2)
        troop_get_relation_with_troop(_g_talk_troop,quest_slot_001)
        s10 = str_store_troop_name_link(quest_slot_001)
start_lady_duel_rep_2.conditionBlock = condition


lady_duel_rep_2_lady_start = Dialog("anyone", "Well, {playername} --  you won your duel with {s10}. Honor now demands that he and I no longer meet... I was fond of him, you know. You did me no service by fighting him, sir.", starting_state="lady_duel_rep_2", ending_state="lady_start")
def code():
    end_quest(qst.duel_courtship_rival)
    troop_change_relation_with_troop(trp.player,_g_talk_troop,-2)
    add_xp_as_reward(1000)
lady_duel_rep_2_lady_start.codeBlock = code


start_lady_qst_duel_for_lady_succeeded_1 = Dialog("anyone", "My dear {playername}, how joyous to see you again! I heard you gave that vile {s13} a well-deserved lesson. I hope he never forgets his humiliation. I've a reward for you, but I fear it's little compared to what you've done for me.", starting_state="start", ending_state="lady_qst_duel_for_lady_succeeded_1")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and check_quest_active(qst.duel_for_lady) and check_quest_succeeded(qst.duel_for_lady) and quest_slot_eq(qst.duel_for_lady,6,_g_talk_troop) and _talk_context <= 4:
        quest_slot_001 = quest_get_slot(qst.duel_for_lady,2)
        s13 = str_store_troop_name_link(quest_slot_001)
start_lady_qst_duel_for_lady_succeeded_1.conditionBlock = condition


lady_qst_duel_for_lady_succeeded_1_lady_qst_duel_for_lady_succeeded_2 = Dialog("anyone|plyr", "Oh, it will just have to do.", starting_state="lady_qst_duel_for_lady_succeeded_1", ending_state="lady_qst_duel_for_lady_succeeded_2")
def code():
    s10 = str_store_string("@Then take it;;; with my eternal thanks. You are a noble {man/woman}. I will never forget that you helped me in my time of need.")
lady_qst_duel_for_lady_succeeded_1_lady_qst_duel_for_lady_succeeded_2.codeBlock = code


lady_qst_duel_for_lady_succeeded_1_lady_qst_duel_for_lady_succeeded_2_1 = Dialog("anyone|plyr", "{s66}, this is far too much!", starting_state="lady_qst_duel_for_lady_succeeded_1", ending_state="lady_qst_duel_for_lady_succeeded_2")
def code():
    s10 = str_store_string("@Forgive me;;; {playername};;; but I must insist you accept it. The money means little to me;;; and I owe you so much. Here;;; take it;;; and let us speak no more of this.")
    change_player_honor(1)
lady_qst_duel_for_lady_succeeded_1_lady_qst_duel_for_lady_succeeded_2_1.codeBlock = code


lady_qst_duel_for_lady_succeeded_1_lady_qst_duel_for_lady_succeeded_2_2 = Dialog("anyone|plyr", "Please, {s65}, no reward is necessary.", starting_state="lady_qst_duel_for_lady_succeeded_1", ending_state="lady_qst_duel_for_lady_succeeded_2")
def code():
    s10 = str_store_string("@{playername};;; what a dear {man/woman} you are;;; but I will not allow you to refuse this. I owe you far more than I can say;;; and I am sure you can put this money to far better use than I.")
    change_player_honor(2)
lady_qst_duel_for_lady_succeeded_1_lady_qst_duel_for_lady_succeeded_2_2.codeBlock = code


lady_qst_duel_for_lady_succeeded_2_lady_pretalk = Dialog("anyone", "{s10}", starting_state="lady_qst_duel_for_lady_succeeded_2", ending_state="lady_pretalk")
def code():
    change_player_relation_with_troop(_g_talk_troop,10)
    add_xp_as_reward(1000)
    troop_add_gold(trp.player,2000)
    end_quest(qst.duel_for_lady)
lady_qst_duel_for_lady_succeeded_2_lady_pretalk.codeBlock = code


start_lady_qst_duel_for_lady_failed = Dialog("anyone", "I was told that you sought satisfaction from {s13} to prove my innocence, {playername}. It was a fine gesture, and I thank you for your efforts.", starting_state="start", ending_state="lady_qst_duel_for_lady_failed")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and check_quest_active(qst.duel_for_lady) and check_quest_failed(qst.duel_for_lady) and quest_slot_eq(qst.duel_for_lady,6,_g_talk_troop) and _talk_context <= 4:
        quest_slot_001 = quest_get_slot(qst.duel_for_lady,2)
        s13 = str_store_troop_name_link(quest_slot_001)
start_lady_qst_duel_for_lady_failed.conditionBlock = condition


lady_qst_duel_for_lady_failed_lady_qst_duel_for_lady_failed_2 = Dialog("anyone|plyr", "I beg your forgiveness for my defeat, {s65}...", starting_state="lady_qst_duel_for_lady_failed", ending_state="lady_qst_duel_for_lady_failed_2")


lady_qst_duel_for_lady_failed_2_lady_pretalk = Dialog("anyone", "It matters not, dear {playername}. You tried. The truth cannot be proven at the point of a sword, but you willingly put your life at stake for my honour. That alone will convince many of my innocence.", starting_state="lady_qst_duel_for_lady_failed_2", ending_state="lady_pretalk")
def code():
    change_player_relation_with_troop(_g_talk_troop,6)
    add_xp_as_reward(400)
    end_quest(qst.duel_for_lady)
lady_qst_duel_for_lady_failed_2_lady_pretalk.codeBlock = code


start_lady_start_2 = Dialog("anyone", "Ah {playername} - you must have received my message. How happy I am that you could come!", starting_state="start", ending_state="lady_start")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6):
        if check_quest_active(qst.visit_lady) and quest_slot_eq(qst.visit_lady,6,_g_talk_troop):
            troop_set_slot(_g_talk_troop,37,0)
start_lady_start_2.conditionBlock = condition
def code():
    change_player_relation_with_troop(_g_talk_troop,1)
    end_quest(qst.visit_lady)
start_lady_start_2.codeBlock = code


start_lady_proposal_pending = Dialog("anyone", "{playername} - is there any word from my family?", starting_state="start", ending_state="lady_proposal_pending")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and check_quest_active(qst.formal_marriage_proposal) and quest_slot_eq(qst.formal_marriage_proposal,6,_g_talk_troop) and not check_quest_succeeded(qst.formal_marriage_proposal) and not check_quest_failed(qst.formal_marriage_proposal):
        pass
start_lady_proposal_pending.conditionBlock = condition


start_lady_betrothed = Dialog("anyone", "I hear that my {s11} has refused your request to marry me. Does that mean that we must part?", starting_state="start", ending_state="lady_betrothed")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and check_quest_active(qst.formal_marriage_proposal) and quest_slot_eq(qst.formal_marriage_proposal,6,_g_talk_troop) and check_quest_failed(qst.formal_marriage_proposal):
        get_kingdom_lady_social_determinants(_g_talk_troop)
        var001 = reg0
        troop_get_family_relation_to_troop(var001,_g_talk_troop)
start_lady_betrothed.conditionBlock = condition
def code():
    end_quest(qst.formal_marriage_proposal)
start_lady_betrothed.codeBlock = code


start_lady_generic_mission_succeeded = Dialog("anyone", "Oh, {playername}, you brought him back to me! Thank you ever so much for rescuing my {s11}. Please, take this as some small repayment for your noble deed.", starting_state="start", ending_state="lady_generic_mission_succeeded")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and _talk_context <= 4 and check_quest_active(qst.rescue_lord_by_replace) and check_quest_succeeded(qst.rescue_lord_by_replace) and quest_slot_eq(qst.rescue_lord_by_replace,6,_g_talk_troop):
        quest_slot_001 = quest_get_slot(qst.rescue_lord_by_replace,2)
        troop_get_family_relation_to_troop(quest_slot_001,_g_talk_troop)
start_lady_generic_mission_succeeded.conditionBlock = condition
def code():
    change_player_relation_with_troop(_g_talk_troop,8)
    add_xp_as_reward(2000)
    troop_add_gold(trp.player,1500)
    end_quest(qst.rescue_lord_by_replace)
start_lady_generic_mission_succeeded.codeBlock = code


start_rescue_prisoner_succeed_1 = Dialog("anyone", "Oh, {playername}, you brought him back to me! Thank you ever so much for rescuing my {s11}. Please, take this as some small repayment for your noble deed.", starting_state="start", ending_state="rescue_prisoner_succeed_1")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and check_quest_active(qst.rescue_prisoner) and check_quest_succeeded(qst.rescue_prisoner) and quest_slot_eq(qst.rescue_prisoner,6,_g_talk_troop):
        quest_slot_001 = quest_get_slot(qst.rescue_prisoner,2)
        troop_get_family_relation_to_troop(quest_slot_001,_g_talk_troop)
start_rescue_prisoner_succeed_1.conditionBlock = condition
def code():
    change_player_relation_with_troop(_g_talk_troop,8)
    add_xp_as_reward(2000)
    troop_add_gold(trp.player,1500)
    end_quest(qst.rescue_prisoner)
start_rescue_prisoner_succeed_1.codeBlock = code


rescue_prisoner_succeed_1_lady_pretalk = Dialog("anyone|plyr", "Always an honour to serve, {s65}.", starting_state="rescue_prisoner_succeed_1", ending_state="lady_pretalk")


start_lady_meet_end = Dialog("anyone", "You must be {playername}. We have just had the honor of watching you distinguish yourself in the recent tournament{s8}.", starting_state="start", ending_state="lady_meet_end")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and _g_talk_troop_met == 0 and _g_player_tournament_placement > 4:
        str_clear(8)
start_lady_meet_end.conditionBlock = condition


start_lady_meet_end_1 = Dialog("anyone", "You must be {playername}. My {s15} {s16} has spoken most highly of you. I am delighted to make your acquaintance.", starting_state="start", ending_state="lady_meet_end")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and _g_talk_troop_met == 0 and _talk_context <= 4:
        var001 = 0
        str_clear(15)
        for trp_002 in range(trp.knight_1_1, trp.kingdom_1_pretender):
            troop_get_family_relation_to_troop(trp_002,_g_talk_troop)
            if reg0 > 5:
                troop_get_relation_with_troop(trp.player,trp_002)
                if reg0 > 10:
                    s15 = str_store_string(11)
                    s16 = str_store_troop_name(trp_002)
                    var001 = trp_002
                    if var001 > 0:
                        pass
                    #end
                #end
            #end
        #end
    #end
start_lady_meet_end_1.conditionBlock = condition


start_lady_premeet = Dialog("anyone", "I say, you don't look familiar...", starting_state="start", ending_state="lady_premeet")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and _g_talk_troop_met == 0 and _talk_context <= 4:
        pass
start_lady_premeet.conditionBlock = condition


start_close_window_22 = Dialog("anyone", "Ah, {playername}. How good it is to see you again. However, I believe that I am required elsewhere.", starting_state="start", ending_state="close_window")
def condition():
    if troop_slot_eq(_g_talk_troop,5,4) and _g_talk_troop_relation < 0:
        pass
start_close_window_22.conditionBlock = condition


start_lady_start_3 = Dialog("anyone", "{playername} -- how good it is to see you. (Whispers:) I still remember your visits fondly.", starting_state="start", ending_state="lady_start")
def condition():
    if troop_slot_eq(_g_talk_troop,5,4):
        pass
start_lady_start_3.conditionBlock = condition


start_lady_meet_end_2 = Dialog("anyone", "Ah, {playername}. How spendid it was to see you distinguish yourself in the recent tournament.", starting_state="start", ending_state="lady_meet_end")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and _g_talk_troop_met == 0 and _g_player_tournament_placement > 4 and _g_talk_troop_relation >= 0:
        pass
start_lady_meet_end_2.conditionBlock = condition


start_lady_start_4 = Dialog("anyone", "{s12}", starting_state="start", ending_state="lady_start")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6):
        s12 = str_store_string(gstr.hello_playername)
start_lady_start_4.conditionBlock = condition


lady_start_lady_betrothed = Dialog("anyone", "I have sad news. I have become betrothed to {s5} -- against my will, I should say! Oh {playername} - I would so much rather be wed to you!", starting_state="lady_start", ending_state="lady_betrothed")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and troop_slot_ge(_g_talk_troop,5,2) and not troop_slot_eq(_g_talk_troop,5,4):
        troop_slot_001 = troop_get_slot(_g_talk_troop,34)
        if troop_slot_001 > -1 and troop_slot_001 != trp.player:
            s5 = str_store_troop_name(troop_slot_001)
            if reg0 < 0 and _g_talk_troop_relation >= 10:
                troop_get_relation_with_troop(_g_talk_troop,troop_slot_001)
lady_start_lady_betrothed.conditionBlock = condition


lady_start_lady_betrothed_1 = Dialog("anyone", "Good {playername} -- I have become betrothed to {s5}. It is now no longer seemly for us to see each other like this.", starting_state="lady_start", ending_state="lady_betrothed")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and troop_slot_ge(_g_talk_troop,5,2):
        troop_slot_001 = troop_get_slot(_g_talk_troop,34)
        if troop_slot_001 > -1 and troop_slot_001 != trp.player:
            s5 = str_store_troop_name(troop_slot_001)
lady_start_lady_betrothed_1.conditionBlock = condition


lady_start_lady_other_suitor = Dialog("anyone", "I must tell you -- there is another lord who has been paying me attentions, although I cannot abide him. I fear he has designs on me, and may try to force me to wed against my will.", starting_state="lady_start", ending_state="lady_other_suitor")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and troop_slot_eq(_g_talk_troop,5,2) and not troop_slot_eq(_g_talk_troop,5,4) and not troop_slot_ge(trp.player,30,trp.npc1) and not troop_slot_ge(_g_talk_troop,30,trp.npc1) and _g_talk_troop_relation > 0:
        _romantic_rival = -1
        for trp_001 in range(trp.knight_1_1, trp.kingdom_1_pretender):
            if troop_slot_eq(trp_001,35,_g_talk_troop) or troop_slot_eq(trp_001,36,_g_talk_troop) or troop_slot_eq(trp_001,36,_g_talk_troop):
                troop_get_relation_with_troop(_g_talk_troop,trp_001)
                if reg0 <= -4 and troop_slot_eq(trp_001,52,5) or troop_slot_eq(trp_001,52,2) or troop_slot_eq(trp_001,52,8) or troop_slot_eq(trp_001,52,3):
                    _romantic_rival = trp_001
                    if _romantic_rival > 0:
                        pass
                    #end
                #end
            #end
        #end
    #end
lady_start_lady_other_suitor.conditionBlock = condition


lady_start_lady_talk = Dialog("anyone", "{s11}It is probably not suitable for us to tarry too long here in conversation, but I would hope to see you again soon.", starting_state="lady_start", ending_state="lady_talk")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and _g_time_since_last_talk < 24 and troop_slot_eq(_g_talk_troop,5,2) and _g_talk_troop_relation > 0:
        if troop_slot_eq(_g_talk_troop,52,22):
            s11 = str_store_string(gstr.i_do_enjoy_speaking_to_you_but_i_am_sure_you_understand_that_our_people_cluck_their_tongues_at_a_woman_to_spend_too_long_conversing_with_a_man_outside_her_family__although_the_heavens_know_its_never_the_man_who_is_held_to_blame_)
        elif troop_slot_eq(_g_talk_troop,52,24):
            s11 = str_store_string(gstr.as_much_as_i_enjoy_speaking_to_you_i_do_not_care_to_be_gossiped_about_by_others_who_might_lack_my_grace_and_beauty_)
        elif troop_slot_eq(_g_talk_troop,52,25):
            s11 = str_store_string(gstr.i_do_so_enjoy_speaking_to_you_but_as_a_daughter_of_one_of_the_great_families_of_this_land_i_must_set_an_example_of_propriety_)
        else:
            s11 = str_store_string(gstr.i_do_so_enjoy_speaking_to_you_but_as_a_daughter_of_good_family_i_must_protect_my_reputation_)
        #end
    #end
lady_start_lady_talk.conditionBlock = condition


lady_start_lady_talk_1 = Dialog("anyone", "{s11}", starting_state="lady_start", ending_state="lady_talk")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and _g_time_since_last_talk < 24 and troop_slot_eq(_g_talk_troop,5,2):
        if troop_slot_eq(_g_talk_troop,52,22):
            s11 = str_store_string(gstr.although_it_is_kind_of_you_to_pay_me_such_attentions_i_suspect_that_you_might_find_other_ladies_who_may_be_more_inclined_to_return_your_affection)
        elif troop_slot_eq(_g_talk_troop,52,24):
            s11 = str_store_string(gstr.as_flattered_as_i_am_by_your_attentions_perhaps_you_should_seek_out_another_lady_of_somewhat_shall_we_say_different_tastes)
        else:
            s11 = str_store_string(gstr.as_flattered_as_i_am_by_your_attentions_i_am_a_daughter_of_good_family_and_must_be_aware_of_my_reputation_it_is_not_seemly_that_i_converse_too_much_at_one_time_with_one_man_i_am_sure_you_understand_now_if_you_will_excuse_me)
        #end
    #end
lady_start_lady_talk_1.conditionBlock = condition


lady_start_lady_talk_2 = Dialog("anyone", "I was planning to retire for a little while, but perhaps we may have a chance to speak more later...", starting_state="lady_start", ending_state="lady_talk")
def condition():
    if _lady_flirtation_location == _g_encountered_party and troop_slot_eq(_g_talk_troop,5,1):
        pass
lady_start_lady_talk_2.conditionBlock = condition


lady_start_lady_talk_3 = Dialog("anyone", "It is so delightful to have a chance to spend some time together.{s12}", starting_state="lady_start", ending_state="lady_talk")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6) and troop_slot_eq(_g_talk_troop,5,2) and _g_talk_troop_relation > 0:
        str_clear(12)
        if troop_slot_eq(_g_talk_troop,5,2) and _g_talk_troop_relation > 0 and _g_time_since_last_talk > 24:
            if troop_slot_eq(_g_talk_troop,52,23):
                s12 = str_store_string(gstr.ah_my_gentle_playername_how_much_good_it_does_my_heart_to_see_you_again)
            elif troop_slot_eq(_g_talk_troop,52,22):
                s12 = str_store_string(gstr.playername__i_am_so_glad_to_see_you_again_i_must_say_i_do_envy_your_freedom_to_ride_out_and_experience_the_world)
            elif troop_slot_eq(_g_talk_troop,52,25):
                s12 = str_store_string(gstr.playername__i_am_so_glad_to_see_you_i_trust_that_you_have_been_behaving_honorably_since_last_we_met)
            elif troop_slot_eq(_g_talk_troop,52,24):
                s12 = str_store_string(gstr.greetings_playername__it_is_good_to_see_you_i_hope_that_you_have_had_success_in_your_efforts_to_make_your_name_in_the_world)
            else:
                s12 = str_store_string(gstr.playername__i_am_so_glad_that_you_were_able_to_come)
            #end
        #end
    #end
lady_start_lady_talk_3.conditionBlock = condition


lady_start_lady_talk_4 = Dialog("anyone", "What brings you here today?", starting_state="lady_start", ending_state="lady_talk")
def condition():
    if troop_slot_eq(_g_talk_troop,2,6):
        pass
lady_start_lady_talk_4.conditionBlock = condition


lady_proposal_pending_close_window = Dialog("anyone|plyr", "No word so far...", starting_state="lady_proposal_pending", ending_state="close_window")


lady_proposal_pending_lady_proposal_pending_end = Dialog("anyone|plyr", "On second thought, now is not the time for us to marry", starting_state="lady_proposal_pending", ending_state="lady_proposal_pending_end")


lady_proposal_pending_end_close_window = Dialog("anyone", "{s11}", starting_state="lady_proposal_pending_end", ending_state="close_window")
def condition():
    if _g_talk_troop_effective_relation > 19:
        s11 = str_store_string(gstr.very_well__i_will_let_you_choose_the_time)
    else:
        s11 = str_store_string(gstr.good_i_am_glad_that_you_have_abandoned_the_notion_of_pushing_me_into_marriage_before_i_was_ready)
    #end
lady_proposal_pending_end_close_window.conditionBlock = condition
def code():
    end_quest(qst.formal_marriage_proposal)
lady_proposal_pending_end_close_window.codeBlock = code


lady_betrothed_lady_suggest_elope = Dialog("anyone|plyr", "Never! We must elope together at once!", starting_state="lady_betrothed", ending_state="lady_suggest_elope")


lady_betrothed_lady_pretalk = Dialog("anyone|plyr", "Perhaps I may still be able to change your {s11}'s mind", starting_state="lady_betrothed", ending_state="lady_pretalk")
def condition():
    if troop_slot_eq(_g_talk_troop,34,-1):
        get_kingdom_lady_social_determinants(_g_talk_troop)
        troop_get_family_relation_to_troop(reg0,_g_talk_troop)
lady_betrothed_lady_pretalk.conditionBlock = condition


lady_betrothed_lady_conclude_relationship = Dialog("anyone|plyr", "So be it -- let us then part", starting_state="lady_betrothed", ending_state="lady_conclude_relationship")


lady_suggest_elope_lady_conclude_relationship = Dialog("anyone", "Good {playername} -- you are a good and kind man, but a lady cannot defy her family. Such things are not done!", starting_state="lady_suggest_elope", ending_state="lady_conclude_relationship")
def condition():
    if troop_slot_eq(_g_talk_troop,52,21):
        pass
lady_suggest_elope_lady_conclude_relationship.conditionBlock = condition


lady_suggest_elope_lady_other_suitor = Dialog("anyone", "Sir -- as you may know, I have been entertaining offers from a number of gentlemen such as yourself. I am not yet at a stage where I can commit to any of them.", starting_state="lady_suggest_elope", ending_state="lady_other_suitor")
def condition():
    _romantic_rival = -1
    for trp_001 in range(trp.knight_1_1, trp.kingdom_1_pretender):
        if troop_slot_eq(trp_001,35,_g_talk_troop) or troop_slot_eq(trp_001,36,_g_talk_troop) or troop_slot_eq(trp_001,36,_g_talk_troop):
            troop_get_relation_with_troop(_g_talk_troop,trp_001)
            if _cheat_mode == 1:
                s4 = str_store_troop_name(trp_001)
                print(gstr.rival_found_s4_reg0_relation)
            #end
        #end
        if reg0 > _g_talk_troop_relation:
            _romantic_rival = trp_001
            if _romantic_rival > -1:
                pass
            #end
        #end
    #end
lady_suggest_elope_lady_other_suitor.conditionBlock = condition


lady_suggest_elope_lady_conclude_relationship_1 = Dialog("anyone", "Ah {playername}, you must realize. You are still finding your way in the world. I have great affection for you, {playername}, but I will not consign myself to obscurity.", starting_state="lady_suggest_elope", ending_state="lady_conclude_relationship")
def condition():
    if troop_slot_eq(_g_talk_troop,52,24) and not troop_slot_ge(trp.player,7,350):
        pass
lady_suggest_elope_lady_conclude_relationship_1.conditionBlock = condition


lady_suggest_elope_lady_conclude_relationship_2 = Dialog("anyone", "Ah {playername}, although you are kind to me, I am not certain enough of your moral fiber to risk such a thing. Although I bare little affection for my husband, it would be a weighty thing to go against my family's wishes, and I am not certain enough of you to take that step.", starting_state="lady_suggest_elope", ending_state="lady_conclude_relationship")
def condition():
    if troop_slot_eq(_g_talk_troop,52,25) and _player_honor < 20:
        pass
lady_suggest_elope_lady_conclude_relationship_2.conditionBlock = condition


lady_suggest_elope_lady_conclude_relationship_3 = Dialog("anyone", "Good {playername} -- to elope would be to throw away my ties with my family, which are everything to me! I have a considerable affection for you, but I am not sure that I am prepared to risk that.", starting_state="lady_suggest_elope", ending_state="lady_conclude_relationship")
def condition():
    if _g_talk_troop_effective_relation <= 20:
        pass
lady_suggest_elope_lady_conclude_relationship_3.conditionBlock = condition


lady_suggest_elope_lady_conclude_relationship_4 = Dialog("anyone", "Good {playername} -- I am not used to the hardships of campaigning as you are. I want a home to call my own. If you were lord of a castle or town with a great hall, I would gladly go there as your wife, to be mistress of the household. But I do not wish to live like a hunted animal.", starting_state="lady_suggest_elope", ending_state="lady_conclude_relationship")
def condition():
    _home_for_spouse = -1
    for p_001 in range(p.town_1, p.salt_mine):
        if _home_for_spouse == -1 and party_slot_eq(p_001,7,trp.player) and is_between(p_001,p.town_1,p.village_1):
            _home_for_spouse = p_001
            if _home_for_spouse == -1:
                pass
            #end
        #end
    #end
lady_suggest_elope_lady_conclude_relationship_4.conditionBlock = condition


lady_suggest_elope_lady_elope_agree = Dialog("anyone", "Elope with you? Yes -- we could do that. It is a great step to defy my family -- but a loveless marriage, and life without you, might be a far worse thing! But be warned -- this will be a terrible blow to my {s11}'s prestige, and he will do everything in his power to bring you down.", starting_state="lady_suggest_elope", ending_state="lady_elope_agree")
def condition():
    get_kingdom_lady_social_determinants(_g_talk_troop)
    troop_get_family_relation_to_troop(reg0,_g_talk_troop)
lady_suggest_elope_lady_elope_agree.conditionBlock = condition


lady_elope_agree_lady_elope_agree_nurse = Dialog("anyone|plyr", "Quickly, then! There is no time to lose.", starting_state="lady_elope_agree", ending_state="lady_elope_agree_nurse")


lady_elope_agree_close_window = Dialog("anyone|plyr", "Everything in his power, you say? Em... Let me think about this...", starting_state="lady_elope_agree", ending_state="close_window")


lady_elope_agree_nurse_lady_elope_agree_lady_vows = Dialog("anyone", "Your lordship... Your ladyship... Would you like me to witness your exchange of vows?", starting_state="lady_elope_agree_nurse", ending_state="lady_elope_agree_lady_vows")
def code():
    set_conversation_speaker_troop(848)
lady_elope_agree_nurse_lady_elope_agree_lady_vows.codeBlock = code


lady_elope_agree_lady_vows_lady_elope_agree_nurse_2 = Dialog("anyone", "Yes, do that. For my part, I make the following vow: I, {s4}, do swear that I accept {playername} as my husband, according to the ancient law and custom of our land...", starting_state="lady_elope_agree_lady_vows", ending_state="lady_elope_agree_nurse_2")
def condition():
    s4 = str_store_troop_name(_g_talk_troop)
lady_elope_agree_lady_vows_lady_elope_agree_nurse_2.conditionBlock = condition


lady_elope_agree_nurse_2_lady_elope_agree_player_vows = Dialog("anyone", "Very good. Do you, {playername}, swear similarly to accept {s4} as your wife?", starting_state="lady_elope_agree_nurse_2", ending_state="lady_elope_agree_player_vows")
def code():
    set_conversation_speaker_troop(848)
lady_elope_agree_nurse_2_lady_elope_agree_player_vows.codeBlock = code


lady_elope_agree_player_vows_close_window = Dialog("anyone|plyr", "I do.", starting_state="lady_elope_agree_player_vows", ending_state="close_window")
def code():
    courtship_event_bride_marry_groom(_g_talk_troop,trp.player,1)
lady_elope_agree_player_vows_close_window.codeBlock = code


lady_elope_agree_player_vows_close_window_1 = Dialog("anyone|plyr", "Eh, what? This is all moving too fast...", starting_state="lady_elope_agree_player_vows", ending_state="close_window")


lady_elope_agree_lady_conclude_relationship = Dialog("anyone|plyr", "Oh, really? My dear -- I could never separate a lady from her family like that...", starting_state="lady_elope_agree", ending_state="lady_conclude_relationship")


lady_conclude_relationship_lady_conclude_relationship_confirm = Dialog("anyone", "So I suppose our time together must come to an end...", starting_state="lady_conclude_relationship", ending_state="lady_conclude_relationship_confirm")


lady_conclude_relationship_confirm_lady_conclude_relationship_confirm_yes = Dialog("anyone|plyr", "Yes -- it must be...", starting_state="lady_conclude_relationship_confirm", ending_state="lady_conclude_relationship_confirm_yes")


lady_conclude_relationship_confirm_lady_conclude_relationship_confirm_no = Dialog("anyone|plyr", "Wait -- perhaps there is still a chance for us!", starting_state="lady_conclude_relationship_confirm", ending_state="lady_conclude_relationship_confirm_no")


lady_conclude_relationship_confirm_yes_close_window = Dialog("anyone", "Farewell, {playername}. We will see each other, in the courts and castles of this realm, but we must keep our distance from each other. I will remember these days fondly, nonetheless.", starting_state="lady_conclude_relationship_confirm_yes", ending_state="close_window")
def code():
    troop_set_slot(_g_talk_troop,5,4)
lady_conclude_relationship_confirm_yes_close_window.codeBlock = code


lady_conclude_relationship_confirm_no_close_window = Dialog("anyone", "In that case, we shall see what the future brings.", starting_state="lady_conclude_relationship_confirm_no", ending_state="close_window")


lady_generic_mission_succeeded_lady_pretalk = Dialog("anyone|plyr", "Always an honour to serve, {s65}.", starting_state="lady_generic_mission_succeeded", ending_state="lady_pretalk")


lady_premeet_lady_meet = Dialog("anyone|plyr", "I am {playername}.", starting_state="lady_premeet", ending_state="lady_meet")


lady_premeet_lady_meet_1 = Dialog("anyone|plyr", "My name is {playername}. At your service.", starting_state="lady_premeet", ending_state="lady_meet")


lady_meet_lady_meet_end = Dialog("anyone", "Of course. How splendid to finally make your acquaintance.", starting_state="lady_meet", ending_state="lady_meet_end")
def condition():
    if troop_slot_ge(trp.player,7,200):
        pass
lady_meet_lady_meet_end.conditionBlock = condition


lady_meet_lady_meet_end_1 = Dialog("anyone", "{playername}? I do not believe I've heard of you before.", starting_state="lady_meet", ending_state="lady_meet_end")


lady_meet_end_lady_talk = Dialog("anyone", "I am about to retire for a little while, but perhaps we may have a chance to speak more later...", starting_state="lady_meet_end", ending_state="lady_talk")
def condition():
    if _lady_flirtation_location == _g_encountered_party:
        pass
lady_meet_end_lady_talk.conditionBlock = condition


lady_meet_end_lady_talk_1 = Dialog("anyone", "Now, if you will excuse me...", starting_state="lady_meet_end", ending_state="lady_talk")
def condition():
    if troop_slot_eq(_g_talk_troop,30,-1):
        troop_get_romantic_chemistry_with_troop(_g_talk_troop,trp.player)
        if reg0 <= 0:
            if reg0 <= 0:
                troop_get_relation_with_troop(_g_talk_troop,trp.player)
lady_meet_end_lady_talk_1.conditionBlock = condition


lady_meet_end_lady_talk_2 = Dialog("anyone", "Can I help you with anything?", starting_state="lady_meet_end", ending_state="lady_talk")


lady_talk_lord_talk_ask_location = Dialog("anyone|plyr", "I want to know the location of someone.", starting_state="lady_talk", ending_state="lord_talk_ask_location")
def condition():
    if not troop_slot_ge(_g_talk_troop,8,0) and _g_encountered_party_relation >= 0:
        pass
lady_talk_lord_talk_ask_location.conditionBlock = condition


lady_pretalk_lady_talk = Dialog("anyone", "Now, if you will excuse me...", starting_state="lady_pretalk", ending_state="lady_talk")
def condition():
    if troop_slot_eq(_g_talk_troop,30,-1):
        troop_get_romantic_chemistry_with_troop(_g_talk_troop,trp.player)
        if reg0 <= 0:
            if reg0 <= 0:
                troop_get_relation_with_troop(_g_talk_troop,trp.player)
lady_pretalk_lady_talk.conditionBlock = condition


lady_pretalk_lady_talk_1 = Dialog("anyone", "Is there anything else?", starting_state="lady_pretalk", ending_state="lady_talk")


lady_talk_lady_relations = Dialog("anyone|plyr", "May I have the honor of knowing more about you, my lady?", starting_state="lady_talk", ending_state="lady_relations")


lady_relations_lady_pretalk = Dialog("anyone", "{s12}", starting_state="lady_relations", ending_state="lady_pretalk")
def condition():
    s12 = str_store_string(gstr.i_am)
    var001 = 0
    var002 = 0
    for trp_003 in range(trp.npc1, trp.heroes_end):
        troop_get_family_relation_to_troop(_g_talk_troop,trp_003)
        if reg0 > 5 or party_slot_eq(_g_encountered_party,7,trp_003) and reg0 > 0:
            s14 = str_store_troop_name(trp_003)
            if var001 == 1:
                s12 = str_store_string(gstr.s12)
            #end
        #end
        s12 = str_store_string(gstr.s12_s11_to_s14)
        var001 = 1
        if party_slot_eq(_g_encountered_party,7,trp_003):
            var002 = 1
        #end
    #end
    if var002 == 1:
        s12 = str_store_string(gstr.s12)
    elif var002 == 0 and faction_slot_eq(_g_talk_x_troop_faction,4,6) and faction_slot_eq(_g_talk_x_troop_faction,5,_g_encountered_party):
        s12 = str_store_string(gstr.s12_i_am_here_for_the_feast)
    else:
        s12 = str_store_string(gstr.s12)
    #end
lady_relations_lady_pretalk.conditionBlock = condition


lady_talk_lady_profess_admiration = Dialog("anyone|plyr", "My lady, I would like to profess myself your most ardent admirer", starting_state="lady_talk", ending_state="lady_profess_admiration")
def condition():
    if troop_type_001 == 0 and troop_slot_eq(_g_talk_troop,5,1) and troop_slot_eq(_g_talk_troop,30,-1) and not troop_slot_ge(trp.player,30,trp.npc1) and _lady_flirtation_location != _g_encountered_party:
        troop_type_001 = troop_get_type(trp.player)
lady_talk_lady_profess_admiration.conditionBlock = condition
def code():
    troop_get_romantic_chemistry_with_troop(_g_talk_troop,trp.player)
    var001 = reg0
    var001 /= 2
    val_max(var001,-2)
    troop_change_relation_with_troop(_g_talk_troop,trp.player,var001)
    _g_time_to_spare = 0
lady_talk_lady_profess_admiration.codeBlock = code


lady_talk_lady_tournament_dedication_reaction = Dialog("anyone|plyr", "My lady, I would like to dedicate my successes in this recent tournament to you", starting_state="lady_talk", ending_state="lady_tournament_dedication_reaction")
def condition():
    if troop_type_001 == 0 and _g_player_tournament_placement > 3 and not troop_slot_ge(trp.player,30,trp.npc1):
        troop_type_001 = troop_get_type(trp.player)
lady_talk_lady_tournament_dedication_reaction.conditionBlock = condition
def code():
    if _g_player_tournament_placement > 3:
        _g_player_tournament_placement -= 3
        _g_player_tournament_placement *= 2
    else:
        _g_player_tournament_placement = 0
    #end
    if troop_slot_eq(_g_talk_troop,40,1):
        _g_player_tournament_placement /= 3
        s9 = str_store_string(gstr.another_tournament_dedication_oh_i_suppose_it_is_always_flattering)
    elif troop_slot_eq(_g_talk_troop,52,21):
        _g_player_tournament_placement *= 2
        s9 = str_store_string(gstr.do_you_why_what_a_most_gallant_thing_to_say)
    elif troop_slot_eq(_g_talk_troop,52,25):
        _g_player_tournament_placement /= 2
        s9 = str_store_string(gstr.hmm_i_cannot_say_that_i_altogether_approve_of_such_frivolity_but_i_must_confess_myself_a_bit_flattered)
    else:
        s9 = str_store_string(gstr.why_thank_you_you_are_most_kind_to_do_so)
    #end
    troop_change_relation_with_troop(_g_talk_troop,trp.player,_g_player_tournament_placement)
    _g_player_tournament_placement = 0
    troop_set_slot(_g_talk_troop,40,1)
lady_talk_lady_tournament_dedication_reaction.codeBlock = code


lady_tournament_dedication_reaction_lady_pretalk = Dialog("anyone", "{s9}", starting_state="lady_tournament_dedication_reaction", ending_state="lady_pretalk")


lady_profess_admiration_close_window = Dialog("anyone", "{s11}I would like it very much if we could see more of each other.", starting_state="lady_profess_admiration", ending_state="close_window")
def condition():
    troop_get_relation_with_troop(_g_talk_troop,trp.player)
    if reg0 > 0:
        if troop_slot_eq(_g_talk_troop,52,25):
            s11 = str_store_string(gstr.you_are_most_courteous_and_courtesy_is_a_fine_virtue_)
        elif troop_slot_eq(_g_talk_troop,52,24):
            s11 = str_store_string(gstr.hmm_youre_a_bold_one_but_i_like_that_)
        elif troop_slot_eq(_g_talk_troop,52,22):
            s11 = str_store_string(gstr.ah_well_they_all_say_that_but_no_matter_a_compliment_well_delivered_is_at_least_a_good_start_)
        elif troop_slot_eq(_g_talk_troop,52,23):
            s11 = str_store_string(gstr.oh_do_you_mean_that_such_a_kind_thing_to_say)
        else:
            s11 = str_store_string(gstr.you_are_a_most_gallant_young_man_)
        #end
    #end
lady_profess_admiration_close_window.conditionBlock = condition
def code():
    troop_set_slot(_g_talk_troop,5,2)
    _lady_flirtation_location = _g_encountered_party
lady_profess_admiration_close_window.codeBlock = code


lady_profess_admiration_lady_pretalk = Dialog("anyone", "Ah... You are too kind... My, the hour is getting rather late, isn't it? I really must be going.", starting_state="lady_profess_admiration", ending_state="lady_pretalk")
def code():
    troop_set_slot(_g_talk_troop,5,2)
lady_profess_admiration_lady_pretalk.codeBlock = code


lady_talk_lady_recite_poetry = Dialog("anyone|plyr", "Do you like poetry, my lady?", starting_state="lady_talk", ending_state="lady_recite_poetry")
def condition():
    if troop_slot_eq(_g_talk_troop,5,2) and _g_time_to_spare == 1 and _talk_context == 16:
        pass
lady_talk_lady_recite_poetry.conditionBlock = condition
def code():
    _g_time_to_spare = 0
lady_talk_lady_recite_poetry.codeBlock = code


lady_recite_poetry_lady_recite_poetry = Dialog("anyone", "That would depend on the poem. Did you intend to recite a verse?", starting_state="lady_recite_poetry", ending_state="lady_recite_poetry")


lady_recite_poetry_lady_recite_poetry_response = Dialog("anyone|plyr", "The wind that blows the dry steppe dust...", starting_state="lady_recite_poetry", ending_state="lady_recite_poetry_response")
def condition():
    if _tragic_poem_recitations > 0 and troop_slot_eq(_g_talk_troop,78,0):
        pass
lady_recite_poetry_lady_recite_poetry_response.conditionBlock = condition
def code():
    _poem_selected = 1
    troop_set_slot(_g_talk_troop,78,1)
lady_recite_poetry_lady_recite_poetry_response.codeBlock = code


lady_recite_poetry_lady_recite_poetry_response_1 = Dialog("anyone|plyr", "All the silks of Veluca/All the furs of Khudan...", starting_state="lady_recite_poetry", ending_state="lady_recite_poetry_response")
def condition():
    if _comic_poem_recitations > 0 and troop_slot_eq(_g_talk_troop,76,0):
        pass
lady_recite_poetry_lady_recite_poetry_response_1.conditionBlock = condition
def code():
    _poem_selected = 3
    troop_set_slot(_g_talk_troop,76,1)
lady_recite_poetry_lady_recite_poetry_response_1.codeBlock = code


lady_recite_poetry_lady_recite_poetry_response_2 = Dialog("anyone|plyr", "You are the first and the last/the outer and the inner...", starting_state="lady_recite_poetry", ending_state="lady_recite_poetry_response")
def condition():
    if _mystic_poem_recitations > 0 and troop_slot_eq(_g_talk_troop,77,0):
        pass
lady_recite_poetry_lady_recite_poetry_response_2.conditionBlock = condition
def code():
    _poem_selected = 4
    troop_set_slot(_g_talk_troop,77,1)
lady_recite_poetry_lady_recite_poetry_response_2.codeBlock = code


lady_recite_poetry_lady_recite_poetry_response_3 = Dialog("anyone|plyr", "A light pierced the gloom over Wercheg cliffs...", starting_state="lady_recite_poetry", ending_state="lady_recite_poetry_response")
def condition():
    if _heroic_poem_recitations > 0 and troop_slot_eq(_g_talk_troop,74,0):
        pass
lady_recite_poetry_lady_recite_poetry_response_3.conditionBlock = condition
def code():
    _poem_selected = 2
    troop_set_slot(_g_talk_troop,74,1)
lady_recite_poetry_lady_recite_poetry_response_3.codeBlock = code


lady_recite_poetry_lady_recite_poetry_response_4 = Dialog("anyone|plyr", "I deflected her skeptical questioning darts/with armor made of purest devotion...", starting_state="lady_recite_poetry", ending_state="lady_recite_poetry_response")
def condition():
    if _allegoric_poem_recitations > 0 and troop_slot_eq(_g_talk_troop,75,0):
        pass
lady_recite_poetry_lady_recite_poetry_response_4.conditionBlock = condition
def code():
    _poem_selected = 5
    troop_set_slot(_g_talk_troop,75,1)
lady_recite_poetry_lady_recite_poetry_response_4.codeBlock = code


lady_recite_poetry_lady_pretalk = Dialog("anyone|plyr", "Actually, I can't think of any that I would care to recite...", starting_state="lady_recite_poetry", ending_state="lady_pretalk")


lady_recite_poetry_response_lady_private_conversation_end = Dialog("anyone", "{s11}", starting_state="lady_recite_poetry_response", ending_state="lady_private_conversation_end")
def condition():
    courtship_poem_reactions(_g_talk_troop,_poem_selected)
lady_recite_poetry_response_lady_private_conversation_end.conditionBlock = condition
def code():
    var001 = reg0
    troop_change_relation_with_troop(_g_talk_troop,trp.player,var001)
    courtship_poem_reactions(_g_talk_troop,_poem_selected)
lady_recite_poetry_response_lady_private_conversation_end.codeBlock = code


lady_private_conversation_end_lady_pretalk = Dialog("anyone", "Time is passing quickly, and we cannot linger here too long.", starting_state="lady_private_conversation_end", ending_state="lady_pretalk")
def condition():
    str_clear(11)
    if True:
        troop_get_relation_with_troop(_g_talk_troop,trp.player)
        if reg0 > 0:
            s11 = str_store_string(gstr._do_come_and_see_me_again_soon)
        #end
    #end
lady_private_conversation_end_lady_pretalk.conditionBlock = condition
def code():
    _g_time_to_spare = 0
lady_private_conversation_end_lady_pretalk.codeBlock = code


lady_talk_lady_marriage_discussion = Dialog("anyone|plyr", "Do you think that we may have a future together, my lady?", starting_state="lady_talk", ending_state="lady_marriage_discussion")
def condition():
    if not check_quest_active(qst.formal_marriage_proposal) and not troop_slot_ge(trp.player,34,trp.npc1) and not troop_slot_ge(trp.player,30,trp.npc1) and troop_slot_eq(_g_talk_troop,5,2) and _talk_context == 16:
        pass
lady_talk_lady_marriage_discussion.conditionBlock = condition


lady_marriage_discussion_lady_other_suitor = Dialog("anyone", "Sir -- as you may know, I have been entertaining offers from a number of gentlemen such as yourself. I am not yet at a stage where I can commit to any of them.", starting_state="lady_marriage_discussion", ending_state="lady_other_suitor")
def condition():
    _romantic_rival = -1
    for trp_001 in range(trp.knight_1_1, trp.kingdom_1_pretender):
        if troop_slot_eq(trp_001,35,_g_talk_troop) or troop_slot_eq(trp_001,36,_g_talk_troop) or troop_slot_eq(trp_001,36,_g_talk_troop):
            troop_get_relation_with_troop(_g_talk_troop,trp_001)
            if _cheat_mode == 1:
                s4 = str_store_troop_name(trp_001)
                print(gstr.rival_found_s4_reg0_relation)
            #end
        #end
        if reg0 > _g_talk_troop_relation:
            _romantic_rival = trp_001
            if _romantic_rival > -1:
                pass
            #end
        #end
    #end
lady_marriage_discussion_lady_other_suitor.conditionBlock = condition


lady_marriage_discussion_lady_proposal_refused = Dialog("anyone", "It is good to hear that you are thinking seriously about the future. However, I would like to see you rise a little further in the world before I am ready to commit to marry you.", starting_state="lady_marriage_discussion", ending_state="lady_proposal_refused")
def condition():
    if troop_slot_eq(_g_talk_troop,52,24) and not troop_slot_ge(trp.player,7,350):
        pass
lady_marriage_discussion_lady_proposal_refused.conditionBlock = condition


lady_marriage_discussion_lady_proposal_refused_1 = Dialog("anyone", "It is good to hear that your intentions are honorable. However, I have resolved only to marry a man of the strongest moral fiber. I would like you to prove yourself more in that regard.", starting_state="lady_marriage_discussion", ending_state="lady_proposal_refused")
def condition():
    if troop_slot_eq(_g_talk_troop,52,25) and _player_honor < 10:
        pass
lady_marriage_discussion_lady_proposal_refused_1.conditionBlock = condition


lady_marriage_discussion_lady_proposal_refused_2 = Dialog("anyone", "Sir -- it is comforting to hear that your intentions towards me are honorable. But perhaps we should take the time to get to allow our affections for each other to grow a little stronger, before making any such decision.", starting_state="lady_marriage_discussion", ending_state="lady_proposal_refused")
def condition():
    if _g_talk_troop_relation < 20:
        pass
lady_marriage_discussion_lady_proposal_refused_2.conditionBlock = condition


lady_marriage_discussion_lady_betrothed = Dialog("anyone", "Oh {playername}, how happy that would make me! But my {s11} {s4} would never allow it... Perhaps it is best that we part...", starting_state="lady_marriage_discussion", ending_state="lady_betrothed")
def condition():
    get_kingdom_lady_social_determinants(_g_talk_troop)
    var001 = reg0
    if troop_slot_eq(var001,38,-1):
        s4 = str_store_troop_name(reg0)
        troop_get_family_relation_to_troop(var001,_g_talk_troop)
lady_marriage_discussion_lady_betrothed.conditionBlock = condition


lady_marriage_discussion_close_window = Dialog("anyone", "Oh {playername}, how happy that would make me! Go ask my {s11} {s4} for permission!", starting_state="lady_marriage_discussion", ending_state="close_window")
def condition():
    get_kingdom_lady_social_determinants(_g_talk_troop)
    var001 = reg0
    troop_get_family_relation_to_troop(var001,_g_talk_troop)
    s4 = str_store_troop_name(var001)
lady_marriage_discussion_close_window.conditionBlock = condition
def code():
    get_kingdom_lady_social_determinants(_g_talk_troop)
    var001 = reg0
    s12 = str_store_troop_name(var001)
    s15 = str_store_troop_name(_g_talk_troop)
    setup_quest_text(qst.formal_marriage_proposal)
    s2 = str_store_string(gstr.you_intend_to_ask_s12_for_permission_to_marry_s15)
    quest_set_slot(qst.formal_marriage_proposal,2,var001)
    quest_set_slot(qst.formal_marriage_proposal,23,30)
    quest_set_slot(qst.formal_marriage_proposal,11,0)
    start_quest(qst.formal_marriage_proposal,_g_talk_troop)
    quest_set_slot(qst.formal_marriage_proposal,6,_g_talk_troop)
    troop_get_family_relation_to_troop(var001,_g_talk_troop)
    s4 = str_store_troop_name(var001)
lady_marriage_discussion_close_window.codeBlock = code


lady_proposal_refused_lady_proposal_refused_persuade_check = Dialog("anyone|plyr", "Perhaps I can persuade you to delay no further.", starting_state="lady_proposal_refused", ending_state="lady_proposal_refused_persuade_check")
def condition():
    if is_between(_g_talk_troop_relation,12,20) and troop_slot_eq(_g_talk_troop,52,24) or troop_slot_ge(trp.player,7,350) and troop_slot_eq(_g_talk_troop,52,25) or _player_honor >= 10:
        pass
lady_proposal_refused_lady_proposal_refused_persuade_check.conditionBlock = condition


lady_proposal_refused_persuade_check_lady_proposal_refused_persuade_player_response = Dialog("anyone", "What do you have to say?", starting_state="lady_proposal_refused_persuade_check", ending_state="lady_proposal_refused_persuade_player_response")
def code():
    reg4 = 20
    troop_get_relation_with_troop(_g_talk_troop,trp.player)
    var001 = reg0
    reg5 = var001
    reg9 = 1
    skill_lvl_002 = store_skill_level(skl.persuasion,trp.player)
    var003 = 20 - var001
    skill_lvl_002 *= 2
    if var003 > skill_lvl_002:
        _g_persuasion_failure_chance = 100
    else:
        _g_persuasion_failure_chance = var003 * 100
        _g_persuasion_failure_chance /= skill_lvl_002
    #end
    reg8 = _g_persuasion_failure_chance
    reg7 = 100 - _g_persuasion_failure_chance
    dialog_box(gstr.persuasion_opportunity)
lady_proposal_refused_persuade_check_lady_proposal_refused_persuade_player_response.codeBlock = code


lady_proposal_refused_persuade_player_response_lady_proposal_refused_persuade_result = Dialog("anyone|plyr", "Love is as a rose, my lady. Left unplucked, it may wither.", starting_state="lady_proposal_refused_persuade_player_response", ending_state="lady_proposal_refused_persuade_result")


lady_proposal_refused_persuade_player_response_lady_pretalk = Dialog("anyone|plyr", "Oh, never mind.", starting_state="lady_proposal_refused_persuade_player_response", ending_state="lady_pretalk")


lady_proposal_refused_persuade_result_close_window = Dialog("anyone", "Enough, sir! I shall not be rushed into marriage, with you or with anyone else! You have made me very cross. Please, leave me alone for a while. I shall let you know when I am ready to speak to you again.", starting_state="lady_proposal_refused_persuade_result", ending_state="close_window")
def condition():
    if random_x_001 < _g_persuasion_failure_chance:
        random_x_001 = store_random_in_range(0,100)
lady_proposal_refused_persuade_result_close_window.conditionBlock = condition
def code():
    troop_change_relation_with_troop(_g_talk_troop,trp.player,-1)
    jump_to_menu(mnu.town)
    finish_mission()
lady_proposal_refused_persuade_result_close_window.codeBlock = code


lady_proposal_refused_persuade_result_lady_betrothed = Dialog("anyone", "Oh {playername}, I could never allow that to happen! Oh, if only we could be wed! But my {s11} {s4} would never give his permission... Perhaps it is best that we part...", starting_state="lady_proposal_refused_persuade_result", ending_state="lady_betrothed")
def condition():
    get_kingdom_lady_social_determinants(_g_talk_troop)
    var001 = reg0
    if troop_slot_eq(var001,38,-1):
        s4 = str_store_troop_name(reg0)
        troop_get_family_relation_to_troop(var001,_g_talk_troop)
lady_proposal_refused_persuade_result_lady_betrothed.conditionBlock = condition
def code():
    troop_change_relation_with_troop(_g_talk_troop,trp.player,5)
lady_proposal_refused_persuade_result_lady_betrothed.codeBlock = code


lady_proposal_refused_persuade_result_close_window_1 = Dialog("anyone", "Oh {playername}, I could never allow that to happen! Go ask my {s11} {s4} his permission for us to be wed!", starting_state="lady_proposal_refused_persuade_result", ending_state="close_window")
def condition():
    get_kingdom_lady_social_determinants(_g_talk_troop)
    var001 = reg0
    troop_get_family_relation_to_troop(var001,_g_talk_troop)
    s4 = str_store_troop_name(var001)
lady_proposal_refused_persuade_result_close_window_1.conditionBlock = condition
def code():
    troop_change_relation_with_troop(_g_talk_troop,trp.player,5)
    get_kingdom_lady_social_determinants(_g_talk_troop)
    var001 = reg0
    s12 = str_store_troop_name(var001)
    s15 = str_store_troop_name(_g_talk_troop)
    setup_quest_text(qst.formal_marriage_proposal)
    s2 = str_store_string(gstr.you_intend_to_ask_s12_for_permission_to_marry_s15)
    quest_set_slot(qst.formal_marriage_proposal,2,var001)
    quest_set_slot(qst.formal_marriage_proposal,23,30)
    quest_set_slot(qst.formal_marriage_proposal,11,0)
    start_quest(qst.formal_marriage_proposal,_g_talk_troop)
    quest_set_slot(qst.formal_marriage_proposal,6,_g_talk_troop)
lady_proposal_refused_persuade_result_close_window_1.codeBlock = code


lady_proposal_refused_close_window = Dialog("anyone|plyr", "Very well -- I shall continue to strive to be worthy of your esteem!", starting_state="lady_proposal_refused", ending_state="close_window")


lady_proposal_refused_lady_player_threatens_compel = Dialog("anyone|plyr", "I am tired of these games! I will speak to your family about arranging a wedding immediately..", starting_state="lady_proposal_refused", ending_state="lady_player_threatens_compel")
def condition():
    if 1 == 0 and not check_quest_active(qst.formal_marriage_proposal):
        pass
lady_proposal_refused_lady_player_threatens_compel.conditionBlock = condition


lady_player_threatens_compel_lady_player_threatens_compel_2 = Dialog("anyone", "What? Do you mean that?", starting_state="lady_player_threatens_compel", ending_state="lady_player_threatens_compel_2")


lady_player_threatens_compel_2_lady_private_conversation_end = Dialog("anyone|plyr", "No, of couse not. Please forgive my burst of temper", starting_state="lady_player_threatens_compel_2", ending_state="lady_private_conversation_end")


lady_player_threatens_compel_2_close_window = Dialog("anyone|plyr", "Yes -- you clearly do not know what is in your best interests.", starting_state="lady_player_threatens_compel_2", ending_state="close_window")
def code():
    get_kingdom_lady_social_determinants(_g_talk_troop)
    var001 = reg0
    s10 = str_store_troop_name(_g_talk_troop)
    s12 = str_store_troop_name(var001)
    setup_quest_text(qst.formal_marriage_proposal)
    s2 = str_store_string(gstr.you_intend_to_ask_s12_to_pressure_s10_to_marry_you)
    quest_set_slot(qst.formal_marriage_proposal,2,var001)
    quest_set_slot(qst.formal_marriage_proposal,23,30)
    quest_set_slot(qst.formal_marriage_proposal,11,0)
    start_quest(qst.formal_marriage_proposal,_g_talk_troop)
    quest_set_slot(qst.formal_marriage_proposal,6,_g_talk_troop)
lady_player_threatens_compel_2_close_window.codeBlock = code


lady_other_suitor_lady_pretalk = Dialog("anyone|plyr", "It grieves me to hear that, my lady, but such things must be", starting_state="lady_other_suitor", ending_state="lady_pretalk")


lady_other_suitor_lady_other_suitor_challenge = Dialog("anyone|plyr", "Who is the miscreant! Tell me his name!", starting_state="lady_other_suitor", ending_state="lady_other_suitor_challenge")


lady_other_suitor_lady_player_threatens_compel = Dialog("anyone|plyr", "I am tired of these games! I will demand that your family compel you to marry me..", starting_state="lady_other_suitor", ending_state="lady_player_threatens_compel")
def condition():
    if 1 == 0:
        pass
lady_other_suitor_lady_player_threatens_compel.conditionBlock = condition


lady_other_suitor_challenge_lady_pretalk = Dialog("anyone", "I would be so grateful! But from what I understand, you already have a duel on your hands. He is not honor-bound to fight you, if you are committed to another combat. Please, conclude your other business in a hurry, to rescue me from that man's attentions!.", starting_state="lady_other_suitor_challenge", ending_state="lady_pretalk")
def condition():
    if check_quest_active(qst.duel_courtship_rival):
        if reg0 < 0:
            troop_get_relation_with_troop(_g_talk_troop,_romantic_rival)
lady_other_suitor_challenge_lady_pretalk.conditionBlock = condition


lady_other_suitor_challenge_lady_pretalk_1 = Dialog("anyone", "Ah! Such talk. But from what I hear, you already have a duel on your hands. Finish one before you start another! Sigh... You men can be so silly...", starting_state="lady_other_suitor_challenge", ending_state="lady_pretalk")
def condition():
    if check_quest_active(qst.duel_courtship_rival):
        pass
lady_other_suitor_challenge_lady_pretalk_1.conditionBlock = condition


lady_other_suitor_challenge_lady_other_suitor_challenge_confirm = Dialog("anyone", "It is {s5}. Please, rescue me from that man's attentions!", starting_state="lady_other_suitor_challenge", ending_state="lady_other_suitor_challenge_confirm")
def condition():
    troop_get_relation_with_troop(_g_talk_troop,_romantic_rival)
    if reg0 < 0:
        s5 = str_store_troop_name(_romantic_rival)
lady_other_suitor_challenge_lady_other_suitor_challenge_confirm.conditionBlock = condition


lady_other_suitor_challenge_lady_other_suitor_challenge_confirm_1 = Dialog("anyone", "Will you now? This should be interesting. Very well. Your rival is {s5}. Let us see which of you has the greater mettle.", starting_state="lady_other_suitor_challenge", ending_state="lady_other_suitor_challenge_confirm")
def condition():
    if troop_slot_eq(_g_talk_troop,52,24):
        s5 = str_store_troop_name(_romantic_rival)
lady_other_suitor_challenge_lady_other_suitor_challenge_confirm_1.conditionBlock = condition
def code():
    _quarrel_penalty = 0
lady_other_suitor_challenge_lady_other_suitor_challenge_confirm_1.codeBlock = code


lady_other_suitor_challenge_lady_other_suitor_challenge_confirm_2 = Dialog("anyone", "Oh, fie! I wish that this were not a matter of honor, so I could refuse such a request. But alas, I feel compelled to tell you that your rival is {s5}. I wish that heaven had not granted me such a fair visage, so that I would not inspire such passions in men!", starting_state="lady_other_suitor_challenge", ending_state="lady_other_suitor_challenge_confirm")
def condition():
    if troop_slot_eq(_g_talk_troop,52,21):
        s5 = str_store_troop_name(_romantic_rival)
lady_other_suitor_challenge_lady_other_suitor_challenge_confirm_2.conditionBlock = condition
def code():
    _quarrel_penalty = -1
lady_other_suitor_challenge_lady_other_suitor_challenge_confirm_2.codeBlock = code


lady_other_suitor_challenge_lady_other_suitor_challenge_confirm_3 = Dialog("anyone", "I will have none of such talk! It is nonsense for you and {s5} to fight over -- whoops! I beg of you, sir, forget the name that just escaped my lips...", starting_state="lady_other_suitor_challenge", ending_state="lady_other_suitor_challenge_confirm")
def condition():
    s5 = str_store_troop_name(_romantic_rival)
lady_other_suitor_challenge_lady_other_suitor_challenge_confirm_3.conditionBlock = condition
def code():
    _quarrel_penalty = -3
lady_other_suitor_challenge_lady_other_suitor_challenge_confirm_3.codeBlock = code


lady_other_suitor_challenge_confirm_lady_other_suitor_challenge_confirm_yes = Dialog("anyone|plyr", "So be it! I shall challenge him to a trial of arms!", starting_state="lady_other_suitor_challenge_confirm", ending_state="lady_other_suitor_challenge_confirm_yes")


lady_other_suitor_challenge_confirm_lady_other_suitor_challenge_confirm_no = Dialog("anyone|plyr", "On second thought, I let my passions run away with me there. Never mind.", starting_state="lady_other_suitor_challenge_confirm", ending_state="lady_other_suitor_challenge_confirm_no")


lady_other_suitor_challenge_confirm_yes_lady_pretalk = Dialog("anyone", "{s15}", starting_state="lady_other_suitor_challenge_confirm_yes", ending_state="lady_pretalk")
def condition():
    if True:
        troop_get_relation_with_troop(_g_talk_troop,_romantic_rival)
        if reg0 < 0:
            s15 = str_store_string(gstr.do_be_careful_i_am_so_much_endebted_to_you_for_this)
        elif troop_slot_eq(_g_talk_troop,52,24):
            s15 = str_store_string(gstr.go_then__we_shall_see_which_of_you_triumphs)
        else:
            s15 = str_store_string(gstr.sigh_i_will_never_truly_understand_men_and_their_rash_actions)
        #end
    #end
lady_other_suitor_challenge_confirm_yes_lady_pretalk.conditionBlock = condition
def code():
    troop_change_relation_with_troop(trp.player,_g_talk_troop,_quarrel_penalty)
    s11 = str_store_troop_name(_g_talk_troop)
    s13 = str_store_troop_name_link(_romantic_rival)
    setup_quest_text(qst.duel_courtship_rival)
    s2 = str_store_string(gstr.you_intend_to_challenge_s13_to_force_him_to_relinquish_his_suit_of_s11)
    start_quest(qst.duel_courtship_rival,_g_talk_troop)
    quest_set_slot(qst.duel_courtship_rival,2,_romantic_rival)
    quest_set_slot(qst.duel_courtship_rival,21,400)
    quest_set_slot(qst.duel_courtship_rival,23,60)
    quest_set_slot(qst.duel_courtship_rival,11,0)
lady_other_suitor_challenge_confirm_yes_lady_pretalk.codeBlock = code


lady_other_suitor_challenge_confirm_no_lady_private_conversation_end = Dialog("anyone", "Good. You are wise not to let your temper guide you.", starting_state="lady_other_suitor_challenge_confirm_no", ending_state="lady_private_conversation_end")


lady_talk_lady_ask_for_quest = Dialog("anyone|plyr", "Is there anything I can do to win your favour?", starting_state="lady_talk", ending_state="lady_ask_for_quest")
def condition():
    if troop_slot_ge(_g_talk_troop,30,0):
        if partner_quest_001 < 0:
            partner_quest_001 = store_partner_quest()
lady_talk_lady_ask_for_quest.conditionBlock = condition
def code():
    get_quest(_g_talk_troop)
    _random_quest_no = reg0
lady_talk_lady_ask_for_quest.codeBlock = code


lady_ask_for_quest_lady_pretalk = Dialog("anyone", "I don't have anything else for you to do right now.", starting_state="lady_ask_for_quest", ending_state="lady_pretalk")
def condition():
    if troop_slot_eq(_g_talk_troop,20,1):
        pass
lady_ask_for_quest_lady_pretalk.conditionBlock = condition


lady_ask_for_quest_lady_mission_told = Dialog("anyone", "Oh, I fear I may never see my {s17}, {s13}, again... He is a prisoner in the dungeon of {s14}. We have tried to negotiate his ransom, but it has been set too high. We can never hope to raise that much money without selling everything we own, and God knows {s13} would rather spend his life in prison than make us destitute. Instead I came up with a plan to get him out of there, but it requires someone to make a great sacrifice, and so far my pleas have fallen on deaf ears...", starting_state="lady_ask_for_quest", ending_state="lady_mission_told")
def condition():
    _random_quest_no_list1 = [
    qst.rescue_prisoner,
    qst.rescue_lord_by_replace,
    ]
    if _random_quest_no in _random_quest_no_list1:
        quest_slot_001 = quest_get_slot(_random_quest_no,2)
        troop_get_family_relation_to_troop(quest_slot_001,_g_talk_troop)
        s17 = str_store_string(11)
lady_ask_for_quest_lady_mission_told.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(_random_quest_no,1)
    quest_slot_002 = quest_get_slot(_random_quest_no,2)
    troop_get_family_relation_to_troop(quest_slot_002,_g_talk_troop)
    s17 = str_store_string(11)
    s11 = str_store_troop_name(_g_talk_troop)
    s13 = str_store_troop_name_link(quest_slot_002)
    s14 = str_store_party_name_link(quest_slot_001)
    setup_quest_text(_random_quest_no)
    if _random_quest_no == qst.rescue_lord_by_replace:
        s2 = str_store_string("@{s11} asked you to rescue her {s17};;; {s13};;; from {s14} by switching clothes and taking his place in prison.")
    else:
        s2 = str_store_string("@{s11} asked you to rescue her {s17};;; {s13};;; from {s14}.")
    #end
lady_ask_for_quest_lady_mission_told.codeBlock = code


lady_ask_for_quest_lady_mission_told_1 = Dialog("anyone", "My poor {s11}, {s13}, is a prisoner in the {s14} dungeons. The only way we can talk to each other is by exchanging letters whenever we can, but the journey is so dangerous that we get little chance to do so. Please, would you deliver one for me?", starting_state="lady_ask_for_quest", ending_state="lady_mission_told")
def condition():
    if _random_quest_no == qst.deliver_message_to_prisoner_lord:
        quest_slot_001 = quest_get_slot(_random_quest_no,2)
        troop_get_family_relation_to_troop(quest_slot_001,_g_talk_troop)
lady_ask_for_quest_lady_mission_told_1.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(_random_quest_no,1)
    quest_slot_002 = quest_get_slot(_random_quest_no,2)
    s11 = str_store_troop_name(_g_talk_troop)
    s13 = str_store_troop_name_link(quest_slot_002)
    s14 = str_store_party_name_link(quest_slot_001)
    setup_quest_text(_random_quest_no)
    s2 = str_store_string("@{s11} asked you to deliver a message to {s13};;; who is imprisoned at {s14}.")
lady_ask_for_quest_lady_mission_told_1.codeBlock = code


lady_ask_for_quest_lady_quest_duel_for_lady = Dialog("anyone", "Dear {playername}, you are kind to ask, but you know little of my troubles and I can't possibly ask you to throw yourself into danger on my behalf.", starting_state="lady_ask_for_quest", ending_state="lady_quest_duel_for_lady")
def condition():
    if _random_quest_no == qst.duel_for_lady:
        pass
lady_ask_for_quest_lady_quest_duel_for_lady.conditionBlock = condition


lady_quest_duel_for_lady_lady_quest_duel_for_lady_2 = Dialog("anyone|plyr", "Tell me what the problem is, and I can make my own decision.", starting_state="lady_quest_duel_for_lady", ending_state="lady_quest_duel_for_lady_2")
def code():
    quest_slot_001 = quest_get_slot(_random_quest_no,2)
    s11 = str_store_troop_name(_g_talk_troop)
    s13 = str_store_troop_name_link(quest_slot_001)
    s2 = str_store_string("@You agreed to challenge {s13} to defend {s11}'s honour.")
    setup_quest_text(_random_quest_no)
lady_quest_duel_for_lady_lady_quest_duel_for_lady_2.codeBlock = code


lady_quest_duel_for_lady_2_lady_quest_duel_for_lady_3 = Dialog("anyone", "Very well, as you wish it... My husband has made certain enemies in his life, {playername}. One of the most insidious is {s13}. He is going around making terrible accusations against me, impugning my honour at every turn! Because he cannot harm my husband directly, he is using me as a target to try and stain our name. You should hear the awful things he's said! I only wish there was someone brave enough to make him recant his slander, but {s13} is a very fine swordsman, and he's widely feared...", starting_state="lady_quest_duel_for_lady_2", ending_state="lady_quest_duel_for_lady_3")


lady_quest_duel_for_lady_3_lady_quest_duel_for_lady_3_accepted = Dialog("anyone|plyr", "I fear him not, {s65}. I will make him take back his lies.", starting_state="lady_quest_duel_for_lady_3", ending_state="lady_quest_duel_for_lady_3_accepted")


lady_quest_duel_for_lady_3_accepted_close_window = Dialog("anyone", "Oh! I can't ask that of you, {playername}, but... I would be forever indebted to you, and you are so sure. It would mean so much if you would defend my honour. Thank you a thousand times, all my prayers and my favour go with you.", starting_state="lady_quest_duel_for_lady_3_accepted", ending_state="close_window")
def code():
    quest_slot_001 = quest_get_slot(_random_quest_no,2)
    start_quest(_random_quest_no,_g_talk_troop)
    report_quest_troop_positions(_random_quest_no,quest_slot_001,3)
    change_player_relation_with_troop(_g_talk_troop,3)
lady_quest_duel_for_lady_3_accepted_close_window.codeBlock = code


lady_quest_duel_for_lady_3_lady_quest_duel_for_lady_3_rejected = Dialog("anyone|plyr", "If he's that dangerous, perhaps maybe it would be better to ignore him...", starting_state="lady_quest_duel_for_lady_3", ending_state="lady_quest_duel_for_lady_3_rejected")


lady_quest_duel_for_lady_3_rejected_close_window = Dialog("anyone", "Oh... Perhaps you're right, {playername}. I should let go of these silly childhood ideas of chivalry and courage. {Men/People} are not like that, not anymore. Good day to you.", starting_state="lady_quest_duel_for_lady_3_rejected", ending_state="close_window")
def code():
    troop_set_slot(_g_talk_troop,20,1)
    change_player_relation_with_troop(_g_talk_troop,-1)
lady_quest_duel_for_lady_3_rejected_close_window.codeBlock = code


lady_ask_for_quest_lady_pretalk_1 = Dialog("anyone", "No, {playername}, I've no need for a champion right now.", starting_state="lady_ask_for_quest", ending_state="lady_pretalk")


lady_mission_told_lady_mission_accepted = Dialog("anyone|plyr", "As you wish it, {s65}, it shall be done.", starting_state="lady_mission_told", ending_state="lady_mission_accepted")


lady_mission_told_lady_mission_rejected = Dialog("anyone|plyr", "{s66}, I fear I cannot help you right now.", starting_state="lady_mission_told", ending_state="lady_mission_rejected")


lady_mission_accepted_close_window = Dialog("anyone", "You are a true {gentleman/lady}, {playername}. Thank you so much for helping me", starting_state="lady_mission_accepted", ending_state="close_window")
def code():
    if _random_quest_no == qst.deliver_message_to_prisoner_lord:
        troop_add_gold(trp.player,10)
    #end
    start_quest(_random_quest_no,_g_talk_troop)
lady_mission_accepted_close_window.codeBlock = code


lady_mission_rejected_close_window = Dialog("anyone", "You'll not help a woman in need? You should be ashamed, {playername}... Please leave me, I have some important embroidery to catch up.", starting_state="lady_mission_rejected", ending_state="close_window")
def code():
    change_player_relation_with_troop(_g_talk_troop,-1)
    troop_set_slot(_g_talk_troop,20,1)
lady_mission_rejected_close_window.codeBlock = code


lady_talk_lady_restore_relation = Dialog("anyone|plyr", "I want to improve my relation with a lord. Can you help me?", starting_state="lady_talk", ending_state="lady_restore_relation")
def condition():
    if troop_slot_ge(_g_talk_troop,30,0):
        pass
lady_talk_lady_restore_relation.conditionBlock = condition


lady_restore_relation_lady_pretalk = Dialog("anyone", "{playername}, I don't know you well enough to act on your behalf. I am sorry.", starting_state="lady_restore_relation", ending_state="lady_pretalk")
def condition():
    if _g_talk_troop_relation <= 0:
        pass
lady_restore_relation_lady_pretalk.conditionBlock = condition


lady_restore_relation_lady_restore_relation_2 = Dialog("anyone", "Hmm. I guess you got on the wrong side of somebody. Very well, who do you want to restore your relation with?", starting_state="lady_restore_relation", ending_state="lady_restore_relation_2")


lady_restore_relation_2_lady_restore_relation_2b = Dialog("anyone|repeat_for_troops|plyr", "{s1}", starting_state="lady_restore_relation_2", ending_state="lady_restore_relation_2b")
def condition():
    troop_id_001 = store_repeat_object()
    if is_between(troop_id_001,trp.npc1,trp.knight_1_1_wife):
        troop_faction_002 = store_faction_of_troop(troop_id_001)
        if _g_talk_x_troop_faction == troop_faction_002:
            troop_get_player_relation(troop_id_001)
            if reg0 < 0:
                s1 = str_store_troop_name(troop_id_001)
lady_restore_relation_2_lady_restore_relation_2b.conditionBlock = condition
def code():
    _troop_to_restore_relations_with = store_repeat_object()
lady_restore_relation_2_lady_restore_relation_2b.codeBlock = code


lady_restore_relation_2_lady_pretalk = Dialog("anyone|plyr", "Never mind. I get along with everyone well enough.", starting_state="lady_restore_relation_2", ending_state="lady_pretalk")


lady_restore_relation_2b_lady_restore_relation_3 = Dialog("anyone", "Well I can try to help you there. I am sure a few expensive gifts will make {s10} look at you more favorably.", starting_state="lady_restore_relation_2b", ending_state="lady_restore_relation_3")
def condition():
    s10 = str_store_troop_name(_troop_to_restore_relations_with)
lady_restore_relation_2b_lady_restore_relation_3.conditionBlock = condition


lady_restore_relation_3_lady_restore_relation_4 = Dialog("anyone", "You can improve your relation with {s10} by sending {reg4?her:him} a gift worth {reg10} denars. But if you can afford spending {reg11} denars on the gift, it would make a good impression on {reg4?her:him}. And if you can go up to {reg12} denars, that would really help smooth things out.", starting_state="lady_restore_relation_3", ending_state="lady_restore_relation_4")
def condition():
    s10 = str_store_troop_name(_troop_to_restore_relations_with)
    _lady_restore_cost_1 = 1000
    _lady_restore_cost_2 = 2000
    _lady_restore_cost_3 = 3000
    reg10 = _lady_restore_cost_1
    reg11 = _lady_restore_cost_2
    reg12 = _lady_restore_cost_3
    reg4 = troop_get_type(_troop_to_restore_relations_with)
lady_restore_relation_3_lady_restore_relation_4.conditionBlock = condition


lady_restore_relation_4_lady_restore_relation_5 = Dialog("anyone|plyr", "I think a gift of {reg10} denars will do.", starting_state="lady_restore_relation_4", ending_state="lady_restore_relation_5")
def condition():
    troop_gold_001 = store_troop_gold(trp.player)
    if troop_gold_001 >= _lady_restore_cost_1:
        reg10 = _lady_restore_cost_1
lady_restore_relation_4_lady_restore_relation_5.conditionBlock = condition
def code():
    _temp = 1
    _tmp_2 = _lady_restore_cost_1
lady_restore_relation_4_lady_restore_relation_5.codeBlock = code


lady_restore_relation_4_lady_restore_relation_5_1 = Dialog("anyone|plyr", "Maybe I can afford {reg11} denars.", starting_state="lady_restore_relation_4", ending_state="lady_restore_relation_5")
def condition():
    troop_gold_001 = store_troop_gold(trp.player)
    if troop_gold_001 >= _lady_restore_cost_2:
        reg11 = _lady_restore_cost_2
lady_restore_relation_4_lady_restore_relation_5_1.conditionBlock = condition
def code():
    _temp = 2
    _tmp_2 = _lady_restore_cost_2
lady_restore_relation_4_lady_restore_relation_5_1.codeBlock = code


lady_restore_relation_4_lady_restore_relation_5_2 = Dialog("anyone|plyr", "In that case, I am ready to spend {reg12} denars.", starting_state="lady_restore_relation_4", ending_state="lady_restore_relation_5")
def condition():
    troop_gold_001 = store_troop_gold(trp.player)
    if troop_gold_001 >= _lady_restore_cost_3:
        reg12 = _lady_restore_cost_3
lady_restore_relation_4_lady_restore_relation_5_2.conditionBlock = condition
def code():
    _temp = 3
    _tmp_2 = _lady_restore_cost_3
lady_restore_relation_4_lady_restore_relation_5_2.codeBlock = code


lady_restore_relation_4_lady_restore_relation_cant_afford = Dialog("anyone|plyr", "I don't think I can afford a gift at the moment.", starting_state="lady_restore_relation_4", ending_state="lady_restore_relation_cant_afford")


lady_restore_relation_5_lady_restore_relation_6 = Dialog("anyone", "Excellent. Then I'll choose an appropriate gift for you and send it to {s10} with your compliments. I am sure {reg4?she:he} will appreciate the gesture.", starting_state="lady_restore_relation_5", ending_state="lady_restore_relation_6")
def code():
    troop_remove_gold(trp.player,_tmp_2)
    change_player_relation_with_troop(_troop_to_restore_relations_with,_temp)
    reg4 = troop_get_type(_troop_to_restore_relations_with)
lady_restore_relation_5_lady_restore_relation_6.codeBlock = code


lady_restore_relation_6_lady_pretalk = Dialog("anyone|plyr", "Thank you for your help, madame.", starting_state="lady_restore_relation_6", ending_state="lady_pretalk")


lady_restore_relation_cant_afford_lady_pretalk = Dialog("anyone", "I am afraid, I can't be of much help in that case, {playername}. I am sorry.", starting_state="lady_restore_relation_cant_afford", ending_state="lady_pretalk")


lady_talk_lady_leave = Dialog("anyone|plyr", "I must beg my leave.", starting_state="lady_talk", ending_state="lady_leave")


lady_leave_close_window = Dialog("anyone|auto_proceed", "{s12}", starting_state="lady_leave", ending_state="close_window")
def condition():
    troop_get_relation_with_troop(_g_talk_troop,trp.player)
    if reg0 < 0:
        s12 = str_store_string(gstr.farewell)
    else:
        s12 = str_store_string(gstr.farewell_playername)
    #end
lady_leave_close_window.conditionBlock = condition
def code():
    if _talk_context == 2:
        _g_leave_encounter = 1
lady_leave_close_window.codeBlock = code


convince_begin_convince_options = Dialog("anyone", "I still don't see why I should accept what you're asking of me.", starting_state="convince_begin", ending_state="convince_options")
def code():
    _convince_value = quest_get_slot(_g_convince_quest,19)
convince_begin_convince_options.codeBlock = code


convince_options_convince_bribe = Dialog("anyone|plyr", "Then I'll make it worth your while. ({reg8} denars)", starting_state="convince_options", ending_state="convince_bribe")
def condition():
    reg8 = _convince_value
convince_options_convince_bribe.conditionBlock = condition


convince_options_convince_friendship = Dialog("anyone|plyr", "Please, do it for the sake of our friendship. (-{reg9} to relation)", starting_state="convince_options", ending_state="convince_friendship")
def condition():
    _convince_relation_penalty = _convince_value / 300
    _convince_relation_penalty += 1
    reg9 = _convince_relation_penalty
convince_options_convince_friendship.conditionBlock = condition


convince_options_convince_persuade_begin = Dialog("anyone|plyr", "Let me try and convince you. (Persuasion)", starting_state="convince_options", ending_state="convince_persuade_begin")


convince_options_lord_pretalk = Dialog("anyone|plyr", "Never mind.", starting_state="convince_options", ending_state="lord_pretalk")


convince_bribe_convince_bribe_verify = Dialog("anyone", "Mmm, a generous gift to my coffers would certainly help matters... {reg8} denars should do it. If you agree, then I'll go with your suggestion.", starting_state="convince_bribe", ending_state="convince_bribe_verify")


convince_bribe_verify_convince_bribe_cant_afford = Dialog("anyone|plyr", "I'm afraid my finances will not allow for such a gift.", starting_state="convince_bribe_verify", ending_state="convince_bribe_cant_afford")
def condition():
    if troop_gold_001 < _convince_value:
        troop_gold_001 = store_troop_gold(trp.player)
convince_bribe_verify_convince_bribe_cant_afford.conditionBlock = condition


convince_bribe_verify_convince_bribe_goon = Dialog("anyone|plyr", "Very well, please accept these {reg8} denars as a token of my gratitude.", starting_state="convince_bribe_verify", ending_state="convince_bribe_goon")
def condition():
    if troop_gold_001 >= _convince_value:
        troop_gold_001 = store_troop_gold(trp.player)
convince_bribe_verify_convince_bribe_goon.conditionBlock = condition


convince_bribe_verify_convince_begin = Dialog("anyone|plyr", "Let me think about this some more.", starting_state="convince_bribe_verify", ending_state="convince_begin")


convince_bribe_cant_afford_convince_options = Dialog("anyone", "Ah. In that case, there is little I can do, unless you have some further argument to make.", starting_state="convince_bribe_cant_afford", ending_state="convince_options")


convince_bribe_goon_convince_accept = Dialog("anyone", "My dear {playername}, your generous gift has led me to reconsider what you ask, and I have come to appreciate the wisdom of your proposal.", starting_state="convince_bribe_goon", ending_state="convince_accept")
def code():
    troop_remove_gold(trp.player,_convince_value)
convince_bribe_goon_convince_accept.codeBlock = code


convince_friendship_convince_friendship_verify = Dialog("anyone", "You've done well by me in the past, {playername}, and for that I will go along with your request, but know that I do not like you using our relationship this way.", starting_state="convince_friendship", ending_state="convince_friendship_verify")
def condition():
    if _g_talk_troop_effective_relation >= var001:
        var001 = 5 + _convince_relation_penalty
convince_friendship_convince_friendship_verify.conditionBlock = condition


convince_friendship_verify_convince_friendship_go_on = Dialog("anyone|plyr", "I am sorry, my friend, but I need your help in this.", starting_state="convince_friendship_verify", ending_state="convince_friendship_go_on")


convince_friendship_verify_lord_pretalk = Dialog("anyone|plyr", "If it will not please you, then I'll try something else.", starting_state="convince_friendship_verify", ending_state="lord_pretalk")


convince_friendship_go_on_convince_accept = Dialog("anyone", "All right then, {playername}, I will accept this for your sake. But remember, you owe me for this.", starting_state="convince_friendship_go_on", ending_state="convince_accept")
def code():
    var001 = 0 - _convince_relation_penalty
    change_player_relation_with_troop(_g_talk_troop,var001)
convince_friendship_go_on_convince_accept.codeBlock = code


convince_friendship_lord_pretalk = Dialog("anyone", "I don't think I owe you such a favor {playername}. I see no reason to accept this for you.", starting_state="convince_friendship", ending_state="lord_pretalk")
def condition():
    if _g_talk_troop_relation >= -5:
        pass
convince_friendship_lord_pretalk.conditionBlock = condition


convince_friendship_lord_pretalk_1 = Dialog("anyone", "Is this a joke? You've some nerve asking me for favours, {playername}, and let me assure you you'll get none.", starting_state="convince_friendship", ending_state="lord_pretalk")


convince_persuade_begin_convince_persuade_begin_2 = Dialog("anyone", "Very well. Make your case.", starting_state="convince_persuade_begin", ending_state="convince_persuade_begin_2")
def condition():
    troop_slot_001 = troop_get_slot(_g_talk_troop,26)
    cur_hours_002 = store_current_hours()
    if cur_hours_002 > var003:
        var003 = troop_slot_001 + 24
convince_persuade_begin_convince_persuade_begin_2.conditionBlock = condition


convince_persuade_begin_2_convince_persuade = Dialog("anyone|plyr", "[Attempt to persuade]", starting_state="convince_persuade_begin_2", ending_state="convince_persuade")
def code():
    if True:
        random_x_001 = store_random_in_range(0,100)
        if random_x_001 < 30:
            cur_hours_002 = store_current_hours()
            troop_set_slot(_g_talk_troop,26,cur_hours_002)
        #end
    #end
    skill_lvl_003 = store_skill_level(skl.persuasion,trp.player)
    var004 = skill_lvl_003 + 5
    random_x_005 = store_random_in_range(0,var004)
    random_x_006 = store_random_in_range(0,var004)
    random_x_001 = random_x_005 + random_x_006
    var007 = _convince_value
    convert_to_fixed_point(var007)
    var007 = store_sqrt(var007)
    convert_from_fixed_point(var007)
    var007 /= 10
    var007 += 4
    _persuasion_strength = random_x_001 - var007
    _persuasion_strength *= 20
    reg5 = _persuasion_strength
    _convince_value -= _persuasion_strength
    quest_set_slot(_g_convince_quest,19,_convince_value)
    s50 = str_store_troop_name(_g_talk_troop)
    reg51 = troop_get_type(_g_talk_troop)
    if _persuasion_strength < -30:
        s5 = str_store_string(gstr.persuasion_summary_very_bad)
    elif _persuasion_strength < -10:
        s5 = str_store_string(gstr.persuasion_summary_bad)
    elif _persuasion_strength < 10:
        s5 = str_store_string(gstr.persuasion_summary_average)
    elif _persuasion_strength < 30:
        s5 = str_store_string(gstr.persuasion_summary_good)
    else:
        s5 = str_store_string(gstr.persuasion_summary_very_good)
    #end
    dialog_box("@{s5} [[[Persuasion strength: {reg5}]]]","@Persuasion Attempt")
convince_persuade_begin_2_convince_persuade.codeBlock = code


convince_persuade_begin_2_convince_begin = Dialog("anyone|plyr", "Wait, perhaps there is another way to convince you.", starting_state="convince_persuade_begin_2", ending_state="convince_begin")


convince_persuade_begin_lord_pretalk = Dialog("anyone", "By God's grace, {playername}! Haven't we talked enough already? I am tired of listening to you, and I do not want to hear any more of it right now.", starting_state="convince_persuade_begin", ending_state="lord_pretalk")


convince_persuade_convince_accept = Dialog("anyone", "All right, all right. You have persuaded me to it. I'll go ahead with what you suggest.", starting_state="convince_persuade", ending_state="convince_accept")
def condition():
    if _convince_value <= 0:
        pass
convince_persuade_convince_accept.conditionBlock = condition


convince_persuade_convince_options = Dialog("anyone", "You've a point, {playername}, I'll admit that much. However I am not yet convinced I should do as you bid.", starting_state="convince_persuade", ending_state="convince_options")
def condition():
    if _persuasion_strength > 5:
        pass
convince_persuade_convince_options.conditionBlock = condition


convince_persuade_convince_options_1 = Dialog("anyone", "Enough, {playername}. You've a lot of arguments, but I find none of them truly convincing. I stand by what I said before.", starting_state="convince_persuade", ending_state="convince_options")
def condition():
    if _persuasion_strength > -5:
        pass
convince_persuade_convince_options_1.conditionBlock = condition


convince_persuade_convince_options_2 = Dialog("anyone", "Truthfully, {playername}, I fail to see the virtue of your reasoning. What you ask for makes even less sense now than it did before.", starting_state="convince_persuade", ending_state="convince_options")


start_siege_won_seneschal_1 = Dialog("anyone", "I must congratulate you on your victory, my {lord/lady}. Welcome to {s1}. We, the housekeepers of this castle, are at your service.", starting_state="start", ending_state="siege_won_seneschal_1")
def condition():
    if troop_slot_eq(_g_talk_troop,2,7) and _talk_context == 12:
        s1 = str_store_party_name(_g_encountered_party)
start_siege_won_seneschal_1.conditionBlock = condition


siege_won_seneschal_1_siege_won_seneschal_2 = Dialog("anyone|plyr", "Are you the seneschal?", starting_state="siege_won_seneschal_1", ending_state="siege_won_seneschal_2")


siege_won_seneschal_2_siege_won_seneschal_3 = Dialog("anyone", "Indeed I am, my {lord/lady}. I have always served the masters of {s1} to the best of my ability, whichever side they might be on. Thus you may count on my utmost loyalty for as long as you are the {lord/lady} of this place. Now, do you intend to keep me on as the seneschal? I promise you will not be disappointed.", starting_state="siege_won_seneschal_2", ending_state="siege_won_seneschal_3")


siege_won_seneschal_3_siege_won_seneschal_4 = Dialog("anyone|plyr", "Very well, you may keep your post for the time being.", starting_state="siege_won_seneschal_3", ending_state="siege_won_seneschal_4")


siege_won_seneschal_3_siege_won_seneschal_4_1 = Dialog("anyone|plyr", "You can stay, but I shall be keeping a close watch on you.", starting_state="siege_won_seneschal_3", ending_state="siege_won_seneschal_4")


siege_won_seneschal_4_siege_won_seneschal_5 = Dialog("anyone", "Thank you, my {lord/lady}. If you do not mind my impudence, may I inquire as to what you wish to do with the castle?", starting_state="siege_won_seneschal_4", ending_state="siege_won_seneschal_5")


siege_won_seneschal_5_siege_won_seneschal_6 = Dialog("anyone|plyr", "I will sell it to another lord.", starting_state="siege_won_seneschal_5", ending_state="siege_won_seneschal_6")


siege_won_seneschal_5_siege_won_seneschal_6_1 = Dialog("anyone|plyr", "I intend to claim it for myself.", starting_state="siege_won_seneschal_5", ending_state="siege_won_seneschal_6")


siege_won_seneschal_5_siege_won_seneschal_list_options = Dialog("anyone|plyr", "I haven't given it much thought. What are my options?", starting_state="siege_won_seneschal_5", ending_state="siege_won_seneschal_list_options")


siege_won_seneschal_list_options_siege_won_seneschal_list_options_2 = Dialog("anyone", "According to our laws and traditions, you can do one of several things. First, you could station a garrison here to protect the castle from any immediate counterattacks, then request an audience with some wealthy lord and ask him to make you an offer. It would be worth a tidy sum, believe you me. If you do not wish to sell, then you will have to find yourself a liege lord and protector who would accept homage from you. Without a royal investiture and an army at your back, you would have a difficult time holding on to the castle. Both you and {s1} would become great big targets for any man with a few soldiers and a scrap of ambition. ", starting_state="siege_won_seneschal_list_options", ending_state="siege_won_seneschal_list_options_2")


siege_won_seneschal_list_options_2_siege_won_seneschal_list_options_3 = Dialog("anyone|plyr", "What do you mean, a liege lord and protector? I won this place by my own hand, I don't need anyone else!", starting_state="siege_won_seneschal_list_options_2", ending_state="siege_won_seneschal_list_options_3")


siege_won_seneschal_list_options_3_siege_won_seneschal_list_options_4 = Dialog("anyone", "Of course you don't, my {lord/lady}. However, no lord in the land will recognize your claim to the castle unless it is verified by royal decree. They would call {s1} an outlaw stronghold and take it from you at the earliest opportunity. Surely not even you could stand against a whole army.", starting_state="siege_won_seneschal_list_options_3", ending_state="siege_won_seneschal_list_options_4")


siege_won_seneschal_list_options_4_siege_won_seneschal_6 = Dialog("anyone|plyr", "Hmm. I'll give it some thought.", starting_state="siege_won_seneschal_list_options_4", ending_state="siege_won_seneschal_6")


siege_won_seneschal_6_close_window = Dialog("anyone", "I am very pleased to hear it, my {lord/lady}. I am only trying to serve you to the best of my ability. Now, if at any time you find you have further need of me, I will be in the great hall arranging a smooth handover of the castle to your forces. ", starting_state="siege_won_seneschal_6", ending_state="close_window")


start_seneschal_intro_1 = Dialog("anyone", "Good day, {sir/madam}. I do nott believe I've seen you here before. Let me extend my welcome to you as the seneschal of {s1}.", starting_state="start", ending_state="seneschal_intro_1")
def condition():
    if troop_slot_eq(_g_talk_troop,2,7) and _g_talk_troop_met == 0:
        s1 = str_store_party_name(_g_encountered_party)
start_seneschal_intro_1.conditionBlock = condition


seneschal_intro_1_seneschal_intro_1a = Dialog("anyone|plyr", "A pleasure to meet you, {s65}.", starting_state="seneschal_intro_1", ending_state="seneschal_intro_1a")


seneschal_intro_1a_seneschal_talk = Dialog("anyone", "How can I help you?", starting_state="seneschal_intro_1a", ending_state="seneschal_talk")


seneschal_intro_1_seneschal_intro_1b = Dialog("anyone|plyr", "What exactly do you do here?", starting_state="seneschal_intro_1", ending_state="seneschal_intro_1b")


seneschal_intro_1b_seneschal_talk = Dialog("anyone", "Ah, a seneschal's duties are many, good {sire/woman}. For example, I collect the rents from my lord's estates, I manage the castle's storerooms, I deal with the local peasantry, I take care of castle staff, I arrange supplies for the garrison... All mundane matters on this fief are my responsibility, on behalf of my lord. Everything except commanding the soldiers themselves.", starting_state="seneschal_intro_1b", ending_state="seneschal_talk")


start_seneschal_talk = Dialog("anyone", "Good day, {sir/madam}.", starting_state="start", ending_state="seneschal_talk")
def condition():
    if troop_slot_eq(_g_talk_troop,2,7):
        pass
start_seneschal_talk.conditionBlock = condition


seneschal_pretalk_seneschal_talk = Dialog("anyone", "Anything else?", starting_state="seneschal_pretalk", ending_state="seneschal_talk")


seneschal_talk_seneschal_ask_something = Dialog("anyone|plyr", "I would like to ask you a question...", starting_state="seneschal_talk", ending_state="seneschal_ask_something")
def condition():
    if faction_relation_001 >= 0:
        faction_relation_001 = store_relation(fac.player_supporters_faction,_g_encountered_party_faction)
seneschal_talk_seneschal_ask_something.conditionBlock = condition


seneschal_talk_seneschal_ask_about_someone = Dialog("anyone|plyr", "I wish to know more about someone...", starting_state="seneschal_talk", ending_state="seneschal_ask_about_someone")
def condition():
    if faction_relation_001 >= 0:
        faction_relation_001 = store_relation(fac.player_supporters_faction,_g_encountered_party_faction)
seneschal_talk_seneschal_ask_about_someone.conditionBlock = condition


seneschal_ask_about_someone_seneschal_ask_about_someone_2 = Dialog("anyone", "Perhaps I may be able to help. Whom did you have in mind?", starting_state="seneschal_ask_about_someone", ending_state="seneschal_ask_about_someone_2")


seneschal_ask_about_someone_2_seneschal_pretalk = Dialog("anyone|plyr", "Never mind.", starting_state="seneschal_ask_about_someone_2", ending_state="seneschal_pretalk")


seneschal_talk_close_window = Dialog("anyone|plyr", "I must take my leave of you now. Farewell.", starting_state="seneschal_talk", ending_state="close_window")


seneschal_ask_something_seneschal_ask_something_2 = Dialog("anyone", "I'll do what I can to help, of course. What did you wish to ask?", starting_state="seneschal_ask_something", ending_state="seneschal_ask_something_2")


seneschal_ask_something_2_seneschal_ask_location = Dialog("anyone|plyr", "Perhaps you know where to find someone...", starting_state="seneschal_ask_something_2", ending_state="seneschal_ask_location")


seneschal_ask_location_seneschal_ask_location_2 = Dialog("anyone", "Well, a man in my position does hear a lot of things. Of whom were you thinking?", starting_state="seneschal_ask_location", ending_state="seneschal_ask_location_2")


seneschal_ask_location_2_seneschal_ask_location_3 = Dialog("anyone|repeat_for_troops|plyr", "{s1}", starting_state="seneschal_ask_location_2", ending_state="seneschal_ask_location_3")
def condition():
    troop_id_001 = store_repeat_object()
    if is_between(troop_id_001,trp.npc1,trp.heroes_end):
        troop_faction_002 = store_faction_of_troop(troop_id_001)
        if _g_encountered_party_faction == troop_faction_002:
            s1 = str_store_troop_name(troop_id_001)
seneschal_ask_location_2_seneschal_ask_location_3.conditionBlock = condition
def code():
    _hero_requested_to_learn_location = store_repeat_object()
seneschal_ask_location_2_seneschal_ask_location_3.codeBlock = code


seneschal_ask_location_2_seneschal_pretalk = Dialog("anyone|plyr", "Never mind.", starting_state="seneschal_ask_location_2", ending_state="seneschal_pretalk")


seneschal_ask_location_3_seneschal_pretalk = Dialog("anyone", "{s1}", starting_state="seneschal_ask_location_3", ending_state="seneschal_pretalk")
def condition():
    get_information_about_troops_position(_hero_requested_to_learn_location,0)
seneschal_ask_location_3_seneschal_pretalk.conditionBlock = condition


start_close_window_23 = Dialog("anyone", "There! I can see the walls of {s3} in the distance. We've made it safely. Here, take this purse of {reg3} denars, as I promised. I hope we can travel together again someday.", starting_state="start", ending_state="close_window")
def condition():
    if _caravan_escort_state == 1 and _g_encountered_party == _caravan_escort_party_id and _talk_context <= 2:
        reg0 = store_distance_to_party_from_party(_caravan_escort_destination_town,_caravan_escort_party_id)
        if reg0 < 5:
            s3 = str_store_party_name(_caravan_escort_destination_town)
            reg3 = _caravan_escort_agreed_reward
start_close_window_23.conditionBlock = condition
def code():
    _caravan_escort_state = 0
    troop_add_gold(trp.player,_caravan_escort_agreed_reward)
    reg4 = _caravan_escort_agreed_reward
    reg4 *= 1
    add_xp_as_reward(reg4)
    _g_leave_encounter = 1
start_close_window_23.codeBlock = code


start_talk_caravan_escort = Dialog("anyone", "We've made it this far... Is everything clear up ahead?", starting_state="start", ending_state="talk_caravan_escort")
def condition():
    if _caravan_escort_state == 1 and _g_encountered_party == _caravan_escort_party_id and _talk_context == 2:
        pass
start_talk_caravan_escort.conditionBlock = condition


talk_caravan_escort_talk_caravan_escort_2a = Dialog("anyone|plyr", "There might be bandits nearby. Stay close.", starting_state="talk_caravan_escort", ending_state="talk_caravan_escort_2a")


talk_caravan_escort_2a_close_window = Dialog("anyone", "Trust me, {playername}, we're already staying as close to you as we can. Lead the way.", starting_state="talk_caravan_escort_2a", ending_state="close_window")
def code():
    _g_leave_encounter = 1
talk_caravan_escort_2a_close_window.codeBlock = code


talk_caravan_escort_talk_caravan_escort_2b = Dialog("anyone|plyr", "No sign of trouble, we can breathe easy.", starting_state="talk_caravan_escort", ending_state="talk_caravan_escort_2b")


talk_caravan_escort_2b_close_window = Dialog("anyone", "I'll breathe easy when we reach {s1} and not a moment sooner. Let's keep moving.", starting_state="talk_caravan_escort_2b", ending_state="close_window")
def code():
    s1 = str_store_party_name(_caravan_escort_destination_town)
    _g_leave_encounter = 1
talk_caravan_escort_2b_close_window.codeBlock = code


start_merchant_talk = Dialog("anyone", "What do you want? We paid our toll to you less than three days ago.", starting_state="start", ending_state="merchant_talk")
def condition():
    if _talk_context == 2 and _g_encountered_party_type == 11 and party_slot_ge(_g_encountered_party,52,_g_current_hours):
        pass
start_merchant_talk.conditionBlock = condition


start_merchant_talk_1 = Dialog("anyone", "Hail, friend.", starting_state="start", ending_state="merchant_talk")
def condition():
    if _talk_context == 2 and _g_encountered_party_type == 11 and _g_encountered_party_relation >= 0:
        pass
start_merchant_talk_1.conditionBlock = condition


start_merchant_talk_2 = Dialog("anyone", "What do you want? We are but simple merchants, we've no quarrel with you, so leave us alone.", starting_state="start", ending_state="merchant_talk")
def condition():
    if _talk_context == 2 and _g_encountered_party_type == 11 and _g_encountered_party_relation < 0 and _g_encountered_party_faction == fac.merchants:
        pass
start_merchant_talk_2.conditionBlock = condition


start_merchant_talk_3 = Dialog("anyone", "Be warned, knave! This caravan is under the protection of {s9}. Step out of our way or you will face his fury!", starting_state="start", ending_state="merchant_talk")
def condition():
    if _talk_context == 2 and _g_encountered_party_type == 11 and _g_encountered_party_relation < 0:
        faction_slot_001 = faction_get_slot(_g_encountered_party_faction,11)
        s9 = str_store_troop_name(faction_slot_001)
start_merchant_talk_3.conditionBlock = condition


start_merchant_talk_4 = Dialog("anyone", "Yes? What do you want?", starting_state="start", ending_state="merchant_talk")
def condition():
    if party_slot_eq(_g_encountered_party,0,11) and _talk_context == 2 or _talk_context == 0:
        pass
start_merchant_talk_4.conditionBlock = condition


merchant_pretalk_merchant_talk = Dialog("anyone", "Anything else?", starting_state="merchant_pretalk", ending_state="merchant_talk")


merchant_talk_caravan_start_war_quest_1 = Dialog("anyone|plyr", "You are trespassing in the territory of the {s17}. I am confiscating this caravan and all its goods!", starting_state="merchant_talk", ending_state="caravan_start_war_quest_1")
def condition():
    if _talk_context <= 2 and check_quest_active(qst.cause_provocation) and not check_quest_concluded(qst.cause_provocation) and quest_slot_eq(qst.cause_provocation,3,_g_encountered_party_faction):
        quest_slot_001 = quest_get_slot(qst.cause_provocation,6)
        troop_faction_002 = store_faction_of_troop(quest_slot_001)
        s17 = str_store_faction_name(troop_faction_002)
merchant_talk_caravan_start_war_quest_1.conditionBlock = condition


caravan_start_war_quest_1_caravan_start_war_quest_2 = Dialog("anyone", "What? What nonsense is this? We are at peace with the {s17}, and are free to cross its lands!", starting_state="caravan_start_war_quest_1", ending_state="caravan_start_war_quest_2")
def condition():
    quest_slot_001 = quest_get_slot(qst.cause_provocation,6)
    troop_faction_002 = store_faction_of_troop(quest_slot_001)
    s17 = str_store_faction_name(troop_faction_002)
caravan_start_war_quest_1_caravan_start_war_quest_2.conditionBlock = condition


caravan_start_war_quest_2_merchant_attack = Dialog("anyone|plyr", "We'll see about that! Defend yourselves!", starting_state="caravan_start_war_quest_2", ending_state="merchant_attack")


caravan_start_war_quest_2_close_window = Dialog("anyone|plyr", "Hmm. Maybe this was all a misunderstanding. Farewell.", starting_state="caravan_start_war_quest_2", ending_state="close_window")
def code():
    _g_leave_encounter = 1
caravan_start_war_quest_2_close_window.codeBlock = code


merchant_talk_merchant_talk_offer = Dialog("anyone|plyr", "I have an offer for you.", starting_state="merchant_talk", ending_state="merchant_talk_offer")
def condition():
    if _talk_context <= 2 and _g_encountered_party_faction == _players_kingdom:
        pass
merchant_talk_merchant_talk_offer.conditionBlock = condition


merchant_talk_offer_merchant_talk_offer_2 = Dialog("anyone", "What is it?", starting_state="merchant_talk_offer", ending_state="merchant_talk_offer_2")


merchant_talk_offer_2_caravan_offer_protection = Dialog("anyone|plyr", "I can escort you to your destination for a price.", starting_state="merchant_talk_offer_2", ending_state="caravan_offer_protection")
def condition():
    if _talk_context == 2 and _g_encountered_party_faction == _players_kingdom:
        pass
merchant_talk_offer_2_caravan_offer_protection.conditionBlock = condition


merchant_talk_offer_2_merchant_pretalk = Dialog("anyone|plyr", "Nothing. Forget it", starting_state="merchant_talk_offer_2", ending_state="merchant_pretalk")


merchant_talk_merchant_bandit_information = Dialog("anyone|plyr", "I am hunting a group of bandits with the following description... Have you seen them?", starting_state="merchant_talk", ending_state="merchant_bandit_information")
def condition():
    if check_quest_active(qst.track_down_bandits):
        pass
merchant_talk_merchant_bandit_information.conditionBlock = condition


merchant_bandit_information_merchant_pretalk = Dialog("anyone", "{s15}", starting_state="merchant_bandit_information", ending_state="merchant_pretalk")
def condition():
    get_manhunt_information_to_s15(qst.track_down_bandits)
merchant_bandit_information_merchant_pretalk.conditionBlock = condition


merchant_talk_merchant_trip_explanation = Dialog("anyone|plyr", "Tell me about your journey", starting_state="merchant_talk", ending_state="merchant_trip_explanation")
def condition():
    if _talk_context == 2:
        pass
merchant_talk_merchant_trip_explanation.conditionBlock = condition


merchant_trip_explanation_merchant_pretalk = Dialog("anyone", "We are coming from {s11} and heading to {s12}.{s14}", starting_state="merchant_trip_explanation", ending_state="merchant_pretalk")
def condition():
    party_slot_001 = party_get_slot(_g_encountered_party,126)
    party_slot_002 = party_get_slot(_g_encountered_party,5)
    s11 = str_store_party_name(party_slot_001)
    s12 = str_store_party_name(party_slot_002)
    s14 = str_store_string(gstr.__we_believe_that_there_is_money_to_be_made_selling_)
    var003 = 250 - itm.spice
    var004 = 0
    for itm_005 in range(itm.spice, itm.siege_supply):
        slot_no_006 = itm_005 + var003
        party_slot_007 = party_get_slot(party_slot_001,slot_no_006)
        party_slot_008 = party_get_slot(party_slot_002,slot_no_006)
        if party_slot_008 > party_slot_007:
            var009 = party_slot_008 - party_slot_007
            if var009 > 200:
                s15 = str_store_item_name(itm_005)
                s14 = str_store_string(gstr.s14s15_)
                var004 = 1
            #end
        #end
    #end
    if var004 == 0:
        s14 = str_store_string(gstr._we_carry_a_selection_of_goods_although_the_difference_in_prices_for_each_is_not_so_great_we_hope_to_make_a_profit_off_of_the_whole)
    else:
        s14 = str_store_string(gstr.s14and_other_goods)
    #end
merchant_trip_explanation_merchant_pretalk.conditionBlock = condition


merchant_talk_merchant_demand = Dialog("anyone|plyr", "I demand something from you!", starting_state="merchant_talk", ending_state="merchant_demand")
def condition():
    if _talk_context == 2 and not party_slot_ge(_g_encountered_party,52,_g_current_hours):
        pass
merchant_talk_merchant_demand.conditionBlock = condition


merchant_demand_merchant_demand_2 = Dialog("anyone", "What do you want?", starting_state="merchant_demand", ending_state="merchant_demand_2")
def condition():
    if _talk_context == 2:
        pass
merchant_demand_merchant_demand_2.conditionBlock = condition


merchant_demand_2_merchant_demand_toll = Dialog("anyone|plyr", "There is a toll for free passage here!", starting_state="merchant_demand_2", ending_state="merchant_demand_toll")
def condition():
    if _g_encountered_party_faction != _players_kingdom:
        pass
merchant_demand_2_merchant_demand_toll.conditionBlock = condition


merchant_demand_toll_merchant_demand_toll_2 = Dialog("anyone", "Please, I don't want any trouble. I can give you {reg6} denars, just let us go.", starting_state="merchant_demand_toll", ending_state="merchant_demand_toll_2")
def condition():
    if _g_strength_ratio > 70:
        reg6 = _g_ally_strength / 2
        reg6 += 40
        _temp = reg6
merchant_demand_toll_merchant_demand_toll_2.conditionBlock = condition


merchant_demand_toll_merchant_demand_toll_2_1 = Dialog("anyone", "I don't want any trouble. I can give you {reg6} denars if you'll let us go.", starting_state="merchant_demand_toll", ending_state="merchant_demand_toll_2")
def condition():
    reg6 = _g_ally_strength / 4
    reg6 += 10
    _temp = reg6
merchant_demand_toll_merchant_demand_toll_2_1.conditionBlock = condition


merchant_demand_toll_2_merchant_demand_toll_accept = Dialog("anyone|plyr", "Agreed, hand it over and you may go in peace.", starting_state="merchant_demand_toll_2", ending_state="merchant_demand_toll_accept")


merchant_demand_toll_accept_close_window = Dialog("anyone", "Very well then. Here's {reg6} denars. ", starting_state="merchant_demand_toll_accept", ending_state="close_window")
def condition():
    reg6 = _temp
merchant_demand_toll_accept_close_window.conditionBlock = condition
def code():
    _g_leave_encounter = 1
    troop_add_gold(trp.player,_temp)
    var001 = _g_current_hours + 72
    party_set_slot(_g_encountered_party,52,var001)
    if _g_encountered_party_relation >= -5:
        faction_relation_002 = store_relation(_g_encountered_party_faction,fac.player_supporters_faction)
        if faction_relation_002 > 0:
            faction_relation_002 -= 1
        #end
        faction_relation_002 -= 1
        set_player_relation_with_faction(_g_encountered_party_faction,faction_relation_002)
    #end
    add_log_entry(3,trp.player,-1,-1,_g_encountered_party_faction)
    reg6 = _temp
merchant_demand_toll_accept_close_window.codeBlock = code


merchant_demand_toll_2_merchant_pretalk = Dialog("anyone|plyr", "I changed my mind, I can't take your money.", starting_state="merchant_demand_toll_2", ending_state="merchant_pretalk")


merchant_demand_toll_2_merchant_attack = Dialog("anyone|plyr", "No, I want everything you have! [Attack]", starting_state="merchant_demand_toll_2", ending_state="merchant_attack")


merchant_demand_2_merchant_attack_begin = Dialog("anyone|plyr", "Hand over your gold and valuables now!", starting_state="merchant_demand_2", ending_state="merchant_attack_begin")
def condition():
    if _g_encountered_party_faction != _players_kingdom:
        pass
merchant_demand_2_merchant_attack_begin.conditionBlock = condition


merchant_demand_2_merchant_pretalk = Dialog("anyone|plyr", "Nothing. Forget it.", starting_state="merchant_demand_2", ending_state="merchant_pretalk")


merchant_attack_begin_merchant_attack_verify = Dialog("anyone", "Are you robbing us?{s11}", starting_state="merchant_attack_begin", ending_state="merchant_attack_verify")
def code():
    str_clear(11)
    if faction_slot_ge(_g_encountered_party_faction,120,1):
        s11 = str_store_string(gstr._have_you_not_signed_a_truce_with_our_lord)
    #end
merchant_attack_begin_merchant_attack_verify.codeBlock = code


merchant_attack_verify_merchant_attack_verify_norob = Dialog("anyone|plyr", "Robbing you? No, no! It was a joke.", starting_state="merchant_attack_verify", ending_state="merchant_attack_verify_norob")


merchant_attack_verify_norob_close_window = Dialog("anyone", "God, don't joke about that, {lad/lass}. For a moment I thought we were in real trouble.", starting_state="merchant_attack_verify_norob", ending_state="close_window")
def code():
    _g_leave_encounter = 1
merchant_attack_verify_norob_close_window.codeBlock = code


merchant_attack_verify_merchant_attack = Dialog("anyone|plyr", "Of course I'm robbing you. Now hand over your goods.", starting_state="merchant_attack_verify", ending_state="merchant_attack")
def code():
    diplomacy_party_attacks_neutral(p.main_party,_g_encountered_party)
merchant_attack_verify_merchant_attack.codeBlock = code


merchant_attack_close_window = Dialog("anyone", "Damn you, you won't get anything from us without a fight!", starting_state="merchant_attack", ending_state="close_window")
def code():
    faction_relation_001 = store_relation(_g_encountered_party_faction,fac.player_supporters_faction)
    if faction_relation_001 > 0:
        faction_relation_001 -= 10
    #end
    faction_relation_001 -= 5
    set_player_relation_with_faction(_g_encountered_party_faction,faction_relation_001)
    diplomacy_party_attacks_neutral(p.main_party,_g_encountered_party)
merchant_attack_close_window.codeBlock = code


caravan_offer_protection_caravan_offer_protection_2 = Dialog("anyone", "These roads are dangerous indeed. One can never have enough protection.", starting_state="caravan_offer_protection", ending_state="caravan_offer_protection_2")
def code():
    party_ai_object_001 = get_party_ai_object(_g_encountered_party)
    _caravan_distance_to_target = store_distance_to_party_from_party(party_ai_object_001,_g_encountered_party)
    _caravan_escort_offer = _caravan_distance_to_target
    _caravan_escort_offer -= 10
    party_calculate_strength(p.main_party,0)
    var002 = reg0
    val_min(var002,200)
    var002 += 20
    _caravan_escort_offer *= var002
    _caravan_escort_offer /= 50
    val_max(_caravan_escort_offer,5)
caravan_offer_protection_caravan_offer_protection_2.codeBlock = code


caravan_offer_protection_2_close_window = Dialog("anyone", "An escort? We're almost there already! Thank you for the offer, though.", starting_state="caravan_offer_protection_2", ending_state="close_window")
def condition():
    if _caravan_distance_to_target < 10:
        pass
caravan_offer_protection_2_close_window.conditionBlock = condition
def code():
    _g_leave_encounter = 1
caravan_offer_protection_2_close_window.codeBlock = code


caravan_offer_protection_2_caravan_offer_protection_3 = Dialog("anyone", "We are heading to {s1}. I will pay you {reg2} denars if you escort us there.", starting_state="caravan_offer_protection_2", ending_state="caravan_offer_protection_3")
def condition():
    party_ai_object_001 = get_party_ai_object(_g_encountered_party)
    s1 = str_store_party_name(party_ai_object_001)
    reg2 = _caravan_escort_offer
caravan_offer_protection_2_caravan_offer_protection_3.conditionBlock = condition


caravan_offer_protection_3_caravan_offer_protection_4 = Dialog("anyone|plyr", "Agreed.", starting_state="caravan_offer_protection_3", ending_state="caravan_offer_protection_4")


caravan_offer_protection_4_caravan_offer_protection_5 = Dialog("anyone", "I want you to stay close to us along the way. We'll need your help if we get ambushed by bandits.", starting_state="caravan_offer_protection_4", ending_state="caravan_offer_protection_5")


caravan_offer_protection_5_caravan_offer_protection_6 = Dialog("anyone|plyr", "Don't worry, you can trust me.", starting_state="caravan_offer_protection_5", ending_state="caravan_offer_protection_6")


caravan_offer_protection_6_close_window = Dialog("anyone", "Good. Come and collect your money when we're within sight of {s1}. For now, let's just get underway.", starting_state="caravan_offer_protection_6", ending_state="close_window")
def condition():
    party_ai_object_001 = get_party_ai_object(_g_encountered_party)
    s1 = str_store_party_name(party_ai_object_001)
caravan_offer_protection_6_close_window.conditionBlock = condition
def code():
    party_ai_object_001 = get_party_ai_object(_g_encountered_party)
    _caravan_escort_destination_town = party_ai_object_001
    _caravan_escort_party_id = _g_encountered_party
    _caravan_escort_agreed_reward = _caravan_escort_offer
    _caravan_escort_state = 1
    _g_leave_encounter = 1
caravan_offer_protection_6_close_window.codeBlock = code


caravan_offer_protection_3_caravan_offer_protection_4b = Dialog("anyone|plyr", "Forget it.", starting_state="caravan_offer_protection_3", ending_state="caravan_offer_protection_4b")


caravan_offer_protection_4b_close_window = Dialog("anyone", "Perhaps another time, then.", starting_state="caravan_offer_protection_4b", ending_state="close_window")
def code():
    _g_leave_encounter = 1
caravan_offer_protection_4b_close_window.codeBlock = code


merchant_talk_talk_caravan_enemy_2 = Dialog("anyone|plyr", "Not so fast. First, hand over all your goods and money.", starting_state="merchant_talk", ending_state="talk_caravan_enemy_2")
def condition():
    if _talk_context == 2 and _g_talk_x_troop_faction_relation < 0:
        pass
merchant_talk_talk_caravan_enemy_2.conditionBlock = condition


talk_caravan_enemy_2_close_window = Dialog("anyone", "Never. It is our duty to protect these goods. You shall have to fight us, brigand!", starting_state="talk_caravan_enemy_2", ending_state="close_window")
def code():
    faction_relation_001 = store_relation(_g_encountered_party_faction,fac.player_supporters_faction)
    val_min(faction_relation_001,0)
    faction_relation_001 -= 4
    set_player_relation_with_faction(_g_encountered_party_faction,faction_relation_001)
    diplomacy_party_attacks_neutral(p.main_party,_g_encountered_party)
talk_caravan_enemy_2_close_window.codeBlock = code


merchant_talk_close_window = Dialog("anyone|plyr", "[Leave]", starting_state="merchant_talk", ending_state="close_window")
def code():
    _g_leave_encounter = 1
merchant_talk_close_window.codeBlock = code


start_prison_guard_players = Dialog("anyone", "Good day, my {lord/lady}. Will you be visiting the prison?", starting_state="start", ending_state="prison_guard_players")
def condition():
    if _talk_context == 0 and faction_slot_eq(_g_encountered_party_faction,51,_g_talk_troop) and _g_encountered_party_faction == fac.player_supporters_faction or party_slot_eq(_g_encountered_party,7,trp.player):
        pass
start_prison_guard_players.conditionBlock = condition


prison_guard_players_close_window = Dialog("anyone|plyr", "Yes. Unlock the door.", starting_state="prison_guard_players", ending_state="close_window")
def code():
    enter_dungeon(_current_town,mt.visit_town_castle)
prison_guard_players_close_window.codeBlock = code


prison_guard_players_close_window_1 = Dialog("anyone|plyr", "No, not now.", starting_state="prison_guard_players", ending_state="close_window")


start_prison_guard_talk = Dialog("anyone", "Yes? What do you want?", starting_state="start", ending_state="prison_guard_talk")
def condition():
    if _talk_context == 0 and faction_slot_eq(_g_encountered_party_faction,51,_g_talk_troop):
        pass
start_prison_guard_talk.conditionBlock = condition


prison_guard_talk_prison_guard_ask_prisoners = Dialog("anyone|plyr", "Who is imprisoned here?", starting_state="prison_guard_talk", ending_state="prison_guard_ask_prisoners")


prison_guard_talk_prison_guard_visit_prison = Dialog("anyone|plyr", "I want to speak with a prisoner.", starting_state="prison_guard_talk", ending_state="prison_guard_visit_prison")


prison_guard_ask_prisoners_prison_guard_talk = Dialog("anyone", "Currently, {s50} {reg1?are:is} imprisoned here.{s49}", starting_state="prison_guard_ask_prisoners", ending_state="prison_guard_talk")
def code():
    party_clear(p.temp_party)
    party_clear(p.temp_party_2)
    var001 = 0
    var002 = 0
    party_num_prisoners_stacks_003 = party_get_num_prisoner_stacks(_g_encountered_party)
    for var004 in range(0, party_num_prisoners_stacks_003):
        party_prisoner_troop_id_005 = party_prisoner_stack_get_troop_id(_g_encountered_party,var004)
        if troop_is_hero(party_prisoner_troop_id_005):
            if cf_prisoner_offered_parole(party_prisoner_troop_id_005):
                party_add_members(p.temp_party_2,party_prisoner_troop_id_005,1)
                var002 += 1
            else:
                party_add_members(p.temp_party,party_prisoner_troop_id_005,1)
                var001 += 1
            #end
        #end
    #end
    print_party_members(p.temp_party)
    s50 = str_store_string(gstr.s51)
    if var001 > 1:
        reg1 = 1
    else:
        reg1 = 0
    #end
    str_clear(49)
    if var002 >= 1:
        print_party_members(p.temp_party_2)
        if var002 >= 2:
            reg2 = 1
        else:
            reg2 = 0
        #end
        s49 = str_store_string(gstr._meanwhile_s51_reg2areis_being_held_in_the_castle_but_reg2havehas_made_pledges_not_to_escape_and_reg2areis_being_held_in_more_comfortable_quarters)
    #end
prison_guard_ask_prisoners_prison_guard_talk.codeBlock = code


prison_guard_visit_prison_close_window = Dialog("anyone", "Of course, {sir/madam}. Go in.", starting_state="prison_guard_visit_prison", ending_state="close_window")
def condition():
    if faction_slot_eq(_g_encountered_party_faction,8,trp.player) or party_slot_eq(_g_encountered_party,7,trp.player) or _g_encountered_party_faction == _players_kingdom:
        pass
prison_guard_visit_prison_close_window.conditionBlock = condition
def code():
    enter_dungeon(_current_town,mt.visit_town_castle)
prison_guard_visit_prison_close_window.codeBlock = code


prison_guard_visit_prison_prison_guard_visit_prison_2 = Dialog("anyone", "You need to get permission from the lord to talk to prisoners.", starting_state="prison_guard_visit_prison", ending_state="prison_guard_visit_prison_2")
def condition():
    var001 = 0
    party_num_prisoners_stacks_002 = party_get_num_prisoner_stacks(_g_encountered_party)
    var003 = party_num_prisoners_stacks_002
    for var004 in range(0, var003):
        party_prisoner_troop_id_005 = party_prisoner_stack_get_troop_id(_g_encountered_party,var004)
        if troop_is_hero(party_prisoner_troop_id_005):
            if call_script(script.cf_prisoner_offered_parole,party_prisoner_troop_id_005):
                pass
            else:
                var001 += 1
                var003 = 0
            #end
        #end
        if var001 >= 1:
            pass
        #end
    #end
prison_guard_visit_prison_prison_guard_visit_prison_2.conditionBlock = condition


prison_guard_visit_prison_prison_guard_visit_prison_nobody = Dialog("anyone", "There is nobody inside, therefore you can freely go inside and look around.", starting_state="prison_guard_visit_prison", ending_state="prison_guard_visit_prison_nobody")


prison_guard_visit_prison_nobody_close_window = Dialog("anyone|plyr", "All right then. I'll take a look at the prison.", starting_state="prison_guard_visit_prison_nobody", ending_state="close_window")
def code():
    enter_dungeon(_current_town,mt.visit_town_castle)
prison_guard_visit_prison_nobody_close_window.codeBlock = code


prison_guard_visit_prison_nobody_close_window_1 = Dialog("anyone|plyr", "I have more important business to do.", starting_state="prison_guard_visit_prison_nobody", ending_state="close_window")


prison_guard_visit_prison_2_close_window = Dialog("anyone|plyr", "All right then. I'll try that.", starting_state="prison_guard_visit_prison_2", ending_state="close_window")


prison_guard_visit_prison_2_prison_guard_visit_prison_3 = Dialog("anyone|plyr", "Come on now. I thought you were the boss here.", starting_state="prison_guard_visit_prison_2", ending_state="prison_guard_visit_prison_3")


prison_guard_visit_prison_3_prison_guard_visit_prison_4 = Dialog("anyone", "He-heh. You got that right. Still, I can't let you into the prison.", starting_state="prison_guard_visit_prison_3", ending_state="prison_guard_visit_prison_4")


prison_guard_visit_prison_4_close_window = Dialog("anyone|plyr", "All right then. I'll leave now.", starting_state="prison_guard_visit_prison_4", ending_state="close_window")


prison_guard_visit_prison_4_prison_guard_visit_prison_5 = Dialog("anyone|plyr", "I found a purse with 100 denars a few paces away. I reckon it belongs to you.", starting_state="prison_guard_visit_prison_4", ending_state="prison_guard_visit_prison_5")
def condition():
    if troop_gold_001 >= 100:
        troop_gold_001 = store_troop_gold(trp.player)
prison_guard_visit_prison_4_prison_guard_visit_prison_5.conditionBlock = condition


prison_guard_visit_prison_5_close_window = Dialog("anyone", "Ah! I was looking for this all day. How good of you to bring it back {sir/madam}. Well, now that I know what an honest {man/lady} you are, there can be no harm in letting you inside for a look. Go in.... Just so you know, though -- I'll be hanging onto the keys, in case you were thinking about undoing anyone's chains.", starting_state="prison_guard_visit_prison_5", ending_state="close_window")
def code():
    troop_remove_gold(trp.player,100)
    enter_dungeon(_current_town,mt.visit_town_castle)
prison_guard_visit_prison_5_close_window.codeBlock = code


prison_guard_visit_prison_4_prison_guard_visit_break = Dialog("anyone|plyr", "Give me the keys to the cells -- now!", starting_state="prison_guard_visit_prison_4", ending_state="prison_guard_visit_break")


prison_guard_visit_break_close_window = Dialog("anyone", "Help! Help! Prison break!", starting_state="prison_guard_visit_break", ending_state="close_window")
def code():
    activate_town_guard()
    _g_main_attacker_agent = _g_talk_agent
    _talk_context = 18
    var001 = trp.heroes_end
    for troop_id_002 in range(trp.npc1, var001):
        troop_set_slot(troop_id_002,149,0)
    #end
prison_guard_visit_break_close_window.codeBlock = code


prison_guard_talk_close_window = Dialog("anyone|plyr", "Never mind.", starting_state="prison_guard_talk", ending_state="close_window")


start_castle_guard_players = Dialog("anyone", "Your orders, {Lord/Lady}?", starting_state="start", ending_state="castle_guard_players")
def condition():
    if _talk_context == 0 and faction_slot_eq(_g_encountered_party_faction,52,_g_talk_troop) and _g_encountered_party_faction == fac.player_supporters_faction or party_slot_eq(_g_encountered_party,7,trp.player):
        pass
start_castle_guard_players.conditionBlock = condition


castle_guard_players_close_window = Dialog("anyone|plyr", "Open the door. I'll go in.", starting_state="castle_guard_players", ending_state="close_window")
def code():
    enter_court(_current_town)
castle_guard_players_close_window.codeBlock = code


castle_guard_players_close_window_1 = Dialog("anyone|plyr", "Never mind.", starting_state="castle_guard_players", ending_state="close_window")


start_castle_guard_sneaked_intro_1 = Dialog("anyone", "Get out of my sight, beggar! You stink!", starting_state="start", ending_state="castle_guard_sneaked_intro_1")
def condition():
    if _talk_context == 0 and faction_slot_eq(_g_encountered_party_faction,52,_g_talk_troop) and _sneaked_into_town == 1 and _g_time_since_last_talk > 0:
        pass
start_castle_guard_sneaked_intro_1.conditionBlock = condition


start_close_window_24 = Dialog("anyone", "Get lost before I lose my temper you vile beggar!", starting_state="start", ending_state="close_window")
def condition():
    if _talk_context == 0 and faction_slot_eq(_g_encountered_party_faction,52,_g_talk_troop) and _sneaked_into_town == 1:
        pass
start_close_window_24.conditionBlock = condition


castle_guard_sneaked_intro_1_castle_guard_sneaked_intro_2 = Dialog("anyone|plyr", "I want to enter the hall and speak to the lord.", starting_state="castle_guard_sneaked_intro_1", ending_state="castle_guard_sneaked_intro_2")


castle_guard_sneaked_intro_1_close_window = Dialog("anyone|plyr", "[Leave]", starting_state="castle_guard_sneaked_intro_1", ending_state="close_window")


castle_guard_sneaked_intro_2_close_window = Dialog("anyone", "Are you out of your mind, {man/woman}? Beggars are not allowed into the hall. Now get lost or I'll beat you bloody.", starting_state="castle_guard_sneaked_intro_2", ending_state="close_window")


start_castle_guard_intro_1 = Dialog("anyone", "What do you want?", starting_state="start", ending_state="castle_guard_intro_1")
def condition():
    if _talk_context == 0 and faction_slot_eq(_g_encountered_party_faction,52,_g_talk_troop):
        pass
start_castle_guard_intro_1.conditionBlock = condition


castle_guard_intro_1_castle_guard_intro_2 = Dialog("anyone|plyr", "I want to enter the hall and speak to the lord.", starting_state="castle_guard_intro_1", ending_state="castle_guard_intro_2")


castle_guard_intro_1_close_window = Dialog("anyone|plyr", "Never mind.", starting_state="castle_guard_intro_1", ending_state="close_window")


castle_guard_intro_2_close_window = Dialog("anyone", "I'm afraid there is a feast in progress, and you are not invited.", starting_state="castle_guard_intro_2", ending_state="close_window")
def condition():
    if faction_slot_eq(_g_encountered_party_faction,4,6) and faction_slot_eq(_g_encountered_party_faction,5,_current_town) and _players_kingdom == _g_encountered_party_faction or not troop_slot_ge(trp.player,7,50) and not troop_slot_ge(trp.player,7,125) and _g_player_eligible_feast_center_no != _current_town and not check_quest_active(qst.wed_betrothed) and not check_quest_active(qst.wed_betrothed_female) and not troop_slot_ge(trp.player,30,1):
        pass
castle_guard_intro_2_close_window.conditionBlock = condition


castle_guard_intro_2_castle_guard_intro_3 = Dialog("anyone", "You can go in after leaving your weapons with me. No one is allowed to carry arms into the lord's hall.", starting_state="castle_guard_intro_2", ending_state="castle_guard_intro_3")


castle_guard_intro_3_close_window = Dialog("anyone|plyr", "Here, take my arms. I'll go in.", starting_state="castle_guard_intro_3", ending_state="close_window")
def code():
    enter_court(_current_town)
castle_guard_intro_3_close_window.codeBlock = code


castle_guard_intro_3_castle_guard_intro_2b = Dialog("anyone|plyr", "No, I give my arms to no one.", starting_state="castle_guard_intro_3", ending_state="castle_guard_intro_2b")


castle_guard_intro_2b_close_window = Dialog("anyone", "Then you can't go in.", starting_state="castle_guard_intro_2b", ending_state="close_window")


start_castle_gate_guard_talk = Dialog("anyone", "What do you want?", starting_state="start", ending_state="castle_gate_guard_talk")
def condition():
    if _talk_context == 3:
        pass
start_castle_gate_guard_talk.conditionBlock = condition


castle_gate_guard_pretalk_castle_gate_guard_talk = Dialog("anyone", "Yes?", starting_state="castle_gate_guard_pretalk", ending_state="castle_gate_guard_talk")


castle_gate_guard_talk_castle_gate_open = Dialog("anyone|plyr", "We need shelter for the night. Will you let us in?", starting_state="castle_gate_guard_talk", ending_state="castle_gate_open")
def condition():
    if _g_encountered_party_relation >= 0:
        pass
castle_gate_guard_talk_castle_gate_open.conditionBlock = condition


castle_gate_guard_talk_request_meeting_castle_lord = Dialog("anyone|plyr", "I want to speak with the lord of the castle.", starting_state="castle_gate_guard_talk", ending_state="request_meeting_castle_lord")
def condition():
    if party_slot_ge(_g_encountered_party,7,1):
        pass
castle_gate_guard_talk_request_meeting_castle_lord.conditionBlock = condition


castle_gate_guard_talk_request_meeting_other = Dialog("anyone|plyr", "I want to speak with someone in the castle.", starting_state="castle_gate_guard_talk", ending_state="request_meeting_other")


castle_gate_guard_talk_close_window = Dialog("anyone|plyr", "[Leave]", starting_state="castle_gate_guard_talk", ending_state="close_window")


request_meeting_castle_lord_close_window = Dialog("anyone", "Wait here. {s2} will see you.", starting_state="request_meeting_castle_lord", ending_state="close_window")
def condition():
    party_slot_001 = party_get_slot(_g_encountered_party,7)
    get_troop_attached_party(party_slot_001)
    if _g_encountered_party == reg0:
        s2 = str_store_troop_name(party_slot_001)
        _lord_requested_to_talk_to = party_slot_001
request_meeting_castle_lord_close_window.conditionBlock = condition


request_meeting_castle_lord_castle_gate_guard_pretalk = Dialog("anyone", "My lord is not here now.", starting_state="request_meeting_castle_lord", ending_state="castle_gate_guard_pretalk")


request_meeting_other_request_meeting_3 = Dialog("anyone", "Who is that?", starting_state="request_meeting_other", ending_state="request_meeting_3")


request_meeting_3_request_meeting_4 = Dialog("anyone|repeat_for_troops|plyr", "{s3}", starting_state="request_meeting_3", ending_state="request_meeting_4")
def condition():
    troop_id_001 = store_repeat_object()
    if troop_is_hero(troop_id_001) and troop_slot_eq(troop_id_001,2,2):
        get_troop_attached_party(troop_id_001)
        if _g_encountered_party == reg0:
            s3 = str_store_troop_name(troop_id_001)
request_meeting_3_request_meeting_4.conditionBlock = condition
def code():
    _lord_requested_to_talk_to = store_repeat_object()
request_meeting_3_request_meeting_4.codeBlock = code


request_meeting_3_close_window = Dialog("anyone|plyr", "Never mind.", starting_state="request_meeting_3", ending_state="close_window")
def code():
    _lord_requested_to_talk_to = 0
request_meeting_3_close_window.codeBlock = code


request_meeting_4_request_meeting_5 = Dialog("anyone", "Wait there. I'll send him your request.", starting_state="request_meeting_4", ending_state="request_meeting_5")


request_meeting_5_request_meeting_6 = Dialog("anyone|plyr", "I'm waiting...", starting_state="request_meeting_5", ending_state="request_meeting_6")


request_meeting_6_close_window = Dialog("anyone", "All right. {s2} will talk to you now.", starting_state="request_meeting_6", ending_state="close_window")
def condition():
    troop_get_player_relation(_lord_requested_to_talk_to)
    if var001 > -20:
        var001 = reg0
request_meeting_6_close_window.conditionBlock = condition
def code():
    s2 = str_store_troop_name(_lord_requested_to_talk_to)
request_meeting_6_close_window.codeBlock = code


request_meeting_6_close_window_1 = Dialog("anyone", "{s2} says he will not see you. Begone now.", starting_state="request_meeting_6", ending_state="close_window")
def condition():
    s2 = str_store_troop_name(_lord_requested_to_talk_to)
request_meeting_6_close_window_1.conditionBlock = condition


castle_gate_open_close_window = Dialog("anyone", "My lord {s2} will be happy to see you {sir/madam}. Come on in. I am opening the gates for you.", starting_state="castle_gate_open", ending_state="close_window")
def condition():
    party_slot_001 = party_get_slot(_g_encountered_party,7)
    get_troop_attached_party(party_slot_001)
    if _g_encountered_party == reg0 and _g_encountered_party_relation >= 0:
        troop_get_player_relation(party_slot_001)
        var002 = reg0
        if var002 >= 5:
            s2 = str_store_troop_name(party_slot_001)
castle_gate_open_close_window.conditionBlock = condition
def code():
    _g_permitted_to_center = 1
castle_gate_open_close_window.codeBlock = code


castle_gate_open_close_window_1 = Dialog("anyone", "My lord {s2} is not in the castle now. But I think he would approve of you taking shelter here. Come on in. I am opening the gates for you.", starting_state="castle_gate_open", ending_state="close_window")
def condition():
    party_slot_001 = party_get_slot(_g_encountered_party,7)
    get_troop_attached_party(party_slot_001)
    if _g_encountered_party != reg0 and _g_encountered_party_relation >= 0:
        troop_get_player_relation(party_slot_001)
        var002 = reg0
        if var002 >= 5:
            s2 = str_store_troop_name(party_slot_001)
castle_gate_open_close_window_1.conditionBlock = condition
def code():
    _g_permitted_to_center = 1
castle_gate_open_close_window_1.codeBlock = code


castle_gate_open_close_window_2 = Dialog("anyone", "Come on in. I am opening the gates for you.", starting_state="castle_gate_open", ending_state="close_window")
def condition():
    party_slot_001 = party_get_slot(_g_encountered_party,7)
    troop_get_player_relation(party_slot_001)
    if var002 >= -2:
        var002 = reg0
castle_gate_open_close_window_2.conditionBlock = condition
def code():
    _g_permitted_to_center = 1
castle_gate_open_close_window_2.codeBlock = code


castle_gate_open_close_window_3 = Dialog("anyone", "Come on in. But make sure your men behave sensibly within the walls. My lord {s2} does not want trouble here.", starting_state="castle_gate_open", ending_state="close_window")
def condition():
    party_slot_001 = party_get_slot(_g_encountered_party,7)
    troop_get_player_relation(party_slot_001)
    var002 = reg0
    if var002 >= -19:
        s2 = str_store_troop_name(party_slot_001)
castle_gate_open_close_window_3.conditionBlock = condition
def code():
    _g_permitted_to_center = 1
castle_gate_open_close_window_3.codeBlock = code


castle_gate_open_close_window_4 = Dialog("anyone", "My lord {s2} does not want you here. Begone now.", starting_state="castle_gate_open", ending_state="close_window")
def condition():
    party_slot_001 = party_get_slot(_g_encountered_party,7)
    s2 = str_store_troop_name(party_slot_001)
castle_gate_open_close_window_4.conditionBlock = condition


start_close_window_25 = Dialog("anyone", "You have come just in time. Let us join our forces now and teach our enemy a lesson.", starting_state="start", ending_state="close_window")
def condition():
    if _talk_context == 5:
        pass
start_close_window_25.conditionBlock = condition


start_close_window_26 = Dialog("anyone", "You are making a big mistake by fighting against us.", starting_state="start", ending_state="close_window")
def condition():
    if _talk_context == 6:
        pass
start_close_window_26.conditionBlock = condition


start_ally_thanks_meet = Dialog("anyone", "I don't think we have met properly my friend. You just saved my life out there, and I still don't know your name...", starting_state="start", ending_state="ally_thanks_meet")
def condition():
    if _talk_context == 13 and troop_is_hero(_g_talk_troop) and _g_talk_troop_met == 0 and _g_talk_troop_relation >= 17:
        pass
start_ally_thanks_meet.conditionBlock = condition


start_ally_thanks_meet_1 = Dialog("anyone", "Your help was most welcome stranger. My name is {s1}. Can I learn yours?", starting_state="start", ending_state="ally_thanks_meet")
def condition():
    if _talk_context == 13 and troop_is_hero(_g_talk_troop) and _g_talk_troop_met == 0 and _g_talk_troop_relation >= 5:
        s1 = str_store_troop_name(_g_talk_troop)
start_ally_thanks_meet_1.conditionBlock = condition


start_ally_thanks_meet_2 = Dialog("anyone", "Thanks for your help, stranger. We haven't met properly yet, have we? What is your name?", starting_state="start", ending_state="ally_thanks_meet")
def condition():
    if _talk_context == 13 and troop_is_hero(_g_talk_troop) and _g_talk_troop_met == 0 and _g_talk_troop_relation >= 0:
        s1 = str_store_troop_name(_g_talk_troop)
start_ally_thanks_meet_2.conditionBlock = condition


ally_thanks_meet_ally_thanks_meet_2 = Dialog("anyone|plyr", "My name is {playername}.", starting_state="ally_thanks_meet", ending_state="ally_thanks_meet_2")


ally_thanks_meet_2_close_window = Dialog("anyone", "Well met indeed {playername}. My name is {s1} and I am forever in your debt. If there is ever anything I can help you with, just let me know...", starting_state="ally_thanks_meet_2", ending_state="close_window")
def condition():
    if _g_talk_troop_relation >= 15:
        s1 = str_store_troop_name(_g_talk_troop)
ally_thanks_meet_2_close_window.conditionBlock = condition


ally_thanks_meet_2_close_window_1 = Dialog("anyone", "Well met {playername}. I am in your debt for what you just did. I hope one day I will find a way to repay it.", starting_state="ally_thanks_meet_2", ending_state="close_window")
def condition():
    if _g_talk_troop_relation >= 5:
        pass
ally_thanks_meet_2_close_window_1.conditionBlock = condition


ally_thanks_meet_2_close_window_2 = Dialog("anyone", "Well met {playername}. I am {s1}. Thanks for your help and I hope we meet again.", starting_state="ally_thanks_meet_2", ending_state="close_window")


start_close_window_27 = Dialog("anyone", "Again you save our necks, {playername}! Truly, you are the best of friends. {s43}", starting_state="start", ending_state="close_window")
def condition():
    if _talk_context == 13 and troop_is_hero(_g_talk_troop) and _g_talk_troop_relation >= 30 and _g_relation_boost >= 10:
        pass
start_close_window_27.conditionBlock = condition
def code():
    lord_comment_to_s43(_g_talk_troop,gstr.battle_won_default)
    if True:
        troop_id_001 = party_stack_get_troop_id(p.encountered_party_backup,0)
        if is_between(troop_id_001,trp.npc1,trp.knight_1_1_wife):
            add_log_entry(17,trp.player,-1,troop_id_001,-1)
        #end
    #end
start_close_window_27.codeBlock = code


start_close_window_28 = Dialog("anyone", "You arrived just in the nick of time! {playername}. You have my deepest thanks! {s43}", starting_state="start", ending_state="close_window")
def condition():
    if _talk_context == 13 and troop_is_hero(_g_talk_troop) and _g_talk_troop_relation >= 20 and _g_relation_boost >= 5:
        pass
start_close_window_28.conditionBlock = condition
def code():
    lord_comment_to_s43(_g_talk_troop,gstr.battle_won_default)
    add_log_entry(17,trp.player,-1,_g_talk_troop,-1)
start_close_window_28.codeBlock = code


start_close_window_29 = Dialog("anyone", "You turned up just in time, {playername}. I will not forget your help. {s43}", starting_state="start", ending_state="close_window")
def condition():
    if _talk_context == 13 and troop_is_hero(_g_talk_troop) and _g_talk_troop_relation >= 0 and _g_relation_boost >= 3:
        pass
start_close_window_29.conditionBlock = condition
def code():
    lord_comment_to_s43(_g_talk_troop,gstr.battle_won_default)
    add_log_entry(17,trp.player,-1,_g_talk_troop,-1)
start_close_window_29.codeBlock = code


start_close_window_30 = Dialog("anyone", "Good to see you here, {playername}. {s43}", starting_state="start", ending_state="close_window")
def condition():
    if _talk_context == 13 and troop_is_hero(_g_talk_troop) and _g_talk_troop_relation >= -5:
        pass
start_close_window_30.conditionBlock = condition
def code():
    lord_comment_to_s43(_g_talk_troop,gstr.battle_won_default)
    troop_change_relation_with_troop(_g_talk_troop,trp.player,1)
start_close_window_30.codeBlock = code


start_close_window_31 = Dialog("anyone", "{s43}", starting_state="start", ending_state="close_window")
def condition():
    if _talk_context == 13 and troop_is_hero(_g_talk_troop) and _g_relation_boost >= 4:
        pass
start_close_window_31.conditionBlock = condition
def code():
    lord_comment_to_s43(_g_talk_troop,gstr.battle_won_grudging_default)
start_close_window_31.codeBlock = code


start_close_window_32 = Dialog("anyone", "{s43}", starting_state="start", ending_state="close_window")
def condition():
    if _talk_context == 13 and troop_is_hero(_g_talk_troop):
        pass
start_close_window_32.conditionBlock = condition
def code():
    lord_comment_to_s43(_g_talk_troop,gstr.battle_won_unfriendly_default)
start_close_window_32.codeBlock = code


start_close_window_33 = Dialog("anyone", "Thank you for your help {sir/madam}. You saved {reg1?our lives:my life} out there.", starting_state="start", ending_state="close_window")
def condition():
    if _talk_context == 13 and _g_relation_boost >= 10:
        reg1 = party_get_num_companions(_g_encountered_party)
        reg1 -= 1
start_close_window_33.conditionBlock = condition


start_close_window_34 = Dialog("anyone", "Thank you for your help {sir/madam}. Things didn't look very well for us but then you came up and everything changed.", starting_state="start", ending_state="close_window")
def condition():
    if _talk_context == 13 and _g_relation_boost >= 5:
        pass
start_close_window_34.conditionBlock = condition


start_close_window_35 = Dialog("anyone", "Thank you for your help, {sir/madam}. It was fortunate to have you nearby.", starting_state="start", ending_state="close_window")
def condition():
    if _talk_context == 13:
        pass
start_close_window_35.conditionBlock = condition


start_kidnapped_girl_liberated_battle = Dialog("anyone", "Oh {sir/madam}. Thank you so much for rescuing me. Will you take me to my family now?", starting_state="start", ending_state="kidnapped_girl_liberated_battle")
def condition():
    if _talk_context == 8:
        if talk_troop_001 == trp.kidnapped_girl:
            talk_troop_001 = store_conversation_troop()
start_kidnapped_girl_liberated_battle.conditionBlock = condition


start_freed_hero_answer = Dialog("anyone", "I am in your debt for freeing me friend.", starting_state="start", ending_state="freed_hero_answer")
def condition():
    if _talk_context == 8:
        pass
start_freed_hero_answer.conditionBlock = condition


freed_hero_answer_freed_hero_answer_1 = Dialog("anyone|plyr", "You're not going anywhere. You'll be my prisoner now!", starting_state="freed_hero_answer", ending_state="freed_hero_answer_1")
def code():
    talk_troop_001 = store_conversation_troop()
    party_add_prisoners(p.main_party,talk_troop_001,1)
freed_hero_answer_freed_hero_answer_1.codeBlock = code


freed_hero_answer_1_close_window = Dialog("anyone", "Alas. Will my luck never change?", starting_state="freed_hero_answer_1", ending_state="close_window")


freed_hero_answer_freed_hero_answer_2 = Dialog("anyone|plyr", "You're free to go, {s65}.", starting_state="freed_hero_answer", ending_state="freed_hero_answer_2")


freed_hero_answer_2_close_window = Dialog("anyone", "Thank you, good {sire/lady}. I never forget someone who's done me a good turn.", starting_state="freed_hero_answer_2", ending_state="close_window")


freed_hero_answer_freed_hero_answer_3 = Dialog("anyone|plyr", "Would you like to join me?", starting_state="freed_hero_answer", ending_state="freed_hero_answer_3")


freed_hero_answer_3_close_window = Dialog("anyone", "All right I will join you.", starting_state="freed_hero_answer_3", ending_state="close_window")
def condition():
    if random_x_001 == 0:
        random_x_001 = store_random_in_range(0,2)
freed_hero_answer_3_close_window.conditionBlock = condition
def code():
    talk_troop_001 = store_conversation_troop()
    party_add_members(p.main_party,talk_troop_001,1)
freed_hero_answer_3_close_window.codeBlock = code


freed_hero_answer_3_close_window_1 = Dialog("anyone", "No, I want to go on my own.", starting_state="freed_hero_answer_3", ending_state="close_window")


start_defeat_hero_answer = Dialog("anyone", "You'll not live long to enjoy your victory. My kinsmen will soon wipe out the stain of this defeat.", starting_state="start", ending_state="defeat_hero_answer")
def condition():
    if _talk_context == 9:
        pass
start_defeat_hero_answer.conditionBlock = condition


defeat_hero_answer_defeat_hero_answer_1 = Dialog("anyone|plyr", "You are my prisoner now.", starting_state="defeat_hero_answer", ending_state="defeat_hero_answer_1")
def code():
    party_add_prisoners(p.main_party,_g_talk_troop,1)
    troop_set_slot(_g_talk_troop,8,p.main_party)
    event_hero_taken_prisoner_by_player(_g_talk_troop)
defeat_hero_answer_defeat_hero_answer_1.codeBlock = code


defeat_hero_answer_1_close_window = Dialog("anyone", "Damn you. You will regret this.", starting_state="defeat_hero_answer_1", ending_state="close_window")


defeat_hero_answer_defeat_hero_answer_2 = Dialog("anyone|plyr", "You're free to go this time, but don't cross my path again.", starting_state="defeat_hero_answer", ending_state="defeat_hero_answer_2")


defeat_hero_answer_2_close_window = Dialog("anyone", "We will meet again.", starting_state="defeat_hero_answer_2", ending_state="close_window")


combined_political_quests_political_quest_suggested = Dialog("anyone", "{s9}", starting_state="combined_political_quests", ending_state="political_quest_suggested")
def condition():
    if _political_quest_found == qst.resolve_dispute:
        pass
combined_political_quests_political_quest_suggested.conditionBlock = condition
def code():
    quest_set_slot(qst.resolve_dispute,2,_political_quest_target_troop)
    quest_set_slot(qst.resolve_dispute,4,_political_quest_object_troop)
    quest_slot_001 = quest_get_slot(qst.resolve_dispute,2)
    quest_slot_002 = quest_get_slot(qst.resolve_dispute,4)
    s4 = str_store_troop_name(quest_slot_001)
    s5 = str_store_troop_name(quest_slot_002)
    faction_slot_003 = faction_get_slot(_players_kingdom,11)
    s7 = str_store_troop_name(faction_slot_003)
    if _players_kingdom == fac.player_supporters_faction and faction_slot_eq(fac.player_supporters_faction,11,trp.player):
        s9 = str_store_string(gstr.you_may_be_aware_my_lord_of_the_quarrel_between_s4_and_s5_which_is_damaging_the_unity_of_this_realm_and_sapping_your_authority_if_you_could_persuade_the_lords_to_reconcile_it_would_boost_your_own_standing_however_in_taking_this_on_you_run_the_risk_of_one_the_lords_deciding_that_you_have_taken_the_rivals_side)
    else:
        s9 = str_store_string(gstr.you_may_be_aware_my_lord_of_the_quarrel_between_s4_and_s5_which_is_damaging_the_unity_of_this_realm_and_sapping_your_authority_if_you_could_persuade_the_lords_to_reconcile_i_imagine_that_s7_would_be_most_pleased_however_in_taking_this_on_you_run_the_risk_of_one_the_lords_deciding_that_you_have_taken_the_rivals_side)
    #end
combined_political_quests_political_quest_suggested.codeBlock = code


political_quest_follow_on_close_window = Dialog("anyone", "I think that is a wise move. Good luck to you.", starting_state="political_quest_follow_on", ending_state="close_window")
def condition():
    if _political_quest_found == qst.resolve_dispute:
        pass
political_quest_follow_on_close_window.conditionBlock = condition
def code():
    _g_leave_encounter = 1
    setup_quest_text(qst.resolve_dispute)
    quest_slot_001 = quest_get_slot(qst.resolve_dispute,2)
    s11 = str_store_troop_name_link(quest_slot_001)
    quest_slot_002 = quest_get_slot(qst.resolve_dispute,4)
    s12 = str_store_troop_name_link(quest_slot_002)
    s2 = str_store_string(gstr.resolve_the_dispute_between_s11_and_s12)
    start_quest(qst.resolve_dispute,-1)
    quest_set_slot(qst.resolve_dispute,23,30)
    quest_set_slot(qst.resolve_dispute,6,_g_talk_troop)
    quest_set_slot(qst.resolve_dispute,16,0)
    quest_set_slot(qst.resolve_dispute,17,0)
    quest_slot_001 = quest_get_slot(qst.resolve_dispute,2)
    s11 = str_store_troop_name(quest_slot_001)
    quest_slot_002 = quest_get_slot(qst.resolve_dispute,4)
    s12 = str_store_troop_name(quest_slot_002)
political_quest_follow_on_close_window.codeBlock = code


combined_political_quests_political_quest_suggested_1 = Dialog("anyone", "Your relations with {s4} are not all that they could be. As {reg4?she:he} is my {s11}, I can mediate to attempt to mend your quarrel. Perhaps the best way for me to do this would be to send {reg4?her:him} a gift -- a fur-trimmed velvet robe, perhaps. If you can provide me with a bolt of velvet and a length of furs, I can have one made and sent to {reg4?her:him.}", starting_state="combined_political_quests", ending_state="political_quest_suggested")
def condition():
    if _political_quest_found == qst.offer_gift:
        quest_set_slot(qst.offer_gift,2,_political_quest_target_troop)
        quest_set_slot(qst.offer_gift,6,_g_talk_troop)
        quest_slot_001 = quest_get_slot(qst.offer_gift,2)
        s4 = str_store_troop_name(quest_slot_001)
        reg4 = troop_get_type(quest_slot_001)
        troop_get_family_relation_to_troop(quest_slot_001,_g_talk_troop)
combined_political_quests_political_quest_suggested_1.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(qst.offer_gift,2)
    reg4 = troop_get_type(quest_slot_001)
combined_political_quests_political_quest_suggested_1.codeBlock = code


political_quest_follow_on_close_window_1 = Dialog("anyone", "Splendid. I shall await the materials.", starting_state="political_quest_follow_on", ending_state="close_window")
def condition():
    if _political_quest_found == qst.offer_gift:
        pass
political_quest_follow_on_close_window_1.conditionBlock = condition
def code():
    _g_leave_encounter = 1
    setup_quest_text(qst.offer_gift)
    quest_slot_001 = quest_get_slot(qst.offer_gift,2)
    s14 = str_store_troop_name(quest_slot_001)
    s12 = str_store_troop_name(_g_talk_troop)
    reg4 = troop_get_type(_g_talk_troop)
    s2 = str_store_string(gstr.you_intend_to_bring_gift_for_s14)
    start_quest(qst.offer_gift,_g_talk_troop)
    quest_set_slot(qst.offer_gift,23,30)
political_quest_follow_on_close_window_1.codeBlock = code


combined_political_quests_political_quest_suggested_2 = Dialog("anyone", "As you may realize, {s4} has many enemies among the lords of the {s5}. In particular, they feel that {reg4?she:he} is {s7}, and worry that {reg4?she:he} will {s8}. Were you to denounce {s4} to {reg4?her:his} face, you may reap much popularity -- although, of course, you would make an enemy of {reg4?her:him}, and risk being challenged to a duel.", starting_state="combined_political_quests", ending_state="political_quest_suggested")
def condition():
    if _political_quest_found == qst.denounce_lord and _g_talk_troop == _g_player_minister or troop_slot_eq(trp.player,30,_g_talk_troop):
        s4 = str_store_troop_name(_political_quest_target_troop)
        reg4 = troop_get_type(_political_quest_target_troop)
        s5 = str_store_faction_name(_players_kingdom)
        troop_slot_001 = troop_get_slot(_political_quest_target_troop,52)
        troop_slot_001 += gstr.lord_derogatory_default
        s7 = str_store_string(troop_slot_001)
        troop_slot_001 = troop_get_slot(_political_quest_target_troop,52)
        troop_slot_001 += gstr.lord_derogatory_result
        s8 = str_store_string(troop_slot_001)
combined_political_quests_political_quest_suggested_2.conditionBlock = condition


combined_political_quests_political_quest_suggested_3 = Dialog("anyone", "As you may realize, many of us in the peerage of the {s5} consider {s4} to be {s7}, and a liability to our cause. We worry that {reg4?she:he} will {s8}. People know my views on {s4} already, but if you were to denounce {reg4?her:him} to {reg4?her:his} face, you would further erode his standing -- and discourage our liege from entrusting {reg4?her:him} with any more power or responsibility. Of course, you would make an enemy of {reg4?her:him}, and risk being challenged to a duel.{s9}", starting_state="combined_political_quests", ending_state="political_quest_suggested")
def condition():
    if _political_quest_found == qst.denounce_lord:
        reg4 = troop_get_type(_political_quest_target_troop)
        str_clear(9)
        troop_get_relation_with_troop(trp.player,_g_talk_troop)
        var001 = reg0
        s4 = str_store_troop_name(_political_quest_target_troop)
        if var001 >= 2 and not troop_slot_eq(_g_talk_troop,52,5) and not troop_slot_eq(_g_talk_troop,52,2):
            s9 = str_store_string(gstr.i_realize_that_you_are_on_good_terms_with_s4_but_we_ask_you_to_do_this_for_the_good_of_the_realm)
        elif var001 >= 2:
            s9 = str_store_string(gstr.i_realize_that_you_are_on_good_terms_with_s4_but_the_blow_will_hurt_him_more)
        #end
    #end
    s5 = str_store_faction_name(_players_kingdom)
    s4 = str_store_troop_name(_political_quest_target_troop)
    troop_slot_002 = troop_get_slot(_political_quest_target_troop,52)
    troop_slot_002 += gstr.lord_derogatory_default
    s7 = str_store_string(troop_slot_002)
    troop_slot_002 = troop_get_slot(_political_quest_target_troop,52)
    troop_slot_002 += gstr.lord_derogatory_result
    s8 = str_store_string(troop_slot_002)
combined_political_quests_political_quest_suggested_3.conditionBlock = condition


political_quest_follow_on_close_window_2 = Dialog("anyone", "We appreciate what you are doing. I find such intrigues distasteful, but it is all for the good of the {s5}.", starting_state="political_quest_follow_on", ending_state="close_window")
def condition():
    if _political_quest_found == qst.denounce_lord and _g_talk_troop == _g_player_minister or troop_slot_eq(trp.player,30,_g_talk_troop):
        pass
political_quest_follow_on_close_window_2.conditionBlock = condition
def code():
    quest_set_slot(qst.denounce_lord,2,_political_quest_target_troop)
    quest_slot_001 = quest_get_slot(qst.denounce_lord,2)
    s14 = str_store_troop_name_link(quest_slot_001)
    s12 = str_store_troop_name_link(_g_talk_troop)
    s2 = str_store_string(gstr.you_intend_to_denounce_s14_to_his_face_on_behalf_of_s14)
    setup_quest_text(qst.denounce_lord)
    start_quest(_political_quest_found,_g_talk_troop)
    quest_set_slot(qst.denounce_lord,23,60)
    s5 = str_store_faction_name(_players_kingdom)
    _g_leave_encounter = 1
political_quest_follow_on_close_window_2.codeBlock = code


political_quest_follow_on_close_window_3 = Dialog("anyone", "Very well. It is always risky to involve yourself in intrigues of this sort, but in this case, I think you will benefit.", starting_state="political_quest_follow_on", ending_state="close_window")
def condition():
    if _political_quest_found == qst.denounce_lord:
        pass
political_quest_follow_on_close_window_3.conditionBlock = condition
def code():
    quest_set_slot(qst.denounce_lord,2,_political_quest_target_troop)
    quest_slot_001 = quest_get_slot(qst.denounce_lord,2)
    s14 = str_store_troop_name_link(quest_slot_001)
    s12 = str_store_troop_name_link(_g_talk_troop)
    s2 = str_store_string(gstr.you_intend_to_denounce_s14_to_his_face_on_behalf_of_s14)
    setup_quest_text(qst.denounce_lord)
    start_quest(_political_quest_found,_g_talk_troop)
    _g_leave_encounter = 1
political_quest_follow_on_close_window_3.codeBlock = code


combined_political_quests_political_quest_suggested_4 = Dialog("anyone", "You and I have a common interest in seeking to curtail the rise of {s4}. I feel that {reg4?she:he} is {s7}, and worry that {reg4?she:he} will {s8}. Were you to tell our liege {s9} your opinion of {s4}, it might discourage {s9} from granting {s4} any further powers or responsibilities, at least for a while, and I would be much obliged to you.", starting_state="combined_political_quests", ending_state="political_quest_suggested")
def condition():
    if _political_quest_found == qst.intrigue_against_lord:
        s4 = str_store_troop_name(_political_quest_target_troop)
        reg4 = troop_get_type(_political_quest_target_troop)
        s5 = str_store_faction_name(_players_kingdom)
        troop_slot_001 = troop_get_slot(_political_quest_target_troop,52)
        troop_slot_001 += gstr.lord_derogatory_default
        s7 = str_store_string(troop_slot_001)
        troop_slot_002 = troop_get_slot(_political_quest_target_troop,52)
        troop_slot_002 += gstr.lord_derogatory_result
        s8 = str_store_string(troop_slot_002)
        faction_slot_003 = faction_get_slot(_players_kingdom,11)
        s9 = str_store_troop_name(faction_slot_003)
combined_political_quests_political_quest_suggested_4.conditionBlock = condition


political_quest_follow_on_close_window_4 = Dialog("anyone", "We appreciate what you are doing. I find such intrigues distasteful, but it is all for the good of the {s5}.", starting_state="political_quest_follow_on", ending_state="close_window")
def condition():
    if _political_quest_found == qst.intrigue_against_lord:
        s5 = str_store_faction_name(_players_kingdom)
political_quest_follow_on_close_window_4.conditionBlock = condition
def code():
    quest_set_slot(qst.intrigue_against_lord,2,_political_quest_target_troop)
    quest_slot_001 = quest_get_slot(qst.intrigue_against_lord,2)
    troop_faction_002 = store_faction_of_troop(quest_slot_001)
    faction_slot_003 = faction_get_slot(troop_faction_002,11)
    s14 = str_store_troop_name_link(quest_slot_001)
    s13 = str_store_troop_name_link(faction_slot_003)
    s12 = str_store_troop_name_link(_g_talk_troop)
    s2 = str_store_string(gstr.you_intend_to_denounce_s14_to_s13_on_behalf_of_s12)
    setup_quest_text(qst.intrigue_against_lord)
    start_quest(_political_quest_found,_g_talk_troop)
    quest_set_slot(qst.intrigue_against_lord,23,60)
    _g_leave_encounter = 1
political_quest_follow_on_close_window_4.codeBlock = code


combined_political_quests_political_quest_suggested_5 = Dialog("anyone", "I cannot think of anything right now, but we will have some items of mutual interest in the future.", starting_state="combined_political_quests", ending_state="political_quest_suggested")


political_quest_suggested_political_quest_follow_on = Dialog("anyone|plyr", "I like that idea.", starting_state="political_quest_suggested", ending_state="political_quest_follow_on")
def condition():
    if _political_quest_found > 0:
        pass
political_quest_suggested_political_quest_follow_on.conditionBlock = condition


political_quest_suggested_combined_political_quests = Dialog("anyone|plyr", "Hmm.. Maybe you can think of something else?", starting_state="political_quest_suggested", ending_state="combined_political_quests")
def condition():
    if _political_quest_found > 0:
        pass
political_quest_suggested_combined_political_quests.conditionBlock = condition
def code():
    quest_set_slot(_political_quest_found,25,3)
    get_political_quest(_g_talk_troop)
    _political_quest_found = reg0
    _political_quest_target_troop = reg1
    _political_quest_object_troop = reg2
political_quest_suggested_combined_political_quests.codeBlock = code


political_quest_suggested_political_quests_end = Dialog("anyone|plyr", "Let us discuss another topic", starting_state="political_quest_suggested", ending_state="political_quests_end")


political_quests_end_lord_pretalk = Dialog("anyone", "Very well.", starting_state="political_quests_end", ending_state="lord_pretalk")
def condition():
    if troop_slot_eq(_g_talk_troop,2,2):
        pass
political_quests_end_lord_pretalk.conditionBlock = condition


political_quests_end_spouse_pretalk = Dialog("anyone", "Very well.", starting_state="political_quests_end", ending_state="spouse_pretalk")
def condition():
    if troop_slot_eq(trp.player,30,_g_talk_troop):
        pass
political_quests_end_spouse_pretalk.conditionBlock = condition


political_quests_end_minister_pretalk = Dialog("anyone", "Very well.", starting_state="political_quests_end", ending_state="minister_pretalk")
def condition():
    if _g_talk_troop == _g_player_minister:
        pass
political_quests_end_minister_pretalk.conditionBlock = condition


political_quests_end_close_window = Dialog("anyone", "Very well.", starting_state="political_quests_end", ending_state="close_window")
def code():
    _g_leave_encounter = 1
political_quests_end_close_window.codeBlock = code


start_local_merchant_mercy = Dialog("trp_local_merchant", "Mercy! Please don't kill me!", starting_state="start", ending_state="local_merchant_mercy")


local_merchant_mercy_local_merchant_mercy_no = Dialog("anyone|plyr", "I have nothing against you man. But {s2} wants you dead. Sorry.", starting_state="local_merchant_mercy", ending_state="local_merchant_mercy_no")
def condition():
    quest_slot_001 = quest_get_slot(qst.kill_local_merchant,6)
    s2 = str_store_troop_name(quest_slot_001)
local_merchant_mercy_local_merchant_mercy_no.conditionBlock = condition


local_merchant_mercy_no_close_window = Dialog("anyone", "Damn you! May you burn in Hell!", starting_state="local_merchant_mercy_no", ending_state="close_window")


local_merchant_mercy_local_merchant_mercy_yes = Dialog("anyone|plyr", "I'll let you live, if you promise me...", starting_state="local_merchant_mercy", ending_state="local_merchant_mercy_yes")


local_merchant_mercy_yes_local_merchant_mercy_yes_2 = Dialog("anyone", "Of course, I promise, I'll do anything. Just spare my life... ", starting_state="local_merchant_mercy_yes", ending_state="local_merchant_mercy_yes_2")


local_merchant_mercy_yes_2_local_merchant_mercy_yes_3 = Dialog("anyone|plyr", "You are going to forget about {s2}'s debt to you. And you will sign a paper stating that he owes you nothing.", starting_state="local_merchant_mercy_yes_2", ending_state="local_merchant_mercy_yes_3")


local_merchant_mercy_yes_3_local_merchant_mercy_yes_4 = Dialog("anyone", "Yes, of course. I'll do as you say.", starting_state="local_merchant_mercy_yes_3", ending_state="local_merchant_mercy_yes_4")


local_merchant_mercy_yes_4_local_merchant_mercy_yes_5 = Dialog("anyone|plyr", "And if my lord hears so much of a hint of a complaint about this issue, then I'll come back for you, and it won't matter how much you scream for mercy then. Do you understand me?", starting_state="local_merchant_mercy_yes_4", ending_state="local_merchant_mercy_yes_5")


local_merchant_mercy_yes_5_local_merchant_mercy_yes_6 = Dialog("anyone", "Yes {sir/madam}. Don't worry. I won't make any complaint.", starting_state="local_merchant_mercy_yes_5", ending_state="local_merchant_mercy_yes_6")


local_merchant_mercy_yes_6_close_window = Dialog("anyone|plyr", "Good. Go now, before I change my mind.", starting_state="local_merchant_mercy_yes_6", ending_state="close_window")
def code():
    quest_set_slot(qst.kill_local_merchant,11,2)
    succeed_quest(qst.kill_local_merchant)
    finish_mission()
local_merchant_mercy_yes_6_close_window.codeBlock = code


start_fugitive_1 = Dialog("trp_fugitive", "What do you want?", starting_state="start", ending_state="fugitive_1")


fugitive_1_fugitive_2 = Dialog("plyr|trp_fugitive", "I am looking for a murderer by the name of {s4}. You fit his description.", starting_state="fugitive_1", ending_state="fugitive_2")
def condition():
    quest_slot_001 = quest_get_slot(qst.hunt_down_fugitive,13)
    get_name_from_dna_to_s50(quest_slot_001)
    s4 = str_store_string(50)
fugitive_1_fugitive_2.conditionBlock = condition


fugitive_1_close_window = Dialog("plyr|trp_fugitive", "Nothing. Sorry to trouble you.", starting_state="fugitive_1", ending_state="close_window")


fugitive_2_fugitive_3 = Dialog("trp_fugitive", "I don't understand, {sir/madam}. I never killed anyone. I think you've got the wrong man.", starting_state="fugitive_2", ending_state="fugitive_3")


fugitive_3_fugitive_4 = Dialog("plyr|trp_fugitive", "Then drop your sword. If you are innocent, you have nothing to fear. We'll go now and talk to your neighbours, and if they verify your story, I'll go on my way.", starting_state="fugitive_3", ending_state="fugitive_4")


fugitive_4_fugitive_5 = Dialog("anyone", "I'm not going anywhere, friend. You're going to have to fight for your silver, today.", starting_state="fugitive_4", ending_state="fugitive_5")


fugitive_5_fugitive_fight_start = Dialog("plyr|trp_fugitive", "No problem. I really just need your head, anyway.", starting_state="fugitive_5", ending_state="fugitive_fight_start")


fugitive_5_fugitive_fight_start_1 = Dialog("plyr|trp_fugitive", "I come not for money, but to execute the law!", starting_state="fugitive_5", ending_state="fugitive_fight_start")


fugitive_5_fugitive_fight_start_2 = Dialog("plyr|trp_fugitive", "Alas, that you cannot be made to see reason.", starting_state="fugitive_5", ending_state="fugitive_fight_start")


fugitive_fight_start_close_window = Dialog("anyone", "Die, dog!", starting_state="fugitive_fight_start", ending_state="close_window")
def code():
    set_party_battle_mode()
    quest_set_slot(qst.hunt_down_fugitive,11,1)
    activate_tavern_attackers()
fugitive_fight_start_close_window.codeBlock = code


member_chat_sacrificed_messenger_1 = Dialog("anyone", "Yes {sir/madam}?", starting_state="member_chat", ending_state="sacrificed_messenger_1")
def condition():
    if check_quest_active(qst.incriminate_loyal_commander) and quest_slot_eq(qst.incriminate_loyal_commander,11,0):
        _g_talk_troop = store_conversation_troop()
        if _g_talk_troop == _incriminate_quest_sacrificed_troop:
            quest_slot_001 = quest_get_slot(qst.incriminate_loyal_commander,1)
            if distance_parties_002 < 10:
                distance_parties_002 = store_distance_to_party_from_party(p.main_party,quest_slot_001)
member_chat_sacrificed_messenger_1.conditionBlock = condition


sacrificed_messenger_1_sacrificed_messenger_2 = Dialog("anyone|plyr", "Take this letter to {s1} and give it to {s2}.", starting_state="sacrificed_messenger_1", ending_state="sacrificed_messenger_2")
def condition():
    quest_slot_001 = quest_get_slot(qst.incriminate_loyal_commander,1)
    s1 = str_store_party_name(quest_slot_001)
    quest_slot_002 = quest_get_slot(qst.incriminate_loyal_commander,4)
    s2 = str_store_troop_name(quest_slot_002)
sacrificed_messenger_1_sacrificed_messenger_2.conditionBlock = condition


sacrificed_messenger_1_close_window = Dialog("anyone|plyr", "Nothing. Nothing at all.", starting_state="sacrificed_messenger_1", ending_state="close_window")


sacrificed_messenger_2_sacrificed_messenger_3 = Dialog("anyone", "Yes {sir/madam}. You can trust me. I will not fail you.", starting_state="sacrificed_messenger_2", ending_state="sacrificed_messenger_3")


sacrificed_messenger_3_close_window = Dialog("anyone|plyr", "Good. I will not forget your service. You will be rewarded when you return.", starting_state="sacrificed_messenger_3", ending_state="close_window")
def code():
    party_remove_members(p.main_party,_g_talk_troop,1)
    set_spawn_radius(0)
    spawn_around_party(p.main_party,pt.sacrificed_messenger)
    party_id_001 = reg0
    party_add_members(party_id_001,_g_talk_troop,1)
    party_set_ai_behavior(party_id_001,1)
    quest_slot_002 = quest_get_slot(qst.incriminate_loyal_commander,1)
    party_set_ai_object(party_id_001,quest_slot_002)
    party_set_flags(party_id_001,65536,0)
    quest_set_slot(qst.incriminate_loyal_commander,11,2)
    quest_set_slot(qst.incriminate_loyal_commander,8,party_id_001)
sacrificed_messenger_3_close_window.codeBlock = code


sacrificed_messenger_3_sacrificed_messenger_cancel = Dialog("anyone|plyr", "Arggh! I can't do this. I can't send you to your own death!", starting_state="sacrificed_messenger_3", ending_state="sacrificed_messenger_cancel")


sacrificed_messenger_cancel_sacrificed_messenger_cancel_2 = Dialog("anyone", "What do you mean {sir/madam}", starting_state="sacrificed_messenger_cancel", ending_state="sacrificed_messenger_cancel_2")


sacrificed_messenger_cancel_2_sacrificed_messenger_cancel_3 = Dialog("anyone|plyr", "There's a trap set up for you in the town. {s3} ordered me to sacrifice one of my chosen warriors to fool the enemy, but he will just need to find another way.", starting_state="sacrificed_messenger_cancel_2", ending_state="sacrificed_messenger_cancel_3")
def condition():
    quest_slot_001 = quest_get_slot(qst.incriminate_loyal_commander,6)
    s3 = str_store_troop_name(quest_slot_001)
sacrificed_messenger_cancel_2_sacrificed_messenger_cancel_3.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(qst.incriminate_loyal_commander,6)
    quest_set_slot(qst.incriminate_loyal_commander,11,1)
    change_player_relation_with_troop(quest_slot_001,-5)
    change_player_honor(3)
    fail_quest(qst.incriminate_loyal_commander)
sacrificed_messenger_cancel_2_sacrificed_messenger_cancel_3.codeBlock = code


sacrificed_messenger_cancel_3_close_window = Dialog("anyone", "Thank you, {sir/madam}. I will follow you to the gates of hell. But this would not be a good death.", starting_state="sacrificed_messenger_cancel_3", ending_state="close_window")


start_close_window_36 = Dialog("party_tpl|pt_sacrificed_messenger", "Don't worry, {sir/madam}, I'm on my way.", starting_state="start", ending_state="close_window")
def code():
    _g_leave_encounter = 1
start_close_window_36.codeBlock = code


start_follow_spy_talk = Dialog("party_tpl|pt_spy", "Good day {sir/madam}. Such fine weather don't you think? If you'll excuse me now I must go on my way.", starting_state="start", ending_state="follow_spy_talk")


follow_spy_talk_follow_spy_talk_2 = Dialog("anyone|plyr", "In the name of {s1}, you are under arrest!", starting_state="follow_spy_talk", ending_state="follow_spy_talk_2")
def condition():
    quest_slot_001 = quest_get_slot(qst.follow_spy,6)
    s1 = str_store_troop_name(quest_slot_001)
follow_spy_talk_follow_spy_talk_2.conditionBlock = condition


follow_spy_talk_2_close_window = Dialog("anyone", "You won't get me alive!", starting_state="follow_spy_talk_2", ending_state="close_window")


follow_spy_talk_close_window = Dialog("anyone|plyr", "Never mind me. I was just passing by.", starting_state="follow_spy_talk", ending_state="close_window")
def code():
    _g_leave_encounter = 1
follow_spy_talk_close_window.codeBlock = code


start_spy_partners_talk = Dialog("party_tpl|pt_spy_partners", "Greetings.", starting_state="start", ending_state="spy_partners_talk")


spy_partners_talk_spy_partners_talk_2 = Dialog("anyone|plyr", "In the name of {s1} You are under arrest!", starting_state="spy_partners_talk", ending_state="spy_partners_talk_2")
def condition():
    quest_slot_001 = quest_get_slot(qst.follow_spy,6)
    s1 = str_store_troop_name(quest_slot_001)
spy_partners_talk_spy_partners_talk_2.conditionBlock = condition


spy_partners_talk_2_close_window = Dialog("anyone", "You will have to fight us first!", starting_state="spy_partners_talk_2", ending_state="close_window")


spy_partners_talk_close_window = Dialog("anyone|plyr", "Never mind me. I was just passing by.", starting_state="spy_partners_talk", ending_state="close_window")
def code():
    _g_leave_encounter = 1
spy_partners_talk_close_window.codeBlock = code


start_runaway_serf_intro_1 = Dialog("party_tpl|pt_runaway_serfs", "Good day {sir/madam}.", starting_state="start", ending_state="runaway_serf_intro_1")
def condition():
    if party_slot_eq(_g_encountered_party,10,0):
        pass
start_runaway_serf_intro_1.conditionBlock = condition
def code():
    party_set_slot(_g_encountered_party,10,1)
start_runaway_serf_intro_1.codeBlock = code


runaway_serf_intro_1_runaway_serf_intro_2 = Dialog("anyone|plyr", "I have been sent by your {s4} whom you are running from. He will not punish you if you return now.", starting_state="runaway_serf_intro_1", ending_state="runaway_serf_intro_2")
def condition():
    quest_slot_001 = quest_get_slot(qst.bring_back_runaway_serfs,6)
    s4 = str_store_troop_name(quest_slot_001)
runaway_serf_intro_1_runaway_serf_intro_2.conditionBlock = condition


runaway_serf_intro_2_runaway_serf_intro_3 = Dialog("anyone", "My good {sir/madam}. Our lives at our village {s1} was unbearable. We worked all day long and still went to bed hungry. We are going to {s6} to start a new life, where we will be treated like humans.", starting_state="runaway_serf_intro_2", ending_state="runaway_serf_intro_3")
def condition():
    quest_slot_001 = quest_get_slot(qst.bring_back_runaway_serfs,1)
    s6 = str_store_party_name(quest_slot_001)
    quest_slot_002 = quest_get_slot(qst.bring_back_runaway_serfs,7)
    s1 = str_store_party_name(quest_slot_002)
runaway_serf_intro_2_runaway_serf_intro_3.conditionBlock = condition


runaway_serf_intro_3_runaway_serf_go_back = Dialog("anyone|plyr", "You have gone against our laws by running from your bondage. You will go back to {s1} now!", starting_state="runaway_serf_intro_3", ending_state="runaway_serf_go_back")
def condition():
    quest_slot_001 = quest_get_slot(qst.bring_back_runaway_serfs,7)
    s1 = str_store_party_name(quest_slot_001)
runaway_serf_intro_3_runaway_serf_go_back.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(qst.bring_back_runaway_serfs,7)
    change_player_relation_with_center(quest_slot_001,-1)
runaway_serf_intro_3_runaway_serf_go_back.codeBlock = code


runaway_serf_intro_3_runaway_serf_let_go = Dialog("anyone|plyr", "Well, maybe you are right. All right then. If anyone asks, I haven't seen you.", starting_state="runaway_serf_intro_3", ending_state="runaway_serf_let_go")
def code():
    quest_slot_001 = quest_get_slot(qst.bring_back_runaway_serfs,7)
    change_player_relation_with_center(quest_slot_001,1)
runaway_serf_intro_3_runaway_serf_let_go.codeBlock = code


runaway_serf_go_back_close_window = Dialog("party_tpl|pt_runaway_serfs", "All right {sir/madam}. As you wish. We'll head back to {s5} now.", starting_state="runaway_serf_go_back", ending_state="close_window")
def condition():
    quest_slot_001 = quest_get_slot(qst.bring_back_runaway_serfs,7)
    s5 = str_store_party_name(quest_slot_001)
runaway_serf_go_back_close_window.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(qst.bring_back_runaway_serfs,7)
    party_set_ai_object(_g_encountered_party,quest_slot_001)
    _g_leave_encounter = 1
runaway_serf_go_back_close_window.codeBlock = code


runaway_serf_let_go_close_window = Dialog("anyone", "God bless you, {sir/madam}. We will not forget your help.", starting_state="runaway_serf_let_go", ending_state="close_window")
def code():
    party_set_slot(_g_encountered_party,11,1)
    _g_leave_encounter = 1
runaway_serf_let_go_close_window.codeBlock = code


start_runaway_serf_reconsider = Dialog("party_tpl|pt_runaway_serfs", "Good day {sir/madam}. Don't worry. If anyone asks, we haven't seen you.", starting_state="start", ending_state="runaway_serf_reconsider")
def condition():
    if party_slot_eq(_g_encountered_party,11,1):
        pass
start_runaway_serf_reconsider.conditionBlock = condition


runaway_serf_reconsider_runaway_serf_go_back = Dialog("anyone|plyr", "I have changed my mind. You must back to your village!", starting_state="runaway_serf_reconsider", ending_state="runaway_serf_go_back")
def code():
    party_set_slot(_g_encountered_party,11,0)
    quest_slot_001 = quest_get_slot(qst.bring_back_runaway_serfs,7)
    change_player_relation_with_center(quest_slot_001,-2)
runaway_serf_reconsider_runaway_serf_go_back.codeBlock = code


runaway_serf_reconsider_runaway_serf_let_go = Dialog("anyone|plyr", "Good. Go quickly now before I change my mind.", starting_state="runaway_serf_reconsider", ending_state="runaway_serf_let_go")


start_runaway_serf_talk_caught = Dialog("party_tpl|pt_runaway_serfs", "Good day {sir/madam}. We were heading back to {s5}, but I am afraid we lost our way.", starting_state="start", ending_state="runaway_serf_talk_caught")
def condition():
    if party_slot_eq(_g_encountered_party,11,0):
        party_ai_object_001 = get_party_ai_object()
        if quest_slot_002 != party_ai_object_001:
            quest_slot_002 = quest_get_slot(qst.bring_back_runaway_serfs,7)
start_runaway_serf_talk_caught.conditionBlock = condition


runaway_serf_talk_caught_runaway_serf_go_back = Dialog("anyone|plyr", "Do not test my patience. You are going back now!", starting_state="runaway_serf_talk_caught", ending_state="runaway_serf_go_back")


runaway_serf_talk_caught_runaway_serf_let_go = Dialog("anyone|plyr", "Well, if you are that eager to go, then go.", starting_state="runaway_serf_talk_caught", ending_state="runaway_serf_let_go")
def code():
    quest_slot_001 = quest_get_slot(qst.bring_back_runaway_serfs,7)
    change_player_relation_with_center(quest_slot_001,1)
runaway_serf_talk_caught_runaway_serf_let_go.codeBlock = code


start_runaway_serf_talk_again_return = Dialog("party_tpl|pt_runaway_serfs", "We are on our way back to {s5} {sir/madam}.", starting_state="start", ending_state="runaway_serf_talk_again_return")
def condition():
    quest_slot_001 = quest_get_slot(qst.bring_back_runaway_serfs,7)
    s5 = str_store_party_name(quest_slot_001)
start_runaway_serf_talk_again_return.conditionBlock = condition


runaway_serf_talk_again_return_runaway_serf_talk_again_return_2 = Dialog("anyone|plyr", "Make haste now. The sooner you return the better.", starting_state="runaway_serf_talk_again_return", ending_state="runaway_serf_talk_again_return_2")


runaway_serf_talk_again_return_runaway_serf_talk_again_return_2_1 = Dialog("anyone|plyr", "Good. Keep going.", starting_state="runaway_serf_talk_again_return", ending_state="runaway_serf_talk_again_return_2")


runaway_serf_talk_again_return_2_close_window = Dialog("anyone|plyr", "Yes {sir/madam}. As you wish.", starting_state="runaway_serf_talk_again_return_2", ending_state="close_window")
def code():
    _g_leave_encounter = 1
runaway_serf_talk_again_return_2_close_window.codeBlock = code


start_troublesome_bandits_intro_1 = Dialog("anyone", "This must be your unlucky day, mate. We're just about the worst people you could run into, in these parts.", starting_state="start", ending_state="troublesome_bandits_intro_1")
def condition():
    if check_quest_active(qst.track_down_bandits) and quest_slot_eq(qst.track_down_bandits,8,_g_encountered_party) and not is_between(_g_encountered_party_faction,fac.player_supporters_faction,fac.kingdoms_end):
        pass
start_troublesome_bandits_intro_1.conditionBlock = condition


troublesome_bandits_intro_1_troublesome_bandits_intro_2 = Dialog("anyone|plyr", "Heh. For me, you are nothing more than walking money bags. A merchant in {s1} offered me good money for your heads.", starting_state="troublesome_bandits_intro_1", ending_state="troublesome_bandits_intro_2")
def code():
    quest_slot_001 = quest_get_slot(qst.track_down_bandits,12)
    s1 = str_store_party_name(quest_slot_001)
troublesome_bandits_intro_1_troublesome_bandits_intro_2.codeBlock = code


troublesome_bandits_intro_2_close_window = Dialog("anyone", "A bounty hunter! Kill {him/her}! Kill {him/her} now!", starting_state="troublesome_bandits_intro_2", ending_state="close_window")
def code():
    encounter_attack()
troublesome_bandits_intro_2_close_window.codeBlock = code


start_deserter_paid_talk = Dialog("party_tpl|pt_deserters", "What do you want? You want to pay us some more money?", starting_state="start", ending_state="deserter_paid_talk")
def condition():
    if _talk_context == 2:
        party_slot_001 = party_get_slot(_g_encountered_party,3)
        cur_hours_002 = store_current_hours()
        if var003 > 0:
            var003 = party_slot_001 - cur_hours_002
start_deserter_paid_talk.conditionBlock = condition


deserter_paid_talk_deserter_paid_talk_2a = Dialog("anyone|plyr", "Sorry to trouble you. I'll be on my way now.", starting_state="deserter_paid_talk", ending_state="deserter_paid_talk_2a")


deserter_paid_talk_2a_close_window = Dialog("anyone", "Yeah. Stop fooling around and go make some money. I want to see that purse full next time I see you.", starting_state="deserter_paid_talk_2a", ending_state="close_window")
def code():
    _g_leave_encounter = 1
deserter_paid_talk_2a_close_window.codeBlock = code


deserter_paid_talk_deserter_paid_talk_2b = Dialog("anyone|plyr", "No. It's your turn to pay me this time.", starting_state="deserter_paid_talk", ending_state="deserter_paid_talk_2b")


deserter_paid_talk_2b_close_window = Dialog("anyone", "What nonsense are you talking about? You want trouble? You got it.", starting_state="deserter_paid_talk_2b", ending_state="close_window")
def code():
    party_set_slot(_g_encountered_party,3,0)
    party_ignore_player(_g_encountered_party,0)
deserter_paid_talk_2b_close_window.codeBlock = code


start_deserter_talk = Dialog("party_tpl|pt_deserters", "We are the free brothers. We will fight only for ourselves from now on. Now give us your gold or taste our steel.", starting_state="start", ending_state="deserter_talk")
def condition():
    if _talk_context == 2:
        pass
start_deserter_talk.conditionBlock = condition


deserter_talk_close_window = Dialog("anyone|plyr", "When I'm done with you, you'll regret ever leaving your army.", starting_state="deserter_talk", ending_state="close_window")


deserter_talk_deserter_barter = Dialog("anyone|plyr", "There's no need to fight. I am ready to pay for free passage.", starting_state="deserter_talk", ending_state="deserter_barter")


deserter_barter_deserter_barter_2 = Dialog("anyone", "Good. You are clever. Now, having a look at your baggage, I reckon a fellow like you could pretty easily afford {reg5} denars. We wouldn't want to be too greedy, now would we? Pay us, and then you can go.", starting_state="deserter_barter", ending_state="deserter_barter_2")
def code():
    troop_gold_001 = store_troop_gold(trp.player)
    troop_inv_capacity_002 = troop_get_inventory_capacity(trp.player)
    for inventory_slot_no_003 in range(0, troop_inv_capacity_002):
        troop_inv_slot_004 = troop_get_inventory_slot(trp.player,inventory_slot_no_003)
        if troop_inv_slot_004 >= 0:
            if is_between(troop_inv_slot_004,itm.spice,itm.siege_supply):
                item_value_005 = store_item_value(troop_inv_slot_004)
                troop_gold_001 += item_value_005
            #end
        #end
    #end
    _g_tribute_amount = troop_gold_001 / 10
    val_max(_g_tribute_amount,10)
    reg5 = _g_tribute_amount
deserter_barter_deserter_barter_2.codeBlock = code


deserter_barter_2_deserter_barter_3a = Dialog("anyone|plyr", "All right here's your {reg5} denars.", starting_state="deserter_barter_2", ending_state="deserter_barter_3a")
def condition():
    reg2 = store_troop_gold()
    if reg2 >= _g_tribute_amount:
        reg5 = _g_tribute_amount
deserter_barter_2_deserter_barter_3a.conditionBlock = condition
def code():
    troop_remove_gold(trp.player,_g_tribute_amount)
deserter_barter_2_deserter_barter_3a.codeBlock = code


deserter_barter_2_deserter_barter_3b = Dialog("anyone|plyr", "I don't have that much money with me", starting_state="deserter_barter_2", ending_state="deserter_barter_3b")


deserter_barter_3b_close_window = Dialog("anyone", "Too bad. Then we'll have to sell you to the slavers.", starting_state="deserter_barter_3b", ending_state="close_window")


deserter_barter_3a_close_window = Dialog("anyone", "Heh. That wasn't difficult, now, was it? All right. Go now.", starting_state="deserter_barter_3a", ending_state="close_window")
def code():
    cur_hours_001 = store_current_hours()
    cur_hours_001 += 72
    party_set_slot(_g_encountered_party,3,cur_hours_001)
    party_ignore_player(_g_encountered_party,72)
    _g_leave_encounter = 1
deserter_barter_3a_close_window.codeBlock = code


start_tavernkeeper_talk = Dialog("anyone", "Good day dear {sir/madam}. How can I help you?", starting_state="start", ending_state="tavernkeeper_talk")
def condition():
    if reg1 >= trp.town_1_tavernkeeper and reg1 < trp.town_1_merchant:
        reg1 = store_conversation_troop()
start_tavernkeeper_talk.conditionBlock = condition


tavernkeeper_pretalk_tavernkeeper_talk = Dialog("anyone", "Anything else?", starting_state="tavernkeeper_pretalk", ending_state="tavernkeeper_talk")


tavernkeeper_talk_tavernkeeper_deliver_wine = Dialog("anyone|plyr", "I was told to deliver you {reg9} units of {s4}.", starting_state="tavernkeeper_talk", ending_state="tavernkeeper_deliver_wine")
def condition():
    if check_quest_active(qst.deliver_wine) and quest_slot_eq(qst.deliver_wine,1,_g_encountered_party):
        quest_slot_001 = quest_get_slot(qst.deliver_wine,14)
        quest_slot_002 = quest_get_slot(qst.deliver_wine,10)
        item_kind_count_003 = store_item_kind_count(quest_slot_001)
        if item_kind_count_003 >= quest_slot_002:
            reg9 = quest_slot_002
            s4 = str_store_item_name(quest_slot_001)
tavernkeeper_talk_tavernkeeper_deliver_wine.conditionBlock = condition


tavernkeeper_deliver_wine_tavernkeeper_pretalk = Dialog("anyone", "At last! My stock was almost depleted. I had paid the cost of the {s4} in advance. Here, take these {reg5} denars. That should cover your pay. And give {s9} my regards. I'll put in a good word for you next time I deal with him.", starting_state="tavernkeeper_deliver_wine", ending_state="tavernkeeper_pretalk")
def code():
    quest_slot_001 = quest_get_slot(qst.deliver_wine,14)
    quest_slot_002 = quest_get_slot(qst.deliver_wine,10)
    quest_slot_003 = quest_get_slot(qst.deliver_wine,22)
    quest_slot_004 = quest_get_slot(qst.deliver_wine,6)
    troop_remove_items(trp.player,quest_slot_001,quest_slot_002)
    troop_add_gold(trp.player,quest_slot_003)
    var005 = quest_slot_003
    var005 *= 4
    add_xp_as_reward(var005)
    reg5 = quest_slot_003
    s4 = str_store_item_name(quest_slot_001)
    s9 = str_store_troop_name(quest_slot_004)
    quest_slot_006 = quest_get_slot(qst.deliver_wine,12)
    change_player_relation_with_center(quest_slot_006,2)
    change_player_relation_with_center(_current_town,1)
    end_quest(qst.deliver_wine)
tavernkeeper_deliver_wine_tavernkeeper_pretalk.codeBlock = code


tavernkeeper_talk_tavernkeeper_deliver_wine_incomplete = Dialog("anyone|plyr", "I was told to deliver you {reg9} units of {s4}, but I lost some of the cargo on the way.", starting_state="tavernkeeper_talk", ending_state="tavernkeeper_deliver_wine_incomplete")
def condition():
    if check_quest_active(qst.deliver_wine) and quest_slot_eq(qst.deliver_wine,1,_g_encountered_party):
        quest_slot_001 = quest_get_slot(qst.deliver_wine,14)
        quest_slot_002 = quest_get_slot(qst.deliver_wine,10)
        item_kind_count_003 = store_item_kind_count(quest_slot_001)
        if item_kind_count_003 < quest_slot_002 and item_kind_count_003 > 0:
            reg9 = quest_slot_002
            s4 = str_store_item_name(quest_slot_001)
tavernkeeper_talk_tavernkeeper_deliver_wine_incomplete.conditionBlock = condition


tavernkeeper_deliver_wine_incomplete_tavernkeeper_pretalk = Dialog("anyone", "Attacked by bandits eh? You are lucky they left you alive. Anyway, I can pay you no more than {reg5} denars for this. And I will let {s1} know that my order was delivered less than completely, so you will probably be charged for this loss.", starting_state="tavernkeeper_deliver_wine_incomplete", ending_state="tavernkeeper_pretalk")
def code():
    quest_slot_001 = quest_get_slot(qst.deliver_wine,14)
    quest_slot_002 = quest_get_slot(qst.deliver_wine,10)
    quest_slot_003 = quest_get_slot(qst.deliver_wine,22)
    quest_slot_004 = quest_get_slot(qst.deliver_wine,6)
    item_kind_count_005 = store_item_kind_count(quest_slot_001)
    troop_remove_items(trp.player,quest_slot_001,item_kind_count_005)
    quest_slot_003 *= item_kind_count_005
    quest_slot_003 /= quest_slot_002
    troop_add_gold(trp.player,quest_slot_003)
    reg5 = quest_slot_003
    var006 = quest_slot_003
    var006 *= 4
    add_xp_as_reward(var006)
    s1 = str_store_troop_name(quest_slot_004)
    var007 = _qst_deliver_wine_debt
    var008 = quest_slot_002 - item_kind_count_005
    var007 *= var008
    var007 /= quest_slot_002
    _debt_to_merchants_guild += var007
    quest_slot_009 = quest_get_slot(qst.deliver_wine,12)
    change_player_relation_with_center(quest_slot_009,1)
    end_quest(qst.deliver_wine)
tavernkeeper_deliver_wine_incomplete_tavernkeeper_pretalk.codeBlock = code


tavernkeeper_talk_tavernkeeper_deliver_wine_lost = Dialog("anyone|plyr", "I was told to deliver you {reg9} units of {s4}, but I lost the cargo on the way.", starting_state="tavernkeeper_talk", ending_state="tavernkeeper_deliver_wine_lost")
def condition():
    if check_quest_active(qst.deliver_wine) and quest_slot_eq(qst.deliver_wine,1,_g_encountered_party):
        quest_slot_001 = quest_get_slot(qst.deliver_wine,14)
        item_kind_count_002 = store_item_kind_count(quest_slot_001)
        if item_kind_count_002 == 0:
            reg9 = quest_get_slot(qst.deliver_wine,10)
            s4 = str_store_item_name(quest_slot_001)
tavernkeeper_talk_tavernkeeper_deliver_wine_lost.conditionBlock = condition


tavernkeeper_deliver_wine_lost_tavernkeeper_pretalk = Dialog("anyone", "What? I was waiting for that {s4} for weeks! And now you are telling me that you lost it? You may rest assured that I will let {s1} know about this.", starting_state="tavernkeeper_deliver_wine_lost", ending_state="tavernkeeper_pretalk")
def code():
    add_xp_as_reward(40)
    quest_slot_001 = quest_get_slot(qst.deliver_wine,14)
    quest_slot_002 = quest_get_slot(qst.deliver_wine,6)
    s4 = str_store_item_name(quest_slot_001)
    s1 = str_store_troop_name(quest_slot_002)
    _debt_to_merchants_guild += _qst_deliver_wine_debt
    end_quest(qst.deliver_wine)
tavernkeeper_deliver_wine_lost_tavernkeeper_pretalk.codeBlock = code


tavernkeeper_talk_tavernkeeper_buy_drinks = Dialog("anyone|plyr", "I'd like to buy every man who comes in here tonight a jar of your best wine.", starting_state="tavernkeeper_talk", ending_state="tavernkeeper_buy_drinks")
def condition():
    cur_hours_001 = store_current_hours()
    if cur_hours_001 > _buy_drinks_last_time:
        cur_hours_001 -= 24
tavernkeeper_talk_tavernkeeper_buy_drinks.conditionBlock = condition


tavernkeeper_buy_drinks_tavernkeeper_buy_drinks_2 = Dialog("anyone", "Of course, {my lord/my lady}. I reckon {reg5} denars should be enough for that. What should I tell the lads?", starting_state="tavernkeeper_buy_drinks", ending_state="tavernkeeper_buy_drinks_2")
def code():
    _temp = 1000
    reg5 = _temp
tavernkeeper_buy_drinks_tavernkeeper_buy_drinks_2.codeBlock = code


tavernkeeper_buy_drinks_2_tavernkeeper_buy_drinks_end = Dialog("anyone|plyr", "Let everyone know of the generosity of {playername} to the people of {s10}.", starting_state="tavernkeeper_buy_drinks_2", ending_state="tavernkeeper_buy_drinks_end")
def condition():
    troop_gold_001 = store_troop_gold(trp.player)
    if troop_gold_001 >= _temp:
        s10 = str_store_party_name(_current_town)
tavernkeeper_buy_drinks_2_tavernkeeper_buy_drinks_end.conditionBlock = condition


tavernkeeper_buy_drinks_end_tavernkeeper_pretalk = Dialog("anyone", "Don't worry {sir/madam}. Your name will be cheered and toasted here all night.", starting_state="tavernkeeper_buy_drinks_end", ending_state="tavernkeeper_pretalk")
def code():
    troop_remove_gold(trp.player,_temp)
    change_player_relation_with_center(_current_town,1)
    cur_hours_001 = store_current_hours()
    _buy_drinks_last_time = cur_hours_001
tavernkeeper_buy_drinks_end_tavernkeeper_pretalk.codeBlock = code


tavernkeeper_buy_drinks_2_tavernkeeper_pretalk = Dialog("anyone|plyr", "Actually, cancel that order.", starting_state="tavernkeeper_buy_drinks_2", ending_state="tavernkeeper_pretalk")


tavernkeeper_talk_tavernkeeper_job_ask = Dialog("anyone|plyr", "Have you heard of anyone in this realm who might have a job for a {man/woman} like myself?", starting_state="tavernkeeper_talk", ending_state="tavernkeeper_job_ask")
def condition():
    if _g_encountered_party_faction != fac.player_supporters_faction:
        pass
tavernkeeper_talk_tavernkeeper_job_ask.conditionBlock = condition


tavernkeeper_job_ask_tavernkeeper_job_search = Dialog("anyone", "Hmm... Well, {s10} is often looking for mercenaries to fight in his wars.{s9}", starting_state="tavernkeeper_job_ask", ending_state="tavernkeeper_job_search")
def condition():
    s9 = str_store_string(gstr._of_course_the_land_is_currently_at_peace_so_you_may_have_better_luck_in_other_realms)
    for fac_001 in range(fac.player_supporters_faction, fac.kingdoms_end):
        faction_relation_002 = store_relation(_g_encountered_party_faction,fac_001)
        if faction_relation_002 < 0:
            str_clear(9)
        #end
    #end
    faction_slot_003 = faction_get_slot(_g_encountered_party_faction,11)
    s10 = str_store_troop_name(faction_slot_003)
tavernkeeper_job_ask_tavernkeeper_job_search.conditionBlock = condition
def code():
    _g_troop_list_no = 0
tavernkeeper_job_ask_tavernkeeper_job_search.codeBlock = code


tavernkeeper_job_search_tavernkeeper_job_result = Dialog("anyone", "Let me think some more...", starting_state="tavernkeeper_job_search", ending_state="tavernkeeper_job_result")
def code():
    npc_find_quest_for_player_to_s11(_g_encountered_party_faction)
    troop_id_001 = reg0
    get_dynamic_quest(troop_id_001)
    var002 = reg0
    if troop_id_001 > -1:
        s7 = str_store_troop_name(troop_id_001)
        str_clear(9)
        party_attached_003 = -1
        if troop_slot_eq(troop_id_001,2,2):
            troop_slot_004 = troop_get_slot(troop_id_001,10)
            if party_is_active(troop_slot_004):
                party_attached_003 = party_get_attached_to(troop_slot_004)
            elif is_between(troop_id_001,trp.town_1_mayor,trp.village_1_elder):
                for p_005 in range(p.town_1, p.castle_1):
                    if party_slot_eq(p_005,25,troop_id_001):
                        party_attached_003 = p_005
                    #end
                #end
            #end
        #end
        if party_attached_003 > -1:
            if party_attached_003 == _g_encountered_party:
                s8 = str_store_string(gstr.here)
            else:
                s8 = str_store_string(gstr.over)
            #end
            s12 = str_store_party_name(party_attached_003)
            s9 = str_store_string(gstr.s8_in_s12)
        #end
        if var002 == qst.track_down_bandits:
            s10 = str_store_string(gstr._has_put_together_a_bounty_on_some_bandits_who_have_been_attacking_travellers_in_the_area)
        elif var002 == qst.destroy_bandit_lair:
            s10 = str_store_string(gstr._has_been_worried_about_bandits_establishing_a_hideout_near_his_home)
        elif var002 == qst.retaliate_for_border_incident:
            s10 = str_store_string(gstr._is_looking_for_a_way_to_avoid_an_impending_war)
        elif var002 == qst.rescue_prisoner:
            s10 = str_store_string(gstr._may_need_help_rescuing_an_imprisoned_family_member)
        elif var002 == qst.cause_provocation:
            s10 = str_store_string(gstr._has_been_asking_around_for_someone_who_might_want_work_id_watch_yourself_with_him_though)
        else:
            s10 = str_store_string(gstr.tavernkeeper_invalid_quest)
        #end
        reg4 = troop_get_type(troop_id_001)
    #end
tavernkeeper_job_search_tavernkeeper_job_result.codeBlock = code


tavernkeeper_job_result_tavernkeeper_job_search = Dialog("anyone", "I have heard that {s7} {s9}{s10} You may want to speak with {reg4?her:him}.", starting_state="tavernkeeper_job_result", ending_state="tavernkeeper_job_search")
def condition():
    if _g_troop_list_no < var001:
        var001 = trp.village_1_elder
        var001 -= 1
tavernkeeper_job_result_tavernkeeper_job_search.conditionBlock = condition


tavernkeeper_job_result_tavernkeeper_job_result_2 = Dialog("anyone", "There may be other work, of course -- lords and guildmasters often have other tasks which we don't hear about. Also, the villages around here frequently need help, although they'd be more likely to pay you with a wedge of cheese and goodwill than with cold hard denars.", starting_state="tavernkeeper_job_result", ending_state="tavernkeeper_job_result_2")
def condition():
    if _g_troop_list_no >= var001:
        var001 = trp.village_1_elder
        var001 -= 1
tavernkeeper_job_result_tavernkeeper_job_result_2.conditionBlock = condition


tavernkeeper_job_result_2_close_window = Dialog("anyone", "I'll keep my ears open for other opportunities. You may want to ask again from time to time.", starting_state="tavernkeeper_job_result_2", ending_state="close_window")


tavernkeeper_talk_close_window = Dialog("anyone|plyr", "I guess I should leave now.", starting_state="tavernkeeper_talk", ending_state="close_window")


start_ransom_broker_intro = Dialog("anyone", "Greetings to you, {sir/madam}. You look like someone who should get to know me.", starting_state="start", ending_state="ransom_broker_intro")
def condition():
    if is_between(_g_talk_troop,trp.ransom_broker_1,trp.tavern_traveler_1) and _g_talk_troop_met == 0:
        pass
start_ransom_broker_intro.conditionBlock = condition


ransom_broker_intro_ransom_broker_intro_2 = Dialog("anyone|plyr", "Why is that?", starting_state="ransom_broker_intro", ending_state="ransom_broker_intro_2")


ransom_broker_intro_2_ransom_broker_info_talk = Dialog("anyone", "I broker ransoms for the poor wretches who are captured in these endless wars. Normally I travel between the salt mines and the slave markets on the coast, on commission from those whose relatives have gone missing. But if I'm out on my errands of mercy, and I come across a fellow dragging around a captive or two, well, there's no harm in a little speculative investment, is there? And you look like the type who might have a prisoner to sell.", starting_state="ransom_broker_intro_2", ending_state="ransom_broker_info_talk")
def code():
    _ransom_broker_families_told = 0
    _ransom_broker_prices_told = 0
    _ransom_broker_ransom_me_told = 0
ransom_broker_intro_2_ransom_broker_info_talk.codeBlock = code


ransom_broker_info_talk_ransom_broker_families = Dialog("anyone|plyr", "What if their families can't pay?", starting_state="ransom_broker_info_talk", ending_state="ransom_broker_families")
def condition():
    if _ransom_broker_families_told == 0:
        pass
ransom_broker_info_talk_ransom_broker_families.conditionBlock = condition


ransom_broker_families_ransom_broker_info_talk = Dialog("anyone", "Oh, then I spin them a few heartwarming tales of life on the galleys. You'd be surprised what sorts of treasures a peasant can dig out of his cowshed or wheedle out of his cousins, assuming he's got the proper motivation! And if in the end they cannot come up with the silver, then there are always slave merchants who are looking for galley slaves. One cannot do Heaven's work with an empty purse, you see.", starting_state="ransom_broker_families", ending_state="ransom_broker_info_talk")
def code():
    _ransom_broker_families_told = 1
ransom_broker_families_ransom_broker_info_talk.codeBlock = code


ransom_broker_info_talk_ransom_broker_prices = Dialog("anyone|plyr", "What can I get for a prisoner?", starting_state="ransom_broker_info_talk", ending_state="ransom_broker_prices")
def condition():
    if _ransom_broker_prices_told == 0:
        pass
ransom_broker_info_talk_ransom_broker_prices.conditionBlock = condition


ransom_broker_prices_ransom_broker_info_talk = Dialog("anyone", "It varies. I fancy that I have a fine eye for assessing a ransom. There are a dozen little things about a man that will tell you whether he goes to bed hungry, or dines each night on soft dumplings and goose. The real money of course is in the gentry, and if you ever want to do my job you'll want to learn about every landowning family in Calradia, their estates, their heraldry, their offspring both lawful and bastard, and, of course, their credit with the merchants.", starting_state="ransom_broker_prices", ending_state="ransom_broker_info_talk")
def code():
    _ransom_broker_prices_told = 1
ransom_broker_prices_ransom_broker_info_talk.codeBlock = code


ransom_broker_info_talk_ransom_broker_ransom_me = Dialog("anyone|plyr", "Would you be able to ransom me if I were taken?", starting_state="ransom_broker_info_talk", ending_state="ransom_broker_ransom_me")
def condition():
    if _ransom_broker_ransom_me_told == 0:
        pass
ransom_broker_info_talk_ransom_broker_ransom_me.conditionBlock = condition


ransom_broker_ransom_me_ransom_broker_info_talk = Dialog("anyone", "Of course. I'm welcome in every court in Calradia. There's not many who can say that! So always be sure to keep a pot of denars buried somewhere, and a loyal servant who can find it in a hurry.", starting_state="ransom_broker_ransom_me", ending_state="ransom_broker_info_talk")
def code():
    _ransom_broker_ransom_me_told = 1
ransom_broker_ransom_me_ransom_broker_info_talk.codeBlock = code


ransom_broker_info_talk_ransom_broker_pretalk = Dialog("anyone|plyr", "That's all I need to know. Thank you.", starting_state="ransom_broker_info_talk", ending_state="ransom_broker_pretalk")


start_ransom_broker_talk = Dialog("anyone", "Greetings. If you have any prisoners, I will be happy to buy them from you.", starting_state="start", ending_state="ransom_broker_talk")
def condition():
    if is_between(_g_talk_troop,trp.ransom_broker_1,trp.tavern_traveler_1):
        pass
start_ransom_broker_talk.conditionBlock = condition


ransom_broker_pretalk_ransom_broker_talk = Dialog("anyone", "Anyway, if you have any prisoners, I will be happy to buy them from you.", starting_state="ransom_broker_pretalk", ending_state="ransom_broker_talk")


ransom_broker_talk_ransom_broker_sell_prisoners = Dialog("anyone|plyr", "Then you'd better bring your purse. I have got prisoners to sell.", starting_state="ransom_broker_talk", ending_state="ransom_broker_sell_prisoners")
def condition():
    if reg0 >= 1:
        reg0 = store_num_regular_prisoners()
ransom_broker_talk_ransom_broker_sell_prisoners.conditionBlock = condition


ransom_broker_talk_ransom_broker_intro_2 = Dialog("anyone|plyr", "Tell me about what you do again.", starting_state="ransom_broker_talk", ending_state="ransom_broker_intro_2")


ransom_broker_talk_ransom_broker_ransom_companion = Dialog("anyone|plyr", "I wish to ransom one of my companions.", starting_state="ransom_broker_talk", ending_state="ransom_broker_ransom_companion")


ransom_broker_ransom_companion_ransom_broker_ransom_companion_choose = Dialog("anyone", "Whom do you wish to ransom?", starting_state="ransom_broker_ransom_companion", ending_state="ransom_broker_ransom_companion_choose")


ransom_broker_ransom_companion_choose_ransom_broker_ransom_companion_name_sum = Dialog("anyone|repeat_for_troops|plyr", "{s4}", starting_state="ransom_broker_ransom_companion_choose", ending_state="ransom_broker_ransom_companion_name_sum")
def condition():
    var001 = store_repeat_object()
    if not troop_slot_eq(var001,2,2) and is_between(var001,trp.npc1,trp.kingdom_1_lord) and troop_slot_ge(var001,8,p.town_1):
        s4 = str_store_troop_name(var001)
ransom_broker_ransom_companion_choose_ransom_broker_ransom_companion_name_sum.conditionBlock = condition
def code():
    _companion_to_be_ransomed = store_repeat_object()
ransom_broker_ransom_companion_choose_ransom_broker_ransom_companion_name_sum.codeBlock = code


ransom_broker_ransom_companion_choose_ransom_broker_pretalk = Dialog("anyone|plyr", "Never mind", starting_state="ransom_broker_ransom_companion_choose", ending_state="ransom_broker_pretalk")


ransom_broker_ransom_companion_name_sum_ransom_broker_ransom_companion_verify = Dialog("anyone", "Let me check my ledger, here... Yes. Your friend is being held in the dungeon at {s7}. How interesting! I remember hearing that the rats down there are unusually large -- like mastiffs, they say... Now... For the very reasonable sum of {reg5} denars, which includes both the ransom and my commission and expenses, we can arrange it so that {s5} can once again enjoy {reg4?her:his} freedom. What do you say?", starting_state="ransom_broker_ransom_companion_name_sum", ending_state="ransom_broker_ransom_companion_verify")
def code():
    s5 = str_store_troop_name(_companion_to_be_ransomed)
    reg4 = troop_get_type(_companion_to_be_ransomed)
    troop_slot_001 = troop_get_slot(_companion_to_be_ransomed,8)
    s7 = str_store_party_name(troop_slot_001)
    character_lvl_002 = store_character_level(_companion_to_be_ransomed)
    _companion_ransom_amount = character_lvl_002 + 20
    _companion_ransom_amount *= character_lvl_002
    _companion_ransom_amount *= 5
    reg5 = _companion_ransom_amount
ransom_broker_ransom_companion_name_sum_ransom_broker_ransom_companion_verify.codeBlock = code


ransom_broker_ransom_companion_verify_ransom_broker_ransom_companion_accept = Dialog("anyone|plyr", "Here's your money.", starting_state="ransom_broker_ransom_companion_verify", ending_state="ransom_broker_ransom_companion_accept")
def condition():
    if troop_gold_001 >= _companion_ransom_amount:
        troop_gold_001 = store_troop_gold(trp.player)
ransom_broker_ransom_companion_verify_ransom_broker_ransom_companion_accept.conditionBlock = condition
def code():
    troop_remove_gold(trp.player,_companion_ransom_amount)
    troop_set_slot(_companion_to_be_ransomed,2,5)
    troop_set_slot(_companion_to_be_ransomed,151,8)
    troop_set_slot(_companion_to_be_ransomed,150,1)
    if True:
        troop_slot_001 = troop_get_slot(_companion_to_be_ransomed,8)
        party_count_prisoners_of_type(party_prisoners_of_type_002,troop_slot_001,_companion_to_be_ransomed)
        if party_prisoners_of_type_002 > 0:
            party_remove_prisoners(troop_slot_001,_companion_to_be_ransomed,1)
        #end
    #end
    troop_set_slot(_companion_to_be_ransomed,8,-1)
    troop_set_slot(_companion_to_be_ransomed,77,0)
    troop_set_slot(_companion_to_be_ransomed,69,0)
ransom_broker_ransom_companion_verify_ransom_broker_ransom_companion_accept.codeBlock = code


ransom_broker_ransom_companion_verify_ransom_broker_ransom_companion_refuse = Dialog("anyone|plyr", "I can't afford that right now.", starting_state="ransom_broker_ransom_companion_verify", ending_state="ransom_broker_ransom_companion_refuse")


ransom_broker_ransom_companion_accept_ransom_broker_talk = Dialog("anyone", "Splendid! In a few days, I would think, you should find {s5} riding to rejoin you, blinking in the sunlight and no doubt very grateful! Is there any other way in which I can help you?", starting_state="ransom_broker_ransom_companion_accept", ending_state="ransom_broker_talk")
def code():
    s5 = str_store_troop_name(_companion_to_be_ransomed)
ransom_broker_ransom_companion_accept_ransom_broker_talk.codeBlock = code


ransom_broker_ransom_companion_refuse_ransom_broker_talk = Dialog("anyone", "Of course, of course... Never mind what they say about the rats, by the way -- I've never actually seen one myself, on account of the pitch-black darkness. Anyway, I'm sure that {s5} will understand why it's important for you to control expenditures. Now... Was there anything else?", starting_state="ransom_broker_ransom_companion_refuse", ending_state="ransom_broker_talk")
def code():
    s5 = str_store_troop_name(_companion_to_be_ransomed)
ransom_broker_ransom_companion_refuse_ransom_broker_talk.codeBlock = code


ransom_broker_talk_close_window = Dialog("anyone|plyr", "Not this time. Good-bye.", starting_state="ransom_broker_talk", ending_state="close_window")


ransom_broker_sell_prisoners_ransom_broker_sell_prisoners_2 = Dialog("anyone", "Let me see what you have...", starting_state="ransom_broker_sell_prisoners", ending_state="ransom_broker_sell_prisoners_2")
def code():
    change_screen_trade_prisoners()
ransom_broker_sell_prisoners_ransom_broker_sell_prisoners_2.codeBlock = code


ransom_broker_sell_prisoners_2_close_window = Dialog("anyone", "I will be staying here for a few days. Let me know if you need my services.", starting_state="ransom_broker_sell_prisoners_2", ending_state="close_window")


start_tavern_traveler_talk = Dialog("anyone", "Greetings, friend. You look like the kind of {man/person} who'd do well to know me. I travel a lot all across Calradia and keep an open ear. I can provide you information that you might find useful. For a meager price of course.", starting_state="start", ending_state="tavern_traveler_talk")
def condition():
    if is_between(_g_talk_troop,trp.tavern_traveler_1,trp.tavern_bookseller_1):
        if _g_talk_troop_met == 0:
            s10 = str_store_troop_name(_g_talk_troop)
start_tavern_traveler_talk.conditionBlock = condition
def code():
    _traveler_land_asked = 0
start_tavern_traveler_talk.codeBlock = code


start_tavern_traveler_lost_companion_thanks = Dialog("anyone", "Greetings, {playername}. I saw your companion {s10} at a tavern in {s11} some days ago. I thought you might like to know.", starting_state="start", ending_state="tavern_traveler_lost_companion_thanks")
def condition():
    if is_between(_g_talk_troop,trp.tavern_traveler_1,trp.tavern_bookseller_1) and _last_lost_companion > 0:
        troop_slot_001 = -1
        troop_slot_001 = troop_get_slot(_last_lost_companion,12)
        if is_between(troop_slot_001,p.town_1,p.castle_1):
            s10 = str_store_troop_name(_last_lost_companion)
            s11 = str_store_party_name(troop_slot_001)
start_tavern_traveler_lost_companion_thanks.conditionBlock = condition
def code():
    _last_lost_companion = 0
start_tavern_traveler_lost_companion_thanks.codeBlock = code


tavern_traveler_lost_companion_thanks_tavern_traveler_pretalk = Dialog("anyone|plyr", "Thanks. I'll go and find {reg3?her:him} there.", starting_state="tavern_traveler_lost_companion_thanks", ending_state="tavern_traveler_pretalk")
def condition():
    reg3 = troop_get_type(_last_lost_companion)
tavern_traveler_lost_companion_thanks_tavern_traveler_pretalk.conditionBlock = condition


tavern_traveler_lost_companion_thanks_tavern_traveler_pretalk_1 = Dialog("anyone|plyr", "Thanks, but I don't really care.", starting_state="tavern_traveler_lost_companion_thanks", ending_state="tavern_traveler_pretalk")


start_tavern_traveler_talk_1 = Dialog("anyone", "Greetings, {playername}.", starting_state="start", ending_state="tavern_traveler_talk")
def condition():
    if is_between(_g_talk_troop,trp.tavern_traveler_1,trp.tavern_bookseller_1):
        pass
start_tavern_traveler_talk_1.conditionBlock = condition
def code():
    _traveler_land_asked = 0
start_tavern_traveler_talk_1.codeBlock = code


tavern_traveler_pretalk_tavern_traveler_talk = Dialog("anyone", "Yes?", starting_state="tavern_traveler_pretalk", ending_state="tavern_traveler_talk")


tavern_traveler_talk_tavern_traveler_tell_kingdoms = Dialog("anyone|plyr", "What can you tell me about this land?", starting_state="tavern_traveler_talk", ending_state="tavern_traveler_tell_kingdoms")
def condition():
    if _traveler_land_asked == 0:
        pass
tavern_traveler_talk_tavern_traveler_tell_kingdoms.conditionBlock = condition
def code():
    _traveler_land_asked = 1
tavern_traveler_talk_tavern_traveler_tell_kingdoms.codeBlock = code


tavern_traveler_tell_kingdoms_tavern_traveler_tell_kingdoms_2 = Dialog("anyone", "Calradia is divided into rival kingdoms, which can neither manage to live in peace with their neighbours, nor completely eliminate them. As a result, there's seldom a break to the bitter wars which plague this land and drain its life blood. Well, at least this must be a good place to be for an adventurer such as yourself. With some luck and skill, you can make a name for yourself here, amass a fortune perhaps, or gain great power. Opportunities are endless and so are the rewards, if you are willing to risk your life for them.", starting_state="tavern_traveler_tell_kingdoms", ending_state="tavern_traveler_tell_kingdoms_2")


tavern_traveler_tell_kingdoms_2_tavern_traveler_tell_kingdoms_3 = Dialog("anyone|plyr", "Tell me more about these opportunities.", starting_state="tavern_traveler_tell_kingdoms_2", ending_state="tavern_traveler_tell_kingdoms_3")


tavern_traveler_tell_kingdoms_2_close_window = Dialog("anyone|plyr", "Thank you. That was all I needed to know", starting_state="tavern_traveler_tell_kingdoms_2", ending_state="close_window")


tavern_traveler_tell_kingdoms_3_tavern_traveler_tell_kingdoms_4 = Dialog("anyone", "Well, you probably know everything I could tell you already. You seem to be doing pretty well.", starting_state="tavern_traveler_tell_kingdoms_3", ending_state="tavern_traveler_tell_kingdoms_4")
def condition():
    if _player_has_homage > 0:
        pass
tavern_traveler_tell_kingdoms_3_tavern_traveler_tell_kingdoms_4.conditionBlock = condition


tavern_traveler_tell_kingdoms_3_tavern_traveler_tell_kingdoms_4a = Dialog("anyone", "The kingdoms will pay good money for mercenaries if they are engaged in a war. If you have done a bit of fighting, speaking with one of their lords will probably result in being offered a mercenary contract. However the real rewards come if you can manage to become a vassal to a king. A vassal can own villages, castles and towns and get rich with the taxes and revenues of these estates. Normally, only nobles of the realm own land in this way, but in time of war, a king will not hesitate to accept someone who distinguishes {himself/herself} on the battlefield as a vassal, and grant {him/her} the right to own land.", starting_state="tavern_traveler_tell_kingdoms_3", ending_state="tavern_traveler_tell_kingdoms_4a")


tavern_traveler_tell_kingdoms_4a_tavern_traveler_tell_kingdoms_4 = Dialog("anyone", "It is not unheard-of for adventurers to renounce allegiance to a Calradian king altogether, declare themselves kings, and claim land in their own name. This is a difficult path, however, as the great nobles of the land, with their long ancestries, are not likely to accept such upstarts as their monarch. Such rulers would need to be very careful in establishing their right to rule, or they would be set upon from all sides.", starting_state="tavern_traveler_tell_kingdoms_4a", ending_state="tavern_traveler_tell_kingdoms_4")


tavern_traveler_tell_kingdoms_4_tavern_traveler_tell_kingdoms_5 = Dialog("anyone", "It might be easier for an adventurer like yourself to pledge support to an existing king's rival.  There are many such pretenders in Calradia -- those who are born to the right family, who go around and stir up trouble saying they have a better claim to the throne than the current king. If those claim holders could find supporters, they could easily start civil wars and perhaps even replace the king one day.", starting_state="tavern_traveler_tell_kingdoms_4", ending_state="tavern_traveler_tell_kingdoms_5")


tavern_traveler_tell_kingdoms_5_tavern_traveler_tell_kingdoms_6 = Dialog("anyone|plyr", "Interesting. Where can I find these claim holders?", starting_state="tavern_traveler_tell_kingdoms_5", ending_state="tavern_traveler_tell_kingdoms_6")


tavern_traveler_tell_kingdoms_5_close_window = Dialog("anyone|plyr", "I guess I heard enough already. Thank you.", starting_state="tavern_traveler_tell_kingdoms_5", ending_state="close_window")


tavern_traveler_tell_kingdoms_6_tavern_traveler_pretalk = Dialog("anyone", "A claim holder's life would be in danger in his own country of course. Therefore, they usually stay at rival courts, raising support and hoping to find someone willing to champion their cause. I usually hear news about some of them, and may be able to tell you their location with some precision. But of course, I would ask for a little something for such a service.", starting_state="tavern_traveler_tell_kingdoms_6", ending_state="tavern_traveler_pretalk")
def code():
    _traveller_claimants_mentioned = 1
tavern_traveler_tell_kingdoms_6_tavern_traveler_pretalk.codeBlock = code


tavern_traveler_talk_tavern_traveler_pretender_location = Dialog("anyone|plyr", "I want to know the location of a claimant.", starting_state="tavern_traveler_talk", ending_state="tavern_traveler_pretender_location")
def condition():
    if _traveller_claimants_mentioned == 1:
        pass
tavern_traveler_talk_tavern_traveler_pretender_location.conditionBlock = condition


tavern_traveler_pretender_location_tavern_traveler_pretender_location_ask = Dialog("anyone", "Whose location do you want to know?", starting_state="tavern_traveler_pretender_location", ending_state="tavern_traveler_pretender_location_ask")


tavern_traveler_pretender_location_ask_tavern_traveler_pretender_location_ask_2 = Dialog("anyone|repeat_for_troops|plyr", "{s11}", starting_state="tavern_traveler_pretender_location_ask", ending_state="tavern_traveler_pretender_location_ask_2")
def condition():
    var001 = store_repeat_object()
    if is_between(var001,trp.kingdom_1_pretender,trp.knight_1_1_wife) and not troop_slot_eq(var001,2,2) and troop_slot_ge(var001,12,1):
        if var001 != _supported_pretender:
            s11 = str_store_troop_name(var001)
tavern_traveler_pretender_location_ask_tavern_traveler_pretender_location_ask_2.conditionBlock = condition
def code():
    _temp = store_repeat_object()
tavern_traveler_pretender_location_ask_tavern_traveler_pretender_location_ask_2.codeBlock = code


tavern_traveler_pretender_location_ask_tavern_traveler_pretalk = Dialog("anyone|plyr", "Never mind.", starting_state="tavern_traveler_pretender_location_ask", ending_state="tavern_traveler_pretalk")


tavern_traveler_pretender_location_ask_2_tavern_traveler_pretender_location_ask_money = Dialog("anyone", "I can reveal this information to you for a small price, let's say 30 denars.", starting_state="tavern_traveler_pretender_location_ask_2", ending_state="tavern_traveler_pretender_location_ask_money")


tavern_traveler_pretender_location_ask_money_tavern_traveler_pretender_location_tell = Dialog("anyone|plyr", "All right. Here is 30 denars.", starting_state="tavern_traveler_pretender_location_ask_money", ending_state="tavern_traveler_pretender_location_tell")
def condition():
    if troop_gold_001 >= 30:
        troop_gold_001 = store_troop_gold(trp.player)
tavern_traveler_pretender_location_ask_money_tavern_traveler_pretender_location_tell.conditionBlock = condition
def code():
    troop_remove_gold(trp.player,30)
tavern_traveler_pretender_location_ask_money_tavern_traveler_pretender_location_tell.codeBlock = code


tavern_traveler_pretender_location_ask_money_tavern_traveler_pretalk = Dialog("anyone|plyr", "Never mind.", starting_state="tavern_traveler_pretender_location_ask_money", ending_state="tavern_traveler_pretalk")


tavern_traveler_pretender_location_tell_tavern_traveler_pretalk = Dialog("anyone", "{s15} is currently at {s11}.", starting_state="tavern_traveler_pretender_location_tell", ending_state="tavern_traveler_pretalk")
def code():
    s15 = str_store_troop_name(_temp)
    troop_slot_001 = troop_get_slot(_temp,12)
    s11 = str_store_party_name(troop_slot_001)
tavern_traveler_pretender_location_tell_tavern_traveler_pretalk.codeBlock = code


tavern_traveler_talk_tavern_traveler_companion_location = Dialog("anyone|plyr", "I am looking for one of my companions...", starting_state="tavern_traveler_talk", ending_state="tavern_traveler_companion_location")


tavern_traveler_companion_location_tavern_traveler_companion_location_ask = Dialog("anyone", "Maybe I can help you. Who are you looking for?", starting_state="tavern_traveler_companion_location", ending_state="tavern_traveler_companion_location_ask")


tavern_traveler_companion_location_ask_tavern_traveler_companion_location_ask_2 = Dialog("anyone|repeat_for_troops|plyr", "{s11}", starting_state="tavern_traveler_companion_location_ask", ending_state="tavern_traveler_companion_location_ask_2")
def condition():
    var001 = store_repeat_object()
    if is_between(var001,trp.npc1,trp.kingdom_1_lord) and troop_slot_ge(var001,82,1):
        var002 = 0
        if troop_slot_ge(var001,12,1) or troop_slot_ge(var001,8,0):
            var002 = 1
        #end
    #end
    if var002 == 1:
        s11 = str_store_troop_name(var001)
tavern_traveler_companion_location_ask_tavern_traveler_companion_location_ask_2.conditionBlock = condition
def code():
    _temp = store_repeat_object()
tavern_traveler_companion_location_ask_tavern_traveler_companion_location_ask_2.codeBlock = code


tavern_traveler_companion_location_ask_tavern_traveler_pretalk = Dialog("anyone|plyr", "Never mind.", starting_state="tavern_traveler_companion_location_ask", ending_state="tavern_traveler_pretalk")


tavern_traveler_companion_location_ask_2_tavern_traveler_companion_location_ask_money = Dialog("anyone", "I guess I know where {s15} is. For 30 denars, I'll tell you.", starting_state="tavern_traveler_companion_location_ask_2", ending_state="tavern_traveler_companion_location_ask_money")
def condition():
    s15 = str_store_troop_name(_temp)
tavern_traveler_companion_location_ask_2_tavern_traveler_companion_location_ask_money.conditionBlock = condition


tavern_traveler_companion_location_ask_money_tavern_traveler_companion_location_tell = Dialog("anyone|plyr", "All right. Here is 30 denars.", starting_state="tavern_traveler_companion_location_ask_money", ending_state="tavern_traveler_companion_location_tell")
def condition():
    if troop_gold_001 >= 30:
        troop_gold_001 = store_troop_gold(trp.player)
tavern_traveler_companion_location_ask_money_tavern_traveler_companion_location_tell.conditionBlock = condition
def code():
    troop_remove_gold(trp.player,30)
tavern_traveler_companion_location_ask_money_tavern_traveler_companion_location_tell.codeBlock = code


tavern_traveler_companion_location_ask_money_tavern_traveler_pretalk = Dialog("anyone|plyr", "Never mind.", starting_state="tavern_traveler_companion_location_ask_money", ending_state="tavern_traveler_pretalk")


tavern_traveler_companion_location_tell_tavern_traveler_pretalk = Dialog("anyone", "{s15} is currently at {s11}.{s12}", starting_state="tavern_traveler_companion_location_tell", ending_state="tavern_traveler_pretalk")
def code():
    s15 = str_store_troop_name(_temp)
    if troop_slot_ge(_temp,12,1):
        troop_slot_001 = troop_get_slot(_temp,12)
        s12 = str_store_string(gstr.space)
    else:
        troop_slot_001 = troop_get_slot(_temp,8)
        if is_between(troop_slot_001,p.town_1,p.castle_1):
            s13 = str_store_string(gstr.town)
        else:
            s13 = str_store_string(gstr.castle)
        #end
        reg4 = troop_get_type(_temp)
        s12 = str_store_string(gstr._but_he_is_holding_there_as_a_prisoner_at_dungeon_of_s13)
    #end
    if party_is_active(troop_slot_001):
        s11 = str_store_party_name(troop_slot_001)
    else:
        s11 = str_store_party_name(gstr.prisoner_at_large)
    #end
tavern_traveler_companion_location_tell_tavern_traveler_pretalk.codeBlock = code


tavern_traveler_talk_close_window = Dialog("anyone|plyr", "Farewell.", starting_state="tavern_traveler_talk", ending_state="close_window")


start_tavern_traveler_answer = Dialog("anyone", "Greetings. They say you're the kind of {man/woman} who'd be interested to hear that I travel frequently to {s17}. I'll tell you all I know for a mere 100 denars.", starting_state="start", ending_state="tavern_traveler_answer")
def condition():
    if is_between(_g_talk_troop,trp.tavern_traveler_1,trp.tavern_bookseller_1):
        party_slot_001 = party_get_slot(_g_encountered_party,97)
        s17 = str_store_faction_name(party_slot_001)
start_tavern_traveler_answer.conditionBlock = condition


tavern_traveler_answer_tavern_traveler_continue = Dialog("anyone|plyr", "Here's 100 denars. Tell me what you know.", starting_state="tavern_traveler_answer", ending_state="tavern_traveler_continue")
def condition():
    if troop_gold_001 >= 100:
        troop_gold_001 = store_troop_gold(trp.player)
tavern_traveler_answer_tavern_traveler_continue.conditionBlock = condition
def code():
    party_slot_001 = party_get_slot(_g_encountered_party,97)
    update_faction_traveler_notes(party_slot_001)
    change_screen_notes(2,party_slot_001)
tavern_traveler_answer_tavern_traveler_continue.codeBlock = code


tavern_traveler_answer_close_window = Dialog("anyone|plyr", "Sorry friend. I am not interested.", starting_state="tavern_traveler_answer", ending_state="close_window")


tavern_traveler_continue_close_window = Dialog("anyone", "Well, that's all I can tell you. Good bye.", starting_state="tavern_traveler_continue", ending_state="close_window")
def code():
    troop_remove_gold(trp.player,100)
tavern_traveler_continue_close_window.codeBlock = code


start_bookseller_talk = Dialog("anyone", "Good day {sir/madam}, will you be looking at my books?", starting_state="start", ending_state="bookseller_talk")
def condition():
    if is_between(_g_talk_troop,trp.tavern_bookseller_1,trp.tavern_minstrel_1):
        pass
start_bookseller_talk.conditionBlock = condition


bookseller_talk_bookseller_buy = Dialog("anyone|plyr", "Yes. Show me what you have for sale.", starting_state="bookseller_talk", ending_state="bookseller_buy")


bookseller_buy_book_trade_completed = Dialog("anyone", "Of course {sir/madam}.", starting_state="bookseller_buy", ending_state="book_trade_completed")
def code():
    change_screen_trade()
bookseller_buy_book_trade_completed.codeBlock = code


book_trade_completed_bookseller_talk = Dialog("anyone", "Anything else?", starting_state="book_trade_completed", ending_state="bookseller_talk")


bookseller_talk_close_window = Dialog("anyone|plyr", "Nothing. Thanks.", starting_state="bookseller_talk", ending_state="close_window")


start_minstrel_1 = Dialog("anyone", "Greetings to you, {most noble sir/most noble lady}.", starting_state="start", ending_state="minstrel_1")
def condition():
    if is_between(_g_talk_troop,trp.tavern_minstrel_1,trp.kingdom_heroes_including_player_begin):
        pass
start_minstrel_1.conditionBlock = condition


minstrel_1_minstrel_job_description = Dialog("anyone|plyr", "What is it you do?", starting_state="minstrel_1", ending_state="minstrel_job_description")
def condition():
    if _minstrels_introduced == 0:
        pass
minstrel_1_minstrel_job_description.conditionBlock = condition
def code():
    _minstrels_introduced = 1
minstrel_1_minstrel_job_description.codeBlock = code


minstrel_1_minstrel_courtship_questions = Dialog("anyone|plyr", "I have some questions about courtship in Calradia", starting_state="minstrel_1", ending_state="minstrel_courtship_questions")
def condition():
    if _minstrels_introduced == 1:
        pass
minstrel_1_minstrel_courtship_questions.conditionBlock = condition


minstrel_1_minstrel_courtship_poem = Dialog("anyone|plyr", "Can you teach me any poems?", starting_state="minstrel_1", ending_state="minstrel_courtship_poem")
def condition():
    if _minstrels_introduced == 1:
        pass
minstrel_1_minstrel_courtship_poem.conditionBlock = condition


minstrel_courtship_poem_minstrel_courtship_poem_teach = Dialog("anyone", "I can teach you the poem, 'The Storming of the Castle of Love.' It is short enough to be easily learned. It is an allegoric poem, replete with symbols and metaphor. It describes how a brave but rough warrior wins the heart of his lady by learning the virtues of chivalry, becoming a true and noble knight. Its theme -- that the role of a woman is to inspire but also civilize a man -- is appreciated by some noble ladies, but not all.", starting_state="minstrel_courtship_poem", ending_state="minstrel_courtship_poem_teach")
def condition():
    if _allegoric_poem_recitations == 0 and _g_talk_troop == trp.tavern_minstrel_1 or _g_talk_troop == trp.tavern_minstrel_5:
        pass
minstrel_courtship_poem_minstrel_courtship_poem_teach.conditionBlock = condition
def code():
    _poem_selected = 5
minstrel_courtship_poem_minstrel_courtship_poem_teach.codeBlock = code


minstrel_courtship_poem_minstrel_courtship_poem_teach_1 = Dialog("anyone", "I can teach you the poem, 'The Heart's Desire.' It is a lyrical poem, which can be interpreted either erotically or spiritually. The lover realizes the majesty of the divine by gazing upon the body of his beloved. I believe that it appeals to women of a certain romantic temperament, but you risk scandalizing or boring others.", starting_state="minstrel_courtship_poem", ending_state="minstrel_courtship_poem_teach")
def condition():
    if _mystic_poem_recitations == 0 and _g_talk_troop == trp.tavern_minstrel_3 or _g_talk_troop == trp.tavern_minstrel_1:
        pass
minstrel_courtship_poem_minstrel_courtship_poem_teach_1.conditionBlock = condition
def code():
    _poem_selected = 4
minstrel_courtship_poem_minstrel_courtship_poem_teach_1.codeBlock = code


minstrel_courtship_poem_minstrel_courtship_poem_teach_2 = Dialog("anyone", "I can teach you the tale of Kais and Layala. It is a sad and simple story -- the shepherd boy Kais and the nobleman's daughter Layala love each other, but they can never marry. The poem is Kais' lament as he wanders alone, unwilling to forget his true love, driving himself mad with longing. Some ladies melt at the sweetness of his sorrows; others glaze over at his self-pity.", starting_state="minstrel_courtship_poem", ending_state="minstrel_courtship_poem_teach")
def condition():
    if _tragic_poem_recitations == 0 and _g_talk_troop == trp.tavern_minstrel_3 or _g_talk_troop == trp.tavern_minstrel_2:
        pass
minstrel_courtship_poem_minstrel_courtship_poem_teach_2.conditionBlock = condition
def code():
    _poem_selected = 1
minstrel_courtship_poem_minstrel_courtship_poem_teach_2.codeBlock = code


minstrel_courtship_poem_minstrel_courtship_poem_teach_3 = Dialog("anyone", "I can teach you part of the saga of Helgerad and Kara. It is a heroic tale, full of blood and battle. The shieldmaiden Kara chooses the warrior Helgered as her lover, as he is the only man who can defeat her in combat. Her father, who pledged her to another, comes with his sons and his huscarls to kill Helgered. They fight, and Helgered and Kara slaughter the entire host except for Kara's beloved younger brother -- who, alas, grows up to avenge his father by slaying Helgered. The depiction of warrior and shieldmaiden as equals will appeal to some women, but a mail-wearing, blood-spattered heroine will shock and repulse others.", starting_state="minstrel_courtship_poem", ending_state="minstrel_courtship_poem_teach")
def condition():
    if _heroic_poem_recitations == 0 and _g_talk_troop == trp.tavern_minstrel_4 or _g_talk_troop == trp.tavern_minstrel_2:
        pass
minstrel_courtship_poem_minstrel_courtship_poem_teach_3.conditionBlock = condition
def code():
    _poem_selected = 2
minstrel_courtship_poem_minstrel_courtship_poem_teach_3.codeBlock = code


minstrel_courtship_poem_minstrel_courtship_poem_teach_4 = Dialog("anyone", "I can teach you the poem, 'An Argument in the Garden.' It is a comic poem, which satirizes the conventions of courtly love. A lover steals into a garden in Veluca, and plies her with lots of witty lines to persuade his lover to submit to his embraces. She shoots down all of his advances one by one, then when he is downcast, she takes him in her arms and tells him that she wanted him all along, except on her terms, not his. A lady with a sense of humor may find it amusing, but others might feel that they are the ones who are being mocked.", starting_state="minstrel_courtship_poem", ending_state="minstrel_courtship_poem_teach")
def condition():
    if _comic_poem_recitations == 0 and _g_talk_troop == trp.tavern_minstrel_5 or _g_talk_troop == trp.tavern_minstrel_4:
        pass
minstrel_courtship_poem_minstrel_courtship_poem_teach_4.conditionBlock = condition
def code():
    _poem_selected = 3
minstrel_courtship_poem_minstrel_courtship_poem_teach_4.codeBlock = code


minstrel_courtship_poem_teach_minstrel_courtship_poem_teach_2 = Dialog("anyone", "To teach it to you, I will need some hours of your time -- and, of course, a small fee for my services. About 300 denars would suffice.", starting_state="minstrel_courtship_poem_teach", ending_state="minstrel_courtship_poem_teach_2")


minstrel_courtship_poem_minstrel_pretalk = Dialog("anyone", "I believe you already know the poems I am best equipped to teach.", starting_state="minstrel_courtship_poem", ending_state="minstrel_pretalk")


minstrel_courtship_poem_teach_2_minstrel_courtship_poem_teach_3 = Dialog("anyone|plyr", "Yes -- teach me that one", starting_state="minstrel_courtship_poem_teach_2", ending_state="minstrel_courtship_poem_teach_3")
def condition():
    if troop_gold_001 >= 300:
        troop_gold_001 = store_troop_gold(trp.player)
minstrel_courtship_poem_teach_2_minstrel_courtship_poem_teach_3.conditionBlock = condition


minstrel_courtship_poem_teach_2_minstrel_pretalk = Dialog("anyone|plyr", "Never mind", starting_state="minstrel_courtship_poem_teach_2", ending_state="minstrel_pretalk")


minstrel_courtship_poem_teach_3_minstrel_courtship_poem_teach_4 = Dialog("anyone", "Very well -- repeat after me:^   I deflected her skeptical questioning darts^   with armor made of purest devotion^   purged in the forge of my heart^   from the slag of any baser emotion", starting_state="minstrel_courtship_poem_teach_3", ending_state="minstrel_courtship_poem_teach_4")
def condition():
    if _poem_selected == 5:
        pass
minstrel_courtship_poem_teach_3_minstrel_courtship_poem_teach_4.conditionBlock = condition


minstrel_courtship_poem_teach_3_minstrel_courtship_poem_teach_4_1 = Dialog("anyone", "Very well -- repeat after me:^   You are the first and the last^   the outer and the inner^   When I drink from the cup of love^   I escape the tread of time^   A moment in solitude with you^   Would have no beginning and no end", starting_state="minstrel_courtship_poem_teach_3", ending_state="minstrel_courtship_poem_teach_4")
def condition():
    if _poem_selected == 4:
        pass
minstrel_courtship_poem_teach_3_minstrel_courtship_poem_teach_4_1.conditionBlock = condition


minstrel_courtship_poem_teach_3_minstrel_courtship_poem_teach_4_2 = Dialog("anyone", "Very well -- repeat after me:^  The wind that blows the dry steppe dust^  Stirs the curtains in your tower^  The moon that lights my drunken path home^  Looks on you sleeping in your bower^  If I cried out to the wind^  Could it carry a message from my lips?^  If I wept before the moon^  Would it grant me just a glimpse?", starting_state="minstrel_courtship_poem_teach_3", ending_state="minstrel_courtship_poem_teach_4")
def condition():
    if _poem_selected == 1:
        pass
minstrel_courtship_poem_teach_3_minstrel_courtship_poem_teach_4_2.conditionBlock = condition


minstrel_courtship_poem_teach_3_minstrel_courtship_poem_teach_4_3 = Dialog("anyone", "Very well -- repeat after me:^   A light pierced the gloom over Wercheg cliffs...^   Where charge of surf broke on shieldwall of shore^   Grey-helmed and grey-cloaked the maiden stood^   On wave-steed's prow, the sailcloth snapping^   Over din of oars, of timbers cracking^   She cried out to her hearth-brothers, arrayed for war", starting_state="minstrel_courtship_poem_teach_3", ending_state="minstrel_courtship_poem_teach_4")
def condition():
    if _poem_selected == 2:
        pass
minstrel_courtship_poem_teach_3_minstrel_courtship_poem_teach_4_3.conditionBlock = condition


minstrel_courtship_poem_teach_3_minstrel_courtship_poem_teach_4_4 = Dialog("anyone", "Very well -- repeat after me:^All the silks of Veluca, all the furs of Khudan^Would buy you not the briefest kiss^What I bestow, I bestow for love^And the sake of my own happiness^But brought you a gift? Let us see! Let us see!^Or should tell my father how you came to see me?", starting_state="minstrel_courtship_poem_teach_3", ending_state="minstrel_courtship_poem_teach_4")
def condition():
    if _poem_selected == 3:
        pass
minstrel_courtship_poem_teach_3_minstrel_courtship_poem_teach_4_4.conditionBlock = condition


minstrel_courtship_poem_teach_4_minstrel_learn_poem_continue = Dialog("anyone|plyr", "'I deflected her skeptical questioning darts...'", starting_state="minstrel_courtship_poem_teach_4", ending_state="minstrel_learn_poem_continue")
def condition():
    if _poem_selected == 5:
        pass
minstrel_courtship_poem_teach_4_minstrel_learn_poem_continue.conditionBlock = condition
def code():
    troop_remove_gold(trp.player,300)
    _allegoric_poem_recitations += 1
minstrel_courtship_poem_teach_4_minstrel_learn_poem_continue.codeBlock = code


minstrel_courtship_poem_teach_4_minstrel_learn_poem_continue_1 = Dialog("anyone|plyr", "'You are the first and the last..'", starting_state="minstrel_courtship_poem_teach_4", ending_state="minstrel_learn_poem_continue")
def condition():
    if _poem_selected == 4:
        pass
minstrel_courtship_poem_teach_4_minstrel_learn_poem_continue_1.conditionBlock = condition
def code():
    troop_remove_gold(trp.player,300)
    _mystic_poem_recitations += 1
minstrel_courtship_poem_teach_4_minstrel_learn_poem_continue_1.codeBlock = code


minstrel_courtship_poem_teach_4_minstrel_learn_poem_continue_2 = Dialog("anyone|plyr", "'The wind that blows the dry steppe dust...'", starting_state="minstrel_courtship_poem_teach_4", ending_state="minstrel_learn_poem_continue")
def condition():
    if _poem_selected == 1:
        pass
minstrel_courtship_poem_teach_4_minstrel_learn_poem_continue_2.conditionBlock = condition
def code():
    troop_remove_gold(trp.player,300)
    _tragic_poem_recitations += 1
minstrel_courtship_poem_teach_4_minstrel_learn_poem_continue_2.codeBlock = code


minstrel_courtship_poem_teach_4_minstrel_learn_poem_continue_3 = Dialog("anyone|plyr", "'A light pierced the gloom over Wercheg cliffs...'", starting_state="minstrel_courtship_poem_teach_4", ending_state="minstrel_learn_poem_continue")
def condition():
    if _poem_selected == 2:
        pass
minstrel_courtship_poem_teach_4_minstrel_learn_poem_continue_3.conditionBlock = condition
def code():
    troop_remove_gold(trp.player,300)
    _heroic_poem_recitations += 1
minstrel_courtship_poem_teach_4_minstrel_learn_poem_continue_3.codeBlock = code


minstrel_courtship_poem_teach_4_minstrel_learn_poem_continue_4 = Dialog("anyone|plyr", "'All the silks of Veluca...'", starting_state="minstrel_courtship_poem_teach_4", ending_state="minstrel_learn_poem_continue")
def condition():
    if _poem_selected == 3:
        pass
minstrel_courtship_poem_teach_4_minstrel_learn_poem_continue_4.conditionBlock = condition
def code():
    troop_remove_gold(trp.player,300)
    _comic_poem_recitations += 1
minstrel_courtship_poem_teach_4_minstrel_learn_poem_continue_4.codeBlock = code


minstrel_courtship_poem_teach_4_minstrel_courtship_poem_teach_reject = Dialog("anyone|plyr", "Pshaw... What kind of doggerel is that?", starting_state="minstrel_courtship_poem_teach_4", ending_state="minstrel_courtship_poem_teach_reject")


minstrel_courtship_poem_teach_reject_minstrel_pretalk = Dialog("anyone", "Very well. If the poem is not to your taste, then keep your money. But remember -- with poets and with lovers, what is important is not what pleases you. What is important is what your pleases your audience. If you wish to learn the poem, I am still willing to teach.", starting_state="minstrel_courtship_poem_teach_reject", ending_state="minstrel_pretalk")


minstrel_learn_poem_continue_close_window = Dialog("anyone", "Very good -- but there are many stanzas to go. Now, listen closely...", starting_state="minstrel_learn_poem_continue", ending_state="close_window")
def code():
    if True:
        if _poem_selected == 4:
            set_achievement_stat(38,0,1)
        elif _poem_selected == 1:
            set_achievement_stat(38,1,1)
        elif _poem_selected == 2:
            set_achievement_stat(38,2,1)
        elif _poem_selected == 3:
            set_achievement_stat(38,3,1)
        elif _poem_selected == 5:
            set_achievement_stat(38,4,1)
        #end
        var001 = 0
        for var002 in range(0, 5):
            var003 = get_achievement_stat(38,var002)
            if var003 == 1:
                var001 += 1
            #end
        #end
        if var001 >= 3:
            unlock_achievement(38)
        #end
    #end
    _g_leave_town = 1
    rest_for_hours(2,2,0)
    finish_mission()
minstrel_learn_poem_continue_close_window.codeBlock = code


minstrel_1_minstrel_gossip = Dialog("anyone|plyr", "Can you tell me anything about the eligible maidens in this realm?", starting_state="minstrel_1", ending_state="minstrel_gossip")
def condition():
    if _minstrels_introduced == 1:
        pass
minstrel_1_minstrel_gossip.conditionBlock = condition


minstrel_gossip_minstrel_gossip_select = Dialog("anyone", "About whom did you wish to know?", starting_state="minstrel_gossip", ending_state="minstrel_gossip_select")


minstrel_gossip_select_minstrel_gossip_maiden_selected_2 = Dialog("anyone|plyr", "Just tell me the latest piece of gossip", starting_state="minstrel_gossip_select", ending_state="minstrel_gossip_maiden_selected_2")
def code():
    _lady_selected = -1
    _romantic_rival = -1
    for slot_no_001 in range(0, _num_log_entries):
        troop_slot_002 = troop_get_slot(trp.log_array_actor,slot_no_001)
        if is_between(troop_slot_002,trp.knight_1_1_wife,trp.heroes_end) and not troop_slot_eq(trp.player,30,troop_slot_002):
            troop_slot_003 = troop_get_slot(trp.log_array_entry_type,slot_no_001)
            if is_between(troop_slot_003,50,65):
                troop_faction_004 = store_faction_of_troop(troop_slot_002)
                party_faction_005 = store_faction_of_party(_g_encountered_party)
                if troop_faction_004 == party_faction_005:
                    _lady_selected = troop_slot_002
                    if _cheat_mode == 1:
                        s4 = str_store_troop_name(troop_slot_002)
                        reg4 = troop_get_slot(trp.log_array_entry_type,slot_no_001)
                        reg5 = _num_log_entries
                        print(gstr.log_entry_type_reg4_for_s4_total_entries_reg5)
                    #end
                #end
            #end
        #end
    #end
minstrel_gossip_select_minstrel_gossip_maiden_selected_2.codeBlock = code


minstrel_gossip_select_minstrel_gossip_maiden_selected = Dialog("anyone|repeat_for_troops|plyr", "{s10}", starting_state="minstrel_gossip_select", ending_state="minstrel_gossip_maiden_selected")
def condition():
    _temp = store_repeat_object()
    if troop_slot_eq(_temp,2,6) and troop_slot_eq(_temp,30,-1):
        troop_faction_001 = store_faction_of_troop(_temp)
        party_faction_002 = store_faction_of_party(_g_encountered_party)
        if troop_faction_001 == party_faction_002:
            s10 = str_store_troop_name(_temp)
minstrel_gossip_select_minstrel_gossip_maiden_selected.conditionBlock = condition
def code():
    _lady_selected = store_repeat_object()
minstrel_gossip_select_minstrel_gossip_maiden_selected.codeBlock = code


minstrel_gossip_select_minstrel_pretalk = Dialog("anyone|plyr", "Never mind", starting_state="minstrel_gossip_select", ending_state="minstrel_pretalk")


minstrel_gossip_maiden_selected_minstrel_gossip_maiden_selected_2 = Dialog("anyone", "{s16}", starting_state="minstrel_gossip_maiden_selected", ending_state="minstrel_gossip_maiden_selected_2")
def condition():
    if _cheat_mode == 1:
        reg3 = _lady_selected
        print("@{!}DEBUG: Gossip for troop {reg3}")
        if reg3 > -1:
            print("@{!}DEBUG: {s3}")
        #end
    #end
    if _lady_selected > -1:
        s9 = str_store_troop_name(_lady_selected)
        s10 = str_store_string(gstr.error__reputation_type_for_s9_not_within_range)
        if troop_slot_eq(_lady_selected,52,21):
            s16 = str_store_string(gstr.they_say_that_s9_is_a_most_conventional_maiden__devoted_to_her_family_of_a_kind_and_gentle_temperament_a_lady_in_all_her_way)
        elif troop_slot_eq(_lady_selected,52,23):
            s16 = str_store_string(gstr.they_say_that_s9_is_a_bit_of_a_romantic_a_dreamer__of_a_gentle_temperament_yet_unpredictable_she_is_likely_to_be_led_by_her_passions_and_will_be_trouble_for_her_family_ill_wager)
        elif troop_slot_eq(_lady_selected,52,24):
            s16 = str_store_string(gstr.they_say_that_s9_is_determined_to_marry_well_and_make_her_mark_in_the_world_she_may_be_a_tremendous_asset_for_her_husband__provided_he_can_satisfy_her_ambition)
        elif troop_slot_eq(_lady_selected,52,22):
            s16 = str_store_string(gstr.they_say_that_s9_loves_to_hunt_and_ride_maybe_she_wishes_she_were_a_man_whoever_she_marries_will_have_a_tough_job_keeping_the_upper_hand_i_would_say)
        elif troop_slot_eq(_lady_selected,52,25):
            s16 = str_store_string(gstr.they_say_that_s9_is_a_lady_of_the_highest_moral_standards_very_admirable_very_admirable__and_very_hard_to_please_ill_warrant)
        #end
        add_rumor_string_to_troop_notes(_lady_selected,-1,16)
    #end
minstrel_gossip_maiden_selected_minstrel_gossip_maiden_selected_2.conditionBlock = condition


minstrel_gossip_maiden_selected_2_minstrel_postgossip = Dialog("anyone", "She is married to you, of course! Clearly, no one would dream that she would do anything to engender gossip.", starting_state="minstrel_gossip_maiden_selected_2", ending_state="minstrel_postgossip")
def condition():
    if troop_slot_eq(trp.player,30,_lady_selected) and is_between(_lady_selected,trp.knight_1_1_wife,trp.heroes_end):
        pass
minstrel_gossip_maiden_selected_2_minstrel_postgossip.conditionBlock = condition


minstrel_gossip_maiden_selected_2_minstrel_postgossip_1 = Dialog("anyone", "{s12}.", starting_state="minstrel_gossip_maiden_selected_2", ending_state="minstrel_postgossip")
def condition():
    if _lady_selected > -1:
        troop_id_001 = _lady_selected
        if not troop_slot_ge(troop_id_001,30,trp.npc1):
            troop_slot_002 = troop_get_slot(troop_id_001,34)
            if is_between(troop_slot_002,trp.npc1,trp.knight_1_1_wife):
                s9 = str_store_troop_name(troop_id_001)
                s11 = str_store_troop_name(troop_slot_002)
                s12 = str_store_string(gstr.s9_is_now_betrothed_to_s11_soon_we_believe_there_shall_be_a_wedding)
                if troop_slot_eq(troop_id_001,5,2):
                    _romantic_rival = troop_slot_002
                #end
            #end
        #end
    #end
minstrel_gossip_maiden_selected_2_minstrel_postgossip_1.conditionBlock = condition


minstrel_gossip_maiden_selected_2_minstrel_postgossip_2 = Dialog("anyone", "{s12}.", starting_state="minstrel_gossip_maiden_selected_2", ending_state="minstrel_postgossip")
def condition():
    if is_between(_lady_selected,trp.knight_1_1_wife,trp.heroes_end):
        s12 = str_store_string(gstr.i_have_not_heard_any_news_about_her)
        s9 = str_store_troop_name(_lady_selected)
        if _cheat_mode == 1:
            print(gstr.searching_for_rumors_for_s9)
        #end
        _romantic_rival = -1
        var001 = 0
        for slot_no_002 in range(0, _num_log_entries):
            if troop_slot_eq(trp.log_array_actor,slot_no_002,_lady_selected):
                troop_slot_003 = troop_get_slot(trp.log_array_troop_object,slot_no_002)
                str_clear(11)
                if is_between(troop_slot_003,0,trp.heroes_end):
                    s11 = str_store_troop_name(troop_slot_003)
                #end
            #end
            troop_slot_004 = troop_get_slot(trp.log_array_center_object,slot_no_002)
            str_clear(10)
            if is_between(troop_slot_004,0,trp.heroes_end):
                s10 = str_store_troop_name(troop_slot_004)
            #end
            troop_id_005 = _lady_selected
            if troop_slot_eq(trp.log_array_entry_type,slot_no_002,51):
                s12 = str_store_string(gstr.they_say_that_s9_has_shown_favor_to_s11_perhaps_it_will_not_be_long_until_they_are_betrothed__if_her_family_permits)
                var001 = troop_id_005
                var006 = troop_slot_003
                if troop_slot_eq(troop_id_005,5,2) and troop_slot_eq(troop_slot_003,35,troop_id_005) or troop_slot_eq(troop_slot_003,36,troop_id_005) or troop_slot_eq(troop_slot_003,37,troop_id_005):
                    _romantic_rival = troop_slot_003
                #end
            elif troop_slot_eq(trp.log_array_entry_type,slot_no_002,53):
                s12 = str_store_string(gstr.they_say_that_s9_has_been_forced_by_her_family_into_betrothal_with_s11)
                var001 = troop_id_005
                var006 = troop_slot_003
                if troop_slot_eq(troop_id_005,5,2):
                    _romantic_rival = troop_slot_003
                #end
            elif troop_slot_eq(trp.log_array_entry_type,slot_no_002,52):
                s12 = str_store_string(gstr.they_say_that_s9_has_agreed_to_s11s_suit_and_the_two_are_now_betrothed)
                var001 = troop_id_005
                var006 = troop_slot_003
                if troop_slot_eq(troop_id_005,5,2) and troop_slot_eq(troop_slot_003,35,troop_id_005) or troop_slot_eq(troop_slot_003,36,troop_id_005) or troop_slot_eq(troop_slot_003,37,troop_id_005):
                    _romantic_rival = troop_slot_003
                #end
            elif troop_slot_eq(trp.log_array_entry_type,slot_no_002,59):
                s12 = str_store_string(gstr.they_say_that_s9_under_pressure_from_her_family_has_agreed_to_betrothal_with_s11)
                var001 = troop_id_005
                var006 = troop_slot_003
                if troop_slot_eq(troop_id_005,5,2) and troop_slot_eq(troop_slot_003,35,troop_id_005) or troop_slot_eq(troop_slot_003,36,troop_id_005) or troop_slot_eq(troop_slot_003,37,troop_id_005):
                    _romantic_rival = troop_slot_003
                #end
            elif troop_slot_eq(trp.log_array_entry_type,slot_no_002,54):
                s12 = str_store_string(gstr.they_say_that_s9_has_refused_s11s_suit)
                var001 = troop_id_005
                var006 = troop_slot_003
            elif troop_slot_eq(trp.log_array_entry_type,slot_no_002,58):
                s12 = str_store_string(gstr.they_say_that_s11_has_tired_of_pursuing_s9)
                var001 = troop_id_005
                var006 = troop_slot_003
            elif troop_slot_eq(trp.log_array_entry_type,slot_no_002,55):
                s12 = str_store_string(gstr.they_say_that_s9s_family_has_forced_her_to_renounce_s11_whom_she_much_loved)
                var001 = troop_id_005
                var006 = troop_slot_003
            elif troop_slot_eq(trp.log_array_entry_type,slot_no_002,57):
                s12 = str_store_string(gstr.they_say_that_s9_has_run_away_with_s11_causing_her_family_much_grievance)
                var001 = troop_id_005
                var006 = troop_slot_003
            elif troop_slot_eq(trp.log_array_entry_type,slot_no_002,56):
                s12 = str_store_string(gstr.they_say_that_s9_and_s11_have_wed)
                var001 = troop_id_005
                var006 = troop_slot_003
            else:
                troop_slot_003 = troop_get_slot(troop_id_005,38)
                if is_between(troop_slot_003,trp.npc1,trp.knight_1_1_wife):
                    s11 = str_store_troop_name(troop_slot_003)
                    s12 = str_store_string(gstr.they_say_that_s9_was_recently_visited_by_s11_who_knows_where_that_might_lead)
                    var001 = troop_id_005
                    var006 = troop_slot_003
                    if troop_slot_eq(troop_id_005,5,2) and troop_slot_eq(troop_slot_003,35,troop_id_005) or troop_slot_eq(troop_slot_003,36,troop_id_005) or troop_slot_eq(troop_slot_003,37,troop_id_005):
                        _romantic_rival = troop_slot_003
                    #end
                #end
            #end
        #end
        if var006 != _romantic_rival:
            _romantic_rival = -1
        #end
        if var001 > 0:
            add_rumor_string_to_troop_notes(var001,var006,12)
        #end
    elif _lady_selected == -1:
        s12 = str_store_string(gstr.there_is_not_much_to_tell_but_it_is_still_early_in_the_season)
    else:
        reg4 = _lady_selected
        s9 = str_store_troop_name(_lady_selected)
        s12 = str_store_string(gstr.error_lady_selected_equals_s9)
    #end
minstrel_gossip_maiden_selected_2_minstrel_postgossip_2.conditionBlock = condition


minstrel_postgossip_minstrel_pretalk = Dialog("anyone|plyr", "Very interesting -- but let us speak of something else.", starting_state="minstrel_postgossip", ending_state="minstrel_pretalk")


minstrel_postgossip_minstrel_gossip = Dialog("anyone|plyr", "Very interesting -- is there any more news?", starting_state="minstrel_postgossip", ending_state="minstrel_gossip")


minstrel_postgossip_minstrel_duel_confirm = Dialog("anyone|plyr", "What? I'll make that miscreant face my sword", starting_state="minstrel_postgossip", ending_state="minstrel_duel_confirm")
def condition():
    if is_between(_romantic_rival,trp.npc1,trp.knight_1_1_wife) and not check_quest_active(qst.duel_courtship_rival) and not troop_slot_ge(trp.player,30,trp.knight_1_1_wife):
        pass
minstrel_postgossip_minstrel_duel_confirm.conditionBlock = condition


minstrel_duel_confirm_minstrel_duel_confirm_2 = Dialog("anyone", "Do you mean that? {s11} will be honor-bound to fight you, but challenging a lord to duel over a woman is seen as a bit hot-headed, even in this warlike age.", starting_state="minstrel_duel_confirm", ending_state="minstrel_duel_confirm_2")
def condition():
    s11 = str_store_troop_name(_romantic_rival)
minstrel_duel_confirm_minstrel_duel_confirm_2.conditionBlock = condition


minstrel_duel_confirm_2_minstrel_duel_issued = Dialog("anyone|plyr", "Yes -- I intend to force {s11} to relinquish his suit of {s12}", starting_state="minstrel_duel_confirm_2", ending_state="minstrel_duel_issued")
def condition():
    s11 = str_store_troop_name(_romantic_rival)
    s12 = str_store_troop_name(_lady_selected)
minstrel_duel_confirm_2_minstrel_duel_issued.conditionBlock = condition


minstrel_duel_confirm_2_minstrel_pretalk = Dialog("anyone|plyr", "No -- I let my passions run away with me, there", starting_state="minstrel_duel_confirm_2", ending_state="minstrel_pretalk")


minstrel_duel_issued_minstrel_pretalk = Dialog("anyone", "As you wish. I'll spead the word of your intentions, so that {s13} does not try to back out...", starting_state="minstrel_duel_issued", ending_state="minstrel_pretalk")
def code():
    s11 = str_store_troop_name(_lady_selected)
    s13 = str_store_troop_name_link(_romantic_rival)
    s2 = str_store_string(gstr.you_intend_to_challenge_s13_to_force_him_to_relinquish_his_suit_of_s11)
    setup_quest_text(qst.duel_courtship_rival)
    start_quest(qst.duel_courtship_rival,_lady_selected)
    quest_set_slot(qst.duel_courtship_rival,6,_lady_selected)
    quest_set_slot(qst.duel_courtship_rival,2,_romantic_rival)
    quest_set_slot(qst.duel_courtship_rival,21,400)
    quest_set_slot(qst.duel_courtship_rival,23,60)
    quest_set_slot(qst.duel_courtship_rival,11,0)
minstrel_duel_issued_minstrel_pretalk.codeBlock = code


minstrel_1_minstrel_courtship_locations = Dialog("anyone|plyr", "Do you know of any ongoing feasts?", starting_state="minstrel_1", ending_state="minstrel_courtship_locations")
def condition():
    if _minstrels_introduced == 1:
        pass
minstrel_1_minstrel_courtship_locations.conditionBlock = condition


minstrel_courtship_locations_minstrel_pretalk = Dialog("anyone", "{s12}", starting_state="minstrel_courtship_locations", ending_state="minstrel_pretalk")
def condition():
    str_clear(12)
    var001 = 0
    for fac_002 in range(fac.player_supporters_faction, fac.kingdoms_end):
        if faction_slot_eq(fac_002,4,6):
            var001 = 1
            faction_slot_003 = faction_get_slot(fac_002,5)
            s4 = str_store_party_name(faction_slot_003)
            s3 = str_store_faction_name(fac_002)
            cur_hours_004 = store_current_hours()
            var005 = cur_hours_004 - 72
            faction_slot_006 = faction_get_slot(fac_002,94)
            var005 += faction_slot_006
            if var005 > 48:
                s12 = str_store_string(gstr.s12there_is_a_feast_of_the_s3_in_progress_at_s4_but_it_has_been_going_on_for_a_couple_of_days_and_is_about_to_end_)
            elif var005 > 24:
                s12 = str_store_string(gstr.s12there_is_a_feast_of_the_s3_in_progress_at_s4_which_should_last_for_at_least_another_day_)
            else:
                s12 = str_store_string(gstr.s12there_is_a_feast_of_the_s3_in_progress_at_s4_which_has_only_just_begun_)
            #end
        #end
    #end
    if var001 == 0:
        s12 = str_store_string(gstr.not_at_this_time_no)
    else:
        s12 = str_store_string(gstr.s12the_great_lords_bring_their_daughters_and_sisters_to_these_occasions_to_see_and_be_seen_so_they_represent_an_excellent_opportunity_to_make_a_ladys_acquaintance)
    #end
minstrel_courtship_locations_minstrel_pretalk.conditionBlock = condition


minstrel_1_close_window = Dialog("anyone|plyr", "Good-bye.", starting_state="minstrel_1", ending_state="close_window")


minstrel_courtship_questions_minstrel_courtship_questions_2 = Dialog("anyone", "What do you wish to know?", starting_state="minstrel_courtship_questions", ending_state="minstrel_courtship_questions_2")


minstrel_courtship_prequestions_minstrel_courtship_questions_2 = Dialog("anyone", "Can I answer any other questions for you?", starting_state="minstrel_courtship_prequestions", ending_state="minstrel_courtship_questions_2")


minstrel_courtship_questions_2_minstrel_player_role = Dialog("anyone|plyr", "Is there a place for me in the game of love?", starting_state="minstrel_courtship_questions_2", ending_state="minstrel_player_role")
def condition():
    if _minstrels_discussed_love == 1:
        pass
minstrel_courtship_questions_2_minstrel_player_role.conditionBlock = condition
def code():
    _minstrels_discussed_player_role = 1
minstrel_courtship_questions_2_minstrel_player_role.codeBlock = code


minstrel_courtship_questions_2_minstrel_player_advice_meet = Dialog("anyone|plyr", "How would a suitor meet a lady?", starting_state="minstrel_courtship_questions_2", ending_state="minstrel_player_advice_meet")
def condition():
    if _minstrels_discussed_player_role == 1:
        pass
minstrel_courtship_questions_2_minstrel_player_advice_meet.conditionBlock = condition
def code():
    _minstrels_discussed_meetings = 1
minstrel_courtship_questions_2_minstrel_player_advice_meet.codeBlock = code


minstrel_courtship_questions_2_minstrel_player_advice_woo = Dialog("anyone|plyr", "Having met a lady, how would the suitor woo her?", starting_state="minstrel_courtship_questions_2", ending_state="minstrel_player_advice_woo")
def condition():
    if _minstrels_discussed_meetings == 1:
        pass
minstrel_courtship_questions_2_minstrel_player_advice_woo.conditionBlock = condition


minstrel_courtship_questions_2_minstrel_nobles = Dialog("anyone|plyr", "Tell me about marriage and love among the nobility of Calradia", starting_state="minstrel_courtship_questions_2", ending_state="minstrel_nobles")
def code():
    _minstrels_discussed_love = 1
minstrel_courtship_questions_2_minstrel_nobles.codeBlock = code


minstrel_nobles_minstrel_nobles_2 = Dialog("anyone", "Nobles are an odd lot. In Calradia, a daughter is a political asset, to be given away to a lord with whom her father wishes to make an alliance. Yet the great families of this land idealize pure love between man and woman, and I have seen many a hardened warrior weep copious tears at the doomed ardour of Sahira and Janun in the songs -- even as he made plans to break his own daughter's heart.", starting_state="minstrel_nobles", ending_state="minstrel_nobles_2")


minstrel_nobles_2_minstrel_nobles_3 = Dialog("anyone", "Fathers differ, of course. Some Calradian nobles will let their daughters choose a husband who pleases them. Others, however, feel that to allow their daughters any choice at all would be to diminish their own authority, and insist on imposing a groom whether she likes it or not.", starting_state="minstrel_nobles_2", ending_state="minstrel_nobles_3")


minstrel_nobles_3_minstrel_prequestions = Dialog("anyone", "But the majority will steer a middle course -- they will want to make the final decision about a groom, but will weigh their daughter's preferences heavily. Among other factors, a happy marriage is more likely to produce heirs. So, there is a place for courtship, and for the use of skill and passion to win a lady's heart.", starting_state="minstrel_nobles_3", ending_state="minstrel_prequestions")


minstrel_courtship_questions_2_minstrel_daughter_father = Dialog("anyone|plyr", "What if a lady and her father disagree about a suitor?", starting_state="minstrel_courtship_questions_2", ending_state="minstrel_daughter_father")
def condition():
    if _minstrels_discussed_love == 1:
        pass
minstrel_courtship_questions_2_minstrel_daughter_father.conditionBlock = condition


minstrel_daughter_father_minstrel_daughter_father_2 = Dialog("anyone", "It happens sometimes that a bride elopes. This is a major blow to the father's prestige, leading to lasting enmities. Indeed, it is possible that a war may be fought over a woman. Now, that is a fine topic for a song.", starting_state="minstrel_daughter_father", ending_state="minstrel_daughter_father_2")


minstrel_daughter_father_2_minstrel_prequestions = Dialog("anyone", "In the end, however, most brides will submit to their parents' choice. A noblewoman's family is everything to her, and few are brave enough to risk its disapproval for the sake of man she barely knows. She may pine for her lover, but still accept the groom -- and without tragic love, what would we have to sing about?", starting_state="minstrel_daughter_father_2", ending_state="minstrel_prequestions")


minstrel_player_role_minstrel_player_role_2 = Dialog("anyone", "Of course! Calradian lords make a great deal of lineage, but in the end, lands and money speak louder than one's ancestors. Even though you are a foreigner, if you are coming up in the world, then many parents will consider you a fine catch.", starting_state="minstrel_player_role", ending_state="minstrel_player_role_2")
def condition():
    if troop_type_001 == 0:
        troop_type_001 = troop_get_type(trp.player)
minstrel_player_role_minstrel_player_role_2.conditionBlock = condition


minstrel_player_role_2_minstrel_player_role_3 = Dialog("anyone", "You will have to compete with many other lords of your realm, however, who will have an advantage -- they have known these ladies from childhood, and will have been sized up as grooms by carefully discerning mothers and aunts. Some ladies may be fascinated by the stranger, yet opt for the familiar.", starting_state="minstrel_player_role_2", ending_state="minstrel_player_role_3")


minstrel_player_role_3_minstrel_prequestions = Dialog("anyone", "So know this -- you may have your heart broken. But to enter the arena of love fearing heartbreak is like entering the battlefield fearing the enemy's arrows. Be brave, and shrug off the sting of rejection, and victory may yet be yours.", starting_state="minstrel_player_role_3", ending_state="minstrel_prequestions")


minstrel_player_role_minstrel_female_player_3 = Dialog("anyone", "Lady -- I will speak bluntly. Most of the lords of this land are looking for a demure maiden, whose skin as fair as snow -- and your skin is burnt brown by the sun. They want a maiden whose voice is soft as bells -- and your voice is hoarse from commanding men in battle. Also, athough the lords of Calradia appreciate poems about love, most also want heirs, and few women can ride and fight while with child.", starting_state="minstrel_player_role", ending_state="minstrel_female_player_3")


minstrel_female_player_3_minstrel_prequestions = Dialog("anyone", "However, not all lords will be so conventionally minded. We poets sing of shield maidens and of huntresses, of women who forged their own path without having sacrificed the chance for love. I would not tell you that it would be easy for you to find a devoted husband who will accept your ways, but I would not say that it is impossible.", starting_state="minstrel_female_player_3", ending_state="minstrel_prequestions")


minstrel_courtship_questions_2_minstrel_spouse_benefits = Dialog("anyone|plyr", "What advantage is there in seeking a {wife/husband}?", starting_state="minstrel_courtship_questions_2", ending_state="minstrel_spouse_benefits")
def condition():
    if _minstrels_discussed_love == 1:
        pass
minstrel_courtship_questions_2_minstrel_spouse_benefits.conditionBlock = condition


minstrel_spouse_benefits_minstrel_wife_benefits_2 = Dialog("anyone", "Ah! You are quite the romantic, I see! Well, aside from the obvious benefits of love, companionship and other, em, domestic matters, to marry among the nobility brings great assets. You may forge a strong alliance with the bride's family, and a wife may also assist you in manipulating the politics of the realm to your advantage.", starting_state="minstrel_spouse_benefits", ending_state="minstrel_wife_benefits_2")
def condition():
    if troop_type_001 == 0:
        troop_type_001 = troop_get_type(trp.player)
minstrel_spouse_benefits_minstrel_wife_benefits_2.conditionBlock = condition


minstrel_wife_benefits_2_minstrel_prequestions = Dialog("anyone", "What's more, most of the great families of Calradia have at some point intermarried with royalty, which would boost your own claim to rule -- should you ever choose to assert it...", starting_state="minstrel_wife_benefits_2", ending_state="minstrel_prequestions")


minstrel_spouse_benefits_minstrel_wife_benefits_2_1 = Dialog("anyone", "Ah! You are quite the romantic, I see! Well, aside from the obvious benefits of love, companionship and other, em, domestic matters, to marry among the nobility brings great assets. You may have access to the groom's castles and properties, and be able to work with him to advance both of your standings in the realm.", starting_state="minstrel_spouse_benefits", ending_state="minstrel_wife_benefits_2")
def condition():
    if troop_type_001 == 1:
        troop_type_001 = troop_get_type(trp.player)
minstrel_spouse_benefits_minstrel_wife_benefits_2_1.conditionBlock = condition


minstrel_player_advice_meet_minstrel_player_advice_meet_2 = Dialog("anyone", "Every so often, a king or great lord of Calradia will hold a feast. In towns they will often be accompanied by tournaments, and in castles they will be accompanied by hunts. The feasts provide a chance for the lords to repair some of the rivalries that may undermine the strength of the realm. They also provide an opportunity for families to show off their eligible daughters, and ladies will often be allowed to mingle unsupervised with the guests.", starting_state="minstrel_player_advice_meet", ending_state="minstrel_player_advice_meet_2")


minstrel_player_advice_meet_2_minstrel_prequestions = Dialog("anyone", "If you have the opportunity, you may attempt to pay the lady a compliment. This indicates to her that you are a potential suitor, and she will usually know if she wishes you to continue your suit. Incidentally, if you come to her fresh from having distinguished yourself in the tournament or in the hunt, then you may make a stronger first impression than otherwise.", starting_state="minstrel_player_advice_meet_2", ending_state="minstrel_prequestions")


minstrel_player_advice_woo_minstrel_player_advice_woo_2 = Dialog("anyone", "To woo a lady takes a certain amount of time and patience, and several meetings spaced over a period of months. A lady who is interested in you will often find ways of letting you know if she wishes you to come visit her. Alternately, you may simply go and ask her father or brother for permission. If you do not have permission from her guardian, it may be possible to arrange an assignation through other means.", starting_state="minstrel_player_advice_woo", ending_state="minstrel_player_advice_woo_2")


minstrel_player_advice_woo_2_minstrel_player_advice_woo_3 = Dialog("anyone", "Having arranged an assignment, you may then attempt to charm her and win her favor. Perhaps one of the most difficult aspects of this is finding a topic of conversation. Most Calradian noblewomen lead a cloistered life, at least until they are married, and thus will have little to say that will interest you. On other hand, she will soon tire of hearing of your own deeds in the outside world.", starting_state="minstrel_player_advice_woo_2", ending_state="minstrel_player_advice_woo_3")


minstrel_player_advice_woo_3_minstrel_player_advice_woo_4 = Dialog("anyone", "One time-tested mode of courtship is simply to recite a popular poem, and discuss it. This way, you are both on an equal footing, and neither will have an advantage in knowledge or experience. Of course, different ladies will have different tastes in poetry.", starting_state="minstrel_player_advice_woo_3", ending_state="minstrel_player_advice_woo_4")


minstrel_player_advice_woo_4_minstrel_player_advice_woo_5 = Dialog("anyone", "At some point, you will be able to discuss directly the issue of marriage. She will then let you know if you measure up to what she wants in a husband. Some ladies will coolly assess who is the most prestigious of her suitors, others will be guided by their passions. Some will look to your companions, to see whether you are the kind of husband who will treat her as an equal, while others will follow the lead of their fathers.", starting_state="minstrel_player_advice_woo_4", ending_state="minstrel_player_advice_woo_5")


minstrel_player_advice_woo_5_minstrel_prequestions = Dialog("anyone", "At any rate, it is a challenging business -- and do not forget, you may find that your suit prospers with a lady, only to have it falter on a father's political ambitions. So you must ask yourself: are you willing to risk disappointment and heartbreak? Alternately, are you willing to throw away your standing in society, to make enemies of allies, in pursuit of a forbidden love? Because if you are, then perhaps some day we will write poems about you.", starting_state="minstrel_player_advice_woo_5", ending_state="minstrel_prequestions")


minstrel_courtship_questions_2_minstrel_job_description = Dialog("anyone|plyr", "What is it that you poets and musicians do again?", starting_state="minstrel_courtship_questions_2", ending_state="minstrel_job_description")


minstrel_job_description_minstrel_courtship_prequestions = Dialog("anyone", "I compose and write songs for the lords of the land, and their ladies. Sometimes I sing about war, sometimes about the virtues of kings, and sometimes, for the more sophisticated audiences, about the virtues of wine. For most audiences, however, I sing of love.", starting_state="minstrel_job_description", ending_state="minstrel_courtship_prequestions")


minstrel_courtship_questions_2_minstrel_pretalk = Dialog("anyone|plyr", "No, that is all.", starting_state="minstrel_courtship_questions_2", ending_state="minstrel_pretalk")


minstrel_prequestions_minstrel_courtship_questions_2 = Dialog("anyone", "Do you have any other questions?", starting_state="minstrel_prequestions", ending_state="minstrel_courtship_questions_2")


minstrel_pretalk_minstrel_1 = Dialog("anyone", "Is there anything else?", starting_state="minstrel_pretalk", ending_state="minstrel_1")


start_farmer_from_bandit_village_1 = Dialog("anyone", "{My lord/Madam}, you look like a {man/lady} of the sword and someone who could help us. Will you hear my plea?", starting_state="start", ending_state="farmer_from_bandit_village_1")
def condition():
    if _talk_context == 14 and _g_talk_troop == trp.farmer_from_bandit_village and not check_quest_active(qst.eliminate_bandits_infesting_village) and not check_quest_active(qst.deal_with_bandits_at_lords_village):
        var001 = p.salt_mine
        for party_id_002 in range(p.village_1, var001):
            if party_slot_eq(party_id_002,120,_g_encountered_party) and party_slot_ge(party_id_002,39,1):
                s1 = str_store_party_name(party_id_002)
                quest_set_slot(qst.eliminate_bandits_infesting_village,1,party_id_002)
                quest_set_slot(qst.eliminate_bandits_infesting_village,11,0)
                party_slot_003 = party_get_slot(party_id_002,25)
                quest_set_slot(qst.eliminate_bandits_infesting_village,6,party_slot_003)
                quest_set_slot(qst.eliminate_bandits_infesting_village,12,party_id_002)
                var001 = 0
            #end
        #end
    #end
start_farmer_from_bandit_village_1.conditionBlock = condition


farmer_from_bandit_village_1_farmer_from_bandit_village_2 = Dialog("anyone|plyr", "What is the matter, my good man?", starting_state="farmer_from_bandit_village_1", ending_state="farmer_from_bandit_village_2")


farmer_from_bandit_village_1_farmer_from_bandit_village_2_1 = Dialog("anyone|plyr", "What are you burbling about peasant? Speak out.", starting_state="farmer_from_bandit_village_1", ending_state="farmer_from_bandit_village_2")


farmer_from_bandit_village_2_farmer_from_bandit_village_3 = Dialog("anyone", "A band of brigands have taken refuge in our village. They take everything we have, force us to serve them, and do us much evil. If one of us so much as breathes a word of protest, they kill the poor soul on the spot right away. Our lives have become unbearable. I risked my skin and ran away to find someone who can help us.", starting_state="farmer_from_bandit_village_2", ending_state="farmer_from_bandit_village_3")


farmer_from_bandit_village_3_farmer_from_bandit_village_4 = Dialog("anyone|plyr", "Why don't you go to the lord of your village? He should take care of the vermin.", starting_state="farmer_from_bandit_village_3", ending_state="farmer_from_bandit_village_4")


farmer_from_bandit_village_4_farmer_from_bandit_village_5 = Dialog("anyone", "I did, {sir/madam}, but our lord's men did not let me see him and said he was occupied with more important matters and that we should deal with our own problem ourselves. Please {sir/madam}, you look like a {man/lady} of valor and a fearsome warrior, and you have no doubt many friends and soldiers at your service. If there is anyone who can help us, it's you.", starting_state="farmer_from_bandit_village_4", ending_state="farmer_from_bandit_village_5")
def code():
    _temp = 0
farmer_from_bandit_village_4_farmer_from_bandit_village_5.codeBlock = code


farmer_from_bandit_village_5_farmer_from_bandit_village_accepted = Dialog("anyone|plyr", "Very well, I'll help you. Where is this village?", starting_state="farmer_from_bandit_village_5", ending_state="farmer_from_bandit_village_accepted")


farmer_from_bandit_village_5_farmer_from_bandit_village_denied = Dialog("anyone|plyr", "I can't be bothered with this right now.", starting_state="farmer_from_bandit_village_5", ending_state="farmer_from_bandit_village_denied")


farmer_from_bandit_village_5_farmer_from_bandit_village_barter = Dialog("anyone|plyr", "Why would I fight these bandits? What's in it for me?", starting_state="farmer_from_bandit_village_5", ending_state="farmer_from_bandit_village_barter")
def condition():
    if _temp == 0:
        pass
farmer_from_bandit_village_5_farmer_from_bandit_village_barter.conditionBlock = condition


farmer_from_bandit_village_accepted_close_window = Dialog("anyone", "God bless you, {sir/madam}. Our village is {s7}. It is not too far from here.", starting_state="farmer_from_bandit_village_accepted", ending_state="close_window")
def code():
    quest_slot_001 = quest_get_slot(qst.eliminate_bandits_infesting_village,1)
    s7 = str_store_party_name_link(quest_slot_001)
    setup_quest_text(qst.eliminate_bandits_infesting_village)
    s2 = str_store_string("@A villager from {s7} begged you to save their village from the bandits that took refuge there.")
    start_quest(qst.eliminate_bandits_infesting_village,_g_talk_troop)
farmer_from_bandit_village_accepted_close_window.codeBlock = code


farmer_from_bandit_village_denied_close_window = Dialog("anyone", "As you say {sir/madam}. Forgive me for bothering you.", starting_state="farmer_from_bandit_village_denied", ending_state="close_window")


farmer_from_bandit_village_barter_farmer_from_bandit_village_5 = Dialog("anyone", "We are but poor farmers {sir/madam}, and the bandits have already got most of what we have on this world. but we'll be glad to share with you whatever we have got. And we'll always be in your gratitude if you help us.", starting_state="farmer_from_bandit_village_barter", ending_state="farmer_from_bandit_village_5")
def code():
    _temp = 1
farmer_from_bandit_village_barter_farmer_from_bandit_village_5.codeBlock = code


start_close_window_37 = Dialog("anyone", "Thank you for helping us {sir/madam}. Crush those bandits!", starting_state="start", ending_state="close_window")
def condition():
    if _talk_context == 14 and _g_talk_troop == trp.farmer_from_bandit_village and check_quest_active(qst.eliminate_bandits_infesting_village):
        pass
start_close_window_37.conditionBlock = condition


start_mercenary_tavern_talk = Dialog("anyone", "Do you have a need for mercenaries, {sir/madam}? {reg3?Me and {reg4?{reg3} of my mates:one of my mates} are:I am} looking for a master. We'll join you for {reg5} denars.", starting_state="start", ending_state="mercenary_tavern_talk")
def condition():
    if _talk_context == 14 and not troop_is_hero(_g_talk_troop) and not is_between(_g_talk_troop,trp.swadian_merchant,trp.startup_merchants_end):
        party_slot_001 = party_get_slot(_g_encountered_party,90)
        party_slot_002 = party_get_slot(_g_encountered_party,91)
        if party_slot_002 > 0:
            reg3 = party_slot_002 - 1
            reg4 = reg3 - 1
            game_get_join_cost(party_slot_001)
            var003 = reg0
            reg5 = party_slot_002 * reg0
            party_free_companions_capacity_004 = party_get_free_companions_capacity(p.main_party)
            val_min(party_slot_002,party_free_companions_capacity_004)
            troop_gold_005 = store_troop_gold(trp.player)
            if var003 > 0:
                troop_gold_005 /= var003
                val_min(party_slot_002,troop_gold_005)
            #end
        #end
    #end
    _temp = party_slot_002
start_mercenary_tavern_talk.conditionBlock = condition


start_mercenary_after_recruited = Dialog("anyone", "Any orders, {sir/madam}?", starting_state="start", ending_state="mercenary_after_recruited")
def condition():
    if _talk_context == 14:
        pass
start_mercenary_after_recruited.conditionBlock = condition


mercenary_after_recruited_mercenary_after_recruited_2 = Dialog("anyone|plyr", "Make your preparations. We'll be moving at dawn.", starting_state="mercenary_after_recruited", ending_state="mercenary_after_recruited_2")


mercenary_after_recruited_mercenary_after_recruited_2_1 = Dialog("anyone|plyr", "Take your time. We'll be staying in this town for a while.", starting_state="mercenary_after_recruited", ending_state="mercenary_after_recruited_2")


mercenary_after_recruited_2_close_window = Dialog("anyone", "Yes {sir/madam}. We'll be ready when you tell us to leave.", starting_state="mercenary_after_recruited_2", ending_state="close_window")


mercenary_tavern_talk_mercenary_tavern_talk_hire = Dialog("anyone|plyr", "All right. I will hire all of you. Here is {reg5} denars.", starting_state="mercenary_tavern_talk", ending_state="mercenary_tavern_talk_hire")
def condition():
    party_slot_001 = party_get_slot(_g_encountered_party,91)
    if party_slot_001 == _temp:
        party_slot_002 = party_get_slot(_g_encountered_party,90)
        game_get_join_cost(party_slot_002)
        reg5 = _temp * reg0
mercenary_tavern_talk_mercenary_tavern_talk_hire.conditionBlock = condition


mercenary_tavern_talk_mercenary_tavern_talk_hire_1 = Dialog("anyone|plyr", "All right. But I can only hire {reg6} of you. Here is {reg5} denars.", starting_state="mercenary_tavern_talk", ending_state="mercenary_tavern_talk_hire")
def condition():
    party_slot_001 = party_get_slot(_g_encountered_party,91)
    if _temp < party_slot_001 and _temp > 0:
        reg6 = _temp
        party_slot_002 = party_get_slot(_g_encountered_party,90)
        game_get_join_cost(party_slot_002)
        reg5 = _temp * reg0
mercenary_tavern_talk_mercenary_tavern_talk_hire_1.conditionBlock = condition


mercenary_tavern_talk_hire_close_window = Dialog("anyone", "{s17}", starting_state="mercenary_tavern_talk_hire", ending_state="close_window")
def condition():
    random_x_001 = store_random_in_range(0,4)
    if random_x_001 == 0 and _temp > 1:
        s17 = str_store_string("@You chose well;;; {sir/madam}. My lads know how to keep their word and earn their pay.")
    elif random_x_001 == 1:
        s17 = str_store_string("@Well done;;; {sir/madam}. Keep the money and wine coming our way;;; and there's no foe in Calradia you need fear.")
    elif random_x_001 == 2:
        s17 = str_store_string("@We are at your service;;; {sir/madam}. Point us in the direction of those who need hurting;;; and we'll do the rest.")
    else:
        s17 = str_store_string(gstr.you_will_not_be_disappointed_sirmadam_you_will_not_find_better_warriors_in_all_calradia)
    #end
mercenary_tavern_talk_hire_close_window.conditionBlock = condition
def code():
    party_slot_001 = party_get_slot(_g_encountered_party,90)
    game_get_join_cost(party_slot_001)
    gold_002 = _temp * reg0
    troop_remove_gold(trp.player,gold_002)
    party_add_members(p.main_party,party_slot_001,_temp)
    party_set_slot(_g_encountered_party,91,0)
mercenary_tavern_talk_hire_close_window.codeBlock = code


mercenary_tavern_talk_tavern_mercenary_cant_lead = Dialog("anyone|plyr", "That sounds good. But I can't afford to hire any more men right now.", starting_state="mercenary_tavern_talk", ending_state="tavern_mercenary_cant_lead")
def condition():
    if _temp == 0:
        if party_free_companions_capacity_001 >= 1:
            party_free_companions_capacity_001 = party_get_free_companions_capacity(p.main_party)
mercenary_tavern_talk_tavern_mercenary_cant_lead.conditionBlock = condition


tavern_mercenary_cant_lead_close_window = Dialog("anyone", "That's a pity. Well, {reg3?we will:I will} be lingering around here for a while, if you need to hire anyone.", starting_state="tavern_mercenary_cant_lead", ending_state="close_window")


mercenary_tavern_talk_tavern_mercenary_cant_lead_1 = Dialog("anyone|plyr", "That sounds good. But I can't lead any more men right now.", starting_state="mercenary_tavern_talk", ending_state="tavern_mercenary_cant_lead")
def condition():
    if _temp == 0:
        if party_free_companions_capacity_001 == 0:
            party_free_companions_capacity_001 = party_get_free_companions_capacity(p.main_party)
mercenary_tavern_talk_tavern_mercenary_cant_lead_1.conditionBlock = condition


mercenary_tavern_talk_close_window = Dialog("anyone|plyr", "Sorry. I don't need any other men right now.", starting_state="mercenary_tavern_talk", ending_state="close_window")


start_trainer_intro_1 = Dialog("anyone", "Good day to you {lad/lass}. You look like another adventurer who has come to try {his/her} chance in these lands. Well, trust my word, you won't be able to survive long here unless you know how to fight yourself out of a tight spot.", starting_state="start", ending_state="trainer_intro_1")
def condition():
    if is_between(_g_talk_troop,trp.trainer_1,trp.ransom_broker_1) and _g_talk_troop_met == 0:
        pass
start_trainer_intro_1.conditionBlock = condition


trainer_intro_1_trainer_intro_2 = Dialog("anyone|plyr", "Thank you for your advice. This place looks like a training field. Maybe I can learn about fighting here?", starting_state="trainer_intro_1", ending_state="trainer_intro_2")


trainer_intro_2_trainer_intro_3 = Dialog("anyone", "Indeed you can. I am a veteran soldier... fought a good deal in the wars in my time. But these days, I train young novices in this area. I can find you some opponents to practice with if you like. Or if you have any questions about the theory of combat, feel free to ask.", starting_state="trainer_intro_2", ending_state="trainer_intro_3")


trainer_intro_3_trainer_intro_4a = Dialog("anyone|plyr", "Yes, I do have a few questions.", starting_state="trainer_intro_3", ending_state="trainer_intro_4a")


trainer_intro_3_trainer_intro_4b = Dialog("anyone|plyr", "Actually, I can move on to practice.", starting_state="trainer_intro_3", ending_state="trainer_intro_4b")


trainer_intro_4a_trainer_talk_combat = Dialog("anyone", "Well, ask anything you like.", starting_state="trainer_intro_4a", ending_state="trainer_talk_combat")


trainer_intro_4b_trainer_practice_1 = Dialog("anyone", "Good. It's good to find someone eager for practice. Let's see what you will do.", starting_state="trainer_intro_4b", ending_state="trainer_practice_1")


start_trainer_practice_1 = Dialog("anyone", "That was a good fight. ", starting_state="start", ending_state="trainer_practice_1")
def condition():
    if is_between(_g_talk_troop,trp.trainer_1,trp.ransom_broker_1) and _waiting_for_training_fight_result != 0 and _training_fight_won != 0:
        pass
start_trainer_practice_1.conditionBlock = condition
def code():
    _num_opponents_to_beat_in_a_row -= 1
    _waiting_for_training_fight_result = 0
start_trainer_practice_1.codeBlock = code


start_trainer_practice_1_1 = Dialog("anyone", "Ha! Looks like you've developed a bit of a limp there. Don't worry, even losses have their value, provided you learn from them. Shake the stars out of your eyes and get back in there. There's no other way to win.", starting_state="start", ending_state="trainer_practice_1")
def condition():
    if is_between(_g_talk_troop,trp.trainer_1,trp.ransom_broker_1) and _waiting_for_training_fight_result != 0:
        pass
start_trainer_practice_1_1.conditionBlock = condition
def code():
    _num_opponents_to_beat_in_a_row = 3
    _waiting_for_training_fight_result = 0
start_trainer_practice_1_1.codeBlock = code


start_trainer_talk = Dialog("anyone", "Good day. Ready for some training today?", starting_state="start", ending_state="trainer_talk")
def condition():
    if is_between(_g_talk_troop,trp.trainer_1,trp.ransom_broker_1):
        pass
start_trainer_talk.conditionBlock = condition


trainer_pretalk_trainer_talk = Dialog("anyone", "Ah, are you ready for some training?", starting_state="trainer_pretalk", ending_state="trainer_talk")


trainer_talk_trainer_practice_1 = Dialog("anyone|plyr", "I am ready for some practice.", starting_state="trainer_talk", ending_state="trainer_practice_1")


trainer_talk_trainer_combat_begin = Dialog("anyone|plyr", "First, tell me something about combat...", starting_state="trainer_talk", ending_state="trainer_combat_begin")


trainer_talk_close_window = Dialog("anyone|plyr", "I need to leave now. Farewell.", starting_state="trainer_talk", ending_state="close_window")


trainer_combat_begin_trainer_talk_combat = Dialog("anyone", "What do you want to know?", starting_state="trainer_combat_begin", ending_state="trainer_talk_combat")


trainer_combat_pretalk_trainer_talk_combat = Dialog("anyone", "What else do you want to know?", starting_state="trainer_combat_pretalk", ending_state="trainer_talk_combat")


trainer_talk_combat_trainer_explain_defense = Dialog("anyone|plyr", "Tell me about defending myself.", starting_state="trainer_talk_combat", ending_state="trainer_explain_defense")


trainer_talk_combat_trainer_explain_attack = Dialog("anyone|plyr", "Tell me about attacking with weapons.", starting_state="trainer_talk_combat", ending_state="trainer_explain_attack")


trainer_talk_combat_trainer_explain_horseback = Dialog("anyone|plyr", "Tell me about fighting on horseback.", starting_state="trainer_talk_combat", ending_state="trainer_explain_horseback")


trainer_talk_combat_trainer_pretalk = Dialog("anyone|plyr", "I guess I know all the theory I need. Let's talk about something else.", starting_state="trainer_talk_combat", ending_state="trainer_pretalk")


trainer_explain_defense_trainer_explain_defense_2 = Dialog("anyone", "Good question. The first thing you should know as a fighter is how to defend yourself. Keeping yourself out of harm's way is the first rule of combat, and it is much more important than giving harm to others. Everybody can swing a sword around and hope to cut some flesh, but only those fighters that are experts at defense live to tell of it.", starting_state="trainer_explain_defense", ending_state="trainer_explain_defense_2")


trainer_explain_defense_2_trainer_explain_defense_3 = Dialog("anyone", "Now. Defending yourself is easiest if you are equipped with a shield. Just block with your shield. [Hold down the right mouse button to defend yourself with the shield.] In this state, you will be able to deflect all attacks that come from your front. However, you will still be open to strikes from your sides or your back.", starting_state="trainer_explain_defense_2", ending_state="trainer_explain_defense_3")


trainer_explain_defense_3_trainer_explain_defense_4 = Dialog("anyone|plyr", "What if I don't have a shield?", starting_state="trainer_explain_defense_3", ending_state="trainer_explain_defense_4")


trainer_explain_defense_4_trainer_combat_pretalk = Dialog("anyone", "Then you will have to use your weapon to block your opponent. This is a bit more difficult than defending with a shield. Defending with a weapon, you can block against only ONE attack direction. That is, you block against either overhead swings, side swings or thrusts. Therefore you must watch your opponent carefully and start to block AFTER he starts his attack. In this way you will be able to block against the direction of his current attack. If you start to block BEFORE he makes his move, he may just attack in another direction than the one you are blocking against and score a hit.", starting_state="trainer_explain_defense_4", ending_state="trainer_combat_pretalk")


trainer_explain_attack_trainer_explain_attack_2 = Dialog("anyone", "Good question. Attacking is the best defence, they say. A tactic many fighters find useful is taking an offensive stance and readying your weapon for attack, waiting for the right moment for swinging it. [You can ready your weapon for attack by pressing and holding down the left mouse button.]", starting_state="trainer_explain_attack", ending_state="trainer_explain_attack_2")


trainer_explain_attack_2_trainer_explain_attack_3 = Dialog("anyone|plyr", "That sounds useful.", starting_state="trainer_explain_attack_2", ending_state="trainer_explain_attack_3")


trainer_explain_attack_3_trainer_explain_attack_4 = Dialog("anyone", "It is a good tactic, but remember that, your opponent may see that and take a defensive stance against the direction you are swinging your weapon. If that happens, you must break your attack and quickly attack from another direction [You may cancel your current attack by quickly tapping the right mouse button].", starting_state="trainer_explain_attack_3", ending_state="trainer_explain_attack_4")


trainer_explain_attack_4_trainer_explain_attack_5 = Dialog("anyone|plyr", "If my opponent is defending against the direction I am attacking from, I will break and use another direction.", starting_state="trainer_explain_attack_4", ending_state="trainer_explain_attack_5")


trainer_explain_attack_5_trainer_combat_pretalk = Dialog("anyone", "Yes, selecting the direction you swing your weapon is a crucial skill. There are four main directions you may use: right swing, left swing, overhead swing and thrust. You must use each one wisely. [to control your swing direction with default controls, move your mouse in the direction you want to swing from as you press the left mouse button].", starting_state="trainer_explain_attack_5", ending_state="trainer_combat_pretalk")


trainer_explain_horseback_trainer_combat_pretalk = Dialog("anyone", "Very good question. A horse may be a warrior's most powerful weapon in combat. It gives you speed, height, power and initiative. A lot of deadly weapons will become even deadlier on horseback. However you must pay particular attention to horse-mounted enemies couching their lances, as they may take down any opponent in one hit. [To use the couched lance yourself, wield a lance or similar weapon, and speed up your horse without pressing attack or defense buttons. after you reach a speed, you'll lower your lance. Then try to target your enemies by maneuvering your horse.]", starting_state="trainer_explain_horseback", ending_state="trainer_combat_pretalk")


trainer_practice_1_trainer_practice_1 = Dialog("anyone", "I train novices in four stages, each tougher than the one before. To finish a stage and advance to the next one, you have to win three fights in a row.", starting_state="trainer_practice_1", ending_state="trainer_practice_1")
def condition():
    if _training_system_explained == 0:
        pass
trainer_practice_1_trainer_practice_1.conditionBlock = condition
def code():
    _num_opponents_to_beat_in_a_row = 3
    _novicemaster_opponent_troop = trp.novice_fighter
    _training_system_explained = 1
trainer_practice_1_trainer_practice_1.codeBlock = code


trainer_practice_1_novicemaster_are_you_ready = Dialog("anyone", "You have passed all stages of training. But if you want you can still practice. Are you ready?", starting_state="trainer_practice_1", ending_state="novicemaster_are_you_ready")
def condition():
    if _novice_training_difficulty >= 4:
        pass
trainer_practice_1_novicemaster_are_you_ready.conditionBlock = condition
def code():
    _num_opponents_to_beat_in_a_row = 99999
trainer_practice_1_novicemaster_are_you_ready.codeBlock = code


trainer_practice_1_trainer_practice_1_1 = Dialog("anyone", "Way to go {lad/lass}. With this victory, you have advanced to the next training level. From now on your opponents will be regular fighters, not the riff-raff off the street, so be on your toes.", starting_state="trainer_practice_1", ending_state="trainer_practice_1")
def condition():
    if _num_opponents_to_beat_in_a_row == 0 and _novice_training_difficulty == 0:
        pass
trainer_practice_1_trainer_practice_1_1.conditionBlock = condition
def code():
    _num_opponents_to_beat_in_a_row = 3
    _novice_training_difficulty += 1
    add_xp_to_troop(100)
    _novicemaster_opponent_troop = trp.regular_fighter
trainer_practice_1_trainer_practice_1_1.codeBlock = code


trainer_practice_1_trainer_practice_1_2 = Dialog("anyone", "Way to go {lad/lass}. Welcome to the third training level. From now on your opponents will be veteran fighters; soldiers and arena regulars and the like. These guys know some dirty tricks, so keep your defense up.", starting_state="trainer_practice_1", ending_state="trainer_practice_1")
def condition():
    if _num_opponents_to_beat_in_a_row == 0 and _novice_training_difficulty == 1:
        pass
trainer_practice_1_trainer_practice_1_2.conditionBlock = condition
def code():
    _num_opponents_to_beat_in_a_row = 3
    _novice_training_difficulty += 1
    add_xp_to_troop(100)
    _novicemaster_opponent_troop = trp.veteran_fighter
trainer_practice_1_trainer_practice_1_2.codeBlock = code


trainer_practice_1_trainer_practice_1_3 = Dialog("anyone", "You've got the heart of a champion, {lad/lass}, and the sword arm to match. From now on your opponents will be champion fighters. These are the cream of the crop, the finest warriors I have trained. If you can best three of them in a row, you will join their ranks.", starting_state="trainer_practice_1", ending_state="trainer_practice_1")
def condition():
    if _num_opponents_to_beat_in_a_row == 0 and _novice_training_difficulty == 2:
        pass
trainer_practice_1_trainer_practice_1_3.conditionBlock = condition
def code():
    _num_opponents_to_beat_in_a_row = 3
    _novice_training_difficulty += 1
    add_xp_to_troop(100)
    _novicemaster_opponent_troop = trp.champion_fighter
trainer_practice_1_trainer_practice_1_3.codeBlock = code


trainer_practice_1_novicemaster_finish_training = Dialog("anyone", "It does my heart good to see such a promising talent. You have passed all tiers of training. You can now tell everyone that you have been trained by the master of the training field.", starting_state="trainer_practice_1", ending_state="novicemaster_finish_training")
def condition():
    if _num_opponents_to_beat_in_a_row == 0 and _novice_training_difficulty == 3:
        pass
trainer_practice_1_novicemaster_finish_training.conditionBlock = condition
def code():
    _num_opponents_to_beat_in_a_row = 3
    _novice_training_difficulty += 1
    add_xp_to_troop(300)
trainer_practice_1_novicemaster_finish_training.codeBlock = code


novicemaster_finish_training_novicemaster_finish_training_2 = Dialog("anyone|plyr", "Thank you master.", starting_state="novicemaster_finish_training", ending_state="novicemaster_finish_training_2")


novicemaster_finish_training_2_close_window = Dialog("anyone", "I wish you good luck in the tournaments. And, don't forget,  if you want to practice your swordwork anytime, just come and say the word.", starting_state="novicemaster_finish_training_2", ending_state="close_window")


trainer_practice_1_novicemaster_are_you_ready_1 = Dialog("anyone", "Your next opponent will be a {s9}. You need to win {reg8} more fights in a row to advance to the next stage. Are you ready?", starting_state="trainer_practice_1", ending_state="novicemaster_are_you_ready")
def condition():
    reg8 = _num_opponents_to_beat_in_a_row
    s9 = str_store_troop_name(_novicemaster_opponent_troop)
trainer_practice_1_novicemaster_are_you_ready_1.conditionBlock = condition


novicemaster_are_you_ready_novicemaster_ready_to_fight = Dialog("anyone|plyr", "Yes I am.", starting_state="novicemaster_are_you_ready", ending_state="novicemaster_ready_to_fight")


novicemaster_ready_to_fight_close_window = Dialog("anyone", "Here you go then. Good luck.", starting_state="novicemaster_ready_to_fight", ending_state="close_window")
def code():
    _training_fight_won = 0
    _waiting_for_training_fight_result = 1
    modify_visitors_at_site(_g_training_ground_melee_training_scene)
    reset_visitors()
    reg0 = 0
    reg1 = 1
    reg2 = 2
    reg3 = 3
    shuffle_range(0,4)
    set_visitor(reg0,trp.player)
    set_visitor(reg1,_novicemaster_opponent_troop)
    set_visitor(4,_g_talk_troop)
    set_jump_mission(mt.training_ground_trainer_training)
    jump_to_scene(_g_training_ground_melee_training_scene)
novicemaster_ready_to_fight_close_window.codeBlock = code


novicemaster_are_you_ready_novicemaster_not_ready = Dialog("anyone|plyr", "Just a minute. I am not ready yet.", starting_state="novicemaster_are_you_ready", ending_state="novicemaster_not_ready")


novicemaster_not_ready_close_window = Dialog("anyone", "Hey, You will never make it if you don't practice.", starting_state="novicemaster_not_ready", ending_state="close_window")


start_start_craftsman_soon = Dialog("anyone|auto_proceed", "{!}.", starting_state="start", ending_state="start_craftsman_soon")
def condition():
    if is_between(_g_talk_troop,trp.town_1_master_craftsman,trp.zendar_chest):
        party_slot_001 = party_get_slot(_g_encountered_party,139)
        if party_slot_001 >= 2:
            reg4 = party_slot_001
start_start_craftsman_soon.conditionBlock = condition


start_craftsman_soon_close_window = Dialog("anyone", "Good day, my {lord/lady}. We hope to begin production in about {reg4} days", starting_state="start_craftsman_soon", ending_state="close_window")


start_master_craftsman_talk = Dialog("anyone", "Good day, my {lord/lady}. We are honored that you have chosen to visit us. What do you require?", starting_state="start", ending_state="master_craftsman_talk")
def condition():
    if is_between(_g_talk_troop,trp.town_1_master_craftsman,trp.zendar_chest):
        pass
start_master_craftsman_talk.conditionBlock = condition


master_craftsman_pretalk_master_craftsman_talk = Dialog("anyone", "Very good, my {lord/lady}. Do you require anything else?", starting_state="master_craftsman_pretalk", ending_state="master_craftsman_talk")


master_craftsman_talk_master_craftsman_accounts = Dialog("anyone|plyr", "Let's go over the accounts.", starting_state="master_craftsman_talk", ending_state="master_craftsman_accounts")


master_craftsman_talk_master_craftsman_pretalk = Dialog("anyone|plyr", "Let's check the inventories.", starting_state="master_craftsman_talk", ending_state="master_craftsman_pretalk")
def code():
    change_screen_loot(_g_talk_troop)
master_craftsman_talk_master_craftsman_pretalk.codeBlock = code


master_craftsman_talk_master_craftsman_pretalk_1 = Dialog("anyone|plyr", "I'd like you to sell goods as they are produced.", starting_state="master_craftsman_talk", ending_state="master_craftsman_pretalk")
def condition():
    if party_slot_eq(_g_encountered_party,138,1):
        pass
master_craftsman_talk_master_craftsman_pretalk_1.conditionBlock = condition
def code():
    party_set_slot(_g_encountered_party,138,0)
master_craftsman_talk_master_craftsman_pretalk_1.codeBlock = code


master_craftsman_talk_master_craftsman_pretalk_2 = Dialog("anyone|plyr", "I'd like you to keep all goods in the warehouse until I arrive.", starting_state="master_craftsman_talk", ending_state="master_craftsman_pretalk")
def condition():
    if party_slot_eq(_g_encountered_party,138,0):
        pass
master_craftsman_talk_master_craftsman_pretalk_2.conditionBlock = condition
def code():
    party_set_slot(_g_encountered_party,138,1)
master_craftsman_talk_master_craftsman_pretalk_2.codeBlock = code


master_craftsman_accounts_master_craftsman_pretalk = Dialog("anyone", "We currently produce {s3} worth {reg1} denars each week, while the quantity of {s4} needed to manufacture it costs {reg2}, and labor and upkeep are {reg3}.{s9} This means that we theoretically make a {s12} of {reg0} denars a week, assuming that we have no raw materials in the inventories, and that we sell directly to the market.", starting_state="master_craftsman_accounts", ending_state="master_craftsman_pretalk")
def code():
    party_slot_001 = party_get_slot(_g_encountered_party,137)
    process_player_enterprise(party_slot_001,_g_encountered_party)
    if reg0 >= 0:
        s12 = str_store_string(gstr.profit)
    else:
        s12 = str_store_string(gstr.loss)
    #end
    s3 = str_store_item_name(party_slot_001)
    item_slot_002 = item_get_slot(party_slot_001,50)
    s4 = str_store_item_name(item_slot_002)
    item_slot_003 = item_get_slot(party_slot_001,57)
    str_clear(9)
    if item_slot_003 > 0:
        s11 = str_store_item_name(item_slot_003)
        s9 = str_store_string(gstr.describe_secondary_input)
    #end
master_craftsman_accounts_master_craftsman_pretalk.codeBlock = code


master_craftsman_talk_master_craftsman_production_options = Dialog("anyone|plyr", "Could you explain my options related to production?", starting_state="master_craftsman_talk", ending_state="master_craftsman_production_options")


master_craftsman_production_options_master_craftsman_production_options_2 = Dialog("anyone", "Certainly, my {lord/lady}. Most of the time, the most profitable thing for you to do would be to let us buy raw materials and sell the finished goods directly to the market. Because of our longstanding relations with the local merchants, we can usually get a very good price.", starting_state="master_craftsman_production_options", ending_state="master_craftsman_production_options_2")
def condition():
    s5 = str_store_party_name(_g_encountered_party)
master_craftsman_production_options_master_craftsman_production_options_2.conditionBlock = condition


master_craftsman_production_options_2_master_craftsman_pretalk = Dialog("anyone", "However, if you find that you can acquire raw materials cheaper outside {s5}, you may place them in the inventories, and we will use them instead of buying from the market. Likewise, if you feel that you can get a better price for the finished goods elsewhere, then you may ask us to deposit what we produce in our warehouses for you to take.", starting_state="master_craftsman_production_options_2", ending_state="master_craftsman_pretalk")
def condition():
    s5 = str_store_party_name(_g_encountered_party)
master_craftsman_production_options_2_master_craftsman_pretalk.conditionBlock = condition


master_craftsman_talk_master_craftsman_auction_price = Dialog("anyone|plyr", "It will no longer be possible for me to continue operating this enterprise.", starting_state="master_craftsman_talk", ending_state="master_craftsman_auction_price")


master_craftsman_auction_price_master_craftsman_auction_decide = Dialog("anyone", "A pity, my {lord/lady}. If we sell the land and the equipment, and liquidate the inventories, I estimate that we can get {reg4} denars.", starting_state="master_craftsman_auction_price", ending_state="master_craftsman_auction_decide")
def condition():
    party_slot_001 = party_get_slot(_g_encountered_party,137)
    item_slot_002 = item_get_slot(party_slot_001,53)
    item_slot_003 = item_get_slot(party_slot_001,55)
    _liquidation_price = item_slot_002 * item_slot_003
    _liquidation_price *= 4
    troop_inv_capacity_004 = troop_get_inventory_capacity(_g_talk_troop)
    for inventory_slot_no_005 in range(0, troop_inv_capacity_004):
        troop_inv_slot_006 = troop_get_inventory_slot(_g_talk_troop,inventory_slot_no_005)
        if troop_inv_slot_006 > 0:
            item_slot_007 = item_get_slot(troop_inv_slot_006,53)
            slot_no_008 = troop_inv_slot_006 - itm.spice
            slot_no_008 += 250
            party_slot_009 = party_get_slot(_g_encountered_party,slot_no_008)
            item_slot_007 *= party_slot_009
            item_slot_007 /= 1200
            _liquidation_price += item_slot_007
        #end
    #end
    reg4 = _liquidation_price
master_craftsman_auction_price_master_craftsman_auction_decide.conditionBlock = condition


master_craftsman_auction_decide_master_craftsman_liquidation = Dialog("anyone|plyr", "That sounds reasonable. Please proceed with the sale.", starting_state="master_craftsman_auction_decide", ending_state="master_craftsman_liquidation")
def code():
    troop_add_gold(trp.player,_liquidation_price)
    troop_clear_inventory(_g_talk_troop)
    party_set_slot(_g_encountered_party,137,0)
    party_set_slot(_g_encountered_party,138,0)
master_craftsman_auction_decide_master_craftsman_liquidation.codeBlock = code


master_craftsman_auction_decide_master_craftsman_pretalk = Dialog("anyone|plyr", "Hmm. Let's hold off on that.", starting_state="master_craftsman_auction_decide", ending_state="master_craftsman_pretalk")


master_craftsman_liquidation_close_window = Dialog("anyone", "As you wish. It was an honor to have been in your employ.", starting_state="master_craftsman_liquidation", ending_state="close_window")
def code():
    finish_mission()
master_craftsman_liquidation_close_window.codeBlock = code


master_craftsman_talk_close_window = Dialog("anyone|plyr", "{!}As you wish, {sir/my lady}. It was an honor to work in your employ.", starting_state="master_craftsman_talk", ending_state="close_window")
def condition():
    if 1 == 0:
        pass
master_craftsman_talk_close_window.conditionBlock = condition


master_craftsman_talk_close_window_1 = Dialog("anyone|plyr", "That is all for now.", starting_state="master_craftsman_talk", ending_state="close_window")


start_mayor_begin = Dialog("anyone", "Good day, my lord.", starting_state="start", ending_state="mayor_begin")
def condition():
    if is_between(_g_talk_troop,trp.town_1_mayor,trp.village_1_elder) and _g_talk_troop_met == 0 and _players_kingdom == _g_encountered_party_faction or _g_encountered_party_faction == fac.player_supporters_faction:
        pass
start_mayor_begin.conditionBlock = condition


start_mayor_talk = Dialog("anyone", "Hello stranger, you seem to be new to {s9}. I am the guild master of the town.", starting_state="start", ending_state="mayor_talk")
def condition():
    if is_between(_g_talk_troop,trp.town_1_mayor,trp.village_1_elder) and _g_talk_troop_met == 0:
        s9 = str_store_party_name(_current_town)
start_mayor_talk.conditionBlock = condition


start_mayor_begin_1 = Dialog("anyone", "Good day, {playername}.", starting_state="start", ending_state="mayor_begin")
def condition():
    if is_between(_g_talk_troop,trp.town_1_mayor,trp.village_1_elder):
        pass
start_mayor_begin_1.conditionBlock = condition
def code():
    if _merchant_offered_quest == qst.persuade_lords_to_make_peace:
        party_slot_001 = party_get_slot(qst.persuade_lords_to_make_peace,3)
        party_slot_002 = party_get_slot(qst.persuade_lords_to_make_peace,15)
        faction_relation_003 = store_relation(party_slot_001,party_slot_002)
        if faction_relation_003 >= 0:
            _merchant_quest_last_offerer = -1
            _merchant_offered_quest = -1
        #end
    #end
start_mayor_begin_1.codeBlock = code


mayor_begin_lord_persuade_lords_to_make_peace_completed = Dialog("anyone", "{playername}, it was an incredible feat to get {s14} and {s15} make peace, and you made it happen. Your involvement has not only saved our town from disaster, but it has also saved thousands of lives, and put an end to all the grief this bitter war has caused. As the townspeople of {s19}, know that we'll be good on our word, and we are ready to pay the {reg12} denars we promised.", starting_state="mayor_begin", ending_state="lord_persuade_lords_to_make_peace_completed")
def condition():
    if check_quest_active(qst.persuade_lords_to_make_peace) and quest_slot_eq(qst.persuade_lords_to_make_peace,6,_g_talk_troop) and check_quest_succeeded(qst.persuade_lords_to_make_peace):
        quest_slot_001 = quest_get_slot(qst.persuade_lords_to_make_peace,2)
        quest_slot_002 = quest_get_slot(qst.persuade_lords_to_make_peace,4)
        quest_slot_001 *= -1
        quest_slot_002 *= -1
        quest_slot_003 = quest_get_slot(qst.persuade_lords_to_make_peace,3)
        quest_slot_004 = quest_get_slot(qst.persuade_lords_to_make_peace,15)
        s12 = str_store_troop_name(quest_slot_001)
        s13 = str_store_troop_name(quest_slot_002)
        s14 = str_store_faction_name(quest_slot_003)
        s15 = str_store_faction_name(quest_slot_004)
        s19 = str_store_party_name(_current_town)
mayor_begin_lord_persuade_lords_to_make_peace_completed.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(qst.persuade_lords_to_make_peace,3)
    quest_slot_002 = quest_get_slot(qst.persuade_lords_to_make_peace,15)
    _g_force_peace_faction_1 = quest_slot_001
    _g_force_peace_faction_2 = quest_slot_002
    quest_slot_003 = quest_get_slot(qst.persuade_lords_to_make_peace,22)
    reg12 = quest_slot_003
    add_xp_as_reward(4000)
mayor_begin_lord_persuade_lords_to_make_peace_completed.codeBlock = code


lord_persuade_lords_to_make_peace_completed_lord_persuade_lords_to_make_peace_pay = Dialog("anyone|plyr", "Thank you. Let me have the money.", starting_state="lord_persuade_lords_to_make_peace_completed", ending_state="lord_persuade_lords_to_make_peace_pay")


lord_persuade_lords_to_make_peace_completed_lord_persuade_lords_to_make_peace_no_pay = Dialog("anyone|plyr", "No need for a payment. I only did what was right.", starting_state="lord_persuade_lords_to_make_peace_completed", ending_state="lord_persuade_lords_to_make_peace_no_pay")


lord_persuade_lords_to_make_peace_pay_close_window = Dialog("anyone", "Oh, yes, of course. We had already got the money for you. Here, please accept these {reg12} denars together with our most sincere thanks. Me and the people of our town will not forget your help.", starting_state="lord_persuade_lords_to_make_peace_pay", ending_state="close_window")
def code():
    quest_slot_001 = quest_get_slot(qst.persuade_lords_to_make_peace,22)
    troop_add_gold(trp.player,quest_slot_001)
    change_player_relation_with_center(_current_town,5)
    end_quest(qst.persuade_lords_to_make_peace)
    quest_slot_001 = quest_get_slot(qst.persuade_lords_to_make_peace,22)
    reg12 = quest_slot_001
lord_persuade_lords_to_make_peace_pay_close_window.codeBlock = code


lord_persuade_lords_to_make_peace_no_pay_close_window = Dialog("anyone", "You are indeed an extraordenary person, {sir/madame}, and it is an honour for me to have known you. You not only did what was impiossible and put an end to this terrible war, but you won't even accept a reward for it. Very well, I will not insist on the matter, but please know that you will have our eternal respect and gratitude.", starting_state="lord_persuade_lords_to_make_peace_no_pay", ending_state="close_window")
def code():
    change_player_honor(3)
    change_player_relation_with_center(_current_town,8)
    end_quest(qst.persuade_lords_to_make_peace)
lord_persuade_lords_to_make_peace_no_pay_close_window.codeBlock = code


mayor_begin_lord_deal_with_night_bandits_completed = Dialog("anyone", "Very nice work, {playername}, you made short work of those lawless curs. Thank you kindly for all your help, and please accept this bounty of 150 denars.", starting_state="mayor_begin", ending_state="lord_deal_with_night_bandits_completed")
def condition():
    if check_quest_active(qst.deal_with_night_bandits) and quest_slot_eq(qst.deal_with_night_bandits,6,_g_talk_troop) and check_quest_succeeded(qst.deal_with_night_bandits):
        pass
mayor_begin_lord_deal_with_night_bandits_completed.conditionBlock = condition
def code():
    add_xp_as_reward(200)
    troop_add_gold(trp.player,150)
    change_player_relation_with_center(_current_town,1)
    end_quest(qst.deal_with_night_bandits)
mayor_begin_lord_deal_with_night_bandits_completed.codeBlock = code


lord_deal_with_night_bandits_completed_close_window = Dialog("anyone|plyr", "It was my pleasure, {s65}.", starting_state="lord_deal_with_night_bandits_completed", ending_state="close_window")


mayor_begin_mayor_looters_quest_response = Dialog("anyone", "Ah, {playername}. Have you any progress to report?", starting_state="mayor_begin", ending_state="mayor_looters_quest_response")
def condition():
    if check_quest_active(qst.deal_with_looters) and quest_slot_eq(qst.deal_with_looters,6,_g_talk_troop):
        pass
mayor_begin_mayor_looters_quest_response.conditionBlock = condition


mayor_looters_quest_response_mayor_looters_quest_destroyed = Dialog("anyone|plyr", "I've killed some looters.", starting_state="mayor_looters_quest_response", ending_state="mayor_looters_quest_destroyed")
def condition():
    num_destroyed_parties_by_player_001 = store_num_parties_destroyed_by_player(pt.looters)
    party_template_slot_002 = party_template_get_slot(pt.looters,1)
    num_destroyed_parties_by_player_001 -= party_template_slot_002
    if quest_slot_003 < num_destroyed_parties_by_player_001:
        quest_slot_003 = quest_get_slot(qst.deal_with_looters,11)
mayor_looters_quest_response_mayor_looters_quest_destroyed.conditionBlock = condition


mayor_looters_quest_response_mayor_looters_quest_goods = Dialog("anyone|plyr", "I've brought you some goods.", starting_state="mayor_looters_quest_response", ending_state="mayor_looters_quest_goods")
def condition():
    if 1 == 0:
        pass
mayor_looters_quest_response_mayor_looters_quest_goods.conditionBlock = condition


mayor_looters_quest_response_close_window = Dialog("anyone|plyr", "Not yet, sir. Farewell.", starting_state="mayor_looters_quest_response", ending_state="close_window")


mayor_looters_quest_destroyed_mayor_looters_quest_destroyed_2 = Dialog("anyone", "Aye, my scouts saw the whole thing. That should make anyone else think twice before turning outlaw! The bounty is 40 denars for every band, so that makes {reg1} in total. Here is your money, as promised.", starting_state="mayor_looters_quest_destroyed", ending_state="mayor_looters_quest_destroyed_2")
def code():
    num_destroyed_parties_by_player_001 = store_num_parties_destroyed_by_player(pt.looters)
    party_template_slot_002 = party_template_get_slot(pt.looters,1)
    num_destroyed_parties_by_player_001 -= party_template_slot_002
    quest_slot_003 = quest_get_slot(qst.deal_with_looters,11)
    var004 = num_destroyed_parties_by_player_001 - quest_slot_003
    var004 *= 40
    reg1 = var004
    troop_add_gold(trp.player,var004)
    quest_slot_003 = num_destroyed_parties_by_player_001
    quest_set_slot(qst.deal_with_looters,11,quest_slot_003)
mayor_looters_quest_destroyed_mayor_looters_quest_destroyed_2.codeBlock = code


mayor_looters_quest_destroyed_2_close_window = Dialog("anyone", "And that's not the only good news! Thanks to you, the looters have ceased to be a threat. We've not had a single attack reported for some time now.   If there are any of them left, they've either run off or gone deep into hiding. That's good for business,   and what's good for business is good for the town!   I think that concludes our arrangement, {playername}. Please accept this silver as a token of my gratitude. Thank you, and farewell.", starting_state="mayor_looters_quest_destroyed_2", ending_state="close_window")
def condition():
    quest_slot_001 = quest_get_slot(qst.deal_with_looters,10)
    if quest_slot_ge(qst.deal_with_looters,11,quest_slot_001):
        quest_slot_002 = quest_get_slot(qst.deal_with_looters,21)
        quest_slot_003 = quest_get_slot(qst.deal_with_looters,22)
        add_xp_as_reward(quest_slot_002)
        troop_add_gold(trp.player,quest_slot_003)
        change_troop_renown(trp.player,1)
        change_player_relation_with_center(_current_town,5)
        end_quest(qst.deal_with_looters)
        for cur_party in __all_parties__:
            party_template_id_005 = party_get_template_id(cur_party)
            if party_template_id_005 == pt.looters:
                party_set_flags(cur_party,262144,0)
            #end
        #end
    #end
mayor_looters_quest_destroyed_2_close_window.conditionBlock = condition


mayor_looters_quest_destroyed_2_mayor_looters_quest_response = Dialog("anyone", "Anything else you need?", starting_state="mayor_looters_quest_destroyed_2", ending_state="mayor_looters_quest_response")


mayor_looters_quest_goods_mayor_looters_quest_goods_response = Dialog("anyone", "Hah, I knew I could count on you! Just tell me which item to take from your baggage, and I'll send some men to collect it. I still need {reg1} denars' worth of goods.", starting_state="mayor_looters_quest_goods", ending_state="mayor_looters_quest_goods_response")
def condition():
    reg1 = quest_get_slot(qst.deal_with_looters,14)
mayor_looters_quest_goods_mayor_looters_quest_goods_response.conditionBlock = condition


mayor_looters_quest_goods_response_mayor_looters_quest_goods_2 = Dialog("anyone|repeat_for_100|plyr", "{s5}.", starting_state="mayor_looters_quest_goods_response", ending_state="mayor_looters_quest_goods_2")
def condition():
    var001 = store_repeat_object()
    var001 += itm.spice
    if is_between(var001,itm.spice,itm.siege_supply) and player_has_item(var001):
        s5 = str_store_item_name(var001)
mayor_looters_quest_goods_response_mayor_looters_quest_goods_2.conditionBlock = condition
def code():
    item_id_001 = store_repeat_object()
    item_id_001 += itm.spice
    troop_remove_items(trp.player,item_id_001,1)
    var002 = reg0
    troop_add_gold(trp.player,var002)
    quest_slot_003 = quest_get_slot(qst.deal_with_looters,14)
    quest_slot_003 -= var002
    quest_set_slot(qst.deal_with_looters,14,quest_slot_003)
    s6 = str_store_item_name(item_id_001)
mayor_looters_quest_goods_response_mayor_looters_quest_goods_2.codeBlock = code


mayor_looters_quest_goods_response_mayor_looters_quest_goods_3 = Dialog("anyone|plyr", "Nothing at the moment, sir.", starting_state="mayor_looters_quest_goods_response", ending_state="mayor_looters_quest_goods_3")


mayor_looters_quest_goods_3_mayor_looters_quest_response = Dialog("anyone", "Anything else you need?", starting_state="mayor_looters_quest_goods_3", ending_state="mayor_looters_quest_response")


mayor_looters_quest_goods_2_mayor_looters_quest_goods_response = Dialog("anyone", "Excellent, here is the money for your {s6}. Do you have any more goods to give me? I still need {reg1} denars' worth of goods.", starting_state="mayor_looters_quest_goods_2", ending_state="mayor_looters_quest_goods_response")
def condition():
    if quest_slot_ge(qst.deal_with_looters,14,1):
        reg1 = quest_get_slot(qst.deal_with_looters,14)
mayor_looters_quest_goods_2_mayor_looters_quest_goods_response.conditionBlock = condition


mayor_looters_quest_goods_2_close_window = Dialog("anyone", "Well done, {playername}, that's the last of the goods I need. Here is the money for your {s6}, and a small bonus for helping me out. I'm afraid I won't be paying for any more goods, nor bounties on looters, but you're welcome to keep hunting the bastards if any remain. Thank you for your help, I won't forget it.", starting_state="mayor_looters_quest_goods_2", ending_state="close_window")
def condition():
    if not quest_slot_ge(qst.deal_with_looters,14,1):
        quest_slot_001 = quest_get_slot(qst.deal_with_looters,21)
        quest_slot_002 = quest_get_slot(qst.deal_with_looters,22)
        add_xp_as_reward(quest_slot_001)
        troop_add_gold(trp.player,quest_slot_002)
        change_player_relation_with_center(_current_town,3)
        end_quest(qst.deal_with_looters)
        for cur_party in __all_parties__:
            party_template_id_004 = party_get_template_id(cur_party)
            if party_template_id_004 == pt.looters:
                party_set_flags(cur_party,262144,0)
            #end
        #end
    #end
mayor_looters_quest_goods_2_close_window.conditionBlock = condition


mayor_begin_close_window = Dialog("anyone", "Good to see you again {playername}. I have heard that you have delivered the cattle successfully. I will tell the merchants how reliable you are. And here is your pay, {reg8} denars.", starting_state="mayor_begin", ending_state="close_window")
def condition():
    if check_quest_active(qst.move_cattle_herd) and quest_slot_eq(qst.move_cattle_herd,6,_g_talk_troop) and check_quest_succeeded(qst.move_cattle_herd):
        pass
mayor_begin_close_window.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(qst.move_cattle_herd,22)
    troop_add_gold(trp.player,quest_slot_001)
    var002 = quest_slot_001 / 3
    add_xp_as_reward(var002)
    change_troop_renown(trp.player,1)
    change_player_relation_with_center(_current_town,3)
    end_quest(qst.move_cattle_herd)
    reg8 = quest_slot_001
mayor_begin_close_window.codeBlock = code


mayor_begin_move_cattle_herd_failed = Dialog("anyone", "I heard that you have lost the cattle herd on your way to {s9}. I had a very difficult time explaining your failure to the owner of that herd, {sir/madam}. Do you have anything to say?", starting_state="mayor_begin", ending_state="move_cattle_herd_failed")
def condition():
    if check_quest_active(qst.move_cattle_herd) and quest_slot_eq(qst.move_cattle_herd,6,_g_talk_troop) and check_quest_failed(qst.move_cattle_herd):
        pass
mayor_begin_move_cattle_herd_failed.conditionBlock = condition


move_cattle_herd_failed_move_cattle_herd_failed_2 = Dialog("anyone|plyr", "I am sorry. But I was attacked on the way.", starting_state="move_cattle_herd_failed", ending_state="move_cattle_herd_failed_2")


move_cattle_herd_failed_move_cattle_herd_failed_2_1 = Dialog("anyone|plyr", "I am sorry. The stupid animals wandered off during the night.", starting_state="move_cattle_herd_failed", ending_state="move_cattle_herd_failed_2")


move_cattle_herd_failed_2_merchant_ask_for_debts = Dialog("anyone", "Well, it was your responsibility to deliver that herd safely, no matter what. You should know that the owner of the herd demanded to be compensated for his loss, and I had to pay him 1000 denars. So you now owe me that money.", starting_state="move_cattle_herd_failed_2", ending_state="merchant_ask_for_debts")
def code():
    _debt_to_merchants_guild = 1000
    end_quest(qst.move_cattle_herd)
move_cattle_herd_failed_2_merchant_ask_for_debts.codeBlock = code


mayor_begin_close_window_1 = Dialog("anyone", "{playername} -- I am in your debt for bringing back my friend's daughter.  Please take these {reg8} denars that I promised you.  My friend wished he could give more but paying that ransom brought him to his knees.", starting_state="mayor_begin", ending_state="close_window")
def condition():
    if check_quest_active(qst.kidnapped_girl) and quest_slot_eq(qst.kidnapped_girl,11,4) and quest_slot_eq(qst.kidnapped_girl,6,_g_talk_troop):
        pass
mayor_begin_close_window_1.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(qst.kidnapped_girl,22)
    troop_add_gold(trp.player,quest_slot_001)
    reg8 = quest_slot_001
    var002 = quest_slot_001
    var002 *= 2
    var002 += 100
    add_xp_as_reward(var002)
    change_troop_renown(trp.player,3)
    change_player_relation_with_center(_current_town,2)
    end_quest(qst.kidnapped_girl)
mayor_begin_close_window_1.codeBlock = code


mayor_begin_mayor_friendly_pretalk = Dialog("anyone", "Well -- it sounds like you were able to track down the bandits, and show them what happens to those who would disrupt the flow of commerce. Here is your reward: {reg5} denars. It is well earned, and we are most grateful.", starting_state="mayor_begin", ending_state="mayor_friendly_pretalk")
def condition():
    if check_quest_active(qst.track_down_bandits) and check_quest_succeeded(qst.track_down_bandits) and quest_slot_eq(qst.track_down_bandits,6,_g_talk_troop):
        pass
mayor_begin_mayor_friendly_pretalk.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(qst.track_down_bandits,22)
    troop_add_gold(trp.player,quest_slot_001)
    var002 = quest_slot_001
    var002 *= 2
    add_xp_as_reward(var002)
    change_player_relation_with_center(_current_town,2)
    change_troop_renown(trp.player,3)
    end_quest(qst.track_down_bandits)
    reg5 = quest_slot_001
mayor_begin_mayor_friendly_pretalk.codeBlock = code


mayor_begin_mayor_friendly_pretalk_1 = Dialog("anyone", "I have heard about your deeds. You have given those bandits the punishment they deserved. You are really as good as they say. Here is your reward: {reg5} denars. I would like to give more but those bandits almost brought me to bankruptcy.", starting_state="mayor_begin", ending_state="mayor_friendly_pretalk")
def condition():
    if check_quest_active(qst.troublesome_bandits) and check_quest_succeeded(qst.troublesome_bandits) and quest_slot_eq(qst.troublesome_bandits,6,_g_talk_troop):
        pass
mayor_begin_mayor_friendly_pretalk_1.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(qst.troublesome_bandits,22)
    troop_add_gold(trp.player,quest_slot_001)
    var002 = quest_slot_001
    var002 *= 2
    add_xp_as_reward(var002)
    change_player_relation_with_center(_current_town,2)
    change_troop_renown(trp.player,3)
    end_quest(qst.troublesome_bandits)
    reg5 = quest_slot_001
mayor_begin_mayor_friendly_pretalk_1.codeBlock = code


mayor_begin_merchant_ask_for_debts = Dialog("anyone", "According to my accounts, you owe the merchants guild {reg1} denars. I'd better collect that now.", starting_state="mayor_begin", ending_state="merchant_ask_for_debts")
def condition():
    if _debt_to_merchants_guild >= 50:
        pass
mayor_begin_merchant_ask_for_debts.conditionBlock = condition
def code():
    reg1 = _debt_to_merchants_guild
mayor_begin_merchant_ask_for_debts.codeBlock = code


merchant_ask_for_debts_merchant_debts_paid = Dialog("anyone|plyr", "Alright. I'll pay my debt to you.", starting_state="merchant_ask_for_debts", ending_state="merchant_debts_paid")
def condition():
    if reg5 >= _debt_to_merchants_guild:
        reg5 = store_troop_gold(trp.player)
merchant_ask_for_debts_merchant_debts_paid.conditionBlock = condition
def code():
    troop_remove_gold(trp.player,_debt_to_merchants_guild)
    _debt_to_merchants_guild = 0
merchant_ask_for_debts_merchant_debts_paid.codeBlock = code


merchant_debts_paid_mayor_pretalk = Dialog("anyone", "Excellent. I'll let my fellow merchants know that you are clear of any debts.", starting_state="merchant_debts_paid", ending_state="mayor_pretalk")


merchant_ask_for_debts_merchant_debts_not_paid = Dialog("anyone|plyr", "I'm afraid I can't pay that sum now.", starting_state="merchant_ask_for_debts", ending_state="merchant_debts_not_paid")


merchant_debts_not_paid_close_window = Dialog("anyone", "In that case, I am afraid, I can't deal with you. Guild rules... Come back when you can pay the {reg1} denars. And know that we'll be charging an interest to your debt. So the sooner you pay it, the better.", starting_state="merchant_debts_not_paid", ending_state="close_window")
def condition():
    reg1 = _debt_to_merchants_guild
merchant_debts_not_paid_close_window.conditionBlock = condition


mayor_begin_mayor_talk = Dialog("anyone", "What can I do for you?", starting_state="mayor_begin", ending_state="mayor_talk")


mayor_friendly_pretalk_mayor_talk = Dialog("anyone", "Now... What else may I do for you?", starting_state="mayor_friendly_pretalk", ending_state="mayor_talk")


mayor_pretalk_mayor_talk = Dialog("anyone", "Yes?", starting_state="mayor_pretalk", ending_state="mayor_talk")


mayor_talk_mayor_info_begin = Dialog("anyone|plyr", "Can you tell me about what you do?", starting_state="mayor_talk", ending_state="mayor_info_begin")


mayor_talk_merchant_quest_requested = Dialog("anyone|plyr", "Do you happen to have a job for me?", starting_state="mayor_talk", ending_state="merchant_quest_requested")
def condition():
    if partner_quest_001 < 0 and _merchant_quest_last_offerer != _g_talk_troop:
        partner_quest_001 = store_partner_quest()
mayor_talk_merchant_quest_requested.conditionBlock = condition
def code():
    _merchant_quest_last_offerer = _g_talk_troop
    get_quest(_g_talk_troop)
    _random_merchant_quest_no = reg0
    _merchant_offered_quest = _random_merchant_quest_no
mayor_talk_merchant_quest_requested.codeBlock = code


mayor_talk_merchant_quest_last_offered_job = Dialog("anyone|plyr", "About that job you offered me...", starting_state="mayor_talk", ending_state="merchant_quest_last_offered_job")
def condition():
    if partner_quest_001 < 0 and _merchant_quest_last_offerer == _g_talk_troop and _merchant_offered_quest > 0:
        partner_quest_001 = store_partner_quest()
mayor_talk_merchant_quest_last_offered_job.conditionBlock = condition


mayor_talk_merchant_quest_about_job = Dialog("anyone|plyr", "About the job you gave me...", starting_state="mayor_talk", ending_state="merchant_quest_about_job")
def condition():
    if reg2 >= 0:
        reg2 = store_partner_quest()
mayor_talk_merchant_quest_about_job.conditionBlock = condition


mayor_talk_mayor_political_talk = Dialog("anyone|plyr", "I have some questions of a political nature.", starting_state="mayor_talk", ending_state="mayor_political_talk")


mayor_talk_mayor_economy_report_1 = Dialog("anyone|plyr", "How is trade around here?", starting_state="mayor_talk", ending_state="mayor_economy_report_1")
def code():
    merchant_road_info_to_s42(_g_encountered_party)
mayor_talk_mayor_economy_report_1.codeBlock = code


mayor_talk_mayor_wealth_comparison_1 = Dialog("anyone|plyr", "How does the wealth of this region compare with the rest of Calradia?", starting_state="mayor_talk", ending_state="mayor_wealth_comparison_1")


mayor_talk_mayor_investment_possible = Dialog("anyone|plyr", "I wish to buy land in this town for a productive enterprise", starting_state="mayor_talk", ending_state="mayor_investment_possible")
def condition():
    if item_slot_ge(itm.velvet,57,itm.raw_dyes):
        pass
mayor_talk_mayor_investment_possible.conditionBlock = condition


mayor_investment_possible_mayor_pretalk = Dialog("anyone", "You already operate a {s4} here. There probably aren't enough skilled tradesmen to start a second enterprise.", starting_state="mayor_investment_possible", ending_state="mayor_pretalk")
def condition():
    if party_slot_ge(_g_encountered_party,137,1):
        party_slot_001 = party_get_slot(_g_encountered_party,137)
        get_enterprise_name(party_slot_001)
        s4 = str_store_string(reg0)
mayor_investment_possible_mayor_pretalk.conditionBlock = condition


mayor_investment_possible_mayor_investment_advice = Dialog("anyone", "{!}CHEAT: Yes, we're playtesting this feature, and you're in cheat mode. Go right ahead.", starting_state="mayor_investment_possible", ending_state="mayor_investment_advice")
def condition():
    if _cheat_mode >= 3:
        pass
mayor_investment_possible_mayor_investment_advice.conditionBlock = condition


mayor_investment_possible_mayor_pretalk_1 = Dialog("anyone", "{s9}", starting_state="mayor_investment_possible", ending_state="mayor_pretalk")
def condition():
    if _g_encountered_party_relation < 0:
        s9 = str_store_string(gstr.enterprise_enemy_realm)
mayor_investment_possible_mayor_pretalk_1.conditionBlock = condition


mayor_investment_possible_mayor_investment_advice_1 = Dialog("anyone", "Of course, {sir/my lady}. You are the lord of this town, and no one is going to stop you.", starting_state="mayor_investment_possible", ending_state="mayor_investment_advice")
def condition():
    if party_slot_eq(_g_encountered_party,7,trp.player):
        pass
mayor_investment_possible_mayor_investment_advice_1.conditionBlock = condition


mayor_investment_possible_mayor_investment = Dialog("anyone", "Well... Given your relationship with our liege, {s4}, I think that you will not find many here who are brave enough to sell you any land.", starting_state="mayor_investment_possible", ending_state="mayor_investment")
def condition():
    party_slot_001 = party_get_slot(_g_encountered_party,7)
    if is_between(party_slot_001,trp.npc1,trp.knight_1_1_wife):
        troop_get_relation_with_troop(trp.player,party_slot_001)
        var002 = reg0
        if var002 < 0:
            s4 = str_store_troop_name(party_slot_001)
mayor_investment_possible_mayor_investment.conditionBlock = condition


mayor_investment_mayor_pretalk = Dialog("anyone|auto_proceed", "{!}.", starting_state="mayor_investment", ending_state="mayor_pretalk")


mayor_investment_possible_mayor_pretalk_2 = Dialog("anyone", "Well... To be honest, I think that we in the guild would like to know you a little better. We can be very particular about outsiders coming in here and buying land.", starting_state="mayor_investment_possible", ending_state="mayor_pretalk")
def condition():
    if not party_slot_ge(_current_town,26,0):
        pass
mayor_investment_possible_mayor_pretalk_2.conditionBlock = condition


mayor_investment_possible_mayor_investment_advice_2 = Dialog("anyone", "Very good, {sir/my lady}. We in the guild know and trust you, and I think I could find someone to sell you the land you need.", starting_state="mayor_investment_possible", ending_state="mayor_investment_advice")


mayor_investment_advice_investment_choose_enterprise = Dialog("anyone", "A couple of things to keep in mind -- skilled laborers are always at a premium, so I doubt that you will be able to open up more than one enterprise here. In order to make a profit for yourself, you should choose a commodity which is in relatively short supply, but for which the raw materials are cheap. What sort of enterprise would you like to start?", starting_state="mayor_investment_advice", ending_state="investment_choose_enterprise")


investment_choose_enterprise_investment_summary = Dialog("anyone|plyr", "A mill and bakery, to make bread from grain", starting_state="investment_choose_enterprise", ending_state="investment_summary")
def code():
    _enterprise_production = itm.bread
investment_choose_enterprise_investment_summary.codeBlock = code


investment_choose_enterprise_investment_summary_1 = Dialog("anyone|plyr", "A brewery, to make ale from grain", starting_state="investment_choose_enterprise", ending_state="investment_summary")
def code():
    _enterprise_production = itm.ale
investment_choose_enterprise_investment_summary_1.codeBlock = code


investment_choose_enterprise_investment_summary_2 = Dialog("anyone|plyr", "A tannery, to make leather from hides", starting_state="investment_choose_enterprise", ending_state="investment_summary")
def code():
    _enterprise_production = itm.leatherwork
investment_choose_enterprise_investment_summary_2.codeBlock = code


investment_choose_enterprise_investment_summary_3 = Dialog("anyone|plyr", "A wine press, to make wine from grapes", starting_state="investment_choose_enterprise", ending_state="investment_summary")
def code():
    _enterprise_production = itm.wine
investment_choose_enterprise_investment_summary_3.codeBlock = code


investment_choose_enterprise_investment_summary_4 = Dialog("anyone|plyr", "An oil press, to make oil from olives", starting_state="investment_choose_enterprise", ending_state="investment_summary")
def code():
    _enterprise_production = itm.oil
investment_choose_enterprise_investment_summary_4.codeBlock = code


investment_choose_enterprise_investment_summary_5 = Dialog("anyone|plyr", "An ironworks, to make tools from iron", starting_state="investment_choose_enterprise", ending_state="investment_summary")
def code():
    _enterprise_production = itm.tools
investment_choose_enterprise_investment_summary_5.codeBlock = code


investment_choose_enterprise_investment_summary_6 = Dialog("anyone|plyr", "A weavery and dyeworks, to make velvet from silk and dye", starting_state="investment_choose_enterprise", ending_state="investment_summary")
def code():
    _enterprise_production = itm.velvet
investment_choose_enterprise_investment_summary_6.codeBlock = code


investment_choose_enterprise_investment_summary_7 = Dialog("anyone|plyr", "A weavery, to make wool cloth from wool", starting_state="investment_choose_enterprise", ending_state="investment_summary")
def code():
    _enterprise_production = itm.wool_cloth
investment_choose_enterprise_investment_summary_7.codeBlock = code


investment_choose_enterprise_investment_summary_8 = Dialog("anyone|plyr", "A weavery, to make linen from flax", starting_state="investment_choose_enterprise", ending_state="investment_summary")
def code():
    _enterprise_production = itm.linen
investment_choose_enterprise_investment_summary_8.codeBlock = code


investment_choose_enterprise_mayor_pretalk = Dialog("anyone|plyr", "Never mind", starting_state="investment_choose_enterprise", ending_state="mayor_pretalk")


investment_summary_mayor_investment_confirm = Dialog("anyone", "Very good, sir. The land and the materials on which you may build your {s3} will cost you {reg7} denars. Right now, your {s3} will produce {s4} worth {reg1} denars each week, while the {s6} needed to manufacture that batch will be {reg2} and labor and upkeep will be {reg3}.{s9} I should guess that your profit would be {reg0} denars a week. This assumes of course that prices remain constant -- which, I can virtually guarantee you, they will not. Do you wish to proceed?", starting_state="investment_summary", ending_state="mayor_investment_confirm")
def code():
    _enterprise_cost = item_get_slot(_enterprise_production,58)
    reg7 = _enterprise_cost
    s4 = str_store_item_name(_enterprise_production)
    get_enterprise_name(_enterprise_production)
    s3 = str_store_string(reg0)
    process_player_enterprise(_enterprise_production,_g_encountered_party)
    item_slot_001 = item_get_slot(_enterprise_production,50)
    s6 = str_store_item_name(item_slot_001)
    str_clear(9)
    var002 = reg10
    if var002 > 0:
        item_slot_003 = item_get_slot(_enterprise_production,57)
        s11 = str_store_item_name(item_slot_003)
        s9 = str_store_string(gstr.describe_secondary_input)
    #end
investment_summary_mayor_investment_confirm.codeBlock = code


mayor_investment_confirm_mayor_investment_purchase = Dialog("anyone|plyr", "Yes. Here is money for the land.", starting_state="mayor_investment_confirm", ending_state="mayor_investment_purchase")
def condition():
    if troop_gold_001 >= _enterprise_cost:
        troop_gold_001 = store_troop_gold(trp.player)
mayor_investment_confirm_mayor_investment_purchase.conditionBlock = condition
def code():
    party_set_slot(_g_encountered_party,137,_enterprise_production)
    party_set_slot(_g_encountered_party,139,7)
    troop_remove_gold(trp.player,_enterprise_cost)
    var001 = _current_town - p.town_1
    troop_id_002 = var001 + trp.town_1_master_craftsman
    if _enterprise_production == itm.bread:
        troop_set_name(troop_id_002,gstr.master_miller)
    elif _enterprise_production == itm.ale:
        troop_set_name(troop_id_002,gstr.master_brewer)
    elif _enterprise_production == itm.oil:
        troop_set_name(troop_id_002,gstr.master_presser)
    elif _enterprise_production == itm.tools:
        troop_set_name(troop_id_002,gstr.master_smith)
    elif _enterprise_production == itm.wool_cloth:
        troop_set_name(troop_id_002,gstr.master_weaver)
    elif _enterprise_production == itm.linen:
        troop_set_name(troop_id_002,gstr.master_weaver)
    elif _enterprise_production == itm.leatherwork:
        troop_set_name(troop_id_002,gstr.master_tanner)
    elif _enterprise_production == itm.velvet:
        troop_set_name(troop_id_002,gstr.master_dyer)
    elif _enterprise_production == itm.wine:
        troop_set_name(troop_id_002,gstr.master_vinter)
    #end
mayor_investment_confirm_mayor_investment_purchase.codeBlock = code


mayor_investment_confirm_mayor_pretalk = Dialog("anyone|plyr", "No -- that's not economical for me at the moment.", starting_state="mayor_investment_confirm", ending_state="mayor_pretalk")


mayor_investment_purchase_mayor_pretalk = Dialog("anyone", "Very good. Your enterprise should be up and running in about a week. When next you come, and thereafter, you should speak to your {s4} about its operations.", starting_state="mayor_investment_purchase", ending_state="mayor_pretalk")
def code():
    var001 = _current_town - p.town_1
    var002 = var001 + trp.town_1_master_craftsman
    s4 = str_store_troop_name(var002)
mayor_investment_purchase_mayor_pretalk.codeBlock = code


mayor_talk_close_window = Dialog("anyone|plyr", "[Leave]", starting_state="mayor_talk", ending_state="close_window")


mayor_info_begin_mayor_info_talk = Dialog("anyone", "I am the guildmaster of {s9}. You can say I am the leader of the good people of {s9}. I can help you find a job if you are looking for some honest work.", starting_state="mayor_info_begin", ending_state="mayor_info_talk")
def condition():
    s9 = str_store_party_name(_current_town)
mayor_info_begin_mayor_info_talk.conditionBlock = condition
def code():
    _mayor_info_lord_told = 0
mayor_info_begin_mayor_info_talk.codeBlock = code


mayor_info_talk_mayor_info_lord = Dialog("anyone|plyr", "Who rules this town?", starting_state="mayor_info_talk", ending_state="mayor_info_lord")
def condition():
    if _mayor_info_lord_told == 0:
        pass
mayor_info_talk_mayor_info_lord.conditionBlock = condition


mayor_info_lord_mayor_info_talk = Dialog("anyone", "Our town's lord and protector is {s10}. He owns the castle and sometimes resides there, and collects taxes from the town. However we regulate ourselves in most of the matters that concern ourselves. As the town's guildmaster I have the authority to decide those things.", starting_state="mayor_info_lord", ending_state="mayor_info_talk")
def condition():
    party_slot_001 = party_get_slot(_current_town,7)
    if party_slot_001 == trp.player:
        s10 = str_store_string(gstr.your_excellency)
    elif is_between(party_slot_001,trp.npc1,trp.knight_1_1_wife):
        s10 = str_store_troop_name(party_slot_001)
    else:
        faction_slot_002 = faction_get_slot(_g_encountered_party_faction,11)
        s10 = str_store_troop_name(faction_slot_002)
    #end
mayor_info_lord_mayor_info_talk.conditionBlock = condition
def code():
    _mayor_info_lord_told = 1
mayor_info_lord_mayor_info_talk.codeBlock = code


mayor_info_talk_mayor_pretalk = Dialog("anyone|plyr", "That's all I need to know. Thanks.", starting_state="mayor_info_talk", ending_state="mayor_pretalk")


mayor_political_talk_mayor_political_questions = Dialog("anyone", "Politics? Good heaven, the guild has nothing to do with politics. We are loyal servants of {s10}. We merely govern our own affairs, and pass on the townspeople's concerns to our lords and masters, and maybe warn them from time to time against evil advice. Anyway, what did you wish to ask?", starting_state="mayor_political_talk", ending_state="mayor_political_questions")
def condition():
    faction_slot_001 = faction_get_slot(_g_encountered_party_faction,11)
    s10 = str_store_troop_name(faction_slot_001)
    party_slot_002 = party_get_slot(_current_town,7)
    if party_slot_002 == trp.player:
        s10 = str_store_string(gstr.your_excellency)
    elif is_between(party_slot_002,trp.npc1,trp.knight_1_1_wife) and party_slot_002 != faction_slot_001:
        s11 = str_store_troop_name(party_slot_002)
        if party_slot_002 != faction_slot_001:
            s10 = str_store_string(gstr.s10_and_s11)
        #end
    #end
mayor_political_talk_mayor_political_questions.conditionBlock = condition


mayor_prepolitics_mayor_political_questions = Dialog("anyone", "Did I mention that we here are all {s9}? Because I can't stress that enough... Anyway... Is there anything else?", starting_state="mayor_prepolitics", ending_state="mayor_political_questions")
def condition():
    faction_slot_001 = faction_get_slot(_g_encountered_party_faction,11)
    if faction_slot_001 == trp.player:
        s9 = str_store_string(gstr.your_loyal_subjects)
    else:
        s10 = str_store_troop_name(faction_slot_001)
        s9 = str_store_string(gstr.loyal_subjects_of_s10)
    #end
mayor_prepolitics_mayor_political_questions.conditionBlock = condition


mayor_political_questions_mayor_war_description_1 = Dialog("anyone|plyr", "What is the cause of all these wars in Calradia?", starting_state="mayor_political_questions", ending_state="mayor_war_description_1")


mayor_war_description_1_mayor_war_description_2 = Dialog("anyone", "Well, to answer your question generally, each monarch claims to be the rightful heir to the old Calradic emperors. Some of these claims are based on forgotten dynastic marriages and others are based on obscure promises, while {s22} Rhodoks invoke the empire's unwritten constitution. So in theory, any one realm has the right to declare war on any other realm at any time.", starting_state="mayor_war_description_1", ending_state="mayor_war_description_2")
def condition():
    faction_slot_001 = faction_get_slot(_g_encountered_party_faction,11)
    s10 = str_store_troop_name(faction_slot_001)
    s22 = str_store_string(gstr.the)
    if _g_encountered_party_faction == fac.kingdom_5:
        s22 = str_store_string(gstr.we)
    #end
    val_max(_g_mayor_given_political_dialog,1)
mayor_war_description_1_mayor_war_description_2.conditionBlock = condition


mayor_war_description_2_mayor_war_description_3 = Dialog("anyone", "In practice, to make war is exhausting work. It is easy enough to lay waste to the enemy's farmland, but crops will grow back, and it is a far different matter to capture an enemy stronghold and to hold it. So the monarchs of Calradia will fight a little, sign a truce, fight a little more, and so on and so forth. Often, a monarch will go to war when another realm provokes them. At such times, some bad influences who look to enrich themselves with ransoms and pillage will clamor for retribution, and thus the damage caused by war to a monarch's treasury is less than the damage caused by doing nothing would be to his authority... I'm of course not talking about {s10}, as no one would ever question {reg4?her:his} authority", starting_state="mayor_war_description_2", ending_state="mayor_war_description_3")
def condition():
    faction_slot_001 = faction_get_slot(_g_encountered_party_faction,11)
    s10 = str_store_troop_name(faction_slot_001)
    reg4 = troop_get_type(faction_slot_001)
mayor_war_description_2_mayor_war_description_3.conditionBlock = condition


mayor_war_description_3_mayor_war_description_4 = Dialog("anyone", "I would stress again that we in the guild have nothing to do with politics. But if {s10} were to ask for my advice on these matters, as a loyal subject, I would tell {reg4?her:him} that while {reg4?her:his} claim to all of Calradia is truly just, even the most legitimate claim must be backed by armed men, and armed men want money, and money comes from trade, and war ruins trade, so sometimes the best way to push a claim is not to push it, if you know what I mean...", starting_state="mayor_war_description_3", ending_state="mayor_war_description_4")
def condition():
    faction_slot_001 = faction_get_slot(_g_encountered_party_faction,11)
    reg4 = troop_get_type(faction_slot_001)
mayor_war_description_3_mayor_war_description_4.conditionBlock = condition


mayor_war_description_4_mayor_prepolitics = Dialog("anyone", "You may tell {s10} this if you see {reg4?her:him}. Don't mention my name specifically -- just say 'the people of {s4}' told you this. Our personal opinion, of course, as to what would be in {s10}'s best interests. None of us would ever dream of questioning a monarch's sovereign right to push {reg4?her:his} legitimate claims.", starting_state="mayor_war_description_4", ending_state="mayor_prepolitics")
def condition():
    s4 = str_store_party_name(_g_encountered_party)
    faction_slot_001 = faction_get_slot(_g_encountered_party_faction,11)
    reg4 = troop_get_type(faction_slot_001)
mayor_war_description_4_mayor_prepolitics.conditionBlock = condition


mayor_political_questions_mayor_politics_assess = Dialog("anyone|plyr", "What is {s10}'s policy in regards to the other realms of Calradia?", starting_state="mayor_political_questions", ending_state="mayor_politics_assess")
def condition():
    faction_slot_001 = faction_get_slot(_g_encountered_party_faction,11)
    s10 = str_store_troop_name(faction_slot_001)
    if _g_mayor_given_political_dialog >= 1:
        var002 = 0
        for fac_003 in range(fac.player_supporters_faction, fac.kingdoms_end):
            if faction_slot_eq(fac_003,21,0) and fac_003 != _g_encountered_party_faction:
                var002 = 1
                if var002 == 1:
                    pass
                #end
            #end
        #end
    #end
mayor_political_questions_mayor_politics_assess.conditionBlock = condition


mayor_politics_assess_mayor_politics_assess_realm = Dialog("anyone", "Which realm did you have in mind?", starting_state="mayor_politics_assess", ending_state="mayor_politics_assess_realm")


mayor_politics_assess_realm_mayor_politics_give_realm_assessment = Dialog("anyone|repeat_for_factions|plyr", "{s11}", starting_state="mayor_politics_assess_realm", ending_state="mayor_politics_give_realm_assessment")
def condition():
    var001 = store_repeat_object()
    if is_between(var001,fac.player_supporters_faction,fac.kingdoms_end) and faction_slot_eq(var001,21,0) and var001 != _g_encountered_party_faction:
        s11 = str_store_faction_name(var001)
mayor_politics_assess_realm_mayor_politics_give_realm_assessment.conditionBlock = condition
def code():
    _faction_selected = store_repeat_object()
mayor_politics_assess_realm_mayor_politics_give_realm_assessment.codeBlock = code


mayor_politics_give_realm_assessment_mayor_prepolitics = Dialog("anyone", "{s14}", starting_state="mayor_politics_give_realm_assessment", ending_state="mayor_prepolitics")
def code():
    npc_decision_checklist_peace_or_war(_g_encountered_party_faction,_faction_selected,-1)
mayor_politics_give_realm_assessment_mayor_prepolitics.codeBlock = code


mayor_political_questions_mayor_internal_politics = Dialog("anyone|plyr", "What can you say about the internal politics of the realms?", starting_state="mayor_political_questions", ending_state="mayor_internal_politics")


mayor_internal_politics_mayor_internal_politics_2 = Dialog("anyone", "Well, here in the {s4} we are all united by our love for {s5} and support for {reg4?her:his} legitimate claim to the rulership of all Calradia. But I have heard some talk of internal bickering in other realms...", starting_state="mayor_internal_politics", ending_state="mayor_internal_politics_2")
def condition():
    s4 = str_store_faction_name(_g_encountered_party_faction)
    faction_slot_001 = faction_get_slot(_g_encountered_party_faction,11)
    s5 = str_store_troop_name(faction_slot_001)
    reg4 = troop_get_type(faction_slot_001)
mayor_internal_politics_mayor_internal_politics_2.conditionBlock = condition


mayor_internal_politics_2_mayor_internal_politics_3 = Dialog("anyone", "The lords of a realm often have very different ideas about honor, strategy, and the way a nobleman should behave. In addition, they compete with each other for the ruler's favor, and are constantly weighing up their position -- how they stand, how their friends and family stand, and how their enemies stand.", starting_state="mayor_internal_politics_2", ending_state="mayor_internal_politics_3")


mayor_internal_politics_3_mayor_internal_politics_4 = Dialog("anyone", "Underlying all the tensions is the possibility that a lord may abandon his liege, and pledge vassalhood to another. In theory, each lord has sworn an oath of vassalage, but in practice, a vassal can always find an excuse to absolve himself. The vassal may claim that the liege has failed to hold up his end of the bargain, to protect the vassal and treat him justly. Or, the vassal may claim that his liege is in fact a usurper, and another has a better claim to the kingship.", starting_state="mayor_internal_politics_3", ending_state="mayor_internal_politics_4")


mayor_internal_politics_4_mayor_internal_politics_5 = Dialog("anyone", "Lieges and vassals still watch each other carefully. If a king believes that his vassal is going to change sides or rebel, he may indict the vassal for treason and seize his properties. Likewise, if a vassal fears that he will be indicted, he may rebel. Usually, whoever makes the first move will be able to control the vassal's fortresses.", starting_state="mayor_internal_politics_4", ending_state="mayor_internal_politics_5")


mayor_internal_politics_5_mayor_prepolitics = Dialog("anyone", "Now, men do not trust a vassal who turns coat easily, nor do they trust a king who lightly throws around charges of treason. Those two factors can keep a realm together. But if relations between a vassal and a liege deteriorate far enough, things can become very tense indeed... In other lands, of course. These things could never happen here in the {s4}.", starting_state="mayor_internal_politics_5", ending_state="mayor_prepolitics")


mayor_political_questions_mayor_pretalk = Dialog("anyone|plyr", "That is all. Thank you.", starting_state="mayor_political_questions", ending_state="mayor_pretalk")


merchant_quest_about_job_merchant_quest_about_job_2 = Dialog("anyone", "What about it?", starting_state="merchant_quest_about_job", ending_state="merchant_quest_about_job_2")


merchant_quest_about_job_2_merchant_quest_what_if_fail = Dialog("anyone|plyr", "What if I can't finish it?", starting_state="merchant_quest_about_job_2", ending_state="merchant_quest_what_if_fail")


merchant_quest_about_job_2_merchant_quest_about_job_working = Dialog("anyone|plyr", "Well, I'm still working on it.", starting_state="merchant_quest_about_job_2", ending_state="merchant_quest_about_job_working")


merchant_quest_about_job_working_mayor_pretalk = Dialog("anyone", "Good. I'm sure you will handle it.", starting_state="merchant_quest_about_job_working", ending_state="mayor_pretalk")


merchant_quest_last_offered_job_merchant_quest_brief = Dialog("anyone", "Eh, you want to reconsider that. Good...", starting_state="merchant_quest_last_offered_job", ending_state="merchant_quest_brief")
def code():
    _random_merchant_quest_no = _merchant_offered_quest
merchant_quest_last_offered_job_merchant_quest_brief.codeBlock = code


merchant_quest_what_if_fail_mayor_pretalk = Dialog("anyone", "I hope you don't fail. In that case, I'll have to ask for the price of the cargo you were carrying.", starting_state="merchant_quest_what_if_fail", ending_state="mayor_pretalk")
def condition():
    if partner_quest_001 == qst.deliver_wine:
        partner_quest_001 = store_partner_quest()
merchant_quest_what_if_fail_mayor_pretalk.conditionBlock = condition


merchant_quest_what_if_fail_mayor_pretalk_1 = Dialog("anyone", "Well, just do your best to finish it.", starting_state="merchant_quest_what_if_fail", ending_state="mayor_pretalk")


merchant_quest_taken_mayor_pretalk = Dialog("anyone", "Excellent. I am counting on you then. Good luck.", starting_state="merchant_quest_taken", ending_state="mayor_pretalk")


merchant_quest_stall_mayor_pretalk = Dialog("anyone", "Well, the job will be available for a few more days I guess. Tell me if you decide to take it.", starting_state="merchant_quest_stall", ending_state="mayor_pretalk")


mayor_economy_report_1_mayor_economy_report_2 = Dialog("anyone", "{s32}", starting_state="mayor_economy_report_1", ending_state="mayor_economy_report_2")


mayor_economy_report_2_mayor_economy_report_3 = Dialog("anyone", "{s42}", starting_state="mayor_economy_report_2", ending_state="mayor_economy_report_3")


mayor_economy_report_3_mayor_pretalk = Dialog("anyone", "{s47}", starting_state="mayor_economy_report_3", ending_state="mayor_pretalk")


merchant_quest_requested_merchant_quest_brief = Dialog("anyone", "Well, you look able enough. I think I might have something you could do.", starting_state="merchant_quest_requested", ending_state="merchant_quest_brief")
def condition():
    if _random_merchant_quest_no == qst.deal_with_looters:
        pass
merchant_quest_requested_merchant_quest_brief.conditionBlock = condition


merchant_quest_brief_merchant_quest_looters_choice = Dialog("anyone", "We've had some fighting near the {s5} lately, with all the chaos that comes with it, and that's led some of our less upstanding locals to try and make their fortune out of looting the shops and farms during the confusion. A lot of valuable goods were taken. I need somebody to teach those bastards a lesson. Sound like your kind of work?", starting_state="merchant_quest_brief", ending_state="merchant_quest_looters_choice")
def condition():
    if _random_merchant_quest_no == qst.deal_with_looters:
        if party_slot_eq(_g_encountered_party,0,3):
            s5 = str_store_string("@town")
        elif party_slot_eq(_g_encountered_party,0,4):
            s5 = str_store_string("@village")
        #end
    #end
merchant_quest_brief_merchant_quest_looters_choice.conditionBlock = condition


merchant_quest_looters_choice_merchant_quest_looters_brief = Dialog("anyone|plyr", "Aye, I'll do it.", starting_state="merchant_quest_looters_choice", ending_state="merchant_quest_looters_brief")


merchant_quest_looters_choice_merchant_quest_stall = Dialog("anyone|plyr", "I'm afraid I can't take the job at the moment.", starting_state="merchant_quest_looters_choice", ending_state="merchant_quest_stall")


merchant_quest_looters_brief_close_window = Dialog("anyone", "Excellent! You'll find the looters roaming around the countryside, probably trying to rob more good people. Kill or capture the bastards, I don't care what you do with them. I'll pay you a bounty of 40 denars on every band of looters you destroy, until all the looters are dealt with.", starting_state="merchant_quest_looters_brief", ending_state="close_window")
def condition():
    if party_slot_eq(_g_encountered_party,0,3):
        s5 = str_store_string("@town")
    elif party_slot_eq(_g_encountered_party,0,4):
        s5 = str_store_string("@village")
    #end
    random_x_001 = store_random_in_range(3,7)
    quest_set_slot(qst.deal_with_looters,10,random_x_001)
    for var002 in range(0, random_x_001):
        random_x_003 = store_random_in_range(5,14)
        set_spawn_radius(random_x_003)
        spawn_around_party(_g_encountered_party,pt.looters)
        party_set_flags(reg0,262144,1)
        party_set_ai_behavior(reg0,2)
        party_set_ai_patrol_radius(reg0,2)
        pos0 = party_get_position(reg0)
        party_set_ai_target_position(reg0,0)
    #end
    s9 = str_store_troop_name_link(_g_talk_troop)
    s13 = str_store_party_name_link(_g_encountered_party)
    s4 = str_store_party_name(_g_encountered_party)
    setup_quest_text(qst.deal_with_looters)
    s2 = str_store_string("@The Guildmaster of {s13} has asked you to deal with looters in the surrounding countryside.")
    start_quest(qst.deal_with_looters,_g_talk_troop)
    _g_leave_encounter = 1
merchant_quest_looters_brief_close_window.conditionBlock = condition


merchant_quest_requested_merchant_quest_explain_2 = Dialog("anyone", "Well, there is a very great favor which you could do us... As you may have heard, some {s10}s have come across the border to attack our people. {s5} is under great pressure from some of the more bellicose of his vassals to respond with a declaration of war. Unfortunately, while the great lords of this land grow rich from bloodshed, we of the commons will be caught in the middle, and will suffer.", starting_state="merchant_quest_requested", ending_state="merchant_quest_explain_2")
def condition():
    if _random_merchant_quest_no == qst.retaliate_for_border_incident:
        quest_slot_001 = quest_get_slot(qst.retaliate_for_border_incident,3)
        faction_get_adjective_to_s10(quest_slot_001)
        faction_slot_002 = faction_get_slot(_g_encountered_party_faction,11)
        s5 = str_store_troop_name(faction_slot_002)
merchant_quest_requested_merchant_quest_explain_2.conditionBlock = condition


merchant_quest_explain_2_merchant_quest_brief = Dialog("anyone", "We are not saying that {s5} should overlook this aggression -- far from it! But if he charges one of his own lords to respond, then the cycle of provocation will necessarily lead to a full-fledged confrontation. Now, if an outsider were to step in and defeat a {s10} lord in battle, then honor would be done, and it would defuse the clamor for war. If the defeated lord were a known troublemaker -- {s7} -- then the {s10}s might be able to overlook it.", starting_state="merchant_quest_explain_2", ending_state="merchant_quest_brief")
def condition():
    if _random_merchant_quest_no == qst.retaliate_for_border_incident:
        quest_slot_001 = quest_get_slot(qst.retaliate_for_border_incident,2)
        s7 = str_store_troop_name(quest_slot_001)
merchant_quest_explain_2_merchant_quest_brief.conditionBlock = condition


merchant_quest_brief_merchant_quest_retaliate_confirm = Dialog("anyone", "We need you to attack and defeat {s7}. This will not be an easy task, and that outsider would damage {his/her} relationship with the {s10}s, but we would be very grateful. We could not acknowledge a connection with that outsider, but we could be sure that {he/she} would be handsomely rewarded... Could you do this?", starting_state="merchant_quest_brief", ending_state="merchant_quest_retaliate_confirm")
def condition():
    if _random_merchant_quest_no == qst.retaliate_for_border_incident:
        quest_slot_001 = quest_get_slot(qst.retaliate_for_border_incident,2)
        s7 = str_store_troop_name(quest_slot_001)
merchant_quest_brief_merchant_quest_retaliate_confirm.conditionBlock = condition


merchant_quest_retaliate_confirm_merchant_quest_track_bandits_brief = Dialog("anyone|plyr", "Aye, I can do it.", starting_state="merchant_quest_retaliate_confirm", ending_state="merchant_quest_track_bandits_brief")
def code():
    s11 = str_store_faction_name(_g_encountered_party_faction)
    setup_quest_text(qst.retaliate_for_border_incident)
    s2 = str_store_string(gstr.track_down_s7_and_defeat_him_defusing_calls_for_war_within_the_s11)
    start_quest(qst.retaliate_for_border_incident,_g_talk_troop)
merchant_quest_retaliate_confirm_merchant_quest_track_bandits_brief.codeBlock = code


merchant_quest_retaliate_confirm_merchant_pretalk = Dialog("anyone|plyr", "I would prefer not to get mixed up in such things", starting_state="merchant_quest_retaliate_confirm", ending_state="merchant_pretalk")
def code():
    quest_set_slot(qst.retaliate_for_border_incident,25,5)
merchant_quest_retaliate_confirm_merchant_pretalk.codeBlock = code


destroy_lair_quest_brief_merchant_quest_track_bandit_lair_choice = Dialog("anyone", "The raiders are likely to have laid up their ships in a well-concealed cove, somewhere along the coastline, preferably next to a small stream where they have some water. The best way to discover its location would be to find a group of sea raiders who appear to be heading back to their base to resupply, and follow them.", starting_state="destroy_lair_quest_brief", ending_state="merchant_quest_track_bandit_lair_choice")
def condition():
    if _random_quest_no == qst.destroy_bandit_lair:
        quest_slot_001 = quest_get_slot(qst.destroy_bandit_lair,8)
        if party_template_id_002 == pt.sea_raider_lair:
            party_template_id_002 = party_get_template_id(quest_slot_001)
destroy_lair_quest_brief_merchant_quest_track_bandit_lair_choice.conditionBlock = condition


destroy_lair_quest_brief_merchant_quest_track_bandit_lair_choice_1 = Dialog("anyone", "Bandits such as these usually establish their hideouts in the foothills on the edge of the desert, often in a canyon near a spring. This gives them both water and concealment. The best way to discover its location would be to find a group of desert bandits who appear to be heading back to their base to resupply, and follow them.", starting_state="destroy_lair_quest_brief", ending_state="merchant_quest_track_bandit_lair_choice")
def condition():
    if _random_quest_no == qst.destroy_bandit_lair:
        quest_slot_001 = quest_get_slot(qst.destroy_bandit_lair,8)
        if party_template_id_002 == pt.desert_bandit_lair:
            party_template_id_002 = party_get_template_id(quest_slot_001)
destroy_lair_quest_brief_merchant_quest_track_bandit_lair_choice_1.conditionBlock = condition


destroy_lair_quest_brief_merchant_quest_track_bandit_lair_choice_2 = Dialog("anyone", "Bandits such as these will usually establish a base in the highlands, often on an steep ledge where they have a view of the surrounding countryside. This makes them difficult to surprise. The best way to discover its location would be to find a group of mountain bandits who appear to be heading back to their base to resupply, and follow them.", starting_state="destroy_lair_quest_brief", ending_state="merchant_quest_track_bandit_lair_choice")
def condition():
    if _random_quest_no == qst.destroy_bandit_lair:
        quest_slot_001 = quest_get_slot(qst.destroy_bandit_lair,8)
        if party_template_id_002 == pt.mountain_bandit_lair:
            party_template_id_002 = party_get_template_id(quest_slot_001)
destroy_lair_quest_brief_merchant_quest_track_bandit_lair_choice_2.conditionBlock = condition


destroy_lair_quest_brief_merchant_quest_track_bandit_lair_choice_3 = Dialog("anyone", "Bandits such as these will usually set up their encampments deep in the woods, sometimes in the middle of a swamp. The best way to discover its location would be to find a group of forest bandits who appear to be heading back to their base to resupply, and follow them.", starting_state="destroy_lair_quest_brief", ending_state="merchant_quest_track_bandit_lair_choice")
def condition():
    if _random_quest_no == qst.destroy_bandit_lair:
        quest_slot_001 = quest_get_slot(qst.destroy_bandit_lair,8)
        if party_template_id_002 == pt.forest_bandit_lair:
            party_template_id_002 = party_get_template_id(quest_slot_001)
destroy_lair_quest_brief_merchant_quest_track_bandit_lair_choice_3.conditionBlock = condition


destroy_lair_quest_brief_merchant_quest_track_bandit_lair_choice_4 = Dialog("anyone", "Bandits such as these will usually set up their encampments in the woodland on the steppe, where they have some concealment. The best way to discover its location would be to find a group of steppe bandits who appear to be heading back to their base to resupply, and follow them.", starting_state="destroy_lair_quest_brief", ending_state="merchant_quest_track_bandit_lair_choice")
def condition():
    if _random_quest_no == qst.destroy_bandit_lair:
        quest_slot_001 = quest_get_slot(qst.destroy_bandit_lair,8)
        if party_template_id_002 == pt.steppe_bandit_lair:
            party_template_id_002 = party_get_template_id(quest_slot_001)
destroy_lair_quest_brief_merchant_quest_track_bandit_lair_choice_4.conditionBlock = condition


destroy_lair_quest_brief_merchant_quest_track_bandit_lair_choice_5 = Dialog("anyone", "Bandits such as these will usually set up their encampments deep in the woods. The best way to discover its location would be to find a group of tundra bandits who appear to be heading back to their base to resupply, and follow them.", starting_state="destroy_lair_quest_brief", ending_state="merchant_quest_track_bandit_lair_choice")
def condition():
    if _random_quest_no == qst.destroy_bandit_lair:
        quest_slot_001 = quest_get_slot(qst.destroy_bandit_lair,8)
        if party_template_id_002 == pt.taiga_bandit_lair:
            party_template_id_002 = party_get_template_id(quest_slot_001)
destroy_lair_quest_brief_merchant_quest_track_bandit_lair_choice_5.conditionBlock = condition


merchant_quest_track_bandit_lair_choice_merchant_quest_destroy_lair_brief = Dialog("anyone|plyr", "Aye, I'll do it.", starting_state="merchant_quest_track_bandit_lair_choice", ending_state="merchant_quest_destroy_lair_brief")
def code():
    quest_slot_001 = quest_get_slot(qst.destroy_bandit_lair,8)
    party_set_flags(quest_slot_001,262144,1)
    quest_set_slot(qst.destroy_bandit_lair,6,_g_talk_troop)
    quest_set_slot(qst.destroy_bandit_lair,12,_g_encountered_party)
    s11 = str_store_troop_name_link(_g_talk_troop)
    s9 = str_store_party_name(quest_slot_001)
    setup_quest_text(qst.destroy_bandit_lair)
    s2 = str_store_string(gstr.bandit_lair_quest_description)
    start_quest(qst.destroy_bandit_lair,_g_talk_troop)
merchant_quest_track_bandit_lair_choice_merchant_quest_destroy_lair_brief.codeBlock = code


merchant_quest_track_bandit_lair_choice_lord_pretalk = Dialog("anyone|plyr", "I'm afraid I can't take the job at the moment.", starting_state="merchant_quest_track_bandit_lair_choice", ending_state="lord_pretalk")
def code():
    quest_set_slot(qst.destroy_bandit_lair,25,1)
merchant_quest_track_bandit_lair_choice_lord_pretalk.codeBlock = code


merchant_quest_destroy_lair_brief_close_window = Dialog("anyone", "Very good. We will await word of your success.", starting_state="merchant_quest_destroy_lair_brief", ending_state="close_window")
def code():
    _g_leave_encounter = 1
merchant_quest_destroy_lair_brief_close_window.codeBlock = code


merchant_quest_requested_merchant_quest_brief_1 = Dialog("anyone", "We have heard that {s4}, some travellers on the road {reg4?to:from} {s5} were attacked by {s7}.", starting_state="merchant_quest_requested", ending_state="merchant_quest_brief")
def condition():
    if _random_merchant_quest_no == qst.track_down_bandits:
        pass
merchant_quest_requested_merchant_quest_brief_1.conditionBlock = condition
def code():
    merchant_road_info_to_s42(_g_encountered_party)
    _g_bandit_party_for_bounty = reg0
    var001 = reg1
    var002 = reg2
    var003 = reg3
    if var003 < 24:
        s4 = str_store_string(gstr.a_short_while_ago)
    elif var003 < 48:
        s4 = str_store_string(gstr.one_day_ago)
    elif var003 < 72:
        s4 = str_store_string(gstr.two_days_day_ago)
    elif var003 < 144:
        s4 = str_store_string(gstr.earlier_this_week)
    else:
        s4 = str_store_string(gstr.about_a_week_ago)
    #end
    if var001 == _g_encountered_party:
        s5 = str_store_party_name(var002)
        reg4 = 0
    elif var002 == _g_encountered_party:
        s5 = str_store_party_name(var001)
        reg4 = 1
    #end
    s7 = str_store_party_name(_g_bandit_party_for_bounty)
    quest_set_slot(qst.track_down_bandits,8,_g_bandit_party_for_bounty)
merchant_quest_requested_merchant_quest_brief_1.codeBlock = code


merchant_quest_brief_merchant_quest_track_bandits_choice = Dialog("anyone", "We would like you to track these {s4} down. The merchants of the town were able to get a description of their leader, and have put together a bounty. If you can hunt them down and destroy them, we'll make it worth your while...", starting_state="merchant_quest_brief", ending_state="merchant_quest_track_bandits_choice")
def condition():
    if _random_merchant_quest_no == qst.track_down_bandits:
        quest_slot_001 = quest_get_slot(qst.track_down_bandits,8)
        s4 = str_store_party_name(quest_slot_001)
merchant_quest_brief_merchant_quest_track_bandits_choice.conditionBlock = condition


merchant_quest_track_bandits_choice_merchant_quest_track_bandits_brief = Dialog("anyone|plyr", "Aye, I'll do it.", starting_state="merchant_quest_track_bandits_choice", ending_state="merchant_quest_track_bandits_brief")
def code():
    _merchant_offered_quest = 0
    _merchant_quest_last_offerer = _g_talk_troop
    quest_slot_001 = quest_get_slot(qst.track_down_bandits,8)
    party_set_flags(quest_slot_001,262144,1)
    quest_set_slot(qst.track_down_bandits,6,_g_talk_troop)
    quest_set_slot(qst.track_down_bandits,12,_g_encountered_party)
    s8 = str_store_party_name_link(_g_encountered_party)
    s9 = str_store_party_name(quest_slot_001)
    setup_quest_text(qst.track_down_bandits)
    s2 = str_store_string(gstr.track_down_the_s9_who_attacked_travellers_near_s8_then_report_back_to_the_town)
    start_quest(qst.track_down_bandits,_g_talk_troop)
merchant_quest_track_bandits_choice_merchant_quest_track_bandits_brief.codeBlock = code


merchant_quest_track_bandits_brief_close_window = Dialog("anyone", "Very good. The band may not have lingered long in the area, but chances are that they will be spotted by other travellers on the road.", starting_state="merchant_quest_track_bandits_brief", ending_state="close_window")
def code():
    _g_leave_encounter = 1
merchant_quest_track_bandits_brief_close_window.codeBlock = code


merchant_quest_track_bandits_choice_merchant_quest_stall = Dialog("anyone|plyr", "I'm afraid I can't take the job at the moment.", starting_state="merchant_quest_track_bandits_choice", ending_state="merchant_quest_stall")
def code():
    quest_set_slot(qst.track_down_bandits,25,1)
merchant_quest_track_bandits_choice_merchant_quest_stall.codeBlock = code


merchant_quest_requested_merchant_quest_brief_2 = Dialog("anyone", "You're looking for a job? Actually I was looking for someone to deliver some {s4}. Perhaps you can do that...", starting_state="merchant_quest_requested", ending_state="merchant_quest_brief")
def condition():
    if _random_merchant_quest_no == qst.deliver_wine:
        pass
merchant_quest_requested_merchant_quest_brief_2.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(qst.deliver_wine,14)
    s4 = str_store_item_name(quest_slot_001)
merchant_quest_requested_merchant_quest_brief_2.codeBlock = code


merchant_quest_brief_merchant_quest_brief_deliver_wine = Dialog("anyone", "I have a cargo of {s6} that needs to be delivered to the tavern in {s4}. If you can take {reg5} units of {s6} to {s4} in 7 days, you may earn {reg8} denars. What do you say?", starting_state="merchant_quest_brief", ending_state="merchant_quest_brief_deliver_wine")
def condition():
    if _random_merchant_quest_no == qst.deliver_wine:
        pass
merchant_quest_brief_merchant_quest_brief_deliver_wine.conditionBlock = condition
def code():
    reg5 = quest_get_slot(qst.deliver_wine,10)
    reg8 = quest_get_slot(qst.deliver_wine,22)
    quest_slot_001 = quest_get_slot(qst.deliver_wine,14)
    quest_slot_002 = quest_get_slot(qst.deliver_wine,1)
    s9 = str_store_troop_name(_g_talk_troop)
    s3 = str_store_party_name_link(_g_encountered_party)
    s4 = str_store_party_name_link(quest_slot_002)
    s6 = str_store_item_name(quest_slot_001)
    setup_quest_text(qst.deliver_wine)
    s2 = str_store_string("@{s9} of {s3} asked you to deliver {reg5} units of {s6} to the tavern in {s4} in 7 days.")
merchant_quest_brief_merchant_quest_brief_deliver_wine.codeBlock = code


merchant_quest_brief_deliver_wine_merchant_quest_taken = Dialog("anyone|plyr", "Alright. I will make the delivery.", starting_state="merchant_quest_brief_deliver_wine", ending_state="merchant_quest_taken")
def condition():
    free_inv_capacity_001 = store_free_inventory_capacity()
    if free_inv_capacity_001 >= quest_slot_002:
        quest_slot_002 = quest_get_slot(qst.deliver_wine,10)
merchant_quest_brief_deliver_wine_merchant_quest_taken.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(qst.deliver_wine,10)
    quest_slot_002 = quest_get_slot(qst.deliver_wine,14)
    troop_add_items(trp.player,quest_slot_002,quest_slot_001)
    start_quest(qst.deliver_wine,_g_talk_troop)
merchant_quest_brief_deliver_wine_merchant_quest_taken.codeBlock = code


merchant_quest_brief_deliver_wine_merchant_quest_stall = Dialog("anyone|plyr", "I am afraid I can't carry all that cargo now.", starting_state="merchant_quest_brief_deliver_wine", ending_state="merchant_quest_stall")


merchant_quest_requested_merchant_quest_brief_3 = Dialog("anyone", "You're looking for a job? Actually I was looking for someone to escort a caravan. Perhaps you can do that...", starting_state="merchant_quest_requested", ending_state="merchant_quest_brief")
def condition():
    if _random_merchant_quest_no == qst.escort_merchant_caravan:
        pass
merchant_quest_requested_merchant_quest_brief_3.conditionBlock = condition


merchant_quest_brief_escort_merchant_caravan_quest_brief = Dialog("anyone", "I am going to send a caravan of goods to {s8}. However with all those bandits and deserters on the roads, I don't want to send them out without an escort. If you can lead that caravan to {s8} in 15 days, you will earn {reg8} denars. Of course your party needs to be at least {reg4} strong to offer them any protection.", starting_state="merchant_quest_brief", ending_state="escort_merchant_caravan_quest_brief")
def condition():
    if _random_merchant_quest_no == qst.escort_merchant_caravan:
        pass
merchant_quest_brief_escort_merchant_caravan_quest_brief.conditionBlock = condition
def code():
    reg8 = quest_get_slot(qst.escort_merchant_caravan,22)
    reg4 = quest_get_slot(qst.escort_merchant_caravan,10)
    quest_slot_001 = quest_get_slot(qst.escort_merchant_caravan,1)
    s8 = str_store_party_name(quest_slot_001)
merchant_quest_brief_escort_merchant_caravan_quest_brief.codeBlock = code


escort_merchant_caravan_quest_brief_merchant_quest_taken = Dialog("anyone|plyr", "Alright. I will escort the caravan.", starting_state="escort_merchant_caravan_quest_brief", ending_state="merchant_quest_taken")
def condition():
    party_size_wo_prisoners_001 = store_party_size_wo_prisoners(p.main_party)
    if party_size_wo_prisoners_001 >= quest_slot_002:
        quest_slot_002 = quest_get_slot(qst.escort_merchant_caravan,10)
escort_merchant_caravan_quest_brief_merchant_quest_taken.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(qst.escort_merchant_caravan,1)
    set_spawn_radius(1)
    spawn_around_party(_g_encountered_party,pt.merchant_caravan)
    party_id_002 = reg0
    party_set_ai_behavior(party_id_002,4)
    party_set_ai_object(party_id_002,p.main_party)
    party_set_flags(party_id_002,65536,0)
    quest_set_slot(qst.escort_merchant_caravan,8,party_id_002)
    quest_set_slot(qst.escort_merchant_caravan,11,0)
    s8 = str_store_party_name_link(quest_slot_001)
    setup_quest_text(qst.escort_merchant_caravan)
    s2 = str_store_string("@Escort the merchant caravan to the town of {s8}.")
    start_quest(qst.escort_merchant_caravan,_g_talk_troop)
escort_merchant_caravan_quest_brief_merchant_quest_taken.codeBlock = code


escort_merchant_caravan_quest_brief_merchant_quest_stall = Dialog("anyone|plyr", "I am afraid I don't have that many soldiers with me.", starting_state="escort_merchant_caravan_quest_brief", ending_state="merchant_quest_stall")
def condition():
    party_size_wo_prisoners_001 = store_party_size_wo_prisoners(p.main_party)
    if party_size_wo_prisoners_001 < quest_slot_002:
        quest_slot_002 = quest_get_slot(qst.escort_merchant_caravan,10)
escort_merchant_caravan_quest_brief_merchant_quest_stall.conditionBlock = condition


escort_merchant_caravan_quest_brief_merchant_quest_stall_1 = Dialog("anyone|plyr", "Sorry. I can't do that right now", starting_state="escort_merchant_caravan_quest_brief", ending_state="merchant_quest_stall")
def condition():
    party_size_wo_prisoners_001 = store_party_size_wo_prisoners(p.main_party)
    if party_size_wo_prisoners_001 >= quest_slot_002:
        quest_slot_002 = quest_get_slot(qst.escort_merchant_caravan,10)
escort_merchant_caravan_quest_brief_merchant_quest_stall_1.conditionBlock = condition


start_close_window_38 = Dialog("party_tpl|pt_merchant_caravan", "We can cover the rest of the way ourselves. Thanks.", starting_state="start", ending_state="close_window")
def condition():
    if _g_encountered_party == quest_slot_001 and quest_slot_eq(qst.escort_merchant_caravan,11,2):
        quest_slot_001 = quest_get_slot(qst.escort_merchant_caravan,8)
start_close_window_38.conditionBlock = condition
def code():
    _g_leave_encounter = 1
start_close_window_38.codeBlock = code


start_close_window_39 = Dialog("party_tpl|pt_merchant_caravan", "Well, we have almost reached {s21}. We can cover the rest of the way ourselves. Here's your pay... {reg14} denars. Thanks for escorting us. Good luck.", starting_state="start", ending_state="close_window")
def condition():
    quest_slot_001 = quest_get_slot(qst.escort_merchant_caravan,8)
    if _g_encountered_party == quest_slot_001:
        quest_slot_002 = quest_get_slot(qst.escort_merchant_caravan,1)
        if distance_parties_003 < 4 and quest_slot_eq(qst.escort_merchant_caravan,11,1):
            distance_parties_003 = store_distance_to_party_from_party(quest_slot_002,quest_slot_001)
start_close_window_39.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(qst.escort_merchant_caravan,8)
    quest_slot_002 = quest_get_slot(qst.escort_merchant_caravan,1)
    quest_slot_003 = quest_get_slot(qst.escort_merchant_caravan,12)
    quest_slot_004 = quest_get_slot(qst.escort_merchant_caravan,22)
    party_set_ai_behavior(quest_slot_001,1)
    party_set_ai_object(quest_slot_001,quest_slot_002)
    party_set_flags(quest_slot_001,65536,0)
    s21 = str_store_party_name(quest_slot_002)
    change_player_relation_with_center(quest_slot_003,1)
    end_quest(qst.escort_merchant_caravan)
    quest_set_slot(qst.escort_merchant_caravan,11,2)
    troop_add_gold(trp.player,quest_slot_004)
    var005 = quest_slot_004
    var005 *= 5
    var005 += 100
    add_xp_as_reward(var005)
    change_troop_renown(trp.player,2)
    reg14 = quest_slot_004
    _g_leave_encounter = 1
start_close_window_39.codeBlock = code


start_merchant_caravan_intro_1 = Dialog("party_tpl|pt_merchant_caravan", "Greetings. You must be our escort, right?", starting_state="start", ending_state="merchant_caravan_intro_1")
def condition():
    if _g_encountered_party == quest_slot_001 and quest_slot_eq(qst.escort_merchant_caravan,11,0):
        quest_slot_001 = quest_get_slot(qst.escort_merchant_caravan,8)
start_merchant_caravan_intro_1.conditionBlock = condition
def code():
    quest_set_slot(qst.escort_merchant_caravan,11,1)
start_merchant_caravan_intro_1.codeBlock = code


merchant_caravan_intro_1_merchant_caravan_intro_2 = Dialog("anyone|plyr", "Yes. My name is {playername}. I will lead you to {s1}.", starting_state="merchant_caravan_intro_1", ending_state="merchant_caravan_intro_2")
def code():
    quest_slot_001 = quest_get_slot(qst.escort_merchant_caravan,1)
    s1 = str_store_party_name(quest_slot_001)
merchant_caravan_intro_1_merchant_caravan_intro_2.codeBlock = code


merchant_caravan_intro_2_escort_merchant_caravan_talk = Dialog("anyone", "Well, It is good to know we won't travel alone. What do you want us to do now?", starting_state="merchant_caravan_intro_2", ending_state="escort_merchant_caravan_talk")


start_escort_merchant_caravan_talk = Dialog("party_tpl|pt_merchant_caravan", "Eh. We've made it this far... What do you want us to do?", starting_state="start", ending_state="escort_merchant_caravan_talk")
def condition():
    if _g_encountered_party == quest_slot_001:
        quest_slot_001 = quest_get_slot(qst.escort_merchant_caravan,8)
start_escort_merchant_caravan_talk.conditionBlock = condition


escort_merchant_caravan_talk_merchant_caravan_follow_lead = Dialog("anyone|plyr", "You follow my lead. I'll take you through a safe route.", starting_state="escort_merchant_caravan_talk", ending_state="merchant_caravan_follow_lead")


merchant_caravan_follow_lead_close_window = Dialog("anyone", "Alright. We'll be right behind you.", starting_state="merchant_caravan_follow_lead", ending_state="close_window")
def code():
    _escort_merchant_caravan_mode = 0
    _g_leave_encounter = 1
merchant_caravan_follow_lead_close_window.codeBlock = code


escort_merchant_caravan_talk_merchant_caravan_stay_here = Dialog("anyone|plyr", "You stay here for a while. I'll go ahead and check the road.", starting_state="escort_merchant_caravan_talk", ending_state="merchant_caravan_stay_here")


merchant_caravan_stay_here_close_window = Dialog("anyone", "Alright. We'll be waiting here for you.", starting_state="merchant_caravan_stay_here", ending_state="close_window")
def code():
    _escort_merchant_caravan_mode = 1
    _g_leave_encounter = 1
merchant_caravan_stay_here_close_window.codeBlock = code


merchant_quest_requested_merchant_quest_brief_4 = Dialog("anyone", "Actually, I was looking for an able adventurer like you. There's this group of particularly troublesome bandits. They have infested the vicinity of our town and are preying on my caravans. They have avoided all the soldiers and the militias up to now. If someone doesn't stop them soon, I am going to be ruined...", starting_state="merchant_quest_requested", ending_state="merchant_quest_brief")
def condition():
    if _random_merchant_quest_no == qst.troublesome_bandits:
        pass
merchant_quest_requested_merchant_quest_brief_4.conditionBlock = condition


merchant_quest_brief_troublesome_bandits_quest_brief = Dialog("anyone", "I will pay you {reg8} denars if you hunt down those troublesome bandits. It's dangerous work. But I believe that you are the {man/one} for it. What do you say?", starting_state="merchant_quest_brief", ending_state="troublesome_bandits_quest_brief")
def condition():
    if _random_merchant_quest_no == qst.troublesome_bandits:
        pass
merchant_quest_brief_troublesome_bandits_quest_brief.conditionBlock = condition
def code():
    reg8 = quest_get_slot(qst.troublesome_bandits,22)
merchant_quest_brief_troublesome_bandits_quest_brief.codeBlock = code


troublesome_bandits_quest_brief_merchant_quest_taken_bandits = Dialog("anyone|plyr", "Very well. I will hunt down those bandits.", starting_state="troublesome_bandits_quest_brief", ending_state="merchant_quest_taken_bandits")
def code():
    set_spawn_radius(7)
    quest_slot_001 = quest_get_slot(qst.troublesome_bandits,12)
    spawn_around_party(quest_slot_001,pt.troublesome_bandits)
    quest_set_slot(qst.troublesome_bandits,8,reg0)
    _qst_troublesome_bandits_eliminated = store_num_parties_destroyed(pt.troublesome_bandits)
    _qst_troublesome_bandits_eliminated_by_player = store_num_parties_destroyed_by_player(pt.troublesome_bandits)
    s9 = str_store_troop_name(_g_talk_troop)
    s4 = str_store_party_name_link(_g_encountered_party)
    setup_quest_text(qst.troublesome_bandits)
    s2 = str_store_string("@Merchant {s9} of {s4} asked you to hunt down the troublesome bandits in the vicinity of the town.")
    start_quest(qst.troublesome_bandits,_g_talk_troop)
troublesome_bandits_quest_brief_merchant_quest_taken_bandits.codeBlock = code


merchant_quest_taken_bandits_close_window = Dialog("anyone", "You will? Splendid. Good luck to you.", starting_state="merchant_quest_taken_bandits", ending_state="close_window")


troublesome_bandits_quest_brief_merchant_quest_stall = Dialog("anyone|plyr", "Sorry. I don't have time for this right now.", starting_state="troublesome_bandits_quest_brief", ending_state="merchant_quest_stall")


merchant_quest_requested_merchant_quest_brief_5 = Dialog("anyone", "Actually, I was looking for a reliable {man/helper} that can undertake an important mission. A group of bandits have kidnapped the daughter of a friend of mine and are holding her for ransom. My friend is ready to pay them, but we still need someone to take the money to those rascals and bring the girl back to safety.", starting_state="merchant_quest_requested", ending_state="merchant_quest_brief")
def condition():
    if _random_merchant_quest_no == qst.kidnapped_girl:
        pass
merchant_quest_requested_merchant_quest_brief_5.conditionBlock = condition


merchant_quest_brief_kidnapped_girl_quest_brief = Dialog("anyone", "The amount the bandits ask as ransom is {reg12} denars. I will give you that money once you accept to take the quest. You have 15 days to take the money to the bandits who will be waiting near the village of {s4}. Those bastards said that they are going to kill the poor girl if they don't get the money by that time. You will get your pay of {reg8} denars when you bring the girl safely back here.", starting_state="merchant_quest_brief", ending_state="kidnapped_girl_quest_brief")
def condition():
    if _random_merchant_quest_no == qst.kidnapped_girl:
        pass
merchant_quest_brief_kidnapped_girl_quest_brief.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(qst.kidnapped_girl,1)
    s4 = str_store_party_name(quest_slot_001)
    reg8 = quest_get_slot(qst.kidnapped_girl,22)
    reg12 = quest_get_slot(qst.kidnapped_girl,10)
merchant_quest_brief_kidnapped_girl_quest_brief.codeBlock = code


kidnapped_girl_quest_brief_kidnapped_girl_quest_taken = Dialog("anyone|plyr", "All right. I will take the ransom money to the bandits and bring back the girl.", starting_state="kidnapped_girl_quest_brief", ending_state="kidnapped_girl_quest_taken")
def code():
    set_spawn_radius(4)
    quest_slot_001 = quest_get_slot(qst.kidnapped_girl,1)
    quest_slot_002 = quest_get_slot(qst.kidnapped_girl,10)
    spawn_around_party(quest_slot_001,pt.bandits_awaiting_ransom)
    party_id_003 = reg0
    quest_set_slot(qst.kidnapped_girl,8,party_id_003)
    party_set_ai_behavior(party_id_003,0)
    party_set_ai_object(party_id_003,p.main_party)
    party_set_flags(party_id_003,65536,0)
    troop_add_gold(trp.player,quest_slot_002)
    reg12 = quest_slot_002
    s1 = str_store_troop_name(_g_talk_troop)
    s4 = str_store_party_name_link(_g_encountered_party)
    s3 = str_store_party_name_link(quest_slot_001)
    setup_quest_text(qst.kidnapped_girl)
    s2 = str_store_string("@Guildmaster of {s4} gave you {reg12} denars to pay the ransom of a girl kidnapped by bandits. You are to meet the bandits near {s3} and pay them the ransom fee. After that you are to bring the girl back to {s4}.")
    start_quest(qst.kidnapped_girl,_g_talk_troop)
kidnapped_girl_quest_brief_kidnapped_girl_quest_taken.codeBlock = code


kidnapped_girl_quest_taken_close_window = Dialog("anyone", "Good. I knew we could trust you at this. Here is the ransom money, {reg12} denars. Count it before taking it. And please, don't attempt to do anything rash. Keep in mind that the girl's well being is more important than anything else...", starting_state="kidnapped_girl_quest_taken", ending_state="close_window")


kidnapped_girl_quest_brief_merchant_quest_stall = Dialog("anyone|plyr", "Sorry. I don't have time for this right now.", starting_state="kidnapped_girl_quest_brief", ending_state="merchant_quest_stall")


start_close_window_40 = Dialog("trp_kidnapped_girl", "Thank you so much for bringing me back!  I can't wait to see my family. Good-bye.", starting_state="start", ending_state="close_window")
def condition():
    if _talk_context == 10:
        pass
start_close_window_40.conditionBlock = condition
def code():
    remove_member_from_party(trp.kidnapped_girl)
    quest_set_slot(qst.kidnapped_girl,11,4)
start_close_window_40.codeBlock = code


kidnapped_girl_liberated_map_kidnapped_girl_liberated_map_2a = Dialog("plyr|trp_kidnapped_girl", "Yes. Come with me. We are going home.", starting_state="kidnapped_girl_liberated_map", ending_state="kidnapped_girl_liberated_map_2a")


kidnapped_girl_liberated_map_2a_close_window = Dialog("trp_kidnapped_girl", "Unfortunately. You do not have room in your party for me.", starting_state="kidnapped_girl_liberated_map_2a", ending_state="close_window")
def condition():
    if not party_can_join():
        pass
kidnapped_girl_liberated_map_2a_close_window.conditionBlock = condition
def code():
    _g_leave_encounter = 1
kidnapped_girl_liberated_map_2a_close_window.codeBlock = code


kidnapped_girl_liberated_map_2a_close_window_1 = Dialog("trp_kidnapped_girl", "Oh really? Thank you so much!", starting_state="kidnapped_girl_liberated_map_2a", ending_state="close_window")
def code():
    party_join()
    quest_set_slot(qst.kidnapped_girl,11,3)
    _g_leave_encounter = 1
kidnapped_girl_liberated_map_2a_close_window_1.codeBlock = code


kidnapped_girl_liberated_map_kidnapped_girl_liberated_map_2b = Dialog("plyr|trp_kidnapped_girl", "Wait here a while longer. I'll come back for you.", starting_state="kidnapped_girl_liberated_map", ending_state="kidnapped_girl_liberated_map_2b")


kidnapped_girl_liberated_map_2b_close_window = Dialog("trp_kidnapped_girl", "Oh, please {sir/madam}, do not leave me here all alone!", starting_state="kidnapped_girl_liberated_map_2b", ending_state="close_window")
def code():
    _g_leave_encounter = 1
kidnapped_girl_liberated_map_2b_close_window.codeBlock = code


start_kidnapped_girl_liberated_map = Dialog("trp_kidnapped_girl", "Oh {sir/madam}. Thank you so much for rescuing me. Will you take me to my family now?", starting_state="start", ending_state="kidnapped_girl_liberated_map")


kidnapped_girl_liberated_battle_kidnapped_girl_liberated_battle_2a = Dialog("plyr|trp_kidnapped_girl", "Yes. Come with me. We are going home.", starting_state="kidnapped_girl_liberated_battle", ending_state="kidnapped_girl_liberated_battle_2a")


kidnapped_girl_liberated_battle_2a_kidnapped_girl_liberated_battle_2b = Dialog("trp_kidnapped_girl", "Unfortunately. You do not have room in your party for me.", starting_state="kidnapped_girl_liberated_battle_2a", ending_state="kidnapped_girl_liberated_battle_2b")
def condition():
    if not hero_can_join(p.main_party):
        pass
kidnapped_girl_liberated_battle_2a_kidnapped_girl_liberated_battle_2b.conditionBlock = condition


kidnapped_girl_liberated_battle_2a_close_window = Dialog("trp_kidnapped_girl", "Oh really? Thank you so much!", starting_state="kidnapped_girl_liberated_battle_2a", ending_state="close_window")
def code():
    party_add_members(p.main_party,trp.kidnapped_girl,1)
    quest_set_slot(qst.kidnapped_girl,11,3)
kidnapped_girl_liberated_battle_2a_close_window.codeBlock = code


kidnapped_girl_liberated_battle_kidnapped_girl_liberated_battle_2b = Dialog("plyr|trp_kidnapped_girl", "Wait here a while longer. I'll come back for you.", starting_state="kidnapped_girl_liberated_battle", ending_state="kidnapped_girl_liberated_battle_2b")


kidnapped_girl_liberated_battle_2b_close_window = Dialog("trp_kidnapped_girl", "Oh, please {sir/madam}, do not leave me here all alone!", starting_state="kidnapped_girl_liberated_battle_2b", ending_state="close_window")
def code():
    add_companion_party(trp.kidnapped_girl)
    _g_leave_encounter = 1
kidnapped_girl_liberated_battle_2b_close_window.codeBlock = code


start_kidnapped_girl_liberated_map_1 = Dialog("trp_kidnapped_girl", "Can I come with you now?", starting_state="start", ending_state="kidnapped_girl_liberated_map")


start_bandits_awaiting_ransom_intro_1 = Dialog("party_tpl|pt_bandits_awaiting_ransom", "Are you the one that brought the ransom? Quick, give us the money now.", starting_state="start", ending_state="bandits_awaiting_ransom_intro_1")
def condition():
    if quest_slot_eq(qst.kidnapped_girl,11,0):
        pass
start_bandits_awaiting_ransom_intro_1.conditionBlock = condition
def code():
    quest_set_slot(qst.kidnapped_girl,11,1)
start_bandits_awaiting_ransom_intro_1.codeBlock = code


start_bandits_awaiting_ransom_intro_1_1 = Dialog("party_tpl|pt_bandits_awaiting_ransom", "You came back? Quick, give us the money now.", starting_state="start", ending_state="bandits_awaiting_ransom_intro_1")
def condition():
    if quest_slot_eq(qst.kidnapped_girl,11,1):
        pass
start_bandits_awaiting_ransom_intro_1_1.conditionBlock = condition


bandits_awaiting_ransom_intro_1_bandits_awaiting_ransom_pay = Dialog("plyr|party_tpl|pt_bandits_awaiting_ransom", "Here, take the money. Just set the girl free.", starting_state="bandits_awaiting_ransom_intro_1", ending_state="bandits_awaiting_ransom_pay")
def condition():
    troop_gold_001 = store_troop_gold()
    if troop_gold_001 >= quest_slot_002:
        quest_slot_002 = quest_get_slot(qst.kidnapped_girl,10)
bandits_awaiting_ransom_intro_1_bandits_awaiting_ransom_pay.conditionBlock = condition


bandits_awaiting_ransom_pay_close_window = Dialog("party_tpl|pt_bandits_awaiting_ransom", "Heh. You've brought the money all right. You can take the girl now. It was a pleasure doing business with you...", starting_state="bandits_awaiting_ransom_pay", ending_state="close_window")
def code():
    quest_slot_001 = quest_get_slot(qst.kidnapped_girl,10)
    quest_slot_002 = quest_get_slot(qst.kidnapped_girl,8)
    quest_slot_003 = quest_get_slot(qst.kidnapped_girl,1)
    troop_remove_gold(trp.player,quest_slot_001)
    remove_member_from_party(trp.kidnapped_girl,quest_slot_002)
    set_spawn_radius(1)
    spawn_around_party(quest_slot_002,pt.kidnapped_girl)
    party_id_004 = reg0
    party_set_ai_behavior(party_id_004,0)
    party_set_flags(party_id_004,65536,0)
    quest_set_slot(qst.kidnapped_girl,11,2)
    party_set_ai_behavior(quest_slot_002,1)
    party_set_ai_object(quest_slot_002,quest_slot_003)
    party_set_flags(quest_slot_002,65536,0)
    add_gold_to_party(quest_slot_001,quest_slot_002)
    _g_leave_encounter = 1
bandits_awaiting_ransom_pay_close_window.codeBlock = code


bandits_awaiting_ransom_intro_1_bandits_awaiting_ransom_b = Dialog("anyone|plyr", "No way! You release the girl first.", starting_state="bandits_awaiting_ransom_intro_1", ending_state="bandits_awaiting_ransom_b")


bandits_awaiting_ransom_b_bandits_awaiting_ransom_b2 = Dialog("anyone", "You fool! Stop playing games and give us the money! ", starting_state="bandits_awaiting_ransom_b", ending_state="bandits_awaiting_ransom_b2")


bandits_awaiting_ransom_b2_bandits_awaiting_ransom_pay = Dialog("anyone|plyr", "All right. Here's your money. Let the girl go now.", starting_state="bandits_awaiting_ransom_b2", ending_state="bandits_awaiting_ransom_pay")
def condition():
    troop_gold_001 = store_troop_gold()
    if troop_gold_001 >= quest_slot_002:
        quest_slot_002 = quest_get_slot(qst.kidnapped_girl,10)
bandits_awaiting_ransom_b2_bandits_awaiting_ransom_pay.conditionBlock = condition


bandits_awaiting_ransom_b2_bandits_awaiting_ransom_no_money = Dialog("anyone|plyr", "I had left the money in a safe place. Let me go fetch it.", starting_state="bandits_awaiting_ransom_b2", ending_state="bandits_awaiting_ransom_no_money")


bandits_awaiting_ransom_no_money_close_window = Dialog("anyone", "Are you testing our patience or something?  Go and bring that money here quickly.", starting_state="bandits_awaiting_ransom_no_money", ending_state="close_window")
def code():
    _g_leave_encounter = 1
bandits_awaiting_ransom_no_money_close_window.codeBlock = code


bandits_awaiting_ransom_b2_bandits_awaiting_ransom_fight = Dialog("anyone|plyr", "I have no intention to pay you anything. I demand that you release the girl now!", starting_state="bandits_awaiting_ransom_b2", ending_state="bandits_awaiting_ransom_fight")


bandits_awaiting_ransom_fight_close_window = Dialog("anyone", "You won't be demanding anything when you're dead.", starting_state="bandits_awaiting_ransom_fight", ending_state="close_window")
def code():
    encounter_attack()
bandits_awaiting_ransom_fight_close_window.codeBlock = code


start_bandits_awaiting_remeet = Dialog("party_tpl|pt_bandits_awaiting_ransom", "What's it? You have given us the money. We have no more business.", starting_state="start", ending_state="bandits_awaiting_remeet")
def condition():
    if quest_slot_ge(qst.kidnapped_girl,11,2):
        pass
start_bandits_awaiting_remeet.conditionBlock = condition


bandits_awaiting_remeet_close_window = Dialog("anyone|plyr", "Sorry to bother you. I'll be on my way now.", starting_state="bandits_awaiting_remeet", ending_state="close_window")
def code():
    _g_leave_encounter = 1
bandits_awaiting_remeet_close_window.codeBlock = code


bandits_awaiting_remeet_bandits_awaiting_remeet_2 = Dialog("anyone|plyr", "We have one more business. You'll give the money back to me.", starting_state="bandits_awaiting_remeet", ending_state="bandits_awaiting_remeet_2")


bandits_awaiting_remeet_2_close_window = Dialog("anyone", "Oh, that business! Of course. Let us get down to it.", starting_state="bandits_awaiting_remeet_2", ending_state="close_window")
def code():
    encounter_attack()
bandits_awaiting_remeet_2_close_window.codeBlock = code


start_kidnapped_girl_encounter_1 = Dialog("party_tpl|pt_kidnapped_girl", "Oh {sir/madam}. Thank you so much for rescuing me. Will you take me to my family now?", starting_state="start", ending_state="kidnapped_girl_encounter_1")


kidnapped_girl_encounter_1_kidnapped_girl_join = Dialog("anyone|plyr", "Yes. Come with me. I'll take you home.", starting_state="kidnapped_girl_encounter_1", ending_state="kidnapped_girl_join")


kidnapped_girl_join_close_window = Dialog("anyone", "Unfortunately. You do not have room in your party for me.", starting_state="kidnapped_girl_join", ending_state="close_window")
def condition():
    if not party_can_join():
        pass
kidnapped_girl_join_close_window.conditionBlock = condition
def code():
    _g_leave_encounter = 1
kidnapped_girl_join_close_window.codeBlock = code


kidnapped_girl_join_close_window_1 = Dialog("anyone", "Oh, thank you so much!", starting_state="kidnapped_girl_join", ending_state="close_window")
def code():
    party_join()
    quest_set_slot(qst.kidnapped_girl,11,3)
    _g_leave_encounter = 1
kidnapped_girl_join_close_window_1.codeBlock = code


kidnapped_girl_encounter_1_kidnapped_girl_wait = Dialog("anyone|plyr", "Wait here a while longer. I'll come back for you.", starting_state="kidnapped_girl_encounter_1", ending_state="kidnapped_girl_wait")


kidnapped_girl_wait_close_window = Dialog("anyone", "Oh, please {sir/madam}, do not leave me here all alone!", starting_state="kidnapped_girl_wait", ending_state="close_window")
def code():
    _g_leave_encounter = 1
kidnapped_girl_wait_close_window.codeBlock = code


merchant_quest_about_job_2_lost_kidnapped_girl = Dialog("anyone|plyr", "Unfortunately I lost the girl on the way here...", starting_state="merchant_quest_about_job_2", ending_state="lost_kidnapped_girl")
def condition():
    if partner_quest_001 == qst.kidnapped_girl and quest_slot_eq(qst.kidnapped_girl,11,3) and not main_party_has_troop(trp.kidnapped_girl):
        partner_quest_001 = store_partner_quest()
merchant_quest_about_job_2_lost_kidnapped_girl.conditionBlock = condition


lost_kidnapped_girl_lost_kidnapped_girl_2 = Dialog("anyone", "Oh no! How am I going to tell this to my friend?", starting_state="lost_kidnapped_girl", ending_state="lost_kidnapped_girl_2")


lost_kidnapped_girl_2_lost_kidnapped_girl_3 = Dialog("anyone|plyr", "I'm sorry. I could do nothing about it.", starting_state="lost_kidnapped_girl_2", ending_state="lost_kidnapped_girl_3")


lost_kidnapped_girl_3_lost_kidnapped_girl_4 = Dialog("anyone", "You let me down {playername}. I had trusted you. I will let people know of your incompetence at this task. Also, I want back that {reg8} denars I gave you as the ransom fee.", starting_state="lost_kidnapped_girl_3", ending_state="lost_kidnapped_girl_4")
def code():
    reg8 = quest_get_slot(qst.kidnapped_girl,10)
    for cur_party in __all_parties__:
        party_count_members_of_type(party_members_of_type_002,cur_party,trp.kidnapped_girl)
        if party_members_of_type_002 > 0:
            party_remove_members(cur_party,trp.kidnapped_girl,1)
            party_remove_prisoners(cur_party,trp.kidnapped_girl,1)
        #end
    #end
    end_quest(qst.kidnapped_girl)
    change_troop_renown(trp.player,-5)
lost_kidnapped_girl_3_lost_kidnapped_girl_4.codeBlock = code


lost_kidnapped_girl_4_merchant_quest_about_job_5a = Dialog("anyone|plyr", "Of course. Here you are...", starting_state="lost_kidnapped_girl_4", ending_state="merchant_quest_about_job_5a")
def condition():
    troop_gold_001 = store_troop_gold()
    if troop_gold_001 >= quest_slot_002:
        quest_slot_002 = quest_get_slot(qst.kidnapped_girl,10)
lost_kidnapped_girl_4_merchant_quest_about_job_5a.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(qst.kidnapped_girl,10)
    troop_remove_gold(trp.player,quest_slot_001)
lost_kidnapped_girl_4_merchant_quest_about_job_5a.codeBlock = code


merchant_quest_about_job_5a_close_window = Dialog("anyone", "At least you have the decency to return the money.", starting_state="merchant_quest_about_job_5a", ending_state="close_window")


lost_kidnapped_girl_4_merchant_quest_about_job_5b = Dialog("anyone|plyr", "Sorry. I don't have that amount with me.", starting_state="lost_kidnapped_girl_4", ending_state="merchant_quest_about_job_5b")


merchant_quest_about_job_5b_close_window = Dialog("anyone", "Do you expect me to believe that? You are going to pay that ransom fee back! Go and bring the money now!", starting_state="merchant_quest_about_job_5b", ending_state="close_window")
def code():
    quest_slot_001 = quest_get_slot(qst.kidnapped_girl,10)
    _debt_to_merchants_guild += quest_slot_001
merchant_quest_about_job_5b_close_window.codeBlock = code


merchant_quest_requested_merchant_quest_persuade_peace_1 = Dialog("anyone", "This war between {s15} and {s14} has brought our town to the verge of ruin. Our caravans get raided before they can reach their destination. Our merchants are afraid to leave the safety of the town walls. And as if those aren't enough, the taxes to maintain the war take away the last bits of our savings. If peace does not come soon, we can not hold on for much longer.", starting_state="merchant_quest_requested", ending_state="merchant_quest_persuade_peace_1")
def condition():
    if _random_merchant_quest_no == qst.persuade_lords_to_make_peace:
        quest_slot_001 = quest_get_slot(qst.persuade_lords_to_make_peace,3)
        quest_slot_002 = quest_get_slot(qst.persuade_lords_to_make_peace,4)
        quest_slot_003 = quest_get_slot(qst.persuade_lords_to_make_peace,2)
        s12 = str_store_troop_name_link(quest_slot_002)
        s13 = str_store_troop_name_link(quest_slot_003)
        s14 = str_store_faction_name_link(quest_slot_001)
        s15 = str_store_faction_name_link(_g_encountered_party_faction)
merchant_quest_requested_merchant_quest_persuade_peace_1.conditionBlock = condition


merchant_quest_persuade_peace_1_merchant_quest_brief = Dialog("anyone|plyr", "You are right. But who can stop this madness called war?", starting_state="merchant_quest_persuade_peace_1", ending_state="merchant_quest_brief")


merchant_quest_persuade_peace_1_merchant_quest_persuade_peace_reject = Dialog("anyone|plyr", "It is your duty to help the nobles in their war effort. You shouldn't complain about it.", starting_state="merchant_quest_persuade_peace_1", ending_state="merchant_quest_persuade_peace_reject")


merchant_quest_persuade_peace_reject_close_window = Dialog("anyone", "Hah. The nobles fight their wars for their greed and their dreams of glory. And it is poor honest folk like us who have to bear the real burden. But you obviously don't want to hear about that.", starting_state="merchant_quest_persuade_peace_reject", ending_state="close_window")


merchant_quest_brief_merchant_quest_persuade_peace_3 = Dialog("anyone", "There have been attempts to reconcile the two sides and reach a settlement. However, there are powerful lords on both sides whose interests lie in continuing the war. These men urge all others not to heed to the word of sensible men, but to keep fighting. While these leaders remain influential, no peace settlement can be reached.", starting_state="merchant_quest_brief", ending_state="merchant_quest_persuade_peace_3")
def condition():
    if _random_merchant_quest_no == qst.persuade_lords_to_make_peace:
        pass
merchant_quest_brief_merchant_quest_persuade_peace_3.conditionBlock = condition


merchant_quest_persuade_peace_3_merchant_quest_persuade_peace_4 = Dialog("anyone|plyr", "Who are these warmongers who block the way of peace?", starting_state="merchant_quest_persuade_peace_3", ending_state="merchant_quest_persuade_peace_4")


merchant_quest_persuade_peace_3_merchant_quest_persuade_peace_4_1 = Dialog("anyone|plyr", "Who are these lords you speak of?", starting_state="merchant_quest_persuade_peace_3", ending_state="merchant_quest_persuade_peace_4")


merchant_quest_persuade_peace_4_merchant_quest_persuade_peace_5 = Dialog("anyone", "They are {s12} from {s15} and {s13} from {s14}. Until they change their mind or lose their influence, there will be no chance of having peace between the two sides.", starting_state="merchant_quest_persuade_peace_4", ending_state="merchant_quest_persuade_peace_5")
def code():
    quest_slot_001 = quest_get_slot(qst.persuade_lords_to_make_peace,3)
    quest_slot_002 = quest_get_slot(qst.persuade_lords_to_make_peace,4)
    quest_slot_003 = quest_get_slot(qst.persuade_lords_to_make_peace,2)
    s12 = str_store_troop_name_link(quest_slot_002)
    s13 = str_store_troop_name_link(quest_slot_003)
    s14 = str_store_faction_name_link(quest_slot_001)
    s15 = str_store_faction_name_link(_g_encountered_party_faction)
merchant_quest_persuade_peace_4_merchant_quest_persuade_peace_5.codeBlock = code


merchant_quest_persuade_peace_5_merchant_quest_persuade_peace_6 = Dialog("anyone|plyr", "What can be done about this?", starting_state="merchant_quest_persuade_peace_5", ending_state="merchant_quest_persuade_peace_6")


merchant_quest_persuade_peace_5_merchant_quest_persuade_peace_6_1 = Dialog("anyone|plyr", "Alas, it seems nothing can be done about it.", starting_state="merchant_quest_persuade_peace_5", ending_state="merchant_quest_persuade_peace_6")


merchant_quest_persuade_peace_6_merchant_quest_persuade_peace_7 = Dialog("anyone", "There is a way to resolve the issue. A particularly determined person can perhaps persuade one or both of these lords to accept making peace. And even if that fails, it can be possible to see that these lords are defeated by force and taken prisoner. If they are captive, they will lose their influence and they can no longer oppose a settlement... What do you think? Can you do it?", starting_state="merchant_quest_persuade_peace_6", ending_state="merchant_quest_persuade_peace_7")


merchant_quest_persuade_peace_7_merchant_quest_persuade_peace_8 = Dialog("anyone|plyr", "It seems difficult. But I will try.", starting_state="merchant_quest_persuade_peace_7", ending_state="merchant_quest_persuade_peace_8")


merchant_quest_persuade_peace_7_merchant_quest_persuade_peace_8_1 = Dialog("anyone|plyr", "If the price is right, I may.", starting_state="merchant_quest_persuade_peace_7", ending_state="merchant_quest_persuade_peace_8")


merchant_quest_persuade_peace_7_merchant_quest_persuade_peace_8_2 = Dialog("anyone|plyr", "Forget it. This is not my problem.", starting_state="merchant_quest_persuade_peace_7", ending_state="merchant_quest_persuade_peace_8")


merchant_quest_persuade_peace_8_merchant_quest_persuade_peace_9 = Dialog("anyone", "Most of the merchants in the town will gladly open up their purses to support such a plan. I think we can collect {reg12} denars between ourselves. We will be happy to reward you with that sum, if you can work this out. Convince {s12} and {s13} to accept a peace settlement, and if either of them proves too stubborn, make sure he falls captive and can not be ransomed until a peace deal is settled.", starting_state="merchant_quest_persuade_peace_8", ending_state="merchant_quest_persuade_peace_9")
def code():
    quest_slot_001 = quest_get_slot(qst.persuade_lords_to_make_peace,4)
    quest_slot_002 = quest_get_slot(qst.persuade_lords_to_make_peace,2)
    s12 = str_store_troop_name_link(quest_slot_001)
    s13 = str_store_troop_name_link(quest_slot_002)
    quest_slot_003 = quest_get_slot(qst.persuade_lords_to_make_peace,22)
    reg12 = quest_slot_003
merchant_quest_persuade_peace_8_merchant_quest_persuade_peace_9.codeBlock = code


merchant_quest_persuade_peace_9_merchant_quest_persuade_peace_10 = Dialog("anyone|plyr", "All right. I will do my best.", starting_state="merchant_quest_persuade_peace_9", ending_state="merchant_quest_persuade_peace_10")


merchant_quest_persuade_peace_9_merchant_quest_persuade_peace_no = Dialog("anyone|plyr", "Sorry. I can not do this.", starting_state="merchant_quest_persuade_peace_9", ending_state="merchant_quest_persuade_peace_no")


merchant_quest_persuade_peace_10_close_window = Dialog("anyone", "Excellent. You will have our blessings. I hope you can deal with those two old goats. We will be waiting and hoping for the good news.", starting_state="merchant_quest_persuade_peace_10", ending_state="close_window")
def code():
    s4 = str_store_party_name_link(_g_encountered_party)
    quest_slot_001 = quest_get_slot(qst.persuade_lords_to_make_peace,3)
    quest_slot_002 = quest_get_slot(qst.persuade_lords_to_make_peace,4)
    quest_slot_003 = quest_get_slot(qst.persuade_lords_to_make_peace,2)
    quest_slot_004 = quest_get_slot(qst.persuade_lords_to_make_peace,22)
    reg12 = quest_slot_004
    s12 = str_store_troop_name_link(quest_slot_002)
    s13 = str_store_troop_name_link(quest_slot_003)
    s14 = str_store_faction_name_link(quest_slot_001)
    s15 = str_store_faction_name_link(_g_encountered_party_faction)
    setup_quest_text(qst.persuade_lords_to_make_peace)
    s2 = str_store_string("@Guildmaster of {s4} promised you {reg12} denars if you can make sure that {s12} and {s13} no longer pose a threat to a peace settlement between {s15} and {s14}. In order to do that;;; you must either convince them or make sure they fall captive and remain so until a peace agreement is made.")
    start_quest(qst.persuade_lords_to_make_peace,_g_talk_troop)
    quest_slot_002 = quest_get_slot(qst.persuade_lords_to_make_peace,4)
    quest_slot_003 = quest_get_slot(qst.persuade_lords_to_make_peace,2)
    report_quest_troop_positions(qst.persuade_lords_to_make_peace,quest_slot_002,3)
    report_quest_troop_positions(qst.persuade_lords_to_make_peace,quest_slot_003,4)
merchant_quest_persuade_peace_10_close_window.codeBlock = code


merchant_quest_persuade_peace_no_close_window = Dialog("anyone", "Don't say no right away. Think about this for some time. If there is a {man/lady} who can manage to do this, it is you.", starting_state="merchant_quest_persuade_peace_no", ending_state="close_window")


merchant_quest_requested_merchant_quest_deal_with_night_bandits = Dialog("anyone", "Do I indeed! There's a group of bandits infesting the town, and I'm at the end of my rope as to how to deal with them. They've been ambushing and robbing townspeople under the cover of night, and then fading away quick as lightning when the guards finally show up. We've not been able to catch a one of them. They only attack lone people, never daring to show themselves when there's a group about. I need someone who can take on these bandits alone and win. That seems to be the only way of bringing them to justice. Are you up to the task?", starting_state="merchant_quest_requested", ending_state="merchant_quest_deal_with_night_bandits")
def condition():
    if _random_merchant_quest_no == qst.deal_with_night_bandits:
        pass
merchant_quest_requested_merchant_quest_deal_with_night_bandits.conditionBlock = condition


merchant_quest_brief_merchant_quest_deal_with_night_bandits = Dialog("anyone", "There's a group of bandits infesting the town, and I'm at the end of my rope as to how to deal with them. They've been ambushing and robbing townspeople under the cover of night, and then fading away quick as lightning when the guards finally show up. We've not been able to catch a one of them. They only attack lone people, never daring to show themselves when there's a group about. I need someone who can take on these bandits alone and win. That seems to be the only way of bringing them to justice. Are you up to the task?", starting_state="merchant_quest_brief", ending_state="merchant_quest_deal_with_night_bandits")
def condition():
    if _random_merchant_quest_no == qst.deal_with_night_bandits:
        pass
merchant_quest_brief_merchant_quest_deal_with_night_bandits.conditionBlock = condition


merchant_quest_deal_with_night_bandits_deal_with_night_bandits_quest_taken = Dialog("anyone|plyr", "Killing bandits? Why, certainly!", starting_state="merchant_quest_deal_with_night_bandits", ending_state="deal_with_night_bandits_quest_taken")
def code():
    s14 = str_store_party_name_link(_g_encountered_party)
    setup_quest_text(qst.deal_with_night_bandits)
    s2 = str_store_string("@The Guildmaster of {s14} has asked you to deal with a group of bandits terrorising the streets of {s14}. They only come out at night;;; and only attack lone travellers on the streets.")
    start_quest(qst.deal_with_night_bandits,_g_talk_troop)
merchant_quest_deal_with_night_bandits_deal_with_night_bandits_quest_taken.codeBlock = code


merchant_quest_deal_with_night_bandits_merchant_quest_stall = Dialog("anyone|plyr", "My apologies, I'm not interested.", starting_state="merchant_quest_deal_with_night_bandits", ending_state="merchant_quest_stall")


deal_with_night_bandits_quest_taken_mayor_pretalk = Dialog("anyone", "That takes a weight off my shoulders, {playername}. You can expect a fine reward if you come back successful. Just don't get yourself killed, eh?", starting_state="deal_with_night_bandits_quest_taken", ending_state="mayor_pretalk")


merchant_quest_requested_merchant_quest_brief_6 = Dialog("anyone", "One of the merchants here is looking for herdsmen to take his cattle to the market at {s13}.", starting_state="merchant_quest_requested", ending_state="merchant_quest_brief")
def condition():
    if _random_merchant_quest_no == qst.move_cattle_herd:
        quest_slot_001 = quest_get_slot(qst.move_cattle_herd,1)
        s13 = str_store_party_name(quest_slot_001)
merchant_quest_requested_merchant_quest_brief_6.conditionBlock = condition


merchant_quest_brief_move_cattle_herd_quest_brief = Dialog("anyone", "The cattle herd must be at {s13} within 30 days. Sooner is better, much better, but it must be absolutely no later than 30 days. If you can do that, I'd be willing to pay you {reg8} denars for your trouble. Interested?", starting_state="merchant_quest_brief", ending_state="move_cattle_herd_quest_brief")
def condition():
    if _random_merchant_quest_no == qst.move_cattle_herd:
        reg8 = quest_get_slot(qst.move_cattle_herd,22)
        quest_slot_001 = quest_get_slot(qst.move_cattle_herd,1)
        s13 = str_store_party_name(quest_slot_001)
merchant_quest_brief_move_cattle_herd_quest_brief.conditionBlock = condition


move_cattle_herd_quest_brief_move_cattle_herd_quest_taken = Dialog("anyone|plyr", "Aye, I can take the herd to {s13}.", starting_state="move_cattle_herd_quest_brief", ending_state="move_cattle_herd_quest_taken")
def code():
    create_cattle_herd(_g_encountered_party,0)
    quest_set_slot(qst.move_cattle_herd,8,reg0)
    s10 = str_store_party_name_link(_g_encountered_party)
    quest_slot_001 = quest_get_slot(qst.move_cattle_herd,1)
    s13 = str_store_party_name_link(quest_slot_001)
    reg8 = quest_get_slot(qst.move_cattle_herd,22)
    setup_quest_text(qst.move_cattle_herd)
    s2 = str_store_string("@Guildmaster of {s10} asked you to move a cattle herd to {s13}. You will earn {reg8} denars in return.")
    start_quest(qst.move_cattle_herd,_g_talk_troop)
move_cattle_herd_quest_brief_move_cattle_herd_quest_taken.codeBlock = code


move_cattle_herd_quest_brief_merchant_quest_stall = Dialog("anyone|plyr", "I am sorry, but no.", starting_state="move_cattle_herd_quest_brief", ending_state="merchant_quest_stall")


move_cattle_herd_quest_taken_mayor_pretalk = Dialog("anyone", "Splendid. You can find the herd right outside the town. After you take the animals to {s13}, return back to me and I will give you your pay.", starting_state="move_cattle_herd_quest_taken", ending_state="mayor_pretalk")


merchant_quest_requested_mayor_pretalk = Dialog("anyone", "I am afraid I can't offer you a job right now.", starting_state="merchant_quest_requested", ending_state="mayor_pretalk")


start_village_elder_deliver_cattle_thank = Dialog("anyone", "My good {sir/madam}. Our village is grateful for your help. Thanks to the {reg5} heads of cattle you have brought, we can now raise our own herd.", starting_state="start", ending_state="village_elder_deliver_cattle_thank")
def condition():
    if is_between(_g_talk_troop,trp.village_1_elder,trp.merchants_end):
        partner_quest_001 = store_partner_quest()
        if partner_quest_001 == qst.deliver_cattle and check_quest_succeeded(partner_quest_001):
            reg5 = quest_get_slot(qst.deliver_cattle,10)
start_village_elder_deliver_cattle_thank.conditionBlock = condition
def code():
    add_xp_as_reward(400)
    change_center_prosperity(_current_town,4)
    change_player_relation_with_center(_current_town,5)
    end_quest(qst.deliver_cattle)
    add_log_entry(4,trp.player,_current_town,-1,-1)
start_village_elder_deliver_cattle_thank.codeBlock = code


village_elder_deliver_cattle_thank_village_elder_talk = Dialog("anyone", "My good {lord/lady}, please, is there anything I can do for you?", starting_state="village_elder_deliver_cattle_thank", ending_state="village_elder_talk")


start_village_elder_talk = Dialog("anyone", "Good day, {sir/madam}, and welcome to {s9}. I am the elder of this village.", starting_state="start", ending_state="village_elder_talk")
def condition():
    if is_between(_g_talk_troop,trp.village_1_elder,trp.merchants_end) and _g_talk_troop_met == 0:
        s9 = str_store_party_name(_current_town)
start_village_elder_talk.conditionBlock = condition


start_village_elder_talk_1 = Dialog("anyone", "Welcome to {s9}, my {lord/lady}. We were rejoiced by the news that you are the new {lord/lady} of our humble village. I am the village elder and I will be honoured to serve you in any way I can.", starting_state="start", ending_state="village_elder_talk")
def condition():
    if is_between(_g_talk_troop,trp.village_1_elder,trp.merchants_end) and _g_talk_troop_met == 0:
        if party_slot_eq(_current_town,7,trp.player):
            s9 = str_store_party_name(_current_town)
start_village_elder_talk_1.conditionBlock = condition


start_village_elder_talk_2 = Dialog("anyone", "{My lord/My lady}, you honour our humble village with your presence.", starting_state="start", ending_state="village_elder_talk")
def condition():
    if is_between(_g_talk_troop,trp.village_1_elder,trp.merchants_end) and party_slot_eq(_current_town,7,trp.player):
        pass
start_village_elder_talk_2.conditionBlock = condition


start_village_elder_talk_3 = Dialog("anyone", "Good day, {sir/madam}.", starting_state="start", ending_state="village_elder_talk")
def condition():
    if is_between(_g_talk_troop,trp.village_1_elder,trp.merchants_end):
        pass
start_village_elder_talk_3.conditionBlock = condition


village_elder_pretalk_village_elder_talk = Dialog("anyone", "Is there anything else I can do for you?", starting_state="village_elder_pretalk", ending_state="village_elder_talk")


village_elder_talk_village_elder_ask_fugitive = Dialog("anyone|plyr", "I am looking for a man by the name of {s4}. I was told he may be hiding here.", starting_state="village_elder_talk", ending_state="village_elder_ask_fugitive")
def condition():
    if check_quest_active(qst.hunt_down_fugitive) and not check_quest_concluded(qst.hunt_down_fugitive) and quest_slot_eq(qst.hunt_down_fugitive,1,_current_town):
        quest_slot_001 = quest_get_slot(qst.hunt_down_fugitive,13)
        get_name_from_dna_to_s50(quest_slot_001)
        s4 = str_store_string(50)
village_elder_talk_village_elder_ask_fugitive.conditionBlock = condition


village_elder_ask_fugitive_village_elder_pretalk = Dialog("anyone", "Strangers come and go to our village, {sir/madam}. But I doubt you'll run into him at this hour of the night. You would have better luck during the day.", starting_state="village_elder_ask_fugitive", ending_state="village_elder_pretalk")
def condition():
    if is_currently_night():
        pass
village_elder_ask_fugitive_village_elder_pretalk.conditionBlock = condition


village_elder_ask_fugitive_close_window = Dialog("anyone", "Strangers come and go to our village, {sir/madam}. If he is hiding here, you will surely find him if you look around.", starting_state="village_elder_ask_fugitive", ending_state="close_window")


village_elder_talk_village_elder_active_mission_1 = Dialog("anyone|plyr", "About the task you asked of me...", starting_state="village_elder_talk", ending_state="village_elder_active_mission_1")
def condition():
    if partner_quest_001 >= 0:
        partner_quest_001 = store_partner_quest()
village_elder_talk_village_elder_active_mission_1.conditionBlock = condition


village_elder_talk_village_elder_request_mission_ask = Dialog("anyone|plyr", "Do you have any tasks I can help you with?", starting_state="village_elder_talk", ending_state="village_elder_request_mission_ask")
def condition():
    if _g_talk_x_troop_faction_relation >= 0:
        if partner_quest_001 < 0:
            partner_quest_001 = store_partner_quest()
village_elder_talk_village_elder_request_mission_ask.conditionBlock = condition


village_elder_talk_village_elder_trade_begin = Dialog("anyone|plyr", "I want to buy some supplies. I will pay with gold.", starting_state="village_elder_talk", ending_state="village_elder_trade_begin")
def condition():
    if party_slot_eq(_current_town,35,0) and not party_slot_ge(_current_town,39,1):
        pass
village_elder_talk_village_elder_trade_begin.conditionBlock = condition


village_elder_trade_begin_village_elder_trade_talk = Dialog("anyone", "Of course, {sir/madam}. Do you want to buy goods or cattle?", starting_state="village_elder_trade_begin", ending_state="village_elder_trade_talk")


village_elder_trade_talk_village_elder_trade = Dialog("anyone|plyr", "I want to buy food and supplies.", starting_state="village_elder_trade_talk", ending_state="village_elder_trade")


village_elder_trade_village_elder_pretalk = Dialog("anyone", "We have some food and other supplies in our storehouse. Come have a look.", starting_state="village_elder_trade", ending_state="village_elder_pretalk")
def code():
    change_screen_trade(_g_talk_troop)
village_elder_trade_village_elder_pretalk.codeBlock = code


village_elder_trade_talk_village_elder_buy_cattle = Dialog("anyone|plyr", "I want to buy some cattle.", starting_state="village_elder_trade_talk", ending_state="village_elder_buy_cattle")
def condition():
    if party_slot_eq(_current_town,35,0) and not party_slot_ge(_current_town,39,1):
        var001 = 0
        if check_quest_active(qst.deliver_cattle) and quest_slot_eq(qst.deliver_cattle,1,_current_town):
            var001 = 1
            if var001 == 0:
                pass
            #end
        #end
    #end
village_elder_trade_talk_village_elder_buy_cattle.conditionBlock = condition


village_elder_trade_talk_village_elder_pretalk = Dialog("anyone|plyr", "I changed my mind. I don't need to buy anything.", starting_state="village_elder_trade_talk", ending_state="village_elder_pretalk")


village_elder_talk_village_elder_ask_enemies = Dialog("anyone|plyr", "Have you seen any enemies around here recently?", starting_state="village_elder_talk", ending_state="village_elder_ask_enemies")


village_elder_ask_enemies_village_elder_pretalk = Dialog("anyone", "I am sorry, {sir/madam}. We have neither seen nor heard of any war parties in this area.", starting_state="village_elder_ask_enemies", ending_state="village_elder_pretalk")
def condition():
    var001 = 0
    party_slot_002 = party_get_slot(_g_encountered_party,61)
    faction_relation_003 = store_relation(party_slot_002,fac.player_supporters_faction)
    if faction_relation_003 > 0 and party_slot_ge(_g_encountered_party,26,0):
        var001 = 1
    elif party_slot_ge(_g_encountered_party,26,30):
        var001 = 1
        if var001 == 0:
            pass
        #end
    #end
village_elder_ask_enemies_village_elder_pretalk.conditionBlock = condition


village_elder_ask_enemies_village_elder_tell_enemies = Dialog("anyone", "Hmm. Let me think about it...", starting_state="village_elder_ask_enemies", ending_state="village_elder_tell_enemies")
def code():
    _temp = 0
village_elder_ask_enemies_village_elder_tell_enemies.codeBlock = code


village_elder_tell_enemies_village_elder_tell_enemies = Dialog("anyone", "{s1} {s2}", starting_state="village_elder_tell_enemies", ending_state="village_elder_tell_enemies")
def condition():
    var001 = _temp
    var002 = trp.knight_1_1_wife
    for troop_id_003 in range(trp.npc1, var002):
        if troop_slot_eq(troop_id_003,2,2):
            troop_slot_004 = troop_get_slot(troop_id_003,10)
            if troop_slot_004 > 0:
                troop_faction_005 = store_faction_of_troop(troop_id_003)
                faction_relation_006 = store_relation(troop_faction_005,fac.player_supporters_faction)
                if faction_relation_006 < 0:
                    distance_parties_007 = store_distance_to_party_from_party(_g_encountered_party,troop_slot_004)
                    if distance_parties_007 < 10:
                        get_information_about_troops_position(troop_id_003,0)
                        if reg0 == 1:
                            var001 -= 1
                            if var001 < 0:
                                var002 = 0
                                s2 = str_store_string("@He is not commanding any men at the moment.")
                                var008 = 0
                                var009 = 0
                                party_num_companions_stacks_010 = party_get_num_companion_stacks(troop_slot_004)
                                for stack_no_011 in range(0, party_num_companions_stacks_010):
                                    troop_id_012 = party_stack_get_troop_id(troop_slot_004,stack_no_011)
                                    if not troop_is_hero(troop_id_012):
                                        party_stack_size_013 = party_stack_get_size(troop_slot_004,stack_no_011)
                                        party_stack_num_wounded_014 = party_stack_get_num_wounded(troop_slot_004,stack_no_011)
                                        var008 += party_stack_size_013
                                        var009 += party_stack_num_wounded_014
                                    #end
                                #end
                            #end
                        #end
                    #end
                #end
            #end
        #end
        if var008 > 0:
            round_value(var009)
            reg1 = reg0
            round_value(var008)
            s2 = str_store_string("@He currently commands {reg0} men{reg1?;;; of which around {reg1} are wounded:}.")
            if var002 == 0:
                pass
            #end
        #end
    #end
village_elder_tell_enemies_village_elder_tell_enemies.conditionBlock = condition
def code():
    _temp += 1
village_elder_tell_enemies_village_elder_tell_enemies.codeBlock = code


village_elder_tell_enemies_village_elder_pretalk = Dialog("anyone", "No, {sir/madam}. We haven't seen any war parties in this area for some time.", starting_state="village_elder_tell_enemies", ending_state="village_elder_pretalk")
def condition():
    if _temp == 0:
        pass
village_elder_tell_enemies_village_elder_pretalk.conditionBlock = condition


village_elder_tell_enemies_village_elder_pretalk_1 = Dialog("anyone", "Well, I guess that was all.", starting_state="village_elder_tell_enemies", ending_state="village_elder_pretalk")


village_elder_talk_village_elder_ask_set_fire = Dialog("anyone|plyr", "I need you to set a large fire on the outskirts of this village.", starting_state="village_elder_talk", ending_state="village_elder_ask_set_fire")
def condition():
    party_slot_001 = party_get_slot(_current_town,120)
    var002 = 0
    var003 = 0
    party_num_prisoners_stacks_004 = party_get_num_prisoner_stacks(party_slot_001)
    for var005 in range(0, party_num_prisoners_stacks_004):
        party_prisoner_troop_id_006 = party_prisoner_stack_get_troop_id(party_slot_001,var005)
        if troop_is_hero(party_prisoner_troop_id_006):
            if cf_prisoner_offered_parole(party_prisoner_troop_id_006):
                party_add_members(p.temp_party_2,party_prisoner_troop_id_006,1)
                var003 += 1
            else:
                party_add_members(p.temp_party,party_prisoner_troop_id_006,1)
                var002 += 1
            #end
        #end
        if var002 >= 1:
            pass
        #end
    #end
village_elder_talk_village_elder_ask_set_fire.conditionBlock = condition


village_elder_ask_set_fire_close_window = Dialog("anyone", "We have already agreed upon this, {sir/my lady}. I will do my best. You can trust me.", starting_state="village_elder_ask_set_fire", ending_state="close_window")
def condition():
    if _g_village_elder_did_not_liked_money_offered == 0:
        party_slot_001 = party_get_slot(_current_town,120)
        party_slot_002 = party_get_slot(party_slot_001,240)
        if party_slot_002 >= cur_hours_003:
            cur_hours_003 = store_current_hours()
village_elder_ask_set_fire_close_window.conditionBlock = condition


village_elder_ask_set_fire_village_elder_ask_set_fire_1 = Dialog("anyone", "A fire, {sir/madam}! Fires are dangerous! Why would you want such a thing?", starting_state="village_elder_ask_set_fire", ending_state="village_elder_ask_set_fire_1")
def condition():
    if _g_village_elder_did_not_liked_money_offered == 0:
        pass
village_elder_ask_set_fire_village_elder_ask_set_fire_1.conditionBlock = condition


village_elder_ask_set_fire_village_elder_ask_set_fire_5 = Dialog("anyone", "I believe that we have already discussed this issue, {sir/my lady}.", starting_state="village_elder_ask_set_fire", ending_state="village_elder_ask_set_fire_5")
def condition():
    if _g_village_elder_did_not_liked_money_offered == 1:
        pass
village_elder_ask_set_fire_village_elder_ask_set_fire_5.conditionBlock = condition


village_elder_ask_set_fire_village_elder_ask_set_fire_5_1 = Dialog("anyone", "We talked about this {sir/madam} before and your previous offers were low compared to risk you want me to take.", starting_state="village_elder_ask_set_fire", ending_state="village_elder_ask_set_fire_5")
def condition():
    if _g_village_elder_did_not_liked_money_offered == 2:
        pass
village_elder_ask_set_fire_village_elder_ask_set_fire_5_1.conditionBlock = condition


village_elder_ask_set_fire_1_village_elder_ask_set_fire_2 = Dialog("anyone|plyr", "I have my reasons, and you will have yours -- a purse of silver. Will you do it, or not?", starting_state="village_elder_ask_set_fire_1", ending_state="village_elder_ask_set_fire_2")


village_elder_ask_set_fire_1_village_elder_ask_set_fire_explain_plan = Dialog("anyone|plyr", "Given the risk you are taking, you are entitled to know my plan.", starting_state="village_elder_ask_set_fire_1", ending_state="village_elder_ask_set_fire_explain_plan")


village_elder_ask_set_fire_explain_plan_village_elder_ask_set_fire_2 = Dialog("anyone|plyr", "I wish to rescue a prisoner from {s4}. When you light the fire, the guards in {s4} will see the smoke, and some of them will rush outside to see what is going on. ", starting_state="village_elder_ask_set_fire_explain_plan", ending_state="village_elder_ask_set_fire_2")
def condition():
    party_slot_001 = party_get_slot(_g_encountered_party,120)
    s4 = str_store_party_name(party_slot_001)
village_elder_ask_set_fire_explain_plan_village_elder_ask_set_fire_2.conditionBlock = condition


village_elder_ask_set_fire_2_village_elder_ask_set_fire_9 = Dialog("anyone", "As you wish, {sir/my lady}. You have been a good friend to this village, and, even though there is a risk, we should be glad to return the favor. When do you want this fire to start?", starting_state="village_elder_ask_set_fire_2", ending_state="village_elder_ask_set_fire_9")
def condition():
    if _g_talk_troop_effective_relation > 9:
        pass
village_elder_ask_set_fire_2_village_elder_ask_set_fire_9.conditionBlock = condition


village_elder_ask_set_fire_2_close_window = Dialog("anyone", "I'm sorry, {sir/my lady}. You will forgive me for saying this, but we don't exactly have good reason to trust you. This is too dangerous.", starting_state="village_elder_ask_set_fire_2", ending_state="close_window")
def condition():
    if _g_talk_troop_relation < 0:
        pass
village_elder_ask_set_fire_2_close_window.conditionBlock = condition


village_elder_ask_set_fire_2_village_elder_ask_set_fire_3 = Dialog("anyone", "As you say, {sir/my lady}. But in doing this, we are taking a very great risk. What's in it for us?", starting_state="village_elder_ask_set_fire_2", ending_state="village_elder_ask_set_fire_3")


village_elder_ask_set_fire_3_village_elder_ask_set_fire_4 = Dialog("anyone|plyr", "I can give you 100 denars.", starting_state="village_elder_ask_set_fire_3", ending_state="village_elder_ask_set_fire_4")
def condition():
    if troop_gold_001 >= 100:
        troop_gold_001 = store_troop_gold(trp.player)
village_elder_ask_set_fire_3_village_elder_ask_set_fire_4.conditionBlock = condition
def code():
    _g_last_money_offer_to_elder = 100
village_elder_ask_set_fire_3_village_elder_ask_set_fire_4.codeBlock = code


village_elder_ask_set_fire_3_village_elder_ask_set_fire_6 = Dialog("anyone|plyr", "I can give you 200 denars.", starting_state="village_elder_ask_set_fire_3", ending_state="village_elder_ask_set_fire_6")
def condition():
    if troop_gold_001 >= 200:
        troop_gold_001 = store_troop_gold(trp.player)
village_elder_ask_set_fire_3_village_elder_ask_set_fire_6.conditionBlock = condition
def code():
    _g_last_money_offer_to_elder = 200
village_elder_ask_set_fire_3_village_elder_ask_set_fire_6.codeBlock = code


village_elder_ask_set_fire_3_village_elder_ask_set_fire_6_1 = Dialog("anyone|plyr", "I can give you 300 denars.", starting_state="village_elder_ask_set_fire_3", ending_state="village_elder_ask_set_fire_6")
def condition():
    if troop_gold_001 >= 300:
        troop_gold_001 = store_troop_gold(trp.player)
village_elder_ask_set_fire_3_village_elder_ask_set_fire_6_1.conditionBlock = condition
def code():
    _g_last_money_offer_to_elder = 300
village_elder_ask_set_fire_3_village_elder_ask_set_fire_6_1.codeBlock = code


village_elder_ask_set_fire_3_close_window = Dialog("anyone|plyr", "Never mind.", starting_state="village_elder_ask_set_fire_3", ending_state="close_window")


village_elder_ask_set_fire_4_village_elder_talk = Dialog("anyone", "This is madness. I cannot take such a risk.", starting_state="village_elder_ask_set_fire_4", ending_state="village_elder_talk")
def condition():
    if _g_village_elder_did_not_liked_money_offered == 0:
        pass
village_elder_ask_set_fire_4_village_elder_talk.conditionBlock = condition
def code():
    _g_village_elder_did_not_liked_money_offered = 1
village_elder_ask_set_fire_4_village_elder_talk.codeBlock = code


village_elder_ask_set_fire_5_village_elder_ask_set_fire_7 = Dialog("anyone|plyr", "Then let's increase your reward to 200 denars.", starting_state="village_elder_ask_set_fire_5", ending_state="village_elder_ask_set_fire_7")
def condition():
    if _g_village_elder_did_not_liked_money_offered == 1:
        if troop_gold_001 >= 200:
            troop_gold_001 = store_troop_gold(trp.player)
village_elder_ask_set_fire_5_village_elder_ask_set_fire_7.conditionBlock = condition
def code():
    _g_last_money_offer_to_elder = 200
village_elder_ask_set_fire_5_village_elder_ask_set_fire_7.codeBlock = code


village_elder_ask_set_fire_5_village_elder_ask_set_fire_6 = Dialog("anyone|plyr", "Then let's increase your reward to 300 denars.", starting_state="village_elder_ask_set_fire_5", ending_state="village_elder_ask_set_fire_6")
def condition():
    if _g_village_elder_did_not_liked_money_offered == 1:
        if troop_gold_001 >= 300:
            troop_gold_001 = store_troop_gold(trp.player)
village_elder_ask_set_fire_5_village_elder_ask_set_fire_6.conditionBlock = condition
def code():
    _g_last_money_offer_to_elder = 300
village_elder_ask_set_fire_5_village_elder_ask_set_fire_6.codeBlock = code


village_elder_ask_set_fire_5_village_elder_ask_set_fire_6_1 = Dialog("anyone|plyr", "Then let's increase your reward to 300 denars. This is my last offer.", starting_state="village_elder_ask_set_fire_5", ending_state="village_elder_ask_set_fire_6")
def condition():
    if _g_village_elder_did_not_liked_money_offered == 2:
        if troop_gold_001 >= 300:
            troop_gold_001 = store_troop_gold(trp.player)
village_elder_ask_set_fire_5_village_elder_ask_set_fire_6_1.conditionBlock = condition
def code():
    _g_last_money_offer_to_elder = 300
village_elder_ask_set_fire_5_village_elder_ask_set_fire_6_1.codeBlock = code


village_elder_ask_set_fire_5_close_window = Dialog("anyone|plyr", "Never mind.", starting_state="village_elder_ask_set_fire_5", ending_state="close_window")


village_elder_ask_set_fire_6_village_elder_ask_set_fire_9 = Dialog("anyone", "Very well. You are asking me to take a very great risk, but I will do it. When do you want this fire to start?", starting_state="village_elder_ask_set_fire_6", ending_state="village_elder_ask_set_fire_9")
def code():
    troop_remove_gold(trp.player,_g_last_money_offer_to_elder)
village_elder_ask_set_fire_6_village_elder_ask_set_fire_9.codeBlock = code


village_elder_ask_set_fire_7_village_elder_talk = Dialog("anyone", "I cannot do such a dangerous thing for 200 denars.", starting_state="village_elder_ask_set_fire_7", ending_state="village_elder_talk")
def code():
    _g_village_elder_did_not_liked_money_offered = 2
village_elder_ask_set_fire_7_village_elder_talk.codeBlock = code


village_elder_ask_set_fire_9_village_elder_ask_set_fire_10 = Dialog("anyone|plyr", "Continue with your preparations. One hour from now, I need that fire.", starting_state="village_elder_ask_set_fire_9", ending_state="village_elder_ask_set_fire_10")
def code():
    party_slot_001 = party_get_slot(_current_town,120)
    cur_hours_002 = store_current_hours()
    cur_hours_002 += 1
    party_slot_003 = cur_hours_002
    party_set_slot(party_slot_001,240,party_slot_003)
    if is_between(_next_center_will_be_fired,p.village_1,p.salt_mine):
        party_slot_004 = party_get_slot(_next_center_will_be_fired,38)
        if party_slot_004 == 0:
            party_slot_003 = party_get_slot(_next_center_will_be_fired,240)
            cur_hours_005 = store_current_hours()
            var006 = cur_hours_005 - 4
            var006 -= 1
            if party_slot_003 >= var006:
                party_clear_particle_systems(_next_center_will_be_fired)
            #end
        #end
    #end
    _next_center_will_be_fired = _current_town
    _g_village_elder_did_not_liked_money_offered = 0
village_elder_ask_set_fire_9_village_elder_ask_set_fire_10.codeBlock = code


village_elder_ask_set_fire_9_village_elder_ask_set_fire_11 = Dialog("anyone|plyr", "Do this in at the stroke of midnight. I will wait exactly one hour.", starting_state="village_elder_ask_set_fire_9", ending_state="village_elder_ask_set_fire_11")
def condition():
    if cur_time_of_day_001 >= 6 and cur_time_of_day_001 < 23:
        cur_time_of_day_001 = store_time_of_day()
village_elder_ask_set_fire_9_village_elder_ask_set_fire_11.conditionBlock = condition
def code():
    party_slot_001 = party_get_slot(_current_town,120)
    cur_time_of_day_002 = store_time_of_day()
    cur_hours_003 = store_current_hours()
    var004 = 24 - cur_time_of_day_002
    party_slot_005 = cur_hours_003 + var004
    party_set_slot(party_slot_001,240,party_slot_005)
    if is_between(_next_center_will_be_fired,p.village_1,p.salt_mine):
        party_slot_006 = party_get_slot(_next_center_will_be_fired,38)
        if party_slot_006 == 0:
            party_slot_005 = party_get_slot(_next_center_will_be_fired,240)
            cur_hours_007 = store_current_hours()
            var008 = cur_hours_007 - 4
            var008 -= 1
            if party_slot_005 >= var008:
                party_clear_particle_systems(_next_center_will_be_fired)
            #end
        #end
    #end
    _next_center_will_be_fired = _current_town
    _g_village_elder_did_not_liked_money_offered = 0
village_elder_ask_set_fire_9_village_elder_ask_set_fire_11.codeBlock = code


village_elder_ask_set_fire_10_close_window = Dialog("anyone", "Very well, {sir/my lady}. We will make our preparations. Now you make yours.", starting_state="village_elder_ask_set_fire_10", ending_state="close_window")
def code():
    var001 = -1
    for cur_agent in __all_agents__:
        troop_id_003 = agent_get_troop_id(cur_agent)
        if is_between(troop_id_003,trp.village_1_elder,trp.merchants_end):
            pos0 = agent_get_position(cur_agent)
            for var004 in range(0, 64):
                pos1 = entry_point_get_position(var004)
                distance_005 = get_distance_between_positions(0,1)
                if distance_005 > var001:
                    var001 = distance_005
                    copy_position(2,1)
                    var006 = cur_agent
                #end
            #end
        #end
        if var001 > -1:
            agent_set_scripted_destination(var006,2)
        #end
    #end
village_elder_ask_set_fire_10_close_window.codeBlock = code


village_elder_ask_set_fire_11_close_window = Dialog("anyone", "As you wish, {sir/my lady}. May the heavens protect you.", starting_state="village_elder_ask_set_fire_11", ending_state="close_window")


village_elder_talk_village_elder_recruit_start = Dialog("anyone|plyr", "Are there any lads from this village who might want to seek their fortune in the wars?", starting_state="village_elder_talk", ending_state="village_elder_recruit_start")
def condition():
    if call_script(script.cf_village_recruit_volunteers_cond):
        pass
village_elder_talk_village_elder_recruit_start.conditionBlock = condition


village_elder_talk_close_window = Dialog("anyone|plyr", "[Leave]", starting_state="village_elder_talk", ending_state="close_window")


village_elder_buy_cattle_village_elder_buy_cattle_2 = Dialog("anyone", "We have {reg5} heads of cattle, each for {reg6} denars. How many do you want to buy?", starting_state="village_elder_buy_cattle", ending_state="village_elder_buy_cattle_2")
def condition():
    reg5 = party_get_slot(_g_encountered_party,205)
    if reg5 > 0:
        item_value_001 = store_item_value(itm.cattle_meat)
        game_get_item_buy_price_factor(itm.cattle_meat)
        item_value_001 *= reg0
        item_value_001 /= 50
        _temp = item_value_001
        reg6 = item_value_001
village_elder_buy_cattle_village_elder_buy_cattle_2.conditionBlock = condition


village_elder_buy_cattle_village_elder_buy_cattle_2_1 = Dialog("anyone", "I am afraid we have no cattle left in the village {sir/madam}.", starting_state="village_elder_buy_cattle", ending_state="village_elder_buy_cattle_2")


village_elder_buy_cattle_2_village_elder_buy_cattle_complete = Dialog("anyone|plyr", "One.", starting_state="village_elder_buy_cattle_2", ending_state="village_elder_buy_cattle_complete")
def condition():
    party_slot_001 = party_get_slot(_g_encountered_party,205)
    if party_slot_001 >= 1:
        if troop_gold_002 >= _temp:
            troop_gold_002 = store_troop_gold(trp.player)
village_elder_buy_cattle_2_village_elder_buy_cattle_complete.conditionBlock = condition
def code():
    buy_cattle_from_village(_g_encountered_party,1,_temp)
village_elder_buy_cattle_2_village_elder_buy_cattle_complete.codeBlock = code


village_elder_buy_cattle_2_village_elder_buy_cattle_complete_1 = Dialog("anyone|plyr", "Two.", starting_state="village_elder_buy_cattle_2", ending_state="village_elder_buy_cattle_complete")
def condition():
    party_slot_001 = party_get_slot(_g_encountered_party,205)
    if party_slot_001 >= 2:
        troop_gold_002 = store_troop_gold(trp.player)
        if troop_gold_002 >= var003:
            var003 = _temp * 2
village_elder_buy_cattle_2_village_elder_buy_cattle_complete_1.conditionBlock = condition
def code():
    buy_cattle_from_village(_g_encountered_party,2,_temp)
village_elder_buy_cattle_2_village_elder_buy_cattle_complete_1.codeBlock = code


village_elder_buy_cattle_2_village_elder_buy_cattle_complete_2 = Dialog("anyone|plyr", "Three.", starting_state="village_elder_buy_cattle_2", ending_state="village_elder_buy_cattle_complete")
def condition():
    party_slot_001 = party_get_slot(_g_encountered_party,205)
    if party_slot_001 >= 3:
        troop_gold_002 = store_troop_gold(trp.player)
        if troop_gold_002 >= var003:
            var003 = _temp * 3
village_elder_buy_cattle_2_village_elder_buy_cattle_complete_2.conditionBlock = condition
def code():
    buy_cattle_from_village(_g_encountered_party,3,_temp)
village_elder_buy_cattle_2_village_elder_buy_cattle_complete_2.codeBlock = code


village_elder_buy_cattle_2_village_elder_buy_cattle_complete_3 = Dialog("anyone|plyr", "Four.", starting_state="village_elder_buy_cattle_2", ending_state="village_elder_buy_cattle_complete")
def condition():
    party_slot_001 = party_get_slot(_g_encountered_party,205)
    if party_slot_001 >= 4:
        troop_gold_002 = store_troop_gold(trp.player)
        if troop_gold_002 >= var003:
            var003 = _temp * 4
village_elder_buy_cattle_2_village_elder_buy_cattle_complete_3.conditionBlock = condition
def code():
    buy_cattle_from_village(_g_encountered_party,4,_temp)
village_elder_buy_cattle_2_village_elder_buy_cattle_complete_3.codeBlock = code


village_elder_buy_cattle_2_village_elder_buy_cattle_complete_4 = Dialog("anyone|plyr", "Five.", starting_state="village_elder_buy_cattle_2", ending_state="village_elder_buy_cattle_complete")
def condition():
    party_slot_001 = party_get_slot(_g_encountered_party,205)
    if party_slot_001 >= 5:
        troop_gold_002 = store_troop_gold(trp.player)
        if troop_gold_002 >= var003:
            var003 = _temp * 5
village_elder_buy_cattle_2_village_elder_buy_cattle_complete_4.conditionBlock = condition
def code():
    buy_cattle_from_village(_g_encountered_party,5,_temp)
village_elder_buy_cattle_2_village_elder_buy_cattle_complete_4.codeBlock = code


village_elder_buy_cattle_2_village_elder_pretalk = Dialog("anyone|plyr", "Forget it.", starting_state="village_elder_buy_cattle_2", ending_state="village_elder_pretalk")


village_elder_buy_cattle_complete_village_elder_pretalk = Dialog("anyone", "I will tell the herders to round up the animals and bring them to you, {sir/madam}. I am sure you will be satisfied with your purchase.", starting_state="village_elder_buy_cattle_complete", ending_state="village_elder_pretalk")


village_elder_recruit_start_village_elder_talk = Dialog("anyone", "I don't think anyone would be interested, {sir/madam}. Is there anything else I can do for you?", starting_state="village_elder_recruit_start", ending_state="village_elder_talk")
def condition():
    party_slot_001 = party_get_slot(_current_town,93)
    party_free_companions_capacity_002 = party_get_free_companions_capacity(p.main_party)
    val_min(party_slot_001,party_free_companions_capacity_002)
    troop_gold_003 = store_troop_gold(trp.player)
    var004 = troop_gold_003 / 10
    if party_slot_001 <= 0:
        val_min(party_slot_001,var004)
village_elder_recruit_start_village_elder_talk.conditionBlock = condition


village_elder_recruit_start_village_elder_recruit_decision = Dialog("anyone", "I can think of {reg5} whom I suspect would jump at the chance. If you could pay 10 denars {reg7?each for their equipment:for his equipment}. Does that suit you?", starting_state="village_elder_recruit_start", ending_state="village_elder_recruit_decision")
def condition():
    party_slot_001 = party_get_slot(_current_town,93)
    party_free_companions_capacity_002 = party_get_free_companions_capacity(p.main_party)
    val_min(party_slot_001,party_free_companions_capacity_002)
    troop_gold_003 = store_troop_gold(trp.player)
    var004 = troop_gold_003 / 10
    val_min(party_slot_001,var004)
    _temp = party_slot_001
    reg5 = party_slot_001
    reg7 = party_slot_001 + -1
village_elder_recruit_start_village_elder_recruit_decision.conditionBlock = condition


village_elder_recruit_decision_village_elder_pretalk = Dialog("anyone|plyr", "Tell {reg7?them:him} to make ready.", starting_state="village_elder_recruit_decision", ending_state="village_elder_pretalk")
def condition():
    var001 = _temp
    if var001 >= 1:
        reg7 = var001 + -1
village_elder_recruit_decision_village_elder_pretalk.conditionBlock = condition
def code():
    village_recruit_volunteers_recruit()
village_elder_recruit_decision_village_elder_pretalk.codeBlock = code


village_elder_recruit_decision_village_elder_pretalk_1 = Dialog("anyone|plyr", "No, not now.", starting_state="village_elder_recruit_decision", ending_state="village_elder_pretalk")
def condition():
    if party_slot_ge(_current_town,93,1):
        pass
village_elder_recruit_decision_village_elder_pretalk_1.conditionBlock = condition


village_elder_active_mission_1_village_elder_active_mission_2 = Dialog("anyone", "Yes {sir/madam}, have you made any progress on it?", starting_state="village_elder_active_mission_1", ending_state="village_elder_active_mission_2")


village_elder_active_mission_2_village_elder_deliver_grain_thank = Dialog("anyone|plyr", "Indeed. I brought you {reg5} packs of grain.", starting_state="village_elder_active_mission_2", ending_state="village_elder_deliver_grain_thank")
def condition():
    partner_quest_001 = store_partner_quest()
    if partner_quest_001 == qst.deliver_grain:
        quest_slot_002 = quest_get_slot(qst.deliver_grain,10)
        get_troop_item_amount(trp.player,itm.grain)
        var003 = reg0
        if var003 >= quest_slot_002:
            reg5 = quest_slot_002
village_elder_active_mission_2_village_elder_deliver_grain_thank.conditionBlock = condition


village_elder_deliver_grain_thank_village_elder_deliver_grain_thank_2 = Dialog("anyone", "My good {lord/lady}. You have saved us from hunger and desperation. We cannot thank you enough, but you'll always be in our prayers. The village of {s13} will not forget what you have done for us.", starting_state="village_elder_deliver_grain_thank", ending_state="village_elder_deliver_grain_thank_2")
def condition():
    s13 = str_store_party_name(_current_town)
village_elder_deliver_grain_thank_village_elder_deliver_grain_thank_2.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(qst.deliver_grain,10)
    troop_remove_items(trp.player,itm.grain,quest_slot_001)
    add_xp_as_reward(400)
    change_center_prosperity(_current_town,4)
    change_player_relation_with_center(_current_town,5)
    end_quest(qst.deliver_grain)
    add_log_entry(4,trp.player,_current_town,-1,-1)
village_elder_deliver_grain_thank_village_elder_deliver_grain_thank_2.codeBlock = code


village_elder_deliver_grain_thank_2_village_elder_talk = Dialog("anyone", "My good {lord/lady}, please, is there anything I can do for you?", starting_state="village_elder_deliver_grain_thank_2", ending_state="village_elder_talk")


village_elder_active_mission_2_village_elder_active_mission_3 = Dialog("anyone|plyr", "I am still working on it.", starting_state="village_elder_active_mission_2", ending_state="village_elder_active_mission_3")


village_elder_active_mission_2_village_elder_mission_failed = Dialog("anyone|plyr", "I am afraid I won't be able to finish it.", starting_state="village_elder_active_mission_2", ending_state="village_elder_mission_failed")


village_elder_active_mission_3_village_elder_pretalk = Dialog("anyone", "Thank you, {sir/madam}. We are praying for your success everyday.", starting_state="village_elder_active_mission_3", ending_state="village_elder_pretalk")


village_elder_mission_failed_village_elder_pretalk = Dialog("anyone", "Ah, I am sorry to hear that {sir/madam}. I'll try to think of something else.", starting_state="village_elder_mission_failed", ending_state="village_elder_pretalk")
def code():
    partner_quest_001 = store_partner_quest()
    abort_quest(partner_quest_001,1)
village_elder_mission_failed_village_elder_pretalk.codeBlock = code


village_elder_request_mission_ask_village_elder_pretalk = Dialog("anyone", "Well {sir/madam}, you are already engaged with a task helping us. We cannot ask more from you.", starting_state="village_elder_request_mission_ask", ending_state="village_elder_pretalk")
def condition():
    if partner_quest_001 >= 0:
        partner_quest_001 = store_partner_quest()
village_elder_request_mission_ask_village_elder_pretalk.conditionBlock = condition


village_elder_request_mission_ask_village_elder_pretalk_1 = Dialog("anyone", "No {sir/madam}, We don't have any other tasks for you.", starting_state="village_elder_request_mission_ask", ending_state="village_elder_pretalk")
def condition():
    if troop_slot_eq(_g_talk_troop,20,1):
        pass
village_elder_request_mission_ask_village_elder_pretalk_1.conditionBlock = condition


village_elder_request_mission_ask_village_elder_tell_mission = Dialog("anyone|auto_proceed", "A task?", starting_state="village_elder_request_mission_ask", ending_state="village_elder_tell_mission")
def code():
    get_quest(_g_talk_troop)
    _random_quest_no = reg0
village_elder_request_mission_ask_village_elder_tell_mission.codeBlock = code


village_elder_tell_mission_village_elder_tell_deliver_grain_mission = Dialog("anyone", "{My good sir/My good lady}, our village has been going through such hardships lately. The harvest has been bad, and recently some merciless bandits took away our seed grain that we had reserved for the planting season. If we cannot find some grain soon, we will not be able to plant our fields and then we will have nothing to eat for the coming year. If you can help us, we would be indebted to you forever.", starting_state="village_elder_tell_mission", ending_state="village_elder_tell_deliver_grain_mission")
def condition():
    if _random_quest_no == qst.deliver_grain:
        pass
village_elder_tell_mission_village_elder_tell_deliver_grain_mission.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(_random_quest_no,1)
    s3 = str_store_party_name_link(quest_slot_001)
    reg5 = quest_get_slot(_random_quest_no,10)
    setup_quest_text(_random_quest_no)
    s2 = str_store_string("@The elder of the village of {s3} asked you to bring them {reg5} packs of grain.")
village_elder_tell_mission_village_elder_tell_deliver_grain_mission.codeBlock = code


village_elder_tell_deliver_grain_mission_village_elder_tell_deliver_grain_mission_2 = Dialog("anyone|plyr", "Hmmm. How much grain do you need?", starting_state="village_elder_tell_deliver_grain_mission", ending_state="village_elder_tell_deliver_grain_mission_2")


village_elder_tell_deliver_grain_mission_village_elder_deliver_grain_mission_reject = Dialog("anyone|plyr", "I can't be bothered with this. Ask help from someone else.", starting_state="village_elder_tell_deliver_grain_mission", ending_state="village_elder_deliver_grain_mission_reject")


village_elder_tell_deliver_grain_mission_2_village_elder_tell_deliver_grain_mission_3 = Dialog("anyone", "I think {reg5} packs of grain will let us start the planting. Hopefully, we can find charitable people to help us with the rest.", starting_state="village_elder_tell_deliver_grain_mission_2", ending_state="village_elder_tell_deliver_grain_mission_3")
def condition():
    reg5 = quest_get_slot(_random_quest_no,10)
village_elder_tell_deliver_grain_mission_2_village_elder_tell_deliver_grain_mission_3.conditionBlock = condition


village_elder_tell_deliver_grain_mission_3_village_elder_deliver_grain_mission_accept = Dialog("anyone|plyr", "Then I will go and find you the grain you need.", starting_state="village_elder_tell_deliver_grain_mission_3", ending_state="village_elder_deliver_grain_mission_accept")


village_elder_tell_deliver_grain_mission_3_village_elder_deliver_grain_mission_reject = Dialog("anyone|plyr", "I am afraid I don't have time for this. You'll need to find help elsewhere.", starting_state="village_elder_tell_deliver_grain_mission_3", ending_state="village_elder_deliver_grain_mission_reject")


village_elder_deliver_grain_mission_accept_close_window = Dialog("anyone", "Thank you, {sir/madam}. We'll be praying for you night and day.", starting_state="village_elder_deliver_grain_mission_accept", ending_state="close_window")
def code():
    _g_leave_encounter = 1
    change_player_relation_with_center(_current_town,5)
    start_quest(_random_quest_no,_g_talk_troop)
village_elder_deliver_grain_mission_accept_close_window.codeBlock = code


village_elder_deliver_grain_mission_reject_close_window = Dialog("anyone", "Yes {sir/madam}, of course. I am sorry if I have bothered you with our troubles.", starting_state="village_elder_deliver_grain_mission_reject", ending_state="close_window")
def code():
    troop_set_slot(_g_talk_troop,20,1)
village_elder_deliver_grain_mission_reject_close_window.codeBlock = code


village_elder_tell_mission_village_elder_tell_train_peasants_against_bandits_mission = Dialog("anyone", "We are suffering greatly at the hands of a group of bandits. They take our food and livestock, and kill anyone who doesn't obey them immediately. Our men are angry that we cannot defend ourselves, but we are only simple farmers... However, with some help, I think that some of the people here could be more than that. We just need an experienced warrior to teach us how to fight.", starting_state="village_elder_tell_mission", ending_state="village_elder_tell_train_peasants_against_bandits_mission")
def condition():
    if _random_quest_no == qst.train_peasants_against_bandits:
        pass
village_elder_tell_mission_village_elder_tell_train_peasants_against_bandits_mission.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(_random_quest_no,1)
    s13 = str_store_party_name_link(quest_slot_001)
    reg5 = quest_get_slot(_random_quest_no,10)
    setup_quest_text(_random_quest_no)
    s2 = str_store_string("@The elder of the village of {s13} asked you to train {reg5} peasants to fight against local bandits.")
village_elder_tell_mission_village_elder_tell_train_peasants_against_bandits_mission.codeBlock = code


village_elder_tell_train_peasants_against_bandits_mission_village_elder_train_peasants_against_bandits_mission_accept = Dialog("anyone|plyr", "I can teach you how to defend yourself.", starting_state="village_elder_tell_train_peasants_against_bandits_mission", ending_state="village_elder_train_peasants_against_bandits_mission_accept")


village_elder_tell_train_peasants_against_bandits_mission_village_elder_train_peasants_against_bandits_mission_reject = Dialog("anyone|plyr", "You peasants have no business taking up arms. Just pay the bandits and be off with it.", starting_state="village_elder_tell_train_peasants_against_bandits_mission", ending_state="village_elder_train_peasants_against_bandits_mission_reject")


village_elder_train_peasants_against_bandits_mission_accept_close_window = Dialog("anyone", "You will? Oh, splendid! We would be deeply indebted to you, {sir/madam}. I'll instruct the village folk to assemble here and receive your training. If you can teach us how to defend ourselves, I promise you'll receive everything we can give you in return for your efforts.", starting_state="village_elder_train_peasants_against_bandits_mission_accept", ending_state="close_window")
def code():
    _g_leave_encounter = 1
    change_player_relation_with_center(_current_town,3)
    start_quest(_random_quest_no,_g_talk_troop)
village_elder_train_peasants_against_bandits_mission_accept_close_window.codeBlock = code


village_elder_train_peasants_against_bandits_mission_reject_close_window = Dialog("anyone", "Yes, of course {sir/madam}. Thank you for your counsel.", starting_state="village_elder_train_peasants_against_bandits_mission_reject", ending_state="close_window")
def code():
    troop_set_slot(_g_talk_troop,20,1)
village_elder_train_peasants_against_bandits_mission_reject_close_window.codeBlock = code


village_elder_tell_mission_village_elder_tell_deliver_cattle_mission = Dialog("anyone", "Bandits have driven away our cattle. Our pastures are empty. If we had just a few heads of cattle we could start to raise a herd again.", starting_state="village_elder_tell_mission", ending_state="village_elder_tell_deliver_cattle_mission")
def condition():
    if _random_quest_no == qst.deliver_cattle:
        pass
village_elder_tell_mission_village_elder_tell_deliver_cattle_mission.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(_random_quest_no,1)
    s3 = str_store_party_name_link(quest_slot_001)
    reg5 = quest_get_slot(_random_quest_no,10)
    setup_quest_text(_random_quest_no)
    s2 = str_store_string("@The elder of the village of {s3} asked you to bring them {reg5} heads of cattle.")
village_elder_tell_mission_village_elder_tell_deliver_cattle_mission.codeBlock = code


village_elder_tell_deliver_cattle_mission_village_elder_tell_deliver_cattle_mission_2 = Dialog("anyone|plyr", "How many animals do you need?", starting_state="village_elder_tell_deliver_cattle_mission", ending_state="village_elder_tell_deliver_cattle_mission_2")


village_elder_tell_deliver_cattle_mission_village_elder_deliver_cattle_mission_reject = Dialog("anyone|plyr", "I don't have time for this. Ask help from someone else.", starting_state="village_elder_tell_deliver_cattle_mission", ending_state="village_elder_deliver_cattle_mission_reject")


village_elder_tell_deliver_cattle_mission_2_village_elder_tell_deliver_cattle_mission_3 = Dialog("anyone", "I think {reg5} heads will suffice for a small herd.", starting_state="village_elder_tell_deliver_cattle_mission_2", ending_state="village_elder_tell_deliver_cattle_mission_3")
def condition():
    reg5 = quest_get_slot(_random_quest_no,10)
village_elder_tell_deliver_cattle_mission_2_village_elder_tell_deliver_cattle_mission_3.conditionBlock = condition


village_elder_tell_deliver_cattle_mission_3_village_elder_deliver_cattle_mission_accept = Dialog("anyone|plyr", "Then I will bring you the cattle you need.", starting_state="village_elder_tell_deliver_cattle_mission_3", ending_state="village_elder_deliver_cattle_mission_accept")


village_elder_tell_deliver_cattle_mission_3_village_elder_deliver_cattle_mission_reject = Dialog("anyone|plyr", "I am afraid I don't have time for this. You'll need to find help elsewhere.", starting_state="village_elder_tell_deliver_cattle_mission_3", ending_state="village_elder_deliver_cattle_mission_reject")


village_elder_deliver_cattle_mission_accept_close_window = Dialog("anyone", "Thank you, {sir/madam}. We'll be praying for you night and day.", starting_state="village_elder_deliver_cattle_mission_accept", ending_state="close_window")
def code():
    _g_leave_encounter = 1
    change_player_relation_with_center(_current_town,3)
    start_quest(_random_quest_no,_g_talk_troop)
village_elder_deliver_cattle_mission_accept_close_window.codeBlock = code


village_elder_deliver_cattle_mission_reject_close_window = Dialog("anyone", "Yes {sir/madam}, of course. I am sorry if I have bothered you with our troubles.", starting_state="village_elder_deliver_cattle_mission_reject", ending_state="close_window")
def code():
    troop_set_slot(_g_talk_troop,20,1)
village_elder_deliver_cattle_mission_reject_close_window.codeBlock = code


village_elder_tell_mission_village_elder_pretalk = Dialog("anyone", "Thank you, {sir/madam}, but we do not really need anything right now.", starting_state="village_elder_tell_mission", ending_state="village_elder_pretalk")


start_goods_merchant_talk = Dialog("anyone", "{My lord/my lady}, you honour my humble shop with your presence.", starting_state="start", ending_state="goods_merchant_talk")
def condition():
    if is_between(_g_talk_troop,trp.town_1_merchant,trp.town_1_horse_merchant) and party_slot_eq(_current_town,7,trp.player):
        pass
start_goods_merchant_talk.conditionBlock = condition


start_goods_merchant_talk_1 = Dialog("anyone", "Welcome {sir/madam}. What can I do for you?", starting_state="start", ending_state="goods_merchant_talk")
def condition():
    if is_between(_g_talk_troop,trp.town_1_merchant,trp.town_1_horse_merchant):
        pass
start_goods_merchant_talk_1.conditionBlock = condition


goods_merchant_pretalk_goods_merchant_talk = Dialog("anyone", "Anything else?", starting_state="goods_merchant_pretalk", ending_state="goods_merchant_talk")


goods_merchant_talk_goods_trade_requested = Dialog("anyone|plyr", "I want to buy a few items... and perhaps sell some.", starting_state="goods_merchant_talk", ending_state="goods_trade_requested")


goods_trade_requested_goods_trade_completed = Dialog("anyone", "Sure, sure... Here, have a look at my stock...", starting_state="goods_trade_requested", ending_state="goods_trade_completed")
def code():
    change_screen_trade()
goods_trade_requested_goods_trade_completed.codeBlock = code


goods_trade_completed_goods_merchant_talk = Dialog("anyone", "Anything else?", starting_state="goods_trade_completed", ending_state="goods_merchant_talk")


goods_merchant_talk_trade_info_request = Dialog("anyone|plyr", "What goods should I buy here to trade with other towns?", starting_state="goods_merchant_talk", ending_state="trade_info_request")


goods_merchant_talk_close_window = Dialog("anyone|plyr", "Nothing. Thanks.", starting_state="goods_merchant_talk", ending_state="close_window")


trade_info_request_trade_info_request_2 = Dialog("anyone", "That information can be best obtained from caravan masters and travelling merchants. If you want I can send you to the district where foreign merchants stay at when they come to the town. If you spend some time there and listen to the talk, you can learn a lot about what to buy and where to sell it.", starting_state="trade_info_request", ending_state="trade_info_request_2")


trade_info_request_2_close_window = Dialog("anyone|plyr", "Then I'll go and spend some time with these merchants.", starting_state="trade_info_request_2", ending_state="close_window")
def code():
    jump_to_menu(mnu.town_trade_assessment_begin)
    finish_mission()
trade_info_request_2_close_window.codeBlock = code


trade_info_request_2_goods_merchant_pretalk = Dialog("anyone|plyr", "I have no time for this right now.", starting_state="trade_info_request_2", ending_state="goods_merchant_pretalk")


start_arena_intro_1 = Dialog("anyone", "{!}.", starting_state="start", ending_state="arena_intro_1")
def condition():
    reg1 = store_conversation_troop()
    if is_between(reg1,trp.town_1_arena_master,trp.town_1_armorer):
        _arena_reward_asked = 0
        if 1 == 0:
            _arena_tournaments_asked = 0
start_arena_intro_1.conditionBlock = condition


start_arena_intro_1_1 = Dialog("anyone", "Good day friend. If you came to watch the tournaments you came in vain. There won't be a tournament here anytime soon.", starting_state="start", ending_state="arena_intro_1")
def condition():
    if is_between(reg1,trp.town_1_arena_master,trp.town_1_armorer) and _arena_master_first_talk == 0:
        reg1 = store_conversation_troop()
start_arena_intro_1_1.conditionBlock = condition
def code():
    _arena_master_first_talk = 1
start_arena_intro_1_1.codeBlock = code


arena_intro_1_arena_intro_2 = Dialog("anyone|plyr", "Tournaments? So they hold the tournaments here...", starting_state="arena_intro_1", ending_state="arena_intro_2")


arena_intro_2_arena_intro_3 = Dialog("anyone", "Yes. You should see this place during one of the tournament fights. Everyone from the town and nearby villages comes here. The crowd becomes mad with excitement. Anyway, as I said, there won't be an event here soon, so there isn't much to see. Except, there is an official duel every now and then, and  of course we have melee fights almost every day.", starting_state="arena_intro_2", ending_state="arena_intro_3")


arena_intro_3_arena_training_melee_intro = Dialog("anyone|plyr", "Tell me about the melee fights.", starting_state="arena_intro_3", ending_state="arena_training_melee_intro")


arena_training_melee_intro_arena_training_melee_intro_2 = Dialog("anyone", "The fighters and knights get bored waiting for the next tournament, so they have invented the training melee. It is a simple idea really. Fighters jump into the arena with a weapon. There are no rules, no teams. Everyone beats at each other until there is only one fighter left standing. Sounds like fun, eh?", starting_state="arena_training_melee_intro", ending_state="arena_training_melee_intro_2")


arena_training_melee_intro_2_arena_training_melee_intro_reward = Dialog("anyone|plyr", "Is there a reward?", starting_state="arena_training_melee_intro_2", ending_state="arena_training_melee_intro_reward")
def condition():
    if _arena_reward_asked == 0:
        pass
arena_training_melee_intro_2_arena_training_melee_intro_reward.conditionBlock = condition
def code():
    _arena_reward_asked = 1
arena_training_melee_intro_2_arena_training_melee_intro_reward.codeBlock = code


arena_training_melee_intro_reward_arena_training_melee_intro_2 = Dialog("anyone", "There is, actually. Some of the wealthy townsmen offer prizes for those fighters who show great skill in the fights. If you can beat {reg1} opponents before going down, you'll earn {reg11} denars. You'll get {reg12} denars for striking down at least {reg2} opponents, {reg13} denars if you can defeat {reg3} opponents, and {reg14} denars if you can survive long enough to beat {reg4} opponents. If you can manage to be the last {man/fighter} standing, you'll earn the great prize of the fights, {reg15} denars. Sounds good, eh?", starting_state="arena_training_melee_intro_reward", ending_state="arena_training_melee_intro_2")
def condition():
    reg1 = 3
    reg11 = 5
    reg2 = 6
    reg12 = 10
    reg3 = 10
    reg13 = 25
    reg4 = 20
    reg14 = 60
    reg15 = 250
arena_training_melee_intro_reward_arena_training_melee_intro_2.conditionBlock = condition
def code():
    _arena_tournaments_asked = 1
arena_training_melee_intro_reward_arena_training_melee_intro_2.codeBlock = code


arena_training_melee_explain_reward_arena_master_melee_pretalk = Dialog("anyone", "Some of the wealthy townsmen offer prizes for those fighters who show great skill in the fights. If you can beat {reg1} opponents before going down, you'll earn {reg11} denars. You'll get {reg12} denars for striking down at least {reg2} opponents, {reg13} denars if you can defeat {reg3} opponents, and {reg14} denars if you can survive long enough to beat {reg4} opponents. If you can manage to be the last {man/fighter} standing, you'll earn the great prize of the fights, {reg15} denars. Sounds good, eh?", starting_state="arena_training_melee_explain_reward", ending_state="arena_master_melee_pretalk")
def condition():
    reg1 = 3
    reg11 = 5
    reg2 = 6
    reg12 = 10
    reg3 = 10
    reg13 = 25
    reg4 = 20
    reg14 = 60
    reg15 = 250
arena_training_melee_explain_reward_arena_master_melee_pretalk.conditionBlock = condition


arena_training_melee_intro_2_arena_training_melee_intro_3 = Dialog("anyone|plyr", "Can I join too?", starting_state="arena_training_melee_intro_2", ending_state="arena_training_melee_intro_3")


arena_training_melee_intro_3_arena_master_melee_talk = Dialog("anyone", "Ha ha. You would have to be out of your mind not to. Of course. The melee fights are open to all. Actually there is going to be a fight soon. You can go and hop in if you want to.", starting_state="arena_training_melee_intro_3", ending_state="arena_master_melee_talk")


start_arena_master_intro_1 = Dialog("anyone", "Hello. You seem to be new here. Care to share your name?", starting_state="start", ending_state="arena_master_intro_1")
def condition():
    if is_between(reg1,trp.town_1_arena_master,trp.town_1_armorer) and _g_talk_troop_met == 0:
        reg1 = store_conversation_troop()
start_arena_master_intro_1.conditionBlock = condition


arena_master_intro_1_arena_master_intro_2 = Dialog("anyone|plyr", "I am {playername}.", starting_state="arena_master_intro_1", ending_state="arena_master_intro_2")


arena_master_intro_2_arena_master_pre_talk = Dialog("anyone", "Well met {playername}. I am the master of the tournaments here at {s1}. Talk to me if you want to join the fights.", starting_state="arena_master_intro_2", ending_state="arena_master_pre_talk")
def condition():
    reg2 = store_encountered_party()
    s1 = str_store_party_name(reg2)
arena_master_intro_2_arena_master_pre_talk.conditionBlock = condition


start_arena_master_fight_result = Dialog("anyone|auto_proceed", ".", starting_state="start", ending_state="arena_master_fight_result")
def condition():
    reg1 = store_conversation_troop()
    if is_between(reg1,trp.town_1_arena_master,trp.town_1_armorer) and _last_training_fight_town == _current_town:
        cur_hours_001 = store_current_hours()
        if cur_hours_001 < _training_fight_time:
            cur_hours_001 += -4
start_arena_master_fight_result.conditionBlock = condition
def code():
    _arena_reward_asked = 0
start_arena_master_fight_result.codeBlock = code


arena_master_fight_result_arena_master_pre_talk = Dialog("anyone", "Ha-ha, that's quite the bruise you're sporting. But don't worry; everybody gets trounced once in awhile. The important thing is to pick yourself up, dust yourself off and keep fighting. That's what champions do.", starting_state="arena_master_fight_result", ending_state="arena_master_pre_talk")
def condition():
    if _g_arena_training_won == 0 and _g_arena_training_kills == 0:
        pass
arena_master_fight_result_arena_master_pre_talk.conditionBlock = condition
def code():
    _last_training_fight_town = -1
arena_master_fight_result_arena_master_pre_talk.codeBlock = code


arena_master_fight_result_arena_master_pre_talk_1 = Dialog("anyone", "Hey, you managed to take down {reg8} opponents. Not bad. But that won't bring you any prize money. Now, if I were you, I would go back there and show everyone what I can do...", starting_state="arena_master_fight_result", ending_state="arena_master_pre_talk")
def condition():
    if _g_arena_training_won == 0 and _g_arena_training_kills < 3:
        reg8 = _g_arena_training_kills
arena_master_fight_result_arena_master_pre_talk_1.conditionBlock = condition
def code():
    _last_training_fight_town = -1
arena_master_fight_result_arena_master_pre_talk_1.codeBlock = code


arena_master_fight_result_arena_master_pre_talk_2 = Dialog("anyone", "You put up quite a good fight there. Good moves. You definitely show promise. And you earned a prize of {reg10} denars for knocking down {reg8} opponents.", starting_state="arena_master_fight_result", ending_state="arena_master_pre_talk")
def condition():
    if _g_arena_training_won == 0 and _g_arena_training_kills < 6:
        reg8 = _g_arena_training_kills
        reg10 = 5
arena_master_fight_result_arena_master_pre_talk_2.conditionBlock = condition
def code():
    troop_add_gold(trp.player,5)
    add_xp_to_troop(5,trp.player)
    _last_training_fight_town = -1
arena_master_fight_result_arena_master_pre_talk_2.codeBlock = code


arena_master_fight_result_arena_master_pre_talk_3 = Dialog("anyone", "That was a good fight you put up there. You managed to take down no less than {reg8} opponents. And of course, you earned a prize money of {reg10} denars.", starting_state="arena_master_fight_result", ending_state="arena_master_pre_talk")
def condition():
    if _g_arena_training_won == 0 and _g_arena_training_kills < 10:
        reg8 = _g_arena_training_kills
        reg10 = 10
        reg12 = 6
arena_master_fight_result_arena_master_pre_talk_3.conditionBlock = condition
def code():
    troop_add_gold(trp.player,10)
    add_xp_to_troop(10,trp.player)
    _last_training_fight_town = -1
arena_master_fight_result_arena_master_pre_talk_3.codeBlock = code


arena_master_fight_result_arena_master_pre_talk_4 = Dialog("anyone", "Your performance was amazing! You are without doubt a very skilled fighter. Not everyone can knock down {reg8} people in the fights. Of course you deserve a prize with that performance: {reg10} denars. Nice, eh?", starting_state="arena_master_fight_result", ending_state="arena_master_pre_talk")
def condition():
    if _g_arena_training_won == 0 and _g_arena_training_kills < 20:
        reg8 = _g_arena_training_kills
        reg10 = 25
arena_master_fight_result_arena_master_pre_talk_4.conditionBlock = condition
def code():
    troop_add_gold(trp.player,25)
    add_xp_to_troop(10,trp.player)
    _last_training_fight_town = -1
arena_master_fight_result_arena_master_pre_talk_4.codeBlock = code


arena_master_fight_result_arena_master_pre_talk_5 = Dialog("anyone", "That was damned good fighting, {playername}. You have very good moves, excellent tactics. And you earned a prize of {reg10} denars for knocking down {reg8} opponents.", starting_state="arena_master_fight_result", ending_state="arena_master_pre_talk")
def condition():
    if _g_arena_training_won == 0:
        reg8 = _g_arena_training_kills
        reg10 = 60
arena_master_fight_result_arena_master_pre_talk_5.conditionBlock = condition
def code():
    troop_add_gold(trp.player,60)
    add_xp_to_troop(10,trp.player)
    _last_training_fight_town = -1
arena_master_fight_result_arena_master_pre_talk_5.codeBlock = code


arena_master_fight_result_arena_master_pre_talk_6 = Dialog("anyone", "Congratulations champion! Your fight there was something to remember! You managed to be the last fighter standing beating down everyone else. And of course you won the grand prize of the fights: {reg10} denars.", starting_state="arena_master_fight_result", ending_state="arena_master_pre_talk")
def condition():
    reg10 = 250
arena_master_fight_result_arena_master_pre_talk_6.conditionBlock = condition
def code():
    troop_add_gold(trp.player,250)
    add_xp_to_troop(200,trp.player)
    _last_training_fight_town = -1
arena_master_fight_result_arena_master_pre_talk_6.codeBlock = code


start_arena_master_pre_talk = Dialog("anyone", "Hello {playername}. Good to see you again.", starting_state="start", ending_state="arena_master_pre_talk")
def condition():
    if is_between(reg1,trp.town_1_arena_master,trp.town_1_armorer):
        reg1 = store_conversation_troop()
start_arena_master_pre_talk.conditionBlock = condition
def code():
    _arena_reward_asked = 0
start_arena_master_pre_talk.codeBlock = code


arena_master_pre_talk_arena_master_talk = Dialog("anyone", "What would you like to do?", starting_state="arena_master_pre_talk", ending_state="arena_master_talk")


arena_master_talk_arena_master_melee_pretalk = Dialog("anyone|plyr", "About the melee fights...", starting_state="arena_master_talk", ending_state="arena_master_melee_pretalk")


arena_master_talk_arena_master_ask_tournaments = Dialog("anyone|plyr", "Will there be a tournament in nearby towns soon?", starting_state="arena_master_talk", ending_state="arena_master_ask_tournaments")
def condition():
    if _arena_tournaments_asked == 0:
        pass
arena_master_talk_arena_master_ask_tournaments.conditionBlock = condition
def code():
    _arena_tournaments_asked = 1
arena_master_talk_arena_master_ask_tournaments.codeBlock = code


arena_master_talk_close_window = Dialog("anyone|plyr", "I need to leave now. Good bye.", starting_state="arena_master_talk", ending_state="close_window")


arena_master_ask_tournaments_arena_master_talk = Dialog("anyone", "{reg2?There won't be any tournaments any time soon.:{reg1?Tournaments are:A tournament is} going to be held at {s15}.}", starting_state="arena_master_ask_tournaments", ending_state="arena_master_talk")
def code():
    var001 = 0
    for p_002 in range(p.town_1, p.castle_1):
        if party_slot_ge(p_002,156,1):
            var001 += 1
            if var001 == 1:
                s15 = str_store_party_name(p_002)
            else:
                s16 = str_store_party_name(p_002)
                if var001 == 2:
                    s15 = str_store_string("@{s16} and {s15}")
                else:
                    s15 = str_store_string("@{!}{s16};;; {s15}")
                #end
            #end
        #end
    #end
    if var001 == 0:
        reg2 = 1
    else:
        reg2 = 0
        reg1 = var001 - 1
    #end
arena_master_ask_tournaments_arena_master_talk.codeBlock = code


arena_master_melee_pretalk_arena_master_melee_talk = Dialog("anyone", "There will be a fight here soon. You can go and jump in if you like.", starting_state="arena_master_melee_pretalk", ending_state="arena_master_melee_talk")


arena_master_melee_talk_close_window = Dialog("anyone|plyr", "Good. That's what I am going to do.", starting_state="arena_master_melee_talk", ending_state="close_window")
def code():
    _last_training_fight_town = _current_town
    _training_fight_time = store_current_hours()
    _g_mt_mode = 1
    party_slot_001 = party_get_slot(_current_town,16)
    modify_visitors_at_site(party_slot_001)
    reset_visitors()
    _g_player_entry_point = store_random_in_range(32,40)
    set_visitor(_g_player_entry_point,trp.player)
    set_jump_mission(mt.arena_melee_fight)
    jump_to_scene(party_slot_001)
arena_master_melee_talk_close_window.codeBlock = code


arena_master_melee_talk_arena_master_melee_reject = Dialog("anyone|plyr", "Thanks. But I will give my bruises some time to heal.", starting_state="arena_master_melee_talk", ending_state="arena_master_melee_reject")


arena_master_melee_reject_arena_master_pre_talk = Dialog("anyone", "Good {man/girl}. That's clever of you.", starting_state="arena_master_melee_reject", ending_state="arena_master_pre_talk")


arena_master_melee_talk_arena_training_melee_explain_reward = Dialog("anyone|plyr", "Actually, can you tell me about the rewards again?", starting_state="arena_master_melee_talk", ending_state="arena_training_melee_explain_reward")
def condition():
    if _arena_reward_asked == 0:
        pass
arena_master_melee_talk_arena_training_melee_explain_reward.conditionBlock = condition
def code():
    _arena_reward_asked = 1
arena_master_melee_talk_arena_training_melee_explain_reward.codeBlock = code


start_galeas_talk = Dialog("trp_galeas", "Hello {boy/girl}. If you have any prisoners, I will be happy to buy them from you.", starting_state="start", ending_state="galeas_talk")


galeas_talk_galeas_sell_prisoners = Dialog("plyr|trp_galeas", "Then you'd better bring your purse. I have got prisoners to sell.", starting_state="galeas_talk", ending_state="galeas_sell_prisoners")
def condition():
    if reg0 >= 1:
        reg0 = store_num_regular_prisoners()
galeas_talk_galeas_sell_prisoners.conditionBlock = condition


galeas_talk_close_window = Dialog("plyr|trp_galeas", "Not this time. Good-bye.", starting_state="galeas_talk", ending_state="close_window")


galeas_sell_prisoners_galeas_sell_prisoners_2 = Dialog("trp_galeas", "Let me see what you have...", starting_state="galeas_sell_prisoners", ending_state="galeas_sell_prisoners_2")
def code():
    change_screen_trade_prisoners()
galeas_sell_prisoners_galeas_sell_prisoners_2.codeBlock = code


galeas_sell_prisoners_2_close_window = Dialog("trp_galeas", "You take more prisoners, bring them to me. I will pay well.", starting_state="galeas_sell_prisoners_2", ending_state="close_window")


start_bandit_introduce = Dialog("party_tpl|auto_proceed|pt_mountain_bandits", "{!}Warning: This line should never display.", starting_state="start", ending_state="bandit_introduce")
def condition():
    if _talk_context == 2 and encountered_party_is_attacker():
        pass
start_bandit_introduce.conditionBlock = condition


start_bandit_introduce = Dialog("party_tpl|auto_proceed|pt_forest_bandits", "{!}Warning: This line should never display.", starting_state="start", ending_state="bandit_introduce")
def condition():
    if _talk_context == 2 and encountered_party_is_attacker():
        pass
start_bandit_introduce.conditionBlock = condition


start_bandit_introduce = Dialog("party_tpl|auto_proceed|pt_taiga_bandits", "{!}Warning: This line should never display.", starting_state="start", ending_state="bandit_introduce")
def condition():
    if _talk_context == 2 and encountered_party_is_attacker():
        pass
start_bandit_introduce.conditionBlock = condition


start_bandit_introduce = Dialog("party_tpl|auto_proceed|pt_steppe_bandits", "{!}Warning: This line should never display.", starting_state="start", ending_state="bandit_introduce")
def condition():
    if _talk_context == 2 and encountered_party_is_attacker():
        pass
start_bandit_introduce.conditionBlock = condition


start_bandit_introduce = Dialog("party_tpl|auto_proceed|pt_desert_bandits", "{!}Warning: This line should never display.", starting_state="start", ending_state="bandit_introduce")
def condition():
    if _talk_context == 2 and encountered_party_is_attacker():
        pass
start_bandit_introduce.conditionBlock = condition


bandit_introduce_bandit_talk = Dialog("anyone", "{s5}", starting_state="bandit_introduce", ending_state="bandit_talk")
def condition():
    random_x_001 = store_random_in_range(11,15)
    s11 = str_store_string("@I can smell a fat purse a mile away. Methinks yours could do with some lightening;;; eh?")
    s12 = str_store_string("@Why;;; it be another traveller;;; chance met upon the road! I should warn you;;; country here's a mite dangerous for a good {fellow/woman} like you. But for a small donation my boys and I'll make sure you get rightways to your destination;;; eh?")
    s13 = str_store_string("@Well well;;; look at this! You'd best start coughing up some silver;;; friend;;; or me and my boys'll have to break you.")
    s14 = str_store_string("@There's a toll for passin' through this land;;; payable to us;;; so if you don't mind we'll just be collectin' our due from your purse...")
    s5 = str_store_string_reg(random_x_001)
bandit_introduce_bandit_talk.conditionBlock = condition
def code():
    play_sound(snd.encounter_bandits)
bandit_introduce_bandit_talk.codeBlock = code


bandit_talk_close_window = Dialog("anyone|plyr", "I'll give you nothing but cold steel, you scum!", starting_state="bandit_talk", ending_state="close_window")
def code():
    encounter_attack()
bandit_talk_close_window.codeBlock = code


bandit_talk_bandit_barter = Dialog("anyone|plyr", "There's no need to fight. I can pay for free passage.", starting_state="bandit_talk", ending_state="bandit_barter")


bandit_barter_bandit_barter_2 = Dialog("anyone", "Silver without blood, that's our favourite kind! Hmm, having a look at you, I reckon you could easily come up with {reg5} denars. Pay it, and we'll let you be on your way.", starting_state="bandit_barter", ending_state="bandit_barter_2")
def condition():
    faction_relation_001 = store_relation(fac.player_faction,_g_encountered_party_faction)
    if faction_relation_001 >= -50:
        troop_gold_002 = store_troop_gold(trp.player)
        troop_inv_capacity_003 = troop_get_inventory_capacity(trp.player)
        for inventory_slot_no_004 in range(0, troop_inv_capacity_003):
            troop_inv_slot_005 = troop_get_inventory_slot(trp.player,inventory_slot_no_004)
            if troop_inv_slot_005 >= 0:
                if is_between(troop_inv_slot_005,itm.spice,itm.siege_supply):
                    item_value_006 = store_item_value(troop_inv_slot_005)
                    troop_gold_002 += item_value_006
                #end
            #end
        #end
    #end
    _bandit_tribute = troop_gold_002 / 10
    val_max(_bandit_tribute,10)
    reg5 = _bandit_tribute
bandit_barter_bandit_barter_2.conditionBlock = condition


bandit_barter_2_bandit_barter_3a = Dialog("anyone|plyr", "Very well, take it.", starting_state="bandit_barter_2", ending_state="bandit_barter_3a")
def condition():
    reg2 = store_troop_gold()
    if reg2 >= _bandit_tribute:
        reg5 = _bandit_tribute
bandit_barter_2_bandit_barter_3a.conditionBlock = condition
def code():
    troop_remove_gold(trp.player,_bandit_tribute)
bandit_barter_2_bandit_barter_3a.codeBlock = code


bandit_barter_2_bandit_barter_3b = Dialog("anyone|plyr", "I don't have that much money with me", starting_state="bandit_barter_2", ending_state="bandit_barter_3b")


bandit_barter_3b_close_window = Dialog("anyone", "That's too bad. I guess we'll just have to sell you into slavery. Take {him/her}, lads!", starting_state="bandit_barter_3b", ending_state="close_window")
def code():
    encounter_attack()
bandit_barter_3b_close_window.codeBlock = code


bandit_barter_close_window = Dialog("anyone", "Hey, I've heard of you! You slaughter us freebooters like dogs, and now you expect us to let you go for a few stinking coins? Forget it. You gave us no quarter, and you'll get none from us.", starting_state="bandit_barter", ending_state="close_window")


bandit_barter_3a_close_window = Dialog("anyone", "Heh, that wasn't so hard, was it? All right, we'll let you go now. Be off.", starting_state="bandit_barter_3a", ending_state="close_window")
def code():
    cur_hours_001 = store_current_hours()
    cur_hours_001 += 72
    party_set_slot(_g_encountered_party,3,cur_hours_001)
    party_ignore_player(_g_encountered_party,72)
    _g_leave_encounter = 1
bandit_barter_3a_close_window.codeBlock = code


start_bandit_meet = Dialog("anyone", "Eh? What is it?", starting_state="start", ending_state="bandit_meet")
def condition():
    _g_encountered_party_template_list1 = [
    pt.forest_bandits,
    pt.mountain_bandits,
    ]
    if _g_encountered_party_template in _g_encountered_party_template_list1:
        pass
start_bandit_meet.conditionBlock = condition


bandit_meet_bandit_attack = Dialog("anyone|plyr", "Your luck has run out, wretch. Prepare to die!", starting_state="bandit_meet", ending_state="bandit_attack")
def code():
    faction_relation_001 = store_relation(fac.player_faction,_g_encountered_party_faction)
    faction_relation_001 -= 3
    val_max(faction_relation_001,-100)
    set_relation(fac.player_faction,_g_encountered_party_faction,faction_relation_001)
    party_ignore_player(_g_encountered_party,0)
    party_set_slot(_g_encountered_party,3,0)
bandit_meet_bandit_attack.codeBlock = code


bandit_attack_close_window = Dialog("anyone", "{s5}", starting_state="bandit_attack", ending_state="close_window")
def condition():
    random_x_001 = store_random_in_range(11,15)
    s11 = str_store_string("@Another fool come to throw {him/her}self on my weapon;;; eh? Fine;;; let's fight!")
    s12 = str_store_string("@We're not afraid of you;;; {sirrah/wench}. Time to bust some heads!")
    s13 = str_store_string("@That was a mistake. Now I'm going to have to make your death long and painful.")
    s14 = str_store_string("@Brave words. Let's see you back them up with deeds;;; cur!")
    s5 = str_store_string_reg(random_x_001)
bandit_attack_close_window.conditionBlock = condition


bandit_meet_close_window = Dialog("anyone|plyr", "Never mind, I have no business with you.", starting_state="bandit_meet", ending_state="close_window")
def code():
    _g_leave_encounter = 1
bandit_meet_close_window.codeBlock = code


start_disbanded_troop_ask = Dialog("party_tpl|pt_rescued_prisoners", "Do you want us to follow you?", starting_state="start", ending_state="disbanded_troop_ask")
def condition():
    if _talk_context == 2:
        pass
start_disbanded_troop_ask.conditionBlock = condition


disbanded_troop_ask_disbanded_troop_join = Dialog("anyone|plyr", "Yes. Let us ride together.", starting_state="disbanded_troop_ask", ending_state="disbanded_troop_join")


disbanded_troop_ask_close_window = Dialog("anyone|plyr", "No. Not at this time.", starting_state="disbanded_troop_ask", ending_state="close_window")
def code():
    _g_leave_encounter = 1
disbanded_troop_ask_close_window.codeBlock = code


disbanded_troop_join_close_window = Dialog("anyone", "Unfortunately. You do not have room in your party for us.", starting_state="disbanded_troop_join", ending_state="close_window")
def condition():
    if not party_can_join():
        pass
disbanded_troop_join_close_window.conditionBlock = condition
def code():
    _g_leave_encounter = 1
disbanded_troop_join_close_window.codeBlock = code


disbanded_troop_join_close_window_1 = Dialog("anyone", "We are at your command.", starting_state="disbanded_troop_join", ending_state="close_window")
def code():
    party_join()
    _g_leave_encounter = 1
disbanded_troop_join_close_window_1.codeBlock = code


start_enemy_talk_1 = Dialog("party_tpl|pt_enemy", "You will not capture me again. Not this time.", starting_state="start", ending_state="enemy_talk_1")
def condition():
    if _talk_context == 2:
        pass
start_enemy_talk_1.conditionBlock = condition


enemy_talk_1_enemy_talk_2 = Dialog("plyr|party_tpl|pt_enemy", "You don't have a chance against me. Give up.", starting_state="enemy_talk_1", ending_state="enemy_talk_2")


enemy_talk_2_close_window = Dialog("party_tpl|pt_enemy", "I will give up when you are dead!", starting_state="enemy_talk_2", ending_state="close_window")
def code():
    encounter_attack()
enemy_talk_2_close_window.codeBlock = code


start_party_encounter_routed_agents_are_caught = Dialog("party_tpl|pt_routed_warriors", "I beg you, please leave us alone.", starting_state="start", ending_state="party_encounter_routed_agents_are_caught")
def condition():
    if _talk_context == 2:
        pass
start_party_encounter_routed_agents_are_caught.conditionBlock = condition


party_encounter_routed_agents_are_caught_party_encounter_routed_agents_are_caught2 = Dialog("plyr|party_tpl|pt_routed_warriors", "Do you think you can run away from me? You will be my prisoner or die!", starting_state="party_encounter_routed_agents_are_caught", ending_state="party_encounter_routed_agents_are_caught2")


party_encounter_routed_agents_are_caught_close_window = Dialog("plyr|party_tpl|pt_routed_warriors", "Ok. We'll leave you in peace for this time, do not face with us again.", starting_state="party_encounter_routed_agents_are_caught", ending_state="close_window")
def code():
    _g_leave_encounter = 1
party_encounter_routed_agents_are_caught_close_window.codeBlock = code


party_encounter_routed_agents_are_caught2_close_window = Dialog("party_tpl|pt_routed_warriors", "Haven't you got any mercy? Ok, we will fight you to the last man!", starting_state="party_encounter_routed_agents_are_caught2", ending_state="close_window")
def condition():
    var001 = 0
    party_num_companions_stacks_002 = party_get_num_companion_stacks(_g_encountered_party)
    for stack_no_003 in range(0, party_num_companions_stacks_002):
        troop_id_004 = party_stack_get_troop_id(_g_encountered_party,stack_no_003)
        character_lvl_005 = store_character_level(troop_id_004)
        if troop_is_mounted(troop_id_004):
            character_lvl_005 += 5
        #end
        party_stack_size_006 = party_stack_get_size(_g_encountered_party,stack_no_003)
        character_lvl_005 *= party_stack_size_006
        var001 += character_lvl_005
    #end
    var007 = 0
    party_num_companions_stacks_002 = party_get_num_companion_stacks(p.main_party)
    for stack_no_003 in range(0, party_num_companions_stacks_002):
        troop_id_004 = party_stack_get_troop_id(p.main_party,stack_no_003)
        character_lvl_005 = store_character_level(troop_id_004)
        if troop_is_mounted(troop_id_004):
            character_lvl_005 += 5
        #end
        party_stack_size_006 = party_stack_get_size(p.main_party,stack_no_003)
        character_lvl_005 *= party_stack_size_006
        var007 += character_lvl_005
    #end
    var008 = var007 / 5
    if party_num_attached_parties_009 > 0 or var001 >= var008:
        party_num_attached_parties_009 = party_get_num_attached_parties(_g_encountered_party)
party_encounter_routed_agents_are_caught2_close_window.conditionBlock = condition


party_encounter_routed_agents_are_caught2_close_window_1 = Dialog("party_tpl|pt_routed_warriors", "{s1}", starting_state="party_encounter_routed_agents_are_caught2", ending_state="close_window")
def condition():
    var001 = 0
    var002 = 0
    party_num_companions_stacks_003 = party_get_num_companion_stacks(_g_encountered_party)
    for stack_no_004 in range(0, party_num_companions_stacks_003):
        troop_id_005 = party_stack_get_troop_id(_g_encountered_party,stack_no_004)
        character_lvl_006 = store_character_level(troop_id_005)
        if troop_is_mounted(troop_id_005):
            character_lvl_006 += 5
        #end
        party_stack_size_007 = party_stack_get_size(_g_encountered_party,stack_no_004)
        character_lvl_006 *= party_stack_size_007
        var002 += character_lvl_006
        var001 += party_stack_size_007
    #end
    var008 = 0
    party_num_companions_stacks_003 = party_get_num_companion_stacks(p.main_party)
    for stack_no_004 in range(0, party_num_companions_stacks_003):
        troop_id_005 = party_stack_get_troop_id(p.main_party,stack_no_004)
        character_lvl_006 = store_character_level(troop_id_005)
        if troop_is_mounted(troop_id_005):
            character_lvl_006 += 5
        #end
        party_stack_size_007 = party_stack_get_size(p.main_party,stack_no_004)
        character_lvl_006 *= party_stack_size_007
        var008 += character_lvl_006
    #end
    var009 = var008 / 5
    if var002 < var009:
        party_size_wo_prisoners_010 = store_party_size_wo_prisoners(_g_encountered_party)
        reg3 = party_size_wo_prisoners_010
        if var001 > 1:
            s1 = str_store_string(gstr.we_resign)
        else:
            s1 = str_store_string(gstr.i_resign)
        #end
    #end
party_encounter_routed_agents_are_caught2_close_window_1.conditionBlock = condition
def code():
    _g_enemy_surrenders = 1
    party_wound_all_members(_g_encountered_party)
    party_copy(p.total_enemy_casualties,_g_encountered_party)
party_encounter_routed_agents_are_caught2_close_window_1.codeBlock = code


sell_prisoner_outlaws_sell_prisoner_outlaws = Dialog("anyone", "Hmmm. 10 denars for each looter makes {reg1} denars for all {reg0} of them.", starting_state="sell_prisoner_outlaws", ending_state="sell_prisoner_outlaws")
def condition():
    s0 = store_troop_kind_count(trp.looter)
    if reg0 >= 1:
        reg1 = reg0
        reg1 *= 10
        reg2 *= reg0
        reg2 *= 10
sell_prisoner_outlaws_sell_prisoner_outlaws.conditionBlock = condition
def code():
    troop_add_gold(trp.player,reg1)
    add_xp_to_troop(reg2)
    remove_member_from_party(trp.looter)
sell_prisoner_outlaws_sell_prisoner_outlaws.codeBlock = code


sell_prisoner_outlaws_sell_prisoner_outlaws_1 = Dialog("anyone", "Let me see. You've brought {reg0} bandits, so 20 denars for each comes up to {reg1} denars.", starting_state="sell_prisoner_outlaws", ending_state="sell_prisoner_outlaws")
def condition():
    s0 = store_troop_kind_count(trp.bandit)
    if reg0 >= 1:
        reg1 = reg0
        reg1 *= 20
        reg2 = reg0
        reg2 *= 20
sell_prisoner_outlaws_sell_prisoner_outlaws_1.conditionBlock = condition
def code():
    troop_add_gold(trp.player,reg1)
    add_xp_to_troop(reg2)
    remove_member_from_party(trp.bandit)
sell_prisoner_outlaws_sell_prisoner_outlaws_1.codeBlock = code


sell_prisoner_outlaws_sell_prisoner_outlaws_2 = Dialog("anyone", "Well well, you've captured {reg0} brigands. Each one is worth 30 denars, so I'll give you {reg1} for them in total.", starting_state="sell_prisoner_outlaws", ending_state="sell_prisoner_outlaws")
def condition():
    s0 = store_troop_kind_count(trp.brigand)
    if reg0 >= 1:
        reg1 = reg0
        reg1 *= 30
        reg2 = reg0
        reg2 *= 30
sell_prisoner_outlaws_sell_prisoner_outlaws_2.conditionBlock = condition
def code():
    troop_add_gold(trp.player,reg1)
    add_xp_to_troop(reg2)
    remove_member_from_party(trp.brigand)
sell_prisoner_outlaws_sell_prisoner_outlaws_2.codeBlock = code


sell_prisoner_outlaws_close_window = Dialog("anyone", "I suppose that'll be all, then.", starting_state="sell_prisoner_outlaws", ending_state="close_window")


prisoner_chat_prisoner_chat_2 = Dialog("anyone|plyr", "Do not try running away or trying something stupid. I will be watching you.", starting_state="prisoner_chat", ending_state="prisoner_chat_2")


prisoner_chat_2_close_window = Dialog("anyone", "No, I swear I won't.", starting_state="prisoner_chat_2", ending_state="close_window")


start_town_merchant_talk = Dialog("anyone", "Greetings, {your lordship/my lady}. How can I serve you today?", starting_state="start", ending_state="town_merchant_talk")
def condition():
    if party_slot_eq(_current_town,7,trp.player) and is_between(_g_talk_troop,trp.town_1_weaponsmith,trp.town_1_tavernkeeper) or is_between(_g_talk_troop,trp.town_1_armorer,trp.town_1_weaponsmith) or is_between(_g_talk_troop,trp.town_1_horse_merchant,trp.town_1_mayor):
        pass
start_town_merchant_talk.conditionBlock = condition


start_town_merchant_talk_1 = Dialog("anyone", "Good day. What can I do for you?", starting_state="start", ending_state="town_merchant_talk")
def condition():
    if is_between(_g_talk_troop,trp.town_1_weaponsmith,trp.town_1_tavernkeeper) or is_between(_g_talk_troop,trp.town_1_armorer,trp.town_1_weaponsmith) or is_between(_g_talk_troop,trp.town_1_horse_merchant,trp.town_1_mayor):
        pass
start_town_merchant_talk_1.conditionBlock = condition


town_merchant_talk_trade_requested_weapons = Dialog("anyone|plyr", "I want to buy a new weapon. Show me your wares.", starting_state="town_merchant_talk", ending_state="trade_requested_weapons")
def condition():
    if is_between(_g_talk_troop,trp.town_1_weaponsmith,trp.town_1_tavernkeeper):
        pass
town_merchant_talk_trade_requested_weapons.conditionBlock = condition


town_merchant_talk_trade_requested_armor = Dialog("anyone|plyr", "I am looking for some equipment. Show me what you have.", starting_state="town_merchant_talk", ending_state="trade_requested_armor")
def condition():
    if is_between(_g_talk_troop,trp.town_1_armorer,trp.town_1_weaponsmith):
        pass
town_merchant_talk_trade_requested_armor.conditionBlock = condition


town_merchant_talk_trade_requested_horse = Dialog("anyone|plyr", "I am thinking of buying a horse.", starting_state="town_merchant_talk", ending_state="trade_requested_horse")
def condition():
    if is_between(_g_talk_troop,trp.town_1_horse_merchant,trp.town_1_mayor):
        pass
town_merchant_talk_trade_requested_horse.conditionBlock = condition


trade_requested_weapons_merchant_trade = Dialog("anyone", "Ah, yes {sir/madam}. These arms are the best you'll find anywhere.", starting_state="trade_requested_weapons", ending_state="merchant_trade")
def code():
    change_screen_trade()
trade_requested_weapons_merchant_trade.codeBlock = code


trade_requested_armor_merchant_trade = Dialog("anyone", "Of course, {sir/madam}. You won't find better quality armour than these in all Calradia.", starting_state="trade_requested_armor", ending_state="merchant_trade")
def code():
    change_screen_trade()
trade_requested_armor_merchant_trade.codeBlock = code


trade_requested_horse_merchant_trade = Dialog("anyone", "You have a fine eye for horses, {sir/madam}. You won't find better beasts than these anywhere else.", starting_state="trade_requested_horse", ending_state="merchant_trade")
def code():
    change_screen_trade()
trade_requested_horse_merchant_trade.codeBlock = code


merchant_trade_town_merchant_talk = Dialog("anyone", "Anything else?", starting_state="merchant_trade", ending_state="town_merchant_talk")


town_merchant_talk_merchant_gossip = Dialog("anyone|plyr", "Tell me. What are people talking about these days?", starting_state="town_merchant_talk", ending_state="merchant_gossip")


merchant_gossip_town_merchant_talk = Dialog("anyone", "Well, nothing new lately. Prices, weather, the war, the same old things.", starting_state="merchant_gossip", ending_state="town_merchant_talk")


town_merchant_talk_close_window = Dialog("anyone|plyr", "Good-bye.", starting_state="town_merchant_talk", ending_state="close_window")


start_town_dweller_talk = Dialog("anyone", "My {lord/lady}?", starting_state="start", ending_state="town_dweller_talk")
def condition():
    if _talk_context == 0 and is_between(_g_talk_troop,trp.town_walker_1,trp.tournament_master) and party_slot_eq(_current_town,7,trp.player):
        pass
start_town_dweller_talk.conditionBlock = condition
def code():
    _welfare_inquired = 0
    _rumors_inquired = 0
    _info_inquired = 0
start_town_dweller_talk.codeBlock = code


start_town_dweller_talk_1 = Dialog("anyone", "Good day, {sir/madam}.", starting_state="start", ending_state="town_dweller_talk")
def condition():
    if _talk_context == 0 and is_between(_g_talk_troop,trp.town_walker_1,trp.tournament_master):
        pass
start_town_dweller_talk_1.conditionBlock = condition
def code():
    _welfare_inquired = 0
    _rumors_inquired = 0
    _info_inquired = 0
start_town_dweller_talk_1.codeBlock = code


town_dweller_talk_town_dweller_ask_fugitive = Dialog("anyone|plyr", "I am looking for a man by the name of {s4}. I was told he may be hiding here.", starting_state="town_dweller_talk", ending_state="town_dweller_ask_fugitive")
def condition():
    if check_quest_active(qst.hunt_down_fugitive) and not check_quest_concluded(qst.hunt_down_fugitive) and quest_slot_eq(qst.hunt_down_fugitive,1,_current_town):
        quest_slot_001 = quest_get_slot(qst.hunt_down_fugitive,13)
        get_name_from_dna_to_s50(quest_slot_001)
        s4 = str_store_string(50)
town_dweller_talk_town_dweller_ask_fugitive.conditionBlock = condition


town_dweller_ask_fugitive_close_window = Dialog("anyone", "Strangers come and go to our village, {sir/madam}. If he is hiding here, you will surely find him if you look around.", starting_state="town_dweller_ask_fugitive", ending_state="close_window")


town_dweller_talk_town_dweller_quest_meet_spy_in_enemy_town_ask_item = Dialog("anyone|plyr", "Pardon me, but is that a {s5} you're wearing?", starting_state="town_dweller_talk", ending_state="town_dweller_quest_meet_spy_in_enemy_town_ask_item")
def condition():
    if 1 == 0 and check_quest_active(qst.meet_spy_in_enemy_town) and not check_quest_succeeded(qst.meet_spy_in_enemy_town) and quest_slot_eq(qst.meet_spy_in_enemy_town,1,_current_town):
        s5 = str_store_item_name(_spy_item_worn)
town_dweller_talk_town_dweller_quest_meet_spy_in_enemy_town_ask_item.conditionBlock = condition


town_dweller_quest_meet_spy_in_enemy_town_ask_item_town_dweller_talk = Dialog("anyone", "{s6}", starting_state="town_dweller_quest_meet_spy_in_enemy_town_ask_item", ending_state="town_dweller_talk")
def condition():
    s5 = str_store_item_name(_spy_item_worn)
    if troop_has_item_equipped(_g_talk_troop,_spy_item_worn):
        s6 = str_store_string("@A {s5}? Well... Yes;;; I suppose it is. What a strange thing to ask.")
    else:
        s6 = str_store_string("@Eh? No;;; it most certainly is not a {s5}. I'd start questioning my eyesight if I were you.")
    #end
town_dweller_quest_meet_spy_in_enemy_town_ask_item_town_dweller_talk.conditionBlock = condition


town_dweller_talk_town_dweller_quest_meet_spy_in_enemy_town = Dialog("anyone|repeat_for_100|plyr", "{s4}", starting_state="town_dweller_talk", ending_state="town_dweller_quest_meet_spy_in_enemy_town")
def condition():
    var001 = store_repeat_object()
    if var001 < 4 and check_quest_active(qst.meet_spy_in_enemy_town) and not check_quest_succeeded(qst.meet_spy_in_enemy_town) and quest_slot_eq(qst.meet_spy_in_enemy_town,1,_current_town):
        var002 = var001 + gstr.secret_sign_1
        s4 = str_store_string(var002)
town_dweller_talk_town_dweller_quest_meet_spy_in_enemy_town.conditionBlock = condition
def code():
    var001 = store_repeat_object()
    _temp = var001
town_dweller_talk_town_dweller_quest_meet_spy_in_enemy_town.codeBlock = code


town_dweller_quest_meet_spy_in_enemy_town_town_dweller_quest_meet_spy_in_enemy_town_know = Dialog("anyone", "{s4}", starting_state="town_dweller_quest_meet_spy_in_enemy_town", ending_state="town_dweller_quest_meet_spy_in_enemy_town_know")
def condition():
    agent_get_town_walker_details(_g_talk_agent)
    var001 = reg0
    if var001 == 3:
        quest_slot_002 = quest_get_slot(qst.meet_spy_in_enemy_town,10)
        quest_slot_002 -= gstr.secret_sign_1
        if quest_slot_002 == _temp:
            var003 = quest_slot_002 + gstr.countersign_1
            s4 = str_store_string(var003)
town_dweller_quest_meet_spy_in_enemy_town_town_dweller_quest_meet_spy_in_enemy_town_know.conditionBlock = condition


town_dweller_quest_meet_spy_in_enemy_town_town_dweller_quest_meet_spy_in_enemy_town_dont_know = Dialog("anyone", "Eh? What kind of gibberish is that?", starting_state="town_dweller_quest_meet_spy_in_enemy_town", ending_state="town_dweller_quest_meet_spy_in_enemy_town_dont_know")


town_dweller_quest_meet_spy_in_enemy_town_dont_know_close_window = Dialog("anyone|plyr", "Never mind.", starting_state="town_dweller_quest_meet_spy_in_enemy_town_dont_know", ending_state="close_window")


town_dweller_quest_meet_spy_in_enemy_town_know_town_dweller_quest_meet_spy_in_enemy_town_chat = Dialog("anyone|plyr", "{s4} sent me to collect your reports. Do you have them with you?", starting_state="town_dweller_quest_meet_spy_in_enemy_town_know", ending_state="town_dweller_quest_meet_spy_in_enemy_town_chat")
def condition():
    quest_slot_001 = quest_get_slot(qst.meet_spy_in_enemy_town,6)
    s4 = str_store_troop_name(quest_slot_001)
town_dweller_quest_meet_spy_in_enemy_town_know_town_dweller_quest_meet_spy_in_enemy_town_chat.conditionBlock = condition


town_dweller_quest_meet_spy_in_enemy_town_chat_town_dweller_quest_meet_spy_in_enemy_town_chat_2 = Dialog("anyone", "I've been expecting you. Here they are, make sure they reach {s4} intact and without delay.", starting_state="town_dweller_quest_meet_spy_in_enemy_town_chat", ending_state="town_dweller_quest_meet_spy_in_enemy_town_chat_2")
def condition():
    quest_slot_001 = quest_get_slot(qst.meet_spy_in_enemy_town,6)
    s4 = str_store_troop_name(quest_slot_001)
town_dweller_quest_meet_spy_in_enemy_town_chat_town_dweller_quest_meet_spy_in_enemy_town_chat_2.conditionBlock = condition
def code():
    succeed_quest(qst.meet_spy_in_enemy_town)
    center_remove_walker_type_from_walkers(_current_town,3)
town_dweller_quest_meet_spy_in_enemy_town_chat_town_dweller_quest_meet_spy_in_enemy_town_chat_2.codeBlock = code


town_dweller_quest_meet_spy_in_enemy_town_chat_2_close_window = Dialog("anyone|plyr", "Farewell.", starting_state="town_dweller_quest_meet_spy_in_enemy_town_chat_2", ending_state="close_window")


town_dweller_talk_town_dweller_ask_info = Dialog("anyone|plyr", "What can you tell me about this village?", starting_state="town_dweller_talk", ending_state="town_dweller_ask_info")
def condition():
    if party_slot_eq(_current_town,0,4) and _info_inquired == 0:
        pass
town_dweller_talk_town_dweller_ask_info.conditionBlock = condition
def code():
    _info_inquired = 1
town_dweller_talk_town_dweller_ask_info.codeBlock = code


town_dweller_talk_town_dweller_ask_info_1 = Dialog("anyone|plyr", "What can you tell me about this town?", starting_state="town_dweller_talk", ending_state="town_dweller_ask_info")
def condition():
    if party_slot_eq(_current_town,0,3) and _info_inquired == 0:
        pass
town_dweller_talk_town_dweller_ask_info_1.conditionBlock = condition
def code():
    _info_inquired = 1
town_dweller_talk_town_dweller_ask_info_1.codeBlock = code


town_dweller_ask_info_close_window = Dialog("anyone", "{s10} {s11}", starting_state="town_dweller_ask_info", ending_state="close_window")
def condition():
    s5 = str_store_party_name(_current_town)
    reg4 = 0
    if party_slot_eq(_current_town,0,3):
        reg4 = 1
    #end
    s6 = str_store_string("@This is the {reg4?town:village} of {s5};;; {sir/madam}.")
    str_clear(10)
    if party_slot_eq(_current_town,7,trp.player):
        s10 = str_store_string("@{s6} Our {reg4?town:village} and the surrounding lands belong to you of course;;; my {lord/lady}.")
    else:
        party_slot_001 = party_get_slot(_current_town,7)
        if party_slot_001 >= 0:
            s7 = str_store_troop_name(party_slot_001)
            troop_faction_002 = store_faction_of_troop(party_slot_001)
            s8 = str_store_faction_name(troop_faction_002)
            s10 = str_store_string("@{s6} Our {reg4?town:village} and the surrounding lands belong to {s7} of {s8}.")
        #end
    #end
    str_clear(5)
    var003 = 0
    for itm_004 in range(itm.spice, itm.siege_supply):
        center_get_production(_g_encountered_party,itm_004)
        var005 = reg0
        if var005 >= 20:
            s3 = str_store_item_name(itm_004)
            if var003 == 0:
                s5 = str_store_string(3)
            elif var003 == 1:
                s5 = str_store_string("@{s3} and {s5}")
            else:
                s5 = str_store_string("@{!}{s3};;; {s5}")
            #end
        #end
        var003 += 1
    #end
    if var003 > 0:
        reg20 = 1
    else:
        reg20 = 0
    #end
    s11 = str_store_string("@{reg20?We mostly produce {s5} here:We don't produce much here these days}. If you would like to learn more;;; you can speak with our {reg4?guildmaster:village elder}. He is nearby;;; right over there.")
town_dweller_ask_info_close_window.conditionBlock = condition


town_dweller_talk_town_dweller_ask_situation = Dialog("anyone|plyr", "How is life here?", starting_state="town_dweller_talk", ending_state="town_dweller_ask_situation")
def condition():
    if party_slot_eq(_current_town,0,4) and _welfare_inquired == 0:
        pass
town_dweller_talk_town_dweller_ask_situation.conditionBlock = condition
def code():
    _welfare_inquired = 1
town_dweller_talk_town_dweller_ask_situation.codeBlock = code


town_dweller_talk_town_dweller_ask_situation = Dialog("anyone|plyr", "How is life here?", starting_state="town_dweller_talk", ending_state="town_dweller_ask_situation")
def condition():
    if party_slot_eq(_current_town,0,3) and _welfare_inquired == 0:
        pass
town_dweller_talk_town_dweller_ask_situation.conditionBlock = condition
def code():
    _welfare_inquired = 1
town_dweller_talk_town_dweller_ask_situation.codeBlock = code


town_dweller_ask_situation_town_dweller_poor = Dialog("anyone", "Disaster has struck my family, {sir/madam}. We have no land of our own, and the others have no money to pay for our labor, or even to help us. My poor children lie at home hungry and sick. I don't know what we'll do.", starting_state="town_dweller_ask_situation", ending_state="town_dweller_poor")
def condition():
    agent_get_town_walker_details(_g_talk_agent)
    if var001 == 1 and party_slot_eq(_current_town,0,4):
        var001 = reg0
town_dweller_ask_situation_town_dweller_poor.conditionBlock = condition


town_dweller_ask_situation_town_dweller_poor_1 = Dialog("anyone", "My life is miserable, {sir/madam}. I haven't been able to find a job for months, and my poor children go to bed hungry each night. My neighbours are too poor themselves to help me.", starting_state="town_dweller_ask_situation", ending_state="town_dweller_poor")
def condition():
    agent_get_town_walker_details(_g_talk_agent)
    if var001 == 1:
        var001 = reg0
town_dweller_ask_situation_town_dweller_poor_1.conditionBlock = condition


town_dweller_poor_town_dweller_poor_paid = Dialog("anyone|plyr", "Then take these 300 denars. I hope this will help you and your family.", starting_state="town_dweller_poor", ending_state="town_dweller_poor_paid")
def condition():
    if troop_gold_001 >= 300:
        troop_gold_001 = store_troop_gold(trp.player)
town_dweller_poor_town_dweller_poor_paid.conditionBlock = condition
def code():
    troop_remove_gold(trp.player,300)
town_dweller_poor_town_dweller_poor_paid.codeBlock = code


town_dweller_poor_town_dweller_poor_not_paid = Dialog("anyone|plyr", "Then clearly you must travel somewhere else, or learn another trade.", starting_state="town_dweller_poor", ending_state="town_dweller_poor_not_paid")


town_dweller_poor_not_paid_close_window = Dialog("anyone", "Yes {sir/madam}. I will do as you say.", starting_state="town_dweller_poor_not_paid", ending_state="close_window")


town_dweller_poor_paid_close_window = Dialog("anyone", "{My lord/My good lady}.  You are so good and generous. I will tell everyone how you helped us.", starting_state="town_dweller_poor_paid", ending_state="close_window")
def code():
    change_player_relation_with_center(_g_encountered_party,1)
    agent_get_town_walker_details(_g_talk_agent)
    var001 = reg2
    center_set_walker_to_type(_g_encountered_party,var001,2)
town_dweller_poor_paid_close_window.codeBlock = code


town_dweller_ask_situation_close_window = Dialog("anyone", "Thank you for your kindness {sir/madam}. With your help our lives will be better. I will pray for you everyday.", starting_state="town_dweller_ask_situation", ending_state="close_window")
def condition():
    agent_get_town_walker_details(_g_talk_agent)
    if var001 == 2:
        var001 = reg0
town_dweller_ask_situation_close_window.conditionBlock = condition


town_dweller_ask_situation_town_dweller_talk = Dialog("anyone", "Times are hard, {sir/madam}. We work hard all day and yet we go to sleep hungry most nights.", starting_state="town_dweller_ask_situation", ending_state="town_dweller_talk")
def condition():
    if not party_slot_ge(_current_town,50,30):
        pass
town_dweller_ask_situation_town_dweller_talk.conditionBlock = condition


town_dweller_ask_situation_town_dweller_talk_1 = Dialog("anyone", "Times are hard, {sir/madam}. But we must count our blessings.", starting_state="town_dweller_ask_situation", ending_state="town_dweller_talk")
def condition():
    if not party_slot_ge(_current_town,50,70):
        pass
town_dweller_ask_situation_town_dweller_talk_1.conditionBlock = condition


town_dweller_ask_situation_town_dweller_talk_2 = Dialog("anyone", "We are not doing too badly {sir/madam}. We must count our blessings.", starting_state="town_dweller_ask_situation", ending_state="town_dweller_talk")


town_dweller_talk_town_dweller_ask_trade = Dialog("anyone|plyr", "What is your trade?", starting_state="town_dweller_talk", ending_state="town_dweller_ask_trade")


town_dweller_ask_trade_town_dweller_talk = Dialog("anyone", "{s14}", starting_state="town_dweller_ask_trade", ending_state="town_dweller_talk")
def condition():
    town_walker_occupation_string_to_s14(_g_talk_agent)
town_dweller_ask_trade_town_dweller_talk.conditionBlock = condition


town_dweller_talk_town_dweller_ask_rumor = Dialog("anyone|plyr", "What is the latest rumor around here?", starting_state="town_dweller_talk", ending_state="town_dweller_ask_rumor")
def condition():
    if _rumors_inquired == 0:
        pass
town_dweller_talk_town_dweller_ask_rumor.conditionBlock = condition
def code():
    _rumors_inquired = 1
town_dweller_talk_town_dweller_ask_rumor.codeBlock = code


town_dweller_ask_rumor_town_dweller_talk = Dialog("anyone", "I don't know anything that would be of interest to you.", starting_state="town_dweller_ask_rumor", ending_state="town_dweller_talk")
def condition():
    if not party_slot_ge(_current_town,26,-5):
        pass
town_dweller_ask_rumor_town_dweller_talk.conditionBlock = condition


town_dweller_ask_rumor_town_dweller_talk_1 = Dialog("anyone", "{s61}", starting_state="town_dweller_ask_rumor", ending_state="town_dweller_talk")
def condition():
    var001 = _current_town * 197
    var001 += _g_talk_agent
    if reg0 > 0:
        get_rumor_to_s61(var001)
town_dweller_ask_rumor_town_dweller_talk_1.conditionBlock = condition


town_dweller_ask_rumor_town_dweller_talk_2 = Dialog("anyone", "I haven't heard anything interesting lately.", starting_state="town_dweller_ask_rumor", ending_state="town_dweller_talk")


town_dweller_talk_close_window = Dialog("anyone|plyr", "[Leave]", starting_state="town_dweller_talk", ending_state="close_window")


start_player_castle_guard_talk = Dialog("anyone", "Yes {sir/madam}?", starting_state="start", ending_state="player_castle_guard_talk")
def condition():
    if _talk_context == 0 and is_between(_g_talk_troop,trp.novice_fighter,trp.tournament_master) and party_slot_eq(_current_town,7,trp.player):
        pass
start_player_castle_guard_talk.conditionBlock = condition


player_castle_guard_talk_player_castle_guard_talk_2 = Dialog("anyone|plyr", "How goes the watch, soldier?", starting_state="player_castle_guard_talk", ending_state="player_castle_guard_talk_2")


player_castle_guard_talk_2_player_castle_guard_talk_3 = Dialog("anyone", "All is quiet {sir/madam}. Nothing to report.", starting_state="player_castle_guard_talk_2", ending_state="player_castle_guard_talk_3")


player_castle_guard_talk_3_close_window = Dialog("anyone|plyr", "Good. Keep your eyes open.", starting_state="player_castle_guard_talk_3", ending_state="close_window")


start_close_window_41 = Dialog("anyone", "Good day, {sir/madame}. Always an honor to have you here in {s10}.", starting_state="start", ending_state="close_window")
def condition():
    if _talk_context == 0 and is_between(_g_talk_troop,trp.novice_fighter,trp.tournament_master) and is_between(_g_encountered_party_faction,fac.player_supporters_faction,fac.kingdoms_end) and _players_kingdom == _g_encountered_party_faction and troop_slot_ge(trp.player,7,100):
        s10 = str_store_party_name(_current_town)
start_close_window_41.conditionBlock = condition


start_close_window_42 = Dialog("anyone", "Mind your manners within the walls and we'll have no trouble.", starting_state="start", ending_state="close_window")
def condition():
    if _talk_context == 0 and is_between(_g_talk_troop,trp.novice_fighter,trp.tournament_master) and is_between(_g_encountered_party_faction,fac.player_supporters_faction,fac.kingdoms_end):
        pass
start_close_window_42.conditionBlock = condition


start_hall_guard_talk = Dialog("anyone", "Your orders, {my lord/my lady}?", starting_state="start", ending_state="hall_guard_talk")
def condition():
    if _talk_context == 1 and is_between(_g_talk_troop,trp.novice_fighter,trp.tournament_master) and is_between(_g_encountered_party_faction,fac.player_supporters_faction,fac.kingdoms_end) and party_slot_eq(_current_town,7,trp.player):
        pass
start_hall_guard_talk.conditionBlock = condition


start_close_window_43 = Dialog("anyone", "We are not supposed to talk while on guard, {sir/madam}.", starting_state="start", ending_state="close_window")
def condition():
    if _talk_context == 1 and is_between(_g_talk_troop,trp.novice_fighter,trp.tournament_master) and is_between(_g_encountered_party_faction,fac.player_supporters_faction,fac.kingdoms_end):
        pass
start_close_window_43.conditionBlock = condition


hall_guard_talk_hall_guard_duty = Dialog("anyone|plyr", "Stay on duty and let me know if anyone comes to see me.", starting_state="hall_guard_talk", ending_state="hall_guard_duty")


hall_guard_duty_close_window = Dialog("anyone", "Yes, {my lord/my lady}. As you wish.", starting_state="hall_guard_duty", ending_state="close_window")


hall_guard_talk_hall_guard_arrest = Dialog("anyone|plyr", "I want you to arrest this man immediately!", starting_state="hall_guard_talk", ending_state="hall_guard_arrest")
def condition():
    if 1 == 0:
        pass
hall_guard_talk_hall_guard_arrest.conditionBlock = condition


hall_guard_arrest_hall_guard_arrest_2 = Dialog("anyone", "Who do you want arrested {sir/madam}?", starting_state="hall_guard_arrest", ending_state="hall_guard_arrest_2")


hall_guard_arrest_2_close_window = Dialog("anyone|plyr", "Ah, never mind my high spirits lads.", starting_state="hall_guard_arrest_2", ending_state="close_window")


hall_guard_arrest_2_close_window_1 = Dialog("anyone|plyr", "Forget it. I will find another way to deal with this.", starting_state="hall_guard_arrest_2", ending_state="close_window")


enemy_defeated_close_window = Dialog("anyone", "Arggh! I hate this.", starting_state="enemy_defeated", ending_state="close_window")


party_relieved_close_window = Dialog("anyone", "Thank you for helping us against those bastards.", starting_state="party_relieved", ending_state="close_window")


start_battle_reason_stated = Dialog("anyone", "I will drink from your skull!", starting_state="start", ending_state="battle_reason_stated")
def condition():
    if _talk_context == 2:
        reg5 = store_encountered_party()
        if reg7 == pt.sea_raiders:
            reg7 = party_get_template_id(reg5)
start_battle_reason_stated.conditionBlock = condition
def code():
    play_sound(snd.encounter_sea_raiders)
start_battle_reason_stated.codeBlock = code


member_chat_regular_member_talk = Dialog("anyone", "Your orders {sir/madam}?", starting_state="member_chat", ending_state="regular_member_talk")


regular_member_talk_view_regular_char_requested = Dialog("anyone|plyr", "Tell me about yourself", starting_state="regular_member_talk", ending_state="view_regular_char_requested")


view_regular_char_requested_do_regular_member_view_char = Dialog("anyone", "Aye {sir/madam}. Let me tell you all there is to know about me.", starting_state="view_regular_char_requested", ending_state="do_regular_member_view_char")
def code():
    change_screen_view_character()
view_regular_char_requested_do_regular_member_view_char.codeBlock = code


do_regular_member_view_char_regular_member_talk = Dialog("anyone", "Anything else?", starting_state="do_regular_member_view_char", ending_state="regular_member_talk")


regular_member_talk_close_window = Dialog("anyone|plyr", "Nothing. Keep moving.", starting_state="regular_member_talk", ending_state="close_window")


start_party_encounter_hostile_attacker = Dialog("anyone", "You have no chance against us. Surrender now or we will kill you all...", starting_state="start", ending_state="party_encounter_hostile_attacker")
def condition():
    if _talk_context == 2 and _encountered_party_hostile > 0 and encountered_party_is_attacker():
        pass
start_party_encounter_hostile_attacker.conditionBlock = condition
def code():
    if _g_encountered_party_template == pt.steppe_bandits:
        play_sound(snd.encounter_steppe_bandits)
    #end
start_party_encounter_hostile_attacker.codeBlock = code


party_encounter_hostile_attacker_close_window = Dialog("anyone|plyr", "We will fight you to the end!", starting_state="party_encounter_hostile_attacker", ending_state="close_window")


party_encounter_hostile_attacker_close_window_1 = Dialog("anyone|plyr", "Don't attack! We surrender.", starting_state="party_encounter_hostile_attacker", ending_state="close_window")
def code():
    _g_player_surrenders = 1
party_encounter_hostile_attacker_close_window_1.codeBlock = code


start_party_encounter_hostile_defender = Dialog("anyone", "What do you want?", starting_state="start", ending_state="party_encounter_hostile_defender")
def condition():
    if _talk_context == 2 and not encountered_party_is_attacker():
        pass
start_party_encounter_hostile_defender.conditionBlock = condition


party_encounter_hostile_defender_party_encounter_hostile_ultimatum_surrender = Dialog("anyone|plyr", "Surrender or die!", starting_state="party_encounter_hostile_defender", ending_state="party_encounter_hostile_ultimatum_surrender")


party_encounter_hostile_ultimatum_surrender_close_window = Dialog("anyone", "{s43}", starting_state="party_encounter_hostile_ultimatum_surrender", ending_state="close_window")
def code():
    lord_comment_to_s43(_g_talk_troop,gstr.lord_challenged_default)
party_encounter_hostile_ultimatum_surrender_close_window.codeBlock = code


party_encounter_hostile_defender_close_window = Dialog("anyone|plyr", "Nothing. We'll leave you in peace.", starting_state="party_encounter_hostile_defender", ending_state="close_window")
def code():
    _g_leave_encounter = 1
party_encounter_hostile_defender_close_window.codeBlock = code


start_merchant_end = Dialog("anyone|auto_proceed", "{!}.", starting_state="start", ending_state="merchant_end")
def condition():
    if is_between(_g_talk_troop,trp.swadian_merchant,trp.startup_merchants_end) and check_quest_active(qst.collect_men) and _talk_context == 21:
        pass
start_merchant_end.conditionBlock = condition


merchant_end_close_window = Dialog("anyone", "Heh! I must really be in a tight spot, to place my hopes in a passing stranger. However, something about you tells me that my trust is not misplaced. Now, go see if you can round up some volunteers.", starting_state="merchant_end", ending_state="close_window")


start_merchant_quest_4e = Dialog("anyone", "{s3}{s2}", starting_state="start", ending_state="merchant_quest_4e")
def condition():
    if is_between(_g_talk_troop,trp.swadian_merchant,trp.startup_merchants_end) and _talk_context == 21 and check_quest_active(qst.save_town_from_bandits):
        var001 = _number_of_civilian_loses / 2
        if _g_killed_first_bandit == 1:
            var002 = _number_of_bandits_killed_by_player + 1
        else:
            var002 = _number_of_bandits_killed_by_player + 0
        #end
    #end
    var002 -= var001
    val_max(var002,0)
    change_player_relation_with_center(_g_starting_town,var002)
    if _g_killed_first_bandit == 1 and _number_of_bandits_killed_by_player > 2:
        s3 = str_store_string(gstr.you_fought_well_at_town_fight_survived)
        troop_add_gold(trp.player,200)
    elif _g_killed_first_bandit == 1 and _number_of_bandits_killed_by_player > 0:
        s3 = str_store_string(gstr.you_fought_normal_at_town_fight_survived)
        troop_add_gold(trp.player,200)
    elif _g_killed_first_bandit == 1 and _number_of_bandits_killed_by_player == 0:
        s3 = str_store_string(gstr.you_fought_bad_at_town_fight_survived)
        troop_add_gold(trp.player,100)
    elif _g_killed_first_bandit == 0 and _number_of_bandits_killed_by_player >= 2:
        s3 = str_store_string(gstr.you_fought_well_at_town_fight)
        troop_add_gold(trp.player,100)
    else:
        s3 = str_store_string(gstr.you_wounded_at_town_fight)
        troop_add_gold(trp.player,100)
    #end
    if _number_of_civilian_loses >= 1:
        reg0 = _number_of_civilian_loses
        s2 = str_store_string(gstr.unfortunately_reg0_civilians_wounded_during_fight_more)
    elif _number_of_civilian_loses == 1:
        reg0 = _number_of_civilian_loses
        s2 = str_store_string(gstr.unfortunately_reg0_civilians_wounded_during_fight)
    else:
        s2 = str_store_string(gstr.also_one_another_good_news_is_any_civilians_did_not_wounded_during_fight)
    #end
    succeed_quest(qst.save_town_from_bandits)
    end_quest(qst.save_town_from_bandits)
start_merchant_quest_4e.conditionBlock = condition


merchant_quest_4e_merchant_finale = Dialog("anyone|plyr", "{s1}", starting_state="merchant_quest_4e", ending_state="merchant_finale")
def condition():
    if _g_killed_first_bandit == 1 and _number_of_bandits_killed_by_player > 2:
        s1 = str_store_string(gstr.you_fought_well_at_town_fight_survived_answer)
    elif _g_killed_first_bandit == 1 and _number_of_bandits_killed_by_player > 0:
        s1 = str_store_string(gstr.you_fought_normal_at_town_fight_survived_answer)
    elif _g_killed_first_bandit == 1 and _number_of_bandits_killed_by_player == 0:
        s1 = str_store_string(gstr.you_fought_bad_at_town_fight_survived_answer)
    elif _g_killed_first_bandit == 0 and _number_of_bandits_killed_by_player >= 2:
        s1 = str_store_string(gstr.you_fought_well_at_town_fight_answer)
    else:
        s1 = str_store_string(gstr.you_wounded_at_town_fight_answer)
    #end
merchant_quest_4e_merchant_finale.conditionBlock = condition
def code():
    _dialog_with_merchant_ended = 1
merchant_quest_4e_merchant_finale.codeBlock = code


merchant_quest_4e_merchant_finale_1 = Dialog("anyone|plyr", "The Heavens alone grant us victory.", starting_state="merchant_quest_4e", ending_state="merchant_finale")
def code():
    _dialog_with_merchant_ended = 1
merchant_quest_4e_merchant_finale_1.codeBlock = code


merchant_quest_4e_merchant_finale_2 = Dialog("anyone|plyr", "I'm glad to see that you're alive, too.", starting_state="merchant_quest_4e", ending_state="merchant_finale")
def code():
    _dialog_with_merchant_ended = 1
merchant_quest_4e_merchant_finale_2.codeBlock = code


merchant_finale_close_window = Dialog("anyone", "Yes, yes... Now, a couple of my boys have the watch captain pinned down in a back room, with a knife at his throat. I''ll need to go drag him before {s5} and explain what this breach of the peace is all about. You don't need to be part of that, though. I'll tell you what -- if all goes well, I'll meet you in the tavern again shortly, and let you know how it all came out. If you don't see me in the tavern, but instead see my head on a spike over the city gate, I'll assume you know enough to stay out of town for a while and forget this whole episode ever happened. So -- hopefully we'll meet again!", starting_state="merchant_finale", ending_state="close_window")
def condition():
    faction_slot_001 = faction_get_slot(_g_encountered_party_faction,11)
    s5 = str_store_troop_name(faction_slot_001)
merchant_finale_close_window.conditionBlock = condition
def code():
    _g_do_one_more_meeting_with_merchant = 2
merchant_finale_close_window.codeBlock = code


start_merchant_quest_1_prologue_1 = Dialog("anyone", "{s1}", starting_state="start", ending_state="merchant_quest_1_prologue_1")
def condition():
    if is_between(_g_talk_troop,trp.swadian_merchant,trp.startup_merchants_end) and _talk_context == 21 and not check_quest_finished(qst.collect_men) and _current_startup_quest_phase == 1:
        if _g_killed_first_bandit == 1:
            s1 = str_store_string(gstr.are_you_all_right)
        else:
            s1 = str_store_string(gstr.you_are_awake)
        #end
    #end
start_merchant_quest_1_prologue_1.conditionBlock = condition


merchant_quest_1_prologue_1_merchant_quest_1_prologue_2 = Dialog("anyone", "We've always had brigands in the hills, driven to banditry by war, debt, or love of violence. Recently, however, they've been getting bolder -- leaving their camps in the wild and venturing into town, looking for unwary prey. The watch commander tells us it's because of all the fighting on the frontiers -- fewer men to keep an eye on the streets -- but I'm not sure what to make of that. It seems to me that the most logical explanation is that these bandits have an ally inside the walls, who helps them enter unnoticed and helps them identify particularly tempting targets... Last week, you see, they took my brother.", starting_state="merchant_quest_1_prologue_1", ending_state="merchant_quest_1_prologue_2")


merchant_quest_1_prologue_2_merchant_quest_1_prologue_3 = Dialog("anyone", "I don't know what my brother was thinking -- a lad from a prominent house, out alone after dark in times like these... Well, I suppose you were too, but you're a stranger here, and didn't know how bad things have become. He had no such excuse. But he's family, so what can you do? If you don't protect your kin, then people will start thinking that you can't protect your investements, either, and I can't have that... No doubt the gang will soon send word about a ransom, but I don't care to pay it.", starting_state="merchant_quest_1_prologue_2", ending_state="merchant_quest_1_prologue_3")


merchant_quest_1_prologue_3_merchant_quest_1a = Dialog("anyone", "So here's my proposition. You look like you've had a bit of experience with a blade -- and more importantly, you must have a bit of fire in your belly, or you wouldn't be coming to Calradia to seek your fortune. So here's what I'm asking you to do: gather a small party, track down these bandits to their lair, teach them a lesson they won't forget, and get my brother back safe. In return, you'll earn my lasting gratitude and a bit of silver. What do you say?", starting_state="merchant_quest_1_prologue_3", ending_state="merchant_quest_1a")


merchant_quest_1a_merchant_quest_1b = Dialog("anyone|plyr", "I am interested.", starting_state="merchant_quest_1a", ending_state="merchant_quest_1b")


merchant_quest_1a_close_window = Dialog("anyone|plyr", "I am not interested, have more important business to do.", starting_state="merchant_quest_1a", ending_state="close_window")
def code():
    _dialog_with_merchant_ended = 1
merchant_quest_1a_close_window.codeBlock = code


merchant_quest_1b_merchant_quest_1c = Dialog("anyone", "You won't be able to do this by yourself, though. If you try and take on the whole gang singlehandedly, the hunter will become the hunted, I'll warrant. You'll first want to round up a group of volunteers. There's always a few lads in the villages around here, looking for a bit of work that's more interesting than tilling the soil or hauling water. They'll follow you if you pay. So... Take this purse of 100 denars. Consider it an advance on your reward. Go round to the villages, and use the money to hire some help. I'll reckon that you need at least five men to take on these bandits.", starting_state="merchant_quest_1b", ending_state="merchant_quest_1c")
def code():
    troop_add_gold(trp.player,100)
    s9 = str_store_troop_name(_g_talk_troop)
    s1 = str_store_party_name(_g_starting_town)
    s2 = str_store_string(gstr.start_up_quest_message_1)
    start_quest(qst.collect_men,_g_talk_troop)
    pos1 = party_get_position(_current_town)
merchant_quest_1b_merchant_quest_1c.codeBlock = code


merchant_quest_1c_merchant_quest_1d = Dialog("anyone|plyr", "Very good, sir. I'll go collect some men from around the villages.", starting_state="merchant_quest_1c", ending_state="merchant_quest_1d")


merchant_quest_1d_close_window = Dialog("anyone", "Good. You can find me again in the tavern here in {s1} after you've got your group together. Then we'll speak about what we do next.", starting_state="merchant_quest_1d", ending_state="close_window")
def condition():
    s1 = str_store_party_name(_current_town)
merchant_quest_1d_close_window.conditionBlock = condition
def code():
    _dialog_with_merchant_ended = 1
merchant_quest_1d_close_window.codeBlock = code


start_battle_reason_stated_1 = Dialog("anyone", "Surrender or die. Make your choice", starting_state="start", ending_state="battle_reason_stated")


battle_reason_stated_close_window = Dialog("anyone|plyr", "I am not afraid of you. I will fight.", starting_state="battle_reason_stated", ending_state="close_window")
def code():
    encounter_attack()
battle_reason_stated_close_window.codeBlock = code


start_free = Dialog("anyone", "Hello. What can I do for you?", starting_state="start", ending_state="free")


free_view_char_requested = Dialog("anyone|plyr", "Tell me about yourself", starting_state="free", ending_state="view_char_requested")
def condition():
    if not in_meta_mission():
        pass
free_view_char_requested.conditionBlock = condition


view_char_requested_view_char = Dialog("anyone", "Very well, listen to this...", starting_state="view_char_requested", ending_state="view_char")
def code():
    change_screen_view_character()
view_char_requested_view_char.codeBlock = code


view_char_free = Dialog("anyone", "Anything else?", starting_state="view_char", ending_state="free")


end_close_window = Dialog("anyone|plyr", "[Done]", starting_state="end", ending_state="close_window")


start_threaten_1 = Dialog("anyone|plyr", "Drop your weapons and surrender if you want to live", starting_state="start", ending_state="threaten_1")


threaten_1_end = Dialog("anyone", "We will fight you first", starting_state="threaten_1", ending_state="end")
def code():
    encounter_attack()
threaten_1_end.codeBlock = code


member_direct_campaign_member_direct_campaign_choice = Dialog("anyone", "Yes, {my lord/my lady}. Which message do you wish to send to the vassals?", starting_state="member_direct_campaign", ending_state="member_direct_campaign_choice")


member_direct_campaign_choice_member_direct_campaign_call_to_arms_verify = Dialog("anyone|plyr", "I want to start a new campaign. Let us assemble the army here.", starting_state="member_direct_campaign_choice", ending_state="member_direct_campaign_call_to_arms_verify")
def condition():
    if faction_slot_ge(_players_kingdom,8,trp.npc1) or _players_kingdom == fac.player_supporters_faction and faction_slot_eq(_players_kingdom,4,0) or faction_slot_eq(_players_kingdom,4,6):
        pass
member_direct_campaign_choice_member_direct_campaign_call_to_arms_verify.conditionBlock = condition
def code():
    faction_slot_001 = faction_get_slot(_players_kingdom,8)
    if faction_slot_001 >= 0:
        troop_slot_002 = troop_get_slot(faction_slot_001,10)
        if party_is_active(troop_slot_002):
            party_set_marshall(troop_slot_002,0)
        #end
    #end
    faction_set_slot(_players_kingdom,8,trp.player)
member_direct_campaign_choice_member_direct_campaign_call_to_arms_verify.codeBlock = code


member_direct_campaign_choice_member_give_order_disband_army_verify = Dialog("anyone|plyr", "I want to end the campaign and let everyone return home.", starting_state="member_direct_campaign_choice", ending_state="member_give_order_disband_army_verify")
def condition():
    if faction_slot_eq(_players_kingdom,8,trp.player) and not faction_slot_eq(_players_kingdom,4,0) and not faction_slot_eq(_players_kingdom,4,6):
        pass
member_direct_campaign_choice_member_give_order_disband_army_verify.conditionBlock = condition


member_direct_campaign_choice_member_give_order_invite_feast_verify = Dialog("anyone|plyr", "I wish to invite the vassals of the realm to a feast at {s4}.", starting_state="member_direct_campaign_choice", ending_state="member_give_order_invite_feast_verify")
def condition():
    if faction_slot_eq(_players_kingdom,8,trp.player) and not faction_slot_eq(_players_kingdom,4,6) and check_quest_active(qst.organize_feast):
        quest_slot_001 = quest_get_slot(qst.organize_feast,1)
        party_faction_002 = store_faction_of_party(quest_slot_001)
        if party_faction_002 == _players_kingdom:
            s4 = str_store_party_name(quest_slot_001)
member_direct_campaign_choice_member_give_order_invite_feast_verify.conditionBlock = condition


member_direct_campaign_choice_member_pretalk = Dialog("anyone|plyr", "Never mind", starting_state="member_direct_campaign_choice", ending_state="member_pretalk")


member_give_order_invite_feast_verify_member_give_order_invite_feast_verify_2 = Dialog("anyone", "You wish to invite the lords of the realm to a feast?", starting_state="member_give_order_invite_feast_verify", ending_state="member_give_order_invite_feast_verify_2")


member_give_order_invite_feast_verify_2_member_give_order_invite_feast = Dialog("anyone|plyr", "Yes. It is time for us to strengthen the bonds that bring us together.", starting_state="member_give_order_invite_feast_verify_2", ending_state="member_give_order_invite_feast")


member_give_order_invite_feast_verify_2_member_pretalk = Dialog("anyone|plyr", "On second thought, this is perhaps not the time.", starting_state="member_give_order_invite_feast_verify_2", ending_state="member_pretalk")


member_give_order_invite_feast_member_pretalk = Dialog("anyone", "All right then. I shall dispatch messengers informing the lords of the realm of your feast at {s4}.", starting_state="member_give_order_invite_feast", ending_state="member_pretalk")
def condition():
    quest_slot_001 = quest_get_slot(qst.organize_feast,1)
    s4 = str_store_party_name(quest_slot_001)
member_give_order_invite_feast_member_pretalk.conditionBlock = condition
def code():
    quest_slot_001 = quest_get_slot(qst.organize_feast,1)
    _player_marshal_ai_state = 6
    _player_marshal_ai_object = quest_slot_001
    decide_faction_ai(_players_kingdom)
    _g_recalculate_ais = 1
    s4 = str_store_party_name(quest_slot_001)
member_give_order_invite_feast_member_pretalk.codeBlock = code


member_direct_campaign_call_to_arms_verify_member_give_order_call_to_arms_verify_2 = Dialog("anyone", "You wish to summon all lords for a new campaign?", starting_state="member_direct_campaign_call_to_arms_verify", ending_state="member_give_order_call_to_arms_verify_2")


member_give_order_call_to_arms_verify_2_member_give_order_call_to_arms = Dialog("anyone|plyr", "Yes. We must gather all our forces before we march on the enemy.", starting_state="member_give_order_call_to_arms_verify_2", ending_state="member_give_order_call_to_arms")


member_give_order_call_to_arms_verify_2_member_pretalk = Dialog("anyone|plyr", "On second thought, it won't be necessary to summon everyone.", starting_state="member_give_order_call_to_arms_verify_2", ending_state="member_pretalk")


member_give_order_call_to_arms_member_pretalk = Dialog("anyone", "All right then. I will send messengers and tell everyone to come here.", starting_state="member_give_order_call_to_arms", ending_state="member_pretalk")
def code():
    _player_marshal_ai_state = 1
    _player_marshal_ai_object = p.main_party
    decide_faction_ai(_players_kingdom)
    _g_recalculate_ais = 1
member_give_order_call_to_arms_member_pretalk.codeBlock = code


member_give_order_disband_army_verify_member_give_order_disband_army_2 = Dialog("anyone", "You want to end the current campaign and release all lords from duty?", starting_state="member_give_order_disband_army_verify", ending_state="member_give_order_disband_army_2")


member_give_order_disband_army_2_member_give_order_disband_army = Dialog("anyone|plyr", "Yes. We no longer need all our forces here.", starting_state="member_give_order_disband_army_2", ending_state="member_give_order_disband_army")


member_give_order_disband_army_2_member_pretalk = Dialog("anyone|plyr", "On second thought, it will be better to stay together for now.", starting_state="member_give_order_disband_army_2", ending_state="member_pretalk")


member_give_order_disband_army_member_pretalk = Dialog("anyone", "All right. I will let everyone know that they are released from duty.", starting_state="member_give_order_disband_army", ending_state="member_pretalk")
def code():
    _player_marshal_ai_state = 0
    _player_marshal_ai_object = -1
    decide_faction_ai(_players_kingdom)
    _g_recalculate_ais = 1
member_give_order_disband_army_member_pretalk.codeBlock = code


mayor_wealth_comparison_1_mayor_wealth_comparison_2 = Dialog("anyone", "Overall, the wealthiest town in Calradia is known to be {s4}. Here in {s5}, we are poorer than {reg4} towns, and richer than {reg5}.", starting_state="mayor_wealth_comparison_1", ending_state="mayor_wealth_comparison_2")
def condition():
    var001 = _g_encountered_party
    var002 = 0
    var003 = 0
    party_slot_004 = party_get_slot(_g_encountered_party,50)
    party_slot_005 = party_get_slot(_g_encountered_party,50)
    for p_006 in range(p.town_1, p.castle_1):
        if p_006 != _g_encountered_party:
            party_slot_007 = party_get_slot(p_006,50)
            if party_slot_007 > party_slot_004:
                var003 += 1
                var001 = p_006
                party_slot_004 = party_slot_007
            elif party_slot_007 > party_slot_005:
                var003 += 1
            else:
                var002 += 1
            #end
        #end
    #end
    reg4 = var003
    reg5 = var002
    s5 = str_store_party_name(_g_encountered_party)
    s4 = str_store_party_name(var001)
mayor_wealth_comparison_1_mayor_wealth_comparison_2.conditionBlock = condition


mayor_wealth_comparison_2_mayor_wealth_comparison_3 = Dialog("anyone", "In terms of local industry, the most productive town in Calradia is known to be {s4}. Here in {s5}, we produce less than {reg4} towns, and produce more than {reg5}. Production is of course affected by the supply of raw materials, as well as by the overall prosperity of the town.", starting_state="mayor_wealth_comparison_2", ending_state="mayor_wealth_comparison_3")
def condition():
    var001 = _g_encountered_party
    var002 = 0
    var003 = 0
    var004 = 0
    for itm_005 in range(itm.spice, itm.siege_supply):
        center_get_production(_g_encountered_party,itm_005)
        var004 += reg0
    #end
    var006 = var004
    if _cheat_mode >= 1:
        reg4 = var004
        s4 = str_store_party_name(_g_encountered_party)
        print("@{!}DEBUG -- Total production for {s4}: {reg4}")
    #end
    for p_007 in range(p.town_1, p.castle_1):
        if p_007 != _g_encountered_party:
            var008 = 0
            for itm_005 in range(itm.spice, itm.siege_supply):
                center_get_production(p_007,itm_005)
                var008 += reg0
            #end
        #end
        if _cheat_mode >= 1:
            reg4 = var008
            s4 = str_store_party_name(p_007)
            print("@{!}DEBUG -- Total production for {s4}: {reg4}")
        #end
        if var008 > var006:
            var003 += 1
            var001 = p_007
            var006 = var008
        elif var008 > var004:
            var003 += 1
        else:
            var002 += 1
        #end
    #end
    reg4 = var003
    reg5 = var002
    s5 = str_store_party_name(_g_encountered_party)
    s4 = str_store_party_name(var001)
mayor_wealth_comparison_2_mayor_wealth_comparison_3.conditionBlock = condition


mayor_wealth_comparison_3_mayor_wealth_comparison_4 = Dialog("anyone", "In terms of the output of the surrounding villages, the town of {s4} is the richest in Calradia. Here in {s5}, the villages produce less than the hinterland around {reg4} towns, and produce more than {reg5}. The wealth of a town's hinterland, of course, is heavily dependent on the tides of war. Looting and pillage, and shifts in territory, can make a major impact.", starting_state="mayor_wealth_comparison_3", ending_state="mayor_wealth_comparison_4")
def condition():
    var001 = _g_encountered_party
    var002 = 0
    var003 = 0
    for p_004 in range(p.town_1, p.castle_1):
        party_set_slot(p_004,248,0)
    #end
    for p_005 in range(p.village_1, p.salt_mine):
        var006 = 0
        for itm_007 in range(itm.spice, itm.siege_supply):
            center_get_production(p_005,itm_007)
            var006 += reg0
        #end
        party_slot_008 = party_get_slot(p_005,121)
        party_slot_009 = party_get_slot(party_slot_008,248)
        party_slot_009 += var006
        party_set_slot(party_slot_008,248,party_slot_009)
    #end
    party_slot_010 = party_get_slot(_g_encountered_party,248)
    var011 = party_slot_010
    if _cheat_mode >= 1:
        reg4 = party_slot_010
        s4 = str_store_party_name(_g_encountered_party)
        print("@{!}DEBUG -- Total rural production for {s4} region: {reg4}")
    #end
    for p_012 in range(p.town_1, p.castle_1):
        if p_012 != _g_encountered_party:
            party_slot_013 = party_get_slot(p_012,248)
            if _cheat_mode >= 1:
                reg4 = party_slot_013
                s4 = str_store_party_name(p_012)
                print("@{!}DEBUG -- Total rural production for {s4} region: {reg4}")
            #end
        #end
        if party_slot_013 > var011:
            var003 += 1
            var001 = p_012
            var011 = party_slot_013
        elif party_slot_013 > party_slot_010:
            var003 += 1
        else:
            var002 += 1
        #end
    #end
    reg4 = var003
    reg5 = var002
    s5 = str_store_party_name(_g_encountered_party)
    s4 = str_store_party_name(var001)
mayor_wealth_comparison_3_mayor_wealth_comparison_4.conditionBlock = condition


mayor_wealth_comparison_4_mayor_wealth_comparison_5 = Dialog("anyone", "In terms of trade, the town of {s4} is believed to have received the most visits from caravans over the past few months. Here in {s5}, we are less visited than {reg4} towns, and more visited than {reg5}. ", starting_state="mayor_wealth_comparison_4", ending_state="mayor_wealth_comparison_5")
def condition():
    var001 = _g_encountered_party
    var002 = 0
    var003 = 0
    for p_004 in range(p.town_1, p.castle_1):
        party_set_slot(p_004,248,0)
    #end
    for var005 in range(0, _num_log_entries):
        slot_no_006 = _num_log_entries - var005
        if troop_slot_eq(trp.log_array_entry_type,slot_no_006,5):
            troop_slot_007 = troop_get_slot(trp.log_array_entry_time,slot_no_006)
            cur_hours_008 = store_current_hours()
            var009 = cur_hours_008 - troop_slot_007
            if var009 < 1344:
                troop_slot_010 = troop_get_slot(trp.log_array_center_object,slot_no_006)
                if is_between(troop_slot_010,p.town_1,p.castle_1):
                    troop_slot_011 = troop_get_slot(trp.log_array_troop_object,slot_no_006)
                    party_slot_012 = party_get_slot(troop_slot_011,248)
                    party_slot_012 += 1
                    party_set_slot(troop_slot_011,248,party_slot_012)
                #end
            #end
        #end
    #end
    party_slot_013 = party_get_slot(_g_encountered_party,248)
    var014 = party_slot_013
    if _cheat_mode >= 1:
        reg4 = party_slot_013
        s4 = str_store_party_name(_g_encountered_party)
        print("@{!}DEBUG -- Total trade for {s4}: {reg4}")
    #end
    for p_015 in range(p.town_1, p.castle_1):
        if p_015 != _g_encountered_party:
            party_slot_016 = party_get_slot(p_015,248)
            if _cheat_mode >= 1:
                reg4 = party_slot_016
                s4 = str_store_party_name(p_015)
                print("@{!}DEBUG -- Total trade for {s4}: {reg4}")
            #end
        #end
        if party_slot_016 > var014:
            var003 += 1
            var001 = p_015
            var014 = party_slot_016
        elif party_slot_016 > party_slot_013:
            var003 += 1
        else:
            var002 += 1
        #end
    #end
    reg4 = var003
    reg5 = var002
    s5 = str_store_party_name(_g_encountered_party)
    s4 = str_store_party_name(var001)
mayor_wealth_comparison_4_mayor_wealth_comparison_5.conditionBlock = condition


mayor_wealth_comparison_5_mayor_pretalk = Dialog("anyone", "In terms of attacks on travellers, the town of {s4} is believed to be the most dangerous. Here in {s5}, we are less afflicted by bandits and raiders than {reg4} towns, and more afflicted than {reg5}. ", starting_state="mayor_wealth_comparison_5", ending_state="mayor_pretalk")
def condition():
    var001 = _g_encountered_party
    var002 = 0
    var003 = 0
    for p_004 in range(p.town_1, p.castle_1):
        party_set_slot(p_004,248,0)
    #end
    for var005 in range(0, _num_log_entries):
        slot_no_006 = _num_log_entries - var005
        if troop_slot_eq(trp.log_array_entry_type,slot_no_006,3):
            troop_slot_007 = troop_get_slot(trp.log_array_entry_time,slot_no_006)
            cur_hours_008 = store_current_hours()
            var009 = cur_hours_008 - troop_slot_007
            if var009 < 1344:
                troop_slot_010 = troop_get_slot(trp.log_array_center_object,slot_no_006)
                troop_slot_011 = troop_get_slot(trp.log_array_troop_object,slot_no_006)
                if is_between(troop_slot_011,p.town_1,p.castle_1):
                    party_slot_012 = party_get_slot(troop_slot_011,248)
                    party_slot_012 += 1
                    party_set_slot(troop_slot_011,248,party_slot_012)
                #end
            #end
        #end
        if is_between(troop_slot_010,p.town_1,p.castle_1):
            party_slot_012 = party_get_slot(troop_slot_010,248)
            party_slot_012 += 1
            party_set_slot(troop_slot_010,248,party_slot_012)
        #end
    #end
    party_slot_013 = party_get_slot(_g_encountered_party,248)
    var014 = party_slot_013
    if _cheat_mode >= 1:
        reg4 = party_slot_013
        s4 = str_store_party_name(_g_encountered_party)
        print("@{!}DEBUG -- Total attacks for {s4}: {reg4}")
    #end
    for p_015 in range(p.town_1, p.castle_1):
        if p_015 != _g_encountered_party:
            party_slot_016 = party_get_slot(p_015,248)
            if _cheat_mode >= 1:
                reg4 = party_slot_016
                s4 = str_store_party_name(p_015)
                print("@{!}DEBUG -- Total attacks for {s4}: {reg4}")
            #end
        #end
        if party_slot_016 > var014:
            var003 += 1
            var001 = p_015
            var014 = party_slot_016
        elif party_slot_016 > party_slot_013:
            var003 += 1
        else:
            var002 += 1
        #end
    #end
    reg4 = var003
    reg5 = var002
    s5 = str_store_party_name(_g_encountered_party)
    s4 = str_store_party_name(var001)
mayor_wealth_comparison_5_mayor_pretalk.conditionBlock = condition


free_close_window = Dialog("anyone|plyr", " Good-bye.", starting_state="free", ending_state="close_window")
def condition():
    if in_meta_mission():
        pass
free_close_window.conditionBlock = condition


free_close_window_1 = Dialog("anyone|plyr", " [Leave]", starting_state="free", ending_state="close_window")
def condition():
    if not in_meta_mission():
        pass
free_close_window_1.conditionBlock = condition



# This Python file uses the following encoding: utf-8

import sys
sys.path.append("../data_objects/")

from item import Item, ItemMesh, ItemType, ItemFlag, ItemCapability, IModBit, DamageType
from simple_trigger import SimpleTrigger
import factions as fac



itm_no_item = Item("itm_no_item", "INVALID_ITEM")
itm_no_item.add_mesh(ItemMesh("invalid_item"))
itm_no_item.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_no_item.add_flag(ItemFlag.IS_PRIMARY)
itm_no_item.add_flag(ItemFlag.IS_SECONDARY)
itm_no_item.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_no_item.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_no_item.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_no_item.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_no_item.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_no_item.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_no_item.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_no_item.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_no_item.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_no_item.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_no_item.add_capability(ItemCapability.FORCE_64_BITS)
itm_no_item.set_price(3)
itm_no_item.set_weight(1.5)
itm_no_item.set_abundance(100)
itm_no_item.set_hit_points(16384)
itm_no_item.set_speed_rating(103)
itm_no_item.set_weapon_length(90)
itm_no_item.set_thrust_damage(10, 2)
itm_no_item.set_swing_damage(16, 2)


itm_tutorial_spear = Item("itm_tutorial_spear", "Spear")
itm_tutorial_spear.add_mesh(ItemMesh("spear"))
itm_tutorial_spear.add_flag(ItemType.POLEARM)
itm_tutorial_spear.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tutorial_spear.add_flag(ItemFlag.IS_PRIMARY)
itm_tutorial_spear.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
itm_tutorial_spear.add_capability(ItemCapability.POLEARM_THRUST)
itm_tutorial_spear.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_tutorial_spear.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_tutorial_spear.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_tutorial_spear.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_tutorial_spear.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_tutorial_spear.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_tutorial_spear.add_modifier(IModBit.CRACKED)
itm_tutorial_spear.add_modifier(IModBit.BENT)
itm_tutorial_spear.add_modifier(IModBit.BALANCED)
itm_tutorial_spear.set_weight(4.5)
itm_tutorial_spear.set_abundance(100)
itm_tutorial_spear.set_speed_rating(80)
itm_tutorial_spear.set_weapon_length(158)
itm_tutorial_spear.set_thrust_damage(19, 1)


itm_tutorial_club = Item("itm_tutorial_club", "Club")
itm_tutorial_club.add_mesh(ItemMesh("club"))
itm_tutorial_club.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_tutorial_club.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
itm_tutorial_club.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tutorial_club.add_flag(ItemFlag.IS_PRIMARY)
itm_tutorial_club.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_tutorial_club.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_tutorial_club.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_tutorial_club.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_tutorial_club.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_tutorial_club.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_tutorial_club.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_tutorial_club.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_tutorial_club.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_tutorial_club.add_capability(ItemCapability.FORCE_64_BITS)
itm_tutorial_club.set_weight(2.5)
itm_tutorial_club.set_abundance(100)
itm_tutorial_club.set_hit_points(11264)
itm_tutorial_club.set_speed_rating(95)
itm_tutorial_club.set_weapon_length(95)
itm_tutorial_club.set_thrust_damage(0, 1)
itm_tutorial_club.set_swing_damage(11, 2)


itm_tutorial_battle_axe = Item("itm_tutorial_battle_axe", "Battle_Axe")
itm_tutorial_battle_axe.add_mesh(ItemMesh("battle_ax"))
itm_tutorial_battle_axe.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_tutorial_battle_axe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tutorial_battle_axe.add_flag(ItemFlag.IS_TWO_HANDED)
itm_tutorial_battle_axe.add_flag(ItemFlag.IS_PRIMARY)
itm_tutorial_battle_axe.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_tutorial_battle_axe.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_tutorial_battle_axe.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_tutorial_battle_axe.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_tutorial_battle_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_tutorial_battle_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_tutorial_battle_axe.add_capability(ItemCapability.CARRY_AXE_BACK)
itm_tutorial_battle_axe.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_tutorial_battle_axe.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_tutorial_battle_axe.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_tutorial_battle_axe.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_tutorial_battle_axe.add_capability(ItemCapability.FORCE_64_BITS)
itm_tutorial_battle_axe.add_modifier(IModBit.RUSTY)
itm_tutorial_battle_axe.add_modifier(IModBit.CHIPPED)
itm_tutorial_battle_axe.add_modifier(IModBit.HEAVY)
itm_tutorial_battle_axe.set_weight(5.0)
itm_tutorial_battle_axe.set_abundance(100)
itm_tutorial_battle_axe.set_hit_points(27648)
itm_tutorial_battle_axe.set_speed_rating(88)
itm_tutorial_battle_axe.set_weapon_length(108)
itm_tutorial_battle_axe.set_thrust_damage(0, 1)
itm_tutorial_battle_axe.set_swing_damage(27, 0)


itm_tutorial_arrows = Item("itm_tutorial_arrows", "Arrows")
itm_tutorial_arrows.add_mesh(ItemMesh("arrow"))
itm_tutorial_arrows.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
itm_tutorial_arrows.add_mesh(ItemMesh("quiver", ItemMesh.ixmesh_carry))
itm_tutorial_arrows.add_flag(ItemType.ARROWS)
itm_tutorial_arrows.add_capability(ItemCapability.CARRY_QUIVER_BACK)
itm_tutorial_arrows.add_modifier(IModBit.BENT)
itm_tutorial_arrows.add_modifier(IModBit.LARGE_BAG)
itm_tutorial_arrows.set_weight(3.0)
itm_tutorial_arrows.set_abundance(160)
itm_tutorial_arrows.set_weapon_length(95)
itm_tutorial_arrows.set_max_ammo(20)
itm_tutorial_arrows.set_thrust_damage(0, 1)


itm_tutorial_bolts = Item("itm_tutorial_bolts", "Bolts")
itm_tutorial_bolts.add_mesh(ItemMesh("bolt"))
itm_tutorial_bolts.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
itm_tutorial_bolts.add_mesh(ItemMesh("bolt_bag", ItemMesh.ixmesh_carry))
meshx = ItemMesh("bolt_bag_b", ItemMesh.ixmesh_carry)
meshx.add_modifier(IModBit.LARGE_BAG)
itm_tutorial_bolts.add_mesh(meshx)
itm_tutorial_bolts.add_flag(ItemType.BOLTS)
itm_tutorial_bolts.add_capability(ItemCapability.CARRY_QUIVER_RIGHT_VERTICAL)
itm_tutorial_bolts.add_modifier(IModBit.BENT)
itm_tutorial_bolts.add_modifier(IModBit.LARGE_BAG)
itm_tutorial_bolts.set_weight(2.25)
itm_tutorial_bolts.set_abundance(90)
itm_tutorial_bolts.set_weapon_length(63)
itm_tutorial_bolts.set_max_ammo(18)
itm_tutorial_bolts.set_thrust_damage(0, 1)


itm_tutorial_short_bow = Item("itm_tutorial_short_bow", "Short_Bow")
itm_tutorial_short_bow.add_mesh(ItemMesh("short_bow"))
itm_tutorial_short_bow.add_mesh(ItemMesh("short_bow_carry", ItemMesh.ixmesh_carry))
itm_tutorial_short_bow.add_flag(ItemType.BOW)
itm_tutorial_short_bow.add_flag(ItemFlag.IS_TWO_HANDED)
itm_tutorial_short_bow.add_flag(ItemFlag.IS_PRIMARY)
itm_tutorial_short_bow.add_capability(ItemCapability.SHOOT_BOW)
itm_tutorial_short_bow.add_capability(ItemCapability.CARRY_BOW_BACK)
itm_tutorial_short_bow.add_modifier(IModBit.CRACKED)
itm_tutorial_short_bow.add_modifier(IModBit.BENT)
itm_tutorial_short_bow.add_modifier(IModBit.MASTERWORK)
itm_tutorial_short_bow.add_modifier(IModBit.STRONG)
itm_tutorial_short_bow.set_weight(1.0)
itm_tutorial_short_bow.set_abundance(100)
itm_tutorial_short_bow.set_speed_rating(98)
itm_tutorial_short_bow.set_missile_speed(49)
itm_tutorial_short_bow.set_thrust_damage(12, 1)


itm_tutorial_crossbow = Item("itm_tutorial_crossbow", "Crossbow")
itm_tutorial_crossbow.add_mesh(ItemMesh("crossbow_a"))
itm_tutorial_crossbow.add_flag(ItemType.CROSSBOW)
itm_tutorial_crossbow.add_flag(ItemFlag.CANT_RELOAD_ON_HORSEBACK)
itm_tutorial_crossbow.add_flag(ItemFlag.IS_TWO_HANDED)
itm_tutorial_crossbow.add_flag(ItemFlag.IS_PRIMARY)
itm_tutorial_crossbow.add_capability(ItemCapability.SHOOT_CROSSBOW)
itm_tutorial_crossbow.add_capability(ItemCapability.CARRY_CROSSBOW_BACK)
itm_tutorial_crossbow.add_modifier(IModBit.CRACKED)
itm_tutorial_crossbow.add_modifier(IModBit.BENT)
itm_tutorial_crossbow.add_modifier(IModBit.MASTERWORK)
itm_tutorial_crossbow.set_weight(3.0)
itm_tutorial_crossbow.set_abundance(100)
itm_tutorial_crossbow.set_speed_rating(42)
itm_tutorial_crossbow.set_missile_speed(68)
itm_tutorial_crossbow.set_max_ammo(1)
itm_tutorial_crossbow.set_thrust_damage(32, 1)


itm_tutorial_throwing_daggers = Item("itm_tutorial_throwing_daggers", "Throwing_Daggers")
itm_tutorial_throwing_daggers.add_mesh(ItemMesh("throwing_dagger"))
itm_tutorial_throwing_daggers.add_flag(ItemType.THROWN)
itm_tutorial_throwing_daggers.add_flag(ItemFlag.IS_PRIMARY)
itm_tutorial_throwing_daggers.add_capability(ItemCapability.THROW_KNIFE)
itm_tutorial_throwing_daggers.add_modifier(IModBit.BENT)
itm_tutorial_throwing_daggers.add_modifier(IModBit.LARGE_BAG)
itm_tutorial_throwing_daggers.set_weight(3.5)
itm_tutorial_throwing_daggers.set_abundance(100)
itm_tutorial_throwing_daggers.set_speed_rating(102)
itm_tutorial_throwing_daggers.set_missile_speed(25)
itm_tutorial_throwing_daggers.set_max_ammo(14)
itm_tutorial_throwing_daggers.set_thrust_damage(16, 0)


itm_tutorial_saddle_horse = Item("itm_tutorial_saddle_horse", "Saddle_Horse")
itm_tutorial_saddle_horse.add_mesh(ItemMesh("saddle_horse"))
itm_tutorial_saddle_horse.add_flag(ItemType.HORSE)
itm_tutorial_saddle_horse.add_modifier(IModBit.HEAVY)
itm_tutorial_saddle_horse.add_modifier(IModBit.LAME)
itm_tutorial_saddle_horse.add_modifier(IModBit.SWAYBACKED)
itm_tutorial_saddle_horse.add_modifier(IModBit.STUBBORN)
itm_tutorial_saddle_horse.add_modifier(IModBit.SPIRITED)
itm_tutorial_saddle_horse.set_abundance(90)
itm_tutorial_saddle_horse.set_body_armor(3)
itm_tutorial_saddle_horse.set_speed_rating(38)
itm_tutorial_saddle_horse.set_missile_speed(40)
itm_tutorial_saddle_horse.set_thrust_damage(8, 0)


itm_tutorial_shield = Item("itm_tutorial_shield", "Kite_Shield")
itm_tutorial_shield.add_mesh(ItemMesh("shield_kite_a"))
itm_tutorial_shield.add_flag(ItemType.SHIELD)
itm_tutorial_shield.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tutorial_shield.add_capability(ItemCapability.CARRY_KITE_SHIELD)
itm_tutorial_shield.set_price(118)
itm_tutorial_shield.add_modifier(IModBit.CRACKED)
itm_tutorial_shield.add_modifier(IModBit.BATTERED)
itm_tutorial_shield.add_modifier(IModBit.THICK)
itm_tutorial_shield.add_modifier(IModBit.REINFORCED)
itm_tutorial_shield.set_weight(2.5)
itm_tutorial_shield.set_abundance(100)
itm_tutorial_shield.set_body_armor(1)
itm_tutorial_shield.set_hit_points(480)
itm_tutorial_shield.set_speed_rating(82)
itm_tutorial_shield.set_weapon_length(150)


itm_tutorial_staff_no_attack = Item("itm_tutorial_staff_no_attack", "Staff")
itm_tutorial_staff_no_attack.add_mesh(ItemMesh("wooden_staff"))
itm_tutorial_staff_no_attack.add_flag(ItemType.POLEARM)
itm_tutorial_staff_no_attack.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
itm_tutorial_staff_no_attack.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tutorial_staff_no_attack.add_flag(ItemFlag.IS_PRIMARY)
itm_tutorial_staff_no_attack.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
itm_tutorial_staff_no_attack.add_flag(ItemFlag.FITS_TO_HEAD)
itm_tutorial_staff_no_attack.add_flag(ItemFlag.OFFSET_LANCE)
itm_tutorial_staff_no_attack.add_capability(ItemCapability.CARRY_SWORD_BACK)
itm_tutorial_staff_no_attack.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_tutorial_staff_no_attack.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_tutorial_staff_no_attack.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_tutorial_staff_no_attack.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_tutorial_staff_no_attack.set_price(9)
itm_tutorial_staff_no_attack.set_weight(3.5)
itm_tutorial_staff_no_attack.set_abundance(100)
itm_tutorial_staff_no_attack.set_speed_rating(120)
itm_tutorial_staff_no_attack.set_weapon_length(115)
itm_tutorial_staff_no_attack.set_thrust_damage(0, 2)
itm_tutorial_staff_no_attack.set_swing_damage(0, 2)


itm_tutorial_staff = Item("itm_tutorial_staff", "Staff")
itm_tutorial_staff.add_mesh(ItemMesh("wooden_staff"))
itm_tutorial_staff.add_flag(ItemType.POLEARM)
itm_tutorial_staff.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
itm_tutorial_staff.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tutorial_staff.add_flag(ItemFlag.IS_PRIMARY)
itm_tutorial_staff.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
itm_tutorial_staff.add_flag(ItemFlag.FITS_TO_HEAD)
itm_tutorial_staff.add_flag(ItemFlag.OFFSET_LANCE)
itm_tutorial_staff.add_capability(ItemCapability.POLEARM_THRUST)
itm_tutorial_staff.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_tutorial_staff.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_tutorial_staff.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_tutorial_staff.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_tutorial_staff.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_tutorial_staff.add_capability(ItemCapability.CARRY_SWORD_BACK)
itm_tutorial_staff.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_tutorial_staff.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_tutorial_staff.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_tutorial_staff.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_tutorial_staff.set_price(9)
itm_tutorial_staff.set_weight(3.5)
itm_tutorial_staff.set_abundance(100)
itm_tutorial_staff.set_hit_points(16384)
itm_tutorial_staff.set_speed_rating(120)
itm_tutorial_staff.set_weapon_length(115)
itm_tutorial_staff.set_thrust_damage(16, 2)
itm_tutorial_staff.set_swing_damage(16, 2)


itm_tutorial_sword = Item("itm_tutorial_sword", "Sword")
itm_tutorial_sword.add_mesh(ItemMesh("long_sword"))
itm_tutorial_sword.add_mesh(ItemMesh("scab_longsw_a", ItemMesh.ixmesh_carry))
itm_tutorial_sword.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_tutorial_sword.add_flag(ItemFlag.IS_PRIMARY)
itm_tutorial_sword.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_tutorial_sword.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_tutorial_sword.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_tutorial_sword.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_tutorial_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_tutorial_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_tutorial_sword.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_tutorial_sword.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_tutorial_sword.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_tutorial_sword.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_tutorial_sword.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_tutorial_sword.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_tutorial_sword.add_capability(ItemCapability.FORCE_64_BITS)
itm_tutorial_sword.add_modifier(IModBit.RUSTY)
itm_tutorial_sword.add_modifier(IModBit.CHIPPED)
itm_tutorial_sword.add_modifier(IModBit.BALANCED)
itm_tutorial_sword.add_modifier(IModBit.TEMPERED)
itm_tutorial_sword.set_weight(1.5)
itm_tutorial_sword.set_abundance(100)
itm_tutorial_sword.set_hit_points(18432)
itm_tutorial_sword.set_speed_rating(100)
itm_tutorial_sword.set_weapon_length(102)
itm_tutorial_sword.set_thrust_damage(15, 1)
itm_tutorial_sword.set_swing_damage(18, 0)


itm_tutorial_axe = Item("itm_tutorial_axe", "Axe")
itm_tutorial_axe.add_mesh(ItemMesh("iron_ax"))
itm_tutorial_axe.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_tutorial_axe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tutorial_axe.add_flag(ItemFlag.IS_TWO_HANDED)
itm_tutorial_axe.add_flag(ItemFlag.IS_PRIMARY)
itm_tutorial_axe.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_tutorial_axe.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_tutorial_axe.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_tutorial_axe.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_tutorial_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_tutorial_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_tutorial_axe.add_capability(ItemCapability.CARRY_AXE_BACK)
itm_tutorial_axe.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_tutorial_axe.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_tutorial_axe.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_tutorial_axe.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_tutorial_axe.add_capability(ItemCapability.FORCE_64_BITS)
itm_tutorial_axe.add_modifier(IModBit.RUSTY)
itm_tutorial_axe.add_modifier(IModBit.CHIPPED)
itm_tutorial_axe.add_modifier(IModBit.HEAVY)
itm_tutorial_axe.set_weight(4.0)
itm_tutorial_axe.set_abundance(100)
itm_tutorial_axe.set_hit_points(19456)
itm_tutorial_axe.set_speed_rating(91)
itm_tutorial_axe.set_weapon_length(108)
itm_tutorial_axe.set_thrust_damage(0, 1)
itm_tutorial_axe.set_swing_damage(19, 0)


itm_tutorial_dagger = Item("itm_tutorial_dagger", "Dagger")
itm_tutorial_dagger.add_mesh(ItemMesh("practice_dagger"))
itm_tutorial_dagger.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_tutorial_dagger.add_flag(ItemFlag.IS_PRIMARY)
itm_tutorial_dagger.add_flag(ItemFlag.IS_SECONDARY)
itm_tutorial_dagger.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_tutorial_dagger.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_tutorial_dagger.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_tutorial_dagger.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_tutorial_dagger.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_tutorial_dagger.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_tutorial_dagger.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_tutorial_dagger.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_tutorial_dagger.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_tutorial_dagger.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_tutorial_dagger.add_capability(ItemCapability.FORCE_64_BITS)
itm_tutorial_dagger.set_price(3)
itm_tutorial_dagger.set_weight(1.5)
itm_tutorial_dagger.set_abundance(100)
itm_tutorial_dagger.set_hit_points(16384)
itm_tutorial_dagger.set_speed_rating(103)
itm_tutorial_dagger.set_weapon_length(40)
itm_tutorial_dagger.set_thrust_damage(10, 2)
itm_tutorial_dagger.set_swing_damage(16, 2)


itm_horse_meat = Item("itm_horse_meat", "Horse_Meat")
itm_horse_meat.add_mesh(ItemMesh("raw_meat"))
itm_horse_meat.add_flag(ItemType.GOODS)
itm_horse_meat.add_flag(ItemFlag.IS_FOOD)
itm_horse_meat.add_flag(ItemFlag.IS_CONSUMABLE)
itm_horse_meat.set_price(12)
itm_horse_meat.set_weight(40.0)
itm_horse_meat.set_abundance(100)
itm_horse_meat.set_head_armor(30)
itm_horse_meat.set_max_ammo(40)


itm_practice_sword = Item("itm_practice_sword", "Practice_Sword")
itm_practice_sword.add_mesh(ItemMesh("practice_sword"))
itm_practice_sword.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_practice_sword.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
itm_practice_sword.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_practice_sword.add_flag(ItemFlag.IS_PRIMARY)
itm_practice_sword.add_flag(ItemFlag.IS_SECONDARY)
itm_practice_sword.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_practice_sword.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_practice_sword.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_practice_sword.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_practice_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_practice_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_practice_sword.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_practice_sword.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_practice_sword.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_practice_sword.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_practice_sword.add_capability(ItemCapability.FORCE_64_BITS)
itm_practice_sword.set_price(3)
itm_practice_sword.set_weight(1.5)
itm_practice_sword.set_abundance(100)
itm_practice_sword.set_hit_points(22528)
itm_practice_sword.set_speed_rating(103)
itm_practice_sword.set_weapon_length(90)
itm_practice_sword.set_thrust_damage(20, 2)
itm_practice_sword.set_swing_damage(22, 2)


itm_heavy_practice_sword = Item("itm_heavy_practice_sword", "Heavy_Practice_Sword")
itm_heavy_practice_sword.add_mesh(ItemMesh("heavy_practicesword"))
itm_heavy_practice_sword.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_heavy_practice_sword.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
itm_heavy_practice_sword.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_heavy_practice_sword.add_flag(ItemFlag.IS_TWO_HANDED)
itm_heavy_practice_sword.add_flag(ItemFlag.IS_PRIMARY)
itm_heavy_practice_sword.add_capability(ItemCapability.TWOHANDED_THRUST)
itm_heavy_practice_sword.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_heavy_practice_sword.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_heavy_practice_sword.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_heavy_practice_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_heavy_practice_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_heavy_practice_sword.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_heavy_practice_sword.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_heavy_practice_sword.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_heavy_practice_sword.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_heavy_practice_sword.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_heavy_practice_sword.add_capability(ItemCapability.FORCE_64_BITS)
itm_heavy_practice_sword.set_price(21)
itm_heavy_practice_sword.set_weight(6.25)
itm_heavy_practice_sword.set_abundance(100)
itm_heavy_practice_sword.set_hit_points(30720)
itm_heavy_practice_sword.set_speed_rating(94)
itm_heavy_practice_sword.set_weapon_length(128)
itm_heavy_practice_sword.set_thrust_damage(24, 2)
itm_heavy_practice_sword.set_swing_damage(30, 2)


itm_practice_dagger = Item("itm_practice_dagger", "Practice_Dagger")
itm_practice_dagger.add_mesh(ItemMesh("practice_dagger"))
itm_practice_dagger.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_practice_dagger.add_flag(ItemFlag.NO_PARRY)
itm_practice_dagger.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
itm_practice_dagger.add_flag(ItemFlag.IS_PRIMARY)
itm_practice_dagger.add_flag(ItemFlag.IS_SECONDARY)
itm_practice_dagger.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_practice_dagger.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_practice_dagger.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_practice_dagger.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_practice_dagger.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_practice_dagger.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_practice_dagger.add_capability(ItemCapability.CARRY_DAGGER_FRONT_LEFT)
itm_practice_dagger.add_capability(ItemCapability.FORCE_64_BITS)
itm_practice_dagger.set_price(2)
itm_practice_dagger.set_weight(0.5)
itm_practice_dagger.set_abundance(100)
itm_practice_dagger.set_hit_points(16384)
itm_practice_dagger.set_speed_rating(110)
itm_practice_dagger.set_weapon_length(47)
itm_practice_dagger.set_thrust_damage(14, 2)
itm_practice_dagger.set_swing_damage(16, 2)


itm_practice_axe = Item("itm_practice_axe", "Practice_Axe")
itm_practice_axe.add_mesh(ItemMesh("hatchet"))
itm_practice_axe.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_practice_axe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_practice_axe.add_flag(ItemFlag.IS_PRIMARY)
itm_practice_axe.add_flag(ItemFlag.IS_SECONDARY)
itm_practice_axe.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_practice_axe.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_practice_axe.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_practice_axe.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_practice_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_practice_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_practice_axe.add_capability(ItemCapability.CARRY_AXE_LEFT_HIP)
itm_practice_axe.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_practice_axe.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_practice_axe.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_practice_axe.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_practice_axe.add_capability(ItemCapability.FORCE_64_BITS)
itm_practice_axe.set_price(24)
itm_practice_axe.add_modifier(IModBit.RUSTY)
itm_practice_axe.add_modifier(IModBit.CHIPPED)
itm_practice_axe.add_modifier(IModBit.HEAVY)
itm_practice_axe.set_weight(2.0)
itm_practice_axe.set_abundance(100)
itm_practice_axe.set_hit_points(24576)
itm_practice_axe.set_speed_rating(95)
itm_practice_axe.set_weapon_length(75)
itm_practice_axe.set_thrust_damage(0, 1)
itm_practice_axe.set_swing_damage(24, 2)


itm_arena_axe = Item("itm_arena_axe", "Axe")
itm_arena_axe.add_mesh(ItemMesh("arena_axe"))
itm_arena_axe.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_arena_axe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_arena_axe.add_flag(ItemFlag.IS_PRIMARY)
itm_arena_axe.add_flag(ItemFlag.IS_SECONDARY)
itm_arena_axe.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_arena_axe.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_arena_axe.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_arena_axe.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_arena_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_arena_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_arena_axe.add_capability(ItemCapability.CARRY_AXE_LEFT_HIP)
itm_arena_axe.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_arena_axe.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_arena_axe.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_arena_axe.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_arena_axe.add_capability(ItemCapability.FORCE_64_BITS)
itm_arena_axe.set_price(137)
itm_arena_axe.add_modifier(IModBit.RUSTY)
itm_arena_axe.add_modifier(IModBit.CHIPPED)
itm_arena_axe.add_modifier(IModBit.HEAVY)
itm_arena_axe.set_weight(1.5)
itm_arena_axe.set_abundance(100)
itm_arena_axe.set_hit_points(24576)
itm_arena_axe.set_speed_rating(100)
itm_arena_axe.set_weapon_length(69)
itm_arena_axe.set_thrust_damage(0, 1)
itm_arena_axe.set_swing_damage(24, 2)


itm_arena_sword = Item("itm_arena_sword", "Sword")
itm_arena_sword.add_mesh(ItemMesh("arena_sword_one_handed"))
itm_arena_sword.add_mesh(ItemMesh("sword_medieval_b_scabbard", ItemMesh.ixmesh_carry))
itm_arena_sword.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_arena_sword.add_flag(ItemFlag.IS_PRIMARY)
itm_arena_sword.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_arena_sword.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_arena_sword.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_arena_sword.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_arena_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_arena_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_arena_sword.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_arena_sword.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_arena_sword.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_arena_sword.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_arena_sword.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_arena_sword.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_arena_sword.add_capability(ItemCapability.FORCE_64_BITS)
itm_arena_sword.set_price(243)
itm_arena_sword.add_modifier(IModBit.RUSTY)
itm_arena_sword.add_modifier(IModBit.CHIPPED)
itm_arena_sword.add_modifier(IModBit.BALANCED)
itm_arena_sword.add_modifier(IModBit.TEMPERED)
itm_arena_sword.add_modifier(IModBit.MASTERWORK)
itm_arena_sword.set_weight(1.5)
itm_arena_sword.set_abundance(100)
itm_arena_sword.set_hit_points(22528)
itm_arena_sword.set_speed_rating(99)
itm_arena_sword.set_weapon_length(95)
itm_arena_sword.set_thrust_damage(20, 2)
itm_arena_sword.set_swing_damage(22, 2)


itm_arena_sword_two_handed = Item("itm_arena_sword_two_handed", "Two_Handed_Sword")
itm_arena_sword_two_handed.add_mesh(ItemMesh("arena_sword_two_handed"))
itm_arena_sword_two_handed.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_arena_sword_two_handed.add_flag(ItemFlag.IS_TWO_HANDED)
itm_arena_sword_two_handed.add_flag(ItemFlag.IS_PRIMARY)
itm_arena_sword_two_handed.add_capability(ItemCapability.TWOHANDED_THRUST)
itm_arena_sword_two_handed.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_arena_sword_two_handed.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_arena_sword_two_handed.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_arena_sword_two_handed.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_arena_sword_two_handed.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_arena_sword_two_handed.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_arena_sword_two_handed.add_capability(ItemCapability.CARRY_SWORD_BACK)
itm_arena_sword_two_handed.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_arena_sword_two_handed.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_arena_sword_two_handed.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_arena_sword_two_handed.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_arena_sword_two_handed.add_capability(ItemCapability.FORCE_64_BITS)
itm_arena_sword_two_handed.set_price(670)
itm_arena_sword_two_handed.add_modifier(IModBit.RUSTY)
itm_arena_sword_two_handed.add_modifier(IModBit.CHIPPED)
itm_arena_sword_two_handed.add_modifier(IModBit.BALANCED)
itm_arena_sword_two_handed.add_modifier(IModBit.TEMPERED)
itm_arena_sword_two_handed.add_modifier(IModBit.MASTERWORK)
itm_arena_sword_two_handed.set_weight(2.75)
itm_arena_sword_two_handed.set_abundance(100)
itm_arena_sword_two_handed.set_hit_points(30720)
itm_arena_sword_two_handed.set_speed_rating(93)
itm_arena_sword_two_handed.set_weapon_length(110)
itm_arena_sword_two_handed.set_thrust_damage(24, 2)
itm_arena_sword_two_handed.set_swing_damage(30, 2)


itm_arena_lance = Item("itm_arena_lance", "Lance")
itm_arena_lance.add_mesh(ItemMesh("arena_lance"))
itm_arena_lance.add_flag(ItemType.POLEARM)
itm_arena_lance.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_arena_lance.add_flag(ItemFlag.IS_PRIMARY)
itm_arena_lance.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
itm_arena_lance.add_flag(ItemFlag.FITS_TO_HEAD)
itm_arena_lance.add_flag(ItemFlag.OFFSET_LANCE)
itm_arena_lance.add_flag(ItemFlag.COVERS_HEAD)
itm_arena_lance.add_flag(ItemFlag.IS_COUCHABLE)
itm_arena_lance.add_capability(ItemCapability.POLEARM_THRUST)
itm_arena_lance.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_arena_lance.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_arena_lance.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_arena_lance.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_arena_lance.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_arena_lance.add_capability(ItemCapability.CARRY_SPEAR)
itm_arena_lance.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_arena_lance.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_arena_lance.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_arena_lance.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_arena_lance.set_price(90)
itm_arena_lance.add_modifier(IModBit.CRACKED)
itm_arena_lance.add_modifier(IModBit.BENT)
itm_arena_lance.add_modifier(IModBit.BALANCED)
itm_arena_lance.set_weight(2.5)
itm_arena_lance.set_abundance(100)
itm_arena_lance.set_hit_points(20480)
itm_arena_lance.set_speed_rating(96)
itm_arena_lance.set_weapon_length(150)
itm_arena_lance.set_thrust_damage(25, 2)
itm_arena_lance.set_swing_damage(20, 2)


itm_practice_staff = Item("itm_practice_staff", "Practice_Staff")
itm_practice_staff.add_mesh(ItemMesh("wooden_staff"))
itm_practice_staff.add_flag(ItemType.POLEARM)
itm_practice_staff.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
itm_practice_staff.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_practice_staff.add_flag(ItemFlag.IS_PRIMARY)
itm_practice_staff.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
itm_practice_staff.add_flag(ItemFlag.FITS_TO_HEAD)
itm_practice_staff.add_flag(ItemFlag.OFFSET_LANCE)
itm_practice_staff.add_capability(ItemCapability.POLEARM_THRUST)
itm_practice_staff.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_practice_staff.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_practice_staff.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_practice_staff.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_practice_staff.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_practice_staff.add_capability(ItemCapability.CARRY_SWORD_BACK)
itm_practice_staff.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_practice_staff.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_practice_staff.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_practice_staff.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_practice_staff.set_price(9)
itm_practice_staff.set_weight(2.5)
itm_practice_staff.set_abundance(100)
itm_practice_staff.set_hit_points(18432)
itm_practice_staff.set_speed_rating(103)
itm_practice_staff.set_weapon_length(118)
itm_practice_staff.set_thrust_damage(18, 2)
itm_practice_staff.set_swing_damage(18, 2)


itm_practice_lance = Item("itm_practice_lance", "Practice_Lance")
itm_practice_lance.add_mesh(ItemMesh("joust_of_peace"))
itm_practice_lance.add_flag(ItemType.POLEARM)
itm_practice_lance.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
itm_practice_lance.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_practice_lance.add_flag(ItemFlag.IS_PRIMARY)
itm_practice_lance.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
itm_practice_lance.add_flag(ItemFlag.COVERS_HEAD)
itm_practice_lance.add_flag(ItemFlag.IS_COUCHABLE)
itm_practice_lance.add_capability(ItemCapability.POLEARM_THRUST)
itm_practice_lance.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_practice_lance.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_practice_lance.set_price(18)
itm_practice_lance.set_weight(4.25)
itm_practice_lance.set_abundance(100)
itm_practice_lance.set_speed_rating(58)
itm_practice_lance.set_weapon_length(240)
itm_practice_lance.set_thrust_damage(15, 2)
itm_practice_lance.set_swing_damage(0, 2)


itm_practice_shield = Item("itm_practice_shield", "Practice_Shield")
itm_practice_shield.add_mesh(ItemMesh("shield_round_a"))
itm_practice_shield.add_flag(ItemType.SHIELD)
itm_practice_shield.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_practice_shield.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
itm_practice_shield.set_price(20)
itm_practice_shield.set_weight(3.5)
itm_practice_shield.set_abundance(100)
itm_practice_shield.set_body_armor(1)
itm_practice_shield.set_hit_points(200)
itm_practice_shield.set_speed_rating(100)
itm_practice_shield.set_weapon_length(50)


itm_practice_bow = Item("itm_practice_bow", "Practice_Bow")
itm_practice_bow.add_mesh(ItemMesh("hunting_bow"))
itm_practice_bow.add_mesh(ItemMesh("hunting_bow_carry", ItemMesh.ixmesh_carry))
itm_practice_bow.add_flag(ItemType.BOW)
itm_practice_bow.add_flag(ItemFlag.IS_TWO_HANDED)
itm_practice_bow.add_flag(ItemFlag.IS_PRIMARY)
itm_practice_bow.add_capability(ItemCapability.SHOOT_BOW)
itm_practice_bow.add_capability(ItemCapability.CARRY_BOW_BACK)
itm_practice_bow.add_modifier(IModBit.CRACKED)
itm_practice_bow.add_modifier(IModBit.BENT)
itm_practice_bow.add_modifier(IModBit.MASTERWORK)
itm_practice_bow.add_modifier(IModBit.STRONG)
itm_practice_bow.set_weight(1.5)
itm_practice_bow.set_abundance(100)
itm_practice_bow.set_speed_rating(90)
itm_practice_bow.set_missile_speed(40)
itm_practice_bow.set_thrust_damage(21, 2)


itm_practice_crossbow = Item("itm_practice_crossbow", "Practice_Crossbow")
itm_practice_crossbow.add_mesh(ItemMesh("crossbow_a"))
itm_practice_crossbow.add_flag(ItemType.CROSSBOW)
itm_practice_crossbow.add_flag(ItemFlag.IS_TWO_HANDED)
itm_practice_crossbow.add_flag(ItemFlag.IS_PRIMARY)
itm_practice_crossbow.add_capability(ItemCapability.SHOOT_CROSSBOW)
itm_practice_crossbow.add_capability(ItemCapability.CARRY_CROSSBOW_BACK)
itm_practice_crossbow.add_modifier(IModBit.CRACKED)
itm_practice_crossbow.add_modifier(IModBit.BENT)
itm_practice_crossbow.add_modifier(IModBit.MASTERWORK)
itm_practice_crossbow.set_weight(3.0)
itm_practice_crossbow.set_abundance(100)
itm_practice_crossbow.set_speed_rating(42)
itm_practice_crossbow.set_missile_speed(68)
itm_practice_crossbow.set_max_ammo(1)
itm_practice_crossbow.set_thrust_damage(32, 2)


itm_practice_javelin = Item("itm_practice_javelin", "Practice_Javelins")
itm_practice_javelin.add_mesh(ItemMesh("javelin"))
itm_practice_javelin.add_mesh(ItemMesh("javelins_quiver_new", ItemMesh.ixmesh_carry))
itm_practice_javelin.add_flag(ItemType.THROWN)
itm_practice_javelin.add_flag(ItemFlag.IS_PRIMARY)
itm_practice_javelin.add_flag(ItemFlag.IS_CIVILIAN)
itm_practice_javelin.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_practice_javelin.add_capability(ItemCapability.THROW_JAVELIN)
itm_practice_javelin.add_capability(ItemCapability.CARRY_QUIVER_BACK)
itm_practice_javelin.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_practice_javelin.add_modifier(IModBit.BENT)
itm_practice_javelin.add_modifier(IModBit.BALANCED)
itm_practice_javelin.add_modifier(IModBit.HEAVY)
itm_practice_javelin.add_modifier(IModBit.LARGE_BAG)
itm_practice_javelin.set_weight(5.0)
itm_practice_javelin.set_abundance(100)
itm_practice_javelin.set_speed_rating(91)
itm_practice_javelin.set_missile_speed(28)
itm_practice_javelin.set_weapon_length(75)
itm_practice_javelin.set_max_ammo(50)
itm_practice_javelin.set_thrust_damage(27, 2)


itm_practice_javelin_melee = Item("itm_practice_javelin_melee", "practice_javelin_melee")
itm_practice_javelin_melee.add_mesh(ItemMesh("javelin"))
itm_practice_javelin_melee.add_flag(ItemType.POLEARM)
itm_practice_javelin_melee.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_practice_javelin_melee.add_flag(ItemFlag.IS_PRIMARY)
itm_practice_javelin_melee.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
itm_practice_javelin_melee.add_capability(ItemCapability.POLEARM_THRUST)
itm_practice_javelin_melee.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_practice_javelin_melee.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_practice_javelin_melee.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_practice_javelin_melee.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_practice_javelin_melee.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_practice_javelin_melee.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_practice_javelin_melee.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_practice_javelin_melee.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_practice_javelin_melee.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_practice_javelin_melee.add_modifier(IModBit.CRACKED)
itm_practice_javelin_melee.add_modifier(IModBit.BENT)
itm_practice_javelin_melee.add_modifier(IModBit.BALANCED)
itm_practice_javelin_melee.set_weight(1.0)
itm_practice_javelin_melee.set_abundance(100)
itm_practice_javelin_melee.set_hit_points(12288)
itm_practice_javelin_melee.set_speed_rating(91)
itm_practice_javelin_melee.set_weapon_length(75)
itm_practice_javelin_melee.set_thrust_damage(14, 2)
itm_practice_javelin_melee.set_swing_damage(12, 2)


itm_practice_throwing_daggers = Item("itm_practice_throwing_daggers", "Throwing_Daggers")
itm_practice_throwing_daggers.add_mesh(ItemMesh("throwing_dagger"))
itm_practice_throwing_daggers.add_flag(ItemType.THROWN)
itm_practice_throwing_daggers.add_flag(ItemFlag.IS_PRIMARY)
itm_practice_throwing_daggers.add_capability(ItemCapability.THROW_KNIFE)
itm_practice_throwing_daggers.add_modifier(IModBit.BENT)
itm_practice_throwing_daggers.add_modifier(IModBit.BALANCED)
itm_practice_throwing_daggers.add_modifier(IModBit.HEAVY)
itm_practice_throwing_daggers.add_modifier(IModBit.LARGE_BAG)
itm_practice_throwing_daggers.set_weight(3.5)
itm_practice_throwing_daggers.set_abundance(100)
itm_practice_throwing_daggers.set_speed_rating(102)
itm_practice_throwing_daggers.set_missile_speed(25)
itm_practice_throwing_daggers.set_max_ammo(10)
itm_practice_throwing_daggers.set_thrust_damage(16, 2)


itm_practice_throwing_daggers_100_amount = Item("itm_practice_throwing_daggers_100_amount", "Throwing_Daggers")
itm_practice_throwing_daggers_100_amount.add_mesh(ItemMesh("throwing_dagger"))
itm_practice_throwing_daggers_100_amount.add_flag(ItemType.THROWN)
itm_practice_throwing_daggers_100_amount.add_flag(ItemFlag.IS_PRIMARY)
itm_practice_throwing_daggers_100_amount.add_capability(ItemCapability.THROW_KNIFE)
itm_practice_throwing_daggers_100_amount.add_modifier(IModBit.BENT)
itm_practice_throwing_daggers_100_amount.add_modifier(IModBit.BALANCED)
itm_practice_throwing_daggers_100_amount.add_modifier(IModBit.HEAVY)
itm_practice_throwing_daggers_100_amount.add_modifier(IModBit.LARGE_BAG)
itm_practice_throwing_daggers_100_amount.set_weight(3.5)
itm_practice_throwing_daggers_100_amount.set_abundance(100)
itm_practice_throwing_daggers_100_amount.set_speed_rating(102)
itm_practice_throwing_daggers_100_amount.set_missile_speed(25)
itm_practice_throwing_daggers_100_amount.set_max_ammo(100)
itm_practice_throwing_daggers_100_amount.set_thrust_damage(16, 2)


itm_practice_horse = Item("itm_practice_horse", "Practice_Horse")
itm_practice_horse.add_mesh(ItemMesh("saddle_horse"))
itm_practice_horse.add_flag(ItemType.HORSE)
itm_practice_horse.set_price(37)
itm_practice_horse.set_abundance(100)
itm_practice_horse.set_body_armor(10)
itm_practice_horse.set_speed_rating(37)
itm_practice_horse.set_missile_speed(40)
itm_practice_horse.set_thrust_damage(14, 0)


itm_practice_arrows = Item("itm_practice_arrows", "Practice_Arrows")
itm_practice_arrows.add_mesh(ItemMesh("arena_arrow"))
itm_practice_arrows.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
itm_practice_arrows.add_mesh(ItemMesh("quiver", ItemMesh.ixmesh_carry))
itm_practice_arrows.add_flag(ItemType.ARROWS)
itm_practice_arrows.add_capability(ItemCapability.CARRY_QUIVER_BACK)
itm_practice_arrows.add_modifier(IModBit.BENT)
itm_practice_arrows.add_modifier(IModBit.LARGE_BAG)
itm_practice_arrows.set_weight(1.5)
itm_practice_arrows.set_abundance(100)
itm_practice_arrows.set_weapon_length(95)
itm_practice_arrows.set_max_ammo(80)


itm_practice_bolts = Item("itm_practice_bolts", "Practice_Bolts")
itm_practice_bolts.add_mesh(ItemMesh("bolt"))
itm_practice_bolts.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
itm_practice_bolts.add_mesh(ItemMesh("bolt_bag", ItemMesh.ixmesh_carry))
meshx = ItemMesh("bolt_bag_b", ItemMesh.ixmesh_carry)
meshx.add_modifier(IModBit.LARGE_BAG)
itm_practice_bolts.add_mesh(meshx)
itm_practice_bolts.add_flag(ItemType.BOLTS)
itm_practice_bolts.add_capability(ItemCapability.CARRY_QUIVER_RIGHT_VERTICAL)
itm_practice_bolts.add_modifier(IModBit.BENT)
itm_practice_bolts.add_modifier(IModBit.LARGE_BAG)
itm_practice_bolts.set_weight(2.25)
itm_practice_bolts.set_abundance(100)
itm_practice_bolts.set_weapon_length(55)
itm_practice_bolts.set_max_ammo(49)


itm_practice_arrows_10_amount = Item("itm_practice_arrows_10_amount", "Practice_Arrows")
itm_practice_arrows_10_amount.add_mesh(ItemMesh("arrow"))
itm_practice_arrows_10_amount.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
itm_practice_arrows_10_amount.add_mesh(ItemMesh("quiver", ItemMesh.ixmesh_carry))
itm_practice_arrows_10_amount.add_flag(ItemType.ARROWS)
itm_practice_arrows_10_amount.add_capability(ItemCapability.CARRY_QUIVER_BACK)
itm_practice_arrows_10_amount.add_modifier(IModBit.BENT)
itm_practice_arrows_10_amount.add_modifier(IModBit.LARGE_BAG)
itm_practice_arrows_10_amount.set_weight(1.5)
itm_practice_arrows_10_amount.set_abundance(100)
itm_practice_arrows_10_amount.set_weapon_length(95)
itm_practice_arrows_10_amount.set_max_ammo(10)


itm_practice_arrows_100_amount = Item("itm_practice_arrows_100_amount", "Practice_Arrows")
itm_practice_arrows_100_amount.add_mesh(ItemMesh("arrow"))
itm_practice_arrows_100_amount.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
itm_practice_arrows_100_amount.add_mesh(ItemMesh("quiver", ItemMesh.ixmesh_carry))
itm_practice_arrows_100_amount.add_flag(ItemType.ARROWS)
itm_practice_arrows_100_amount.add_capability(ItemCapability.CARRY_QUIVER_BACK)
itm_practice_arrows_100_amount.add_modifier(IModBit.BENT)
itm_practice_arrows_100_amount.add_modifier(IModBit.LARGE_BAG)
itm_practice_arrows_100_amount.set_weight(1.5)
itm_practice_arrows_100_amount.set_abundance(100)
itm_practice_arrows_100_amount.set_weapon_length(95)
itm_practice_arrows_100_amount.set_max_ammo(100)


itm_practice_bolts_9_amount = Item("itm_practice_bolts_9_amount", "Practice_Bolts")
itm_practice_bolts_9_amount.add_mesh(ItemMesh("bolt"))
itm_practice_bolts_9_amount.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
itm_practice_bolts_9_amount.add_mesh(ItemMesh("bolt_bag", ItemMesh.ixmesh_carry))
meshx = ItemMesh("bolt_bag_b", ItemMesh.ixmesh_carry)
meshx.add_modifier(IModBit.LARGE_BAG)
itm_practice_bolts_9_amount.add_mesh(meshx)
itm_practice_bolts_9_amount.add_flag(ItemType.BOLTS)
itm_practice_bolts_9_amount.add_capability(ItemCapability.CARRY_QUIVER_RIGHT_VERTICAL)
itm_practice_bolts_9_amount.add_modifier(IModBit.BENT)
itm_practice_bolts_9_amount.add_modifier(IModBit.LARGE_BAG)
itm_practice_bolts_9_amount.set_weight(2.25)
itm_practice_bolts_9_amount.set_abundance(100)
itm_practice_bolts_9_amount.set_weapon_length(55)
itm_practice_bolts_9_amount.set_max_ammo(9)


itm_practice_boots = Item("itm_practice_boots", "Practice_Boots")
itm_practice_boots.add_mesh(ItemMesh("boot_nomad_a"))
itm_practice_boots.add_flag(ItemType.FOOT_ARMOR)
itm_practice_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_practice_boots.add_flag(ItemFlag.IS_CIVILIAN)
itm_practice_boots.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_practice_boots.set_price(11)
itm_practice_boots.add_modifier(IModBit.TETTERED)
itm_practice_boots.add_modifier(IModBit.RAGGED)
itm_practice_boots.add_modifier(IModBit.STURDY)
itm_practice_boots.add_modifier(IModBit.THICK)
itm_practice_boots.add_modifier(IModBit.HARDENED)
itm_practice_boots.set_weight(1.0)
itm_practice_boots.set_abundance(100)
itm_practice_boots.set_leg_armor(10)


itm_red_tourney_armor = Item("itm_red_tourney_armor", "Red_Tourney_Armor")
itm_red_tourney_armor.add_mesh(ItemMesh("tourn_armor_a"))
itm_red_tourney_armor.add_flag(ItemType.BODY_ARMOR)
itm_red_tourney_armor.add_flag(ItemFlag.COVERS_LEGS)
itm_red_tourney_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_red_tourney_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_red_tourney_armor.set_price(152)
itm_red_tourney_armor.set_weight(15.0)
itm_red_tourney_armor.set_abundance(100)
itm_red_tourney_armor.set_body_armor(20)
itm_red_tourney_armor.set_leg_armor(6)


itm_blue_tourney_armor = Item("itm_blue_tourney_armor", "Blue_Tourney_Armor")
itm_blue_tourney_armor.add_mesh(ItemMesh("mail_shirt"))
itm_blue_tourney_armor.add_flag(ItemType.BODY_ARMOR)
itm_blue_tourney_armor.add_flag(ItemFlag.COVERS_LEGS)
itm_blue_tourney_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_blue_tourney_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_blue_tourney_armor.set_price(152)
itm_blue_tourney_armor.set_weight(15.0)
itm_blue_tourney_armor.set_abundance(100)
itm_blue_tourney_armor.set_body_armor(20)
itm_blue_tourney_armor.set_leg_armor(6)


itm_green_tourney_armor = Item("itm_green_tourney_armor", "Green_Tourney_Armor")
itm_green_tourney_armor.add_mesh(ItemMesh("leather_vest"))
itm_green_tourney_armor.add_flag(ItemType.BODY_ARMOR)
itm_green_tourney_armor.add_flag(ItemFlag.COVERS_LEGS)
itm_green_tourney_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_green_tourney_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_green_tourney_armor.set_price(152)
itm_green_tourney_armor.set_weight(15.0)
itm_green_tourney_armor.set_abundance(100)
itm_green_tourney_armor.set_body_armor(20)
itm_green_tourney_armor.set_leg_armor(6)


itm_gold_tourney_armor = Item("itm_gold_tourney_armor", "Gold_Tourney_Armor")
itm_gold_tourney_armor.add_mesh(ItemMesh("padded_armor"))
itm_gold_tourney_armor.add_flag(ItemType.BODY_ARMOR)
itm_gold_tourney_armor.add_flag(ItemFlag.COVERS_LEGS)
itm_gold_tourney_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_gold_tourney_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_gold_tourney_armor.set_price(152)
itm_gold_tourney_armor.set_weight(15.0)
itm_gold_tourney_armor.set_abundance(100)
itm_gold_tourney_armor.set_body_armor(20)
itm_gold_tourney_armor.set_leg_armor(6)


itm_red_tourney_helmet = Item("itm_red_tourney_helmet", "Red_Tourney_Helmet")
itm_red_tourney_helmet.add_mesh(ItemMesh("flattop_helmet"))
itm_red_tourney_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_red_tourney_helmet.set_price(126)
itm_red_tourney_helmet.set_weight(2.0)
itm_red_tourney_helmet.set_abundance(100)
itm_red_tourney_helmet.set_head_armor(16)


itm_blue_tourney_helmet = Item("itm_blue_tourney_helmet", "Blue_Tourney_Helmet")
itm_blue_tourney_helmet.add_mesh(ItemMesh("segmented_helm"))
itm_blue_tourney_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_blue_tourney_helmet.set_price(126)
itm_blue_tourney_helmet.set_weight(2.0)
itm_blue_tourney_helmet.set_abundance(100)
itm_blue_tourney_helmet.set_head_armor(16)


itm_green_tourney_helmet = Item("itm_green_tourney_helmet", "Green_Tourney_Helmet")
itm_green_tourney_helmet.add_mesh(ItemMesh("hood_c"))
itm_green_tourney_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_green_tourney_helmet.set_price(126)
itm_green_tourney_helmet.set_weight(2.0)
itm_green_tourney_helmet.set_abundance(100)
itm_green_tourney_helmet.set_head_armor(16)


itm_gold_tourney_helmet = Item("itm_gold_tourney_helmet", "Gold_Tourney_Helmet")
itm_gold_tourney_helmet.add_mesh(ItemMesh("hood_a"))
itm_gold_tourney_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_gold_tourney_helmet.set_price(126)
itm_gold_tourney_helmet.set_weight(2.0)
itm_gold_tourney_helmet.set_abundance(100)
itm_gold_tourney_helmet.set_head_armor(16)


itm_arena_shield_red = Item("itm_arena_shield_red", "Shield")
itm_arena_shield_red.add_mesh(ItemMesh("arena_shield_red"))
itm_arena_shield_red.add_flag(ItemType.SHIELD)
itm_arena_shield_red.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_arena_shield_red.add_capability(ItemCapability.CARRY_KITE_SHIELD)
itm_arena_shield_red.set_price(42)
itm_arena_shield_red.add_modifier(IModBit.CRACKED)
itm_arena_shield_red.add_modifier(IModBit.BATTERED)
itm_arena_shield_red.add_modifier(IModBit.THICK)
itm_arena_shield_red.add_modifier(IModBit.REINFORCED)
itm_arena_shield_red.set_weight(2.0)
itm_arena_shield_red.set_abundance(100)
itm_arena_shield_red.set_body_armor(1)
itm_arena_shield_red.set_hit_points(360)
itm_arena_shield_red.set_speed_rating(100)
itm_arena_shield_red.set_weapon_length(60)


itm_arena_shield_blue = Item("itm_arena_shield_blue", "Shield")
itm_arena_shield_blue.add_mesh(ItemMesh("arena_shield_blue"))
itm_arena_shield_blue.add_flag(ItemType.SHIELD)
itm_arena_shield_blue.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_arena_shield_blue.add_capability(ItemCapability.CARRY_KITE_SHIELD)
itm_arena_shield_blue.set_price(42)
itm_arena_shield_blue.add_modifier(IModBit.CRACKED)
itm_arena_shield_blue.add_modifier(IModBit.BATTERED)
itm_arena_shield_blue.add_modifier(IModBit.THICK)
itm_arena_shield_blue.add_modifier(IModBit.REINFORCED)
itm_arena_shield_blue.set_weight(2.0)
itm_arena_shield_blue.set_abundance(100)
itm_arena_shield_blue.set_body_armor(1)
itm_arena_shield_blue.set_hit_points(360)
itm_arena_shield_blue.set_speed_rating(100)
itm_arena_shield_blue.set_weapon_length(60)


itm_arena_shield_green = Item("itm_arena_shield_green", "Shield")
itm_arena_shield_green.add_mesh(ItemMesh("arena_shield_green"))
itm_arena_shield_green.add_flag(ItemType.SHIELD)
itm_arena_shield_green.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_arena_shield_green.add_capability(ItemCapability.CARRY_KITE_SHIELD)
itm_arena_shield_green.set_price(42)
itm_arena_shield_green.add_modifier(IModBit.CRACKED)
itm_arena_shield_green.add_modifier(IModBit.BATTERED)
itm_arena_shield_green.add_modifier(IModBit.THICK)
itm_arena_shield_green.add_modifier(IModBit.REINFORCED)
itm_arena_shield_green.set_weight(2.0)
itm_arena_shield_green.set_abundance(100)
itm_arena_shield_green.set_body_armor(1)
itm_arena_shield_green.set_hit_points(360)
itm_arena_shield_green.set_speed_rating(100)
itm_arena_shield_green.set_weapon_length(60)


itm_arena_shield_yellow = Item("itm_arena_shield_yellow", "Shield")
itm_arena_shield_yellow.add_mesh(ItemMesh("arena_shield_yellow"))
itm_arena_shield_yellow.add_flag(ItemType.SHIELD)
itm_arena_shield_yellow.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_arena_shield_yellow.add_capability(ItemCapability.CARRY_KITE_SHIELD)
itm_arena_shield_yellow.set_price(42)
itm_arena_shield_yellow.add_modifier(IModBit.CRACKED)
itm_arena_shield_yellow.add_modifier(IModBit.BATTERED)
itm_arena_shield_yellow.add_modifier(IModBit.THICK)
itm_arena_shield_yellow.add_modifier(IModBit.REINFORCED)
itm_arena_shield_yellow.set_weight(2.0)
itm_arena_shield_yellow.set_abundance(100)
itm_arena_shield_yellow.set_body_armor(1)
itm_arena_shield_yellow.set_hit_points(360)
itm_arena_shield_yellow.set_speed_rating(100)
itm_arena_shield_yellow.set_weapon_length(60)


itm_arena_armor_white = Item("itm_arena_armor_white", "Arena_Armor_White")
itm_arena_armor_white.add_mesh(ItemMesh("arena_armorW_new"))
itm_arena_armor_white.add_flag(ItemType.BODY_ARMOR)
itm_arena_armor_white.add_flag(ItemFlag.COVERS_LEGS)
itm_arena_armor_white.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_arena_armor_white.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_arena_armor_white.set_price(650)
itm_arena_armor_white.add_modifier(IModBit.RUSTY)
itm_arena_armor_white.add_modifier(IModBit.BATTERED)
itm_arena_armor_white.add_modifier(IModBit.CRUDE)
itm_arena_armor_white.add_modifier(IModBit.THICK)
itm_arena_armor_white.add_modifier(IModBit.REINFORCED)
itm_arena_armor_white.add_modifier(IModBit.LORDLY)
itm_arena_armor_white.set_weight(16.0)
itm_arena_armor_white.set_abundance(100)
itm_arena_armor_white.set_body_armor(29)
itm_arena_armor_white.set_leg_armor(13)


itm_arena_armor_red = Item("itm_arena_armor_red", "Arena_Armor_Red")
itm_arena_armor_red.add_mesh(ItemMesh("arena_armorR_new"))
itm_arena_armor_red.add_flag(ItemType.BODY_ARMOR)
itm_arena_armor_red.add_flag(ItemFlag.COVERS_LEGS)
itm_arena_armor_red.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_arena_armor_red.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_arena_armor_red.set_price(650)
itm_arena_armor_red.add_modifier(IModBit.RUSTY)
itm_arena_armor_red.add_modifier(IModBit.BATTERED)
itm_arena_armor_red.add_modifier(IModBit.CRUDE)
itm_arena_armor_red.add_modifier(IModBit.THICK)
itm_arena_armor_red.add_modifier(IModBit.REINFORCED)
itm_arena_armor_red.add_modifier(IModBit.LORDLY)
itm_arena_armor_red.set_weight(16.0)
itm_arena_armor_red.set_abundance(100)
itm_arena_armor_red.set_body_armor(29)
itm_arena_armor_red.set_leg_armor(13)


itm_arena_armor_blue = Item("itm_arena_armor_blue", "Arena_Armor_Blue")
itm_arena_armor_blue.add_mesh(ItemMesh("arena_armorB_new"))
itm_arena_armor_blue.add_flag(ItemType.BODY_ARMOR)
itm_arena_armor_blue.add_flag(ItemFlag.COVERS_LEGS)
itm_arena_armor_blue.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_arena_armor_blue.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_arena_armor_blue.set_price(650)
itm_arena_armor_blue.add_modifier(IModBit.RUSTY)
itm_arena_armor_blue.add_modifier(IModBit.BATTERED)
itm_arena_armor_blue.add_modifier(IModBit.CRUDE)
itm_arena_armor_blue.add_modifier(IModBit.THICK)
itm_arena_armor_blue.add_modifier(IModBit.REINFORCED)
itm_arena_armor_blue.add_modifier(IModBit.LORDLY)
itm_arena_armor_blue.set_weight(16.0)
itm_arena_armor_blue.set_abundance(100)
itm_arena_armor_blue.set_body_armor(29)
itm_arena_armor_blue.set_leg_armor(13)


itm_arena_armor_green = Item("itm_arena_armor_green", "Arena_Armor_Green")
itm_arena_armor_green.add_mesh(ItemMesh("arena_armorG_new"))
itm_arena_armor_green.add_flag(ItemType.BODY_ARMOR)
itm_arena_armor_green.add_flag(ItemFlag.COVERS_LEGS)
itm_arena_armor_green.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_arena_armor_green.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_arena_armor_green.set_price(650)
itm_arena_armor_green.add_modifier(IModBit.RUSTY)
itm_arena_armor_green.add_modifier(IModBit.BATTERED)
itm_arena_armor_green.add_modifier(IModBit.CRUDE)
itm_arena_armor_green.add_modifier(IModBit.THICK)
itm_arena_armor_green.add_modifier(IModBit.REINFORCED)
itm_arena_armor_green.add_modifier(IModBit.LORDLY)
itm_arena_armor_green.set_weight(16.0)
itm_arena_armor_green.set_abundance(100)
itm_arena_armor_green.set_body_armor(29)
itm_arena_armor_green.set_leg_armor(13)


itm_arena_armor_yellow = Item("itm_arena_armor_yellow", "Arena_Armor_Yellow")
itm_arena_armor_yellow.add_mesh(ItemMesh("arena_armorY_new"))
itm_arena_armor_yellow.add_flag(ItemType.BODY_ARMOR)
itm_arena_armor_yellow.add_flag(ItemFlag.COVERS_LEGS)
itm_arena_armor_yellow.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_arena_armor_yellow.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_arena_armor_yellow.set_price(650)
itm_arena_armor_yellow.add_modifier(IModBit.RUSTY)
itm_arena_armor_yellow.add_modifier(IModBit.BATTERED)
itm_arena_armor_yellow.add_modifier(IModBit.CRUDE)
itm_arena_armor_yellow.add_modifier(IModBit.THICK)
itm_arena_armor_yellow.add_modifier(IModBit.REINFORCED)
itm_arena_armor_yellow.add_modifier(IModBit.LORDLY)
itm_arena_armor_yellow.set_weight(16.0)
itm_arena_armor_yellow.set_abundance(100)
itm_arena_armor_yellow.set_body_armor(29)
itm_arena_armor_yellow.set_leg_armor(13)


itm_arena_tunic_white = Item("itm_arena_tunic_white", "Arena_Tunic_White_")
itm_arena_tunic_white.add_mesh(ItemMesh("arena_tunicW_new"))
itm_arena_tunic_white.add_flag(ItemType.BODY_ARMOR)
itm_arena_tunic_white.add_flag(ItemFlag.COVERS_LEGS)
itm_arena_tunic_white.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_arena_tunic_white.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_arena_tunic_white.set_price(47)
itm_arena_tunic_white.add_modifier(IModBit.TETTERED)
itm_arena_tunic_white.add_modifier(IModBit.RAGGED)
itm_arena_tunic_white.add_modifier(IModBit.STURDY)
itm_arena_tunic_white.add_modifier(IModBit.THICK)
itm_arena_tunic_white.add_modifier(IModBit.HARDENED)
itm_arena_tunic_white.set_weight(2.0)
itm_arena_tunic_white.set_abundance(100)
itm_arena_tunic_white.set_body_armor(16)
itm_arena_tunic_white.set_leg_armor(6)


itm_arena_tunic_red = Item("itm_arena_tunic_red", "Arena_Tunic_Red")
itm_arena_tunic_red.add_mesh(ItemMesh("arena_tunicR_new"))
itm_arena_tunic_red.add_flag(ItemType.BODY_ARMOR)
itm_arena_tunic_red.add_flag(ItemFlag.COVERS_LEGS)
itm_arena_tunic_red.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_arena_tunic_red.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_arena_tunic_red.set_price(27)
itm_arena_tunic_red.add_modifier(IModBit.TETTERED)
itm_arena_tunic_red.add_modifier(IModBit.RAGGED)
itm_arena_tunic_red.add_modifier(IModBit.STURDY)
itm_arena_tunic_red.add_modifier(IModBit.THICK)
itm_arena_tunic_red.add_modifier(IModBit.HARDENED)
itm_arena_tunic_red.set_weight(2.0)
itm_arena_tunic_red.set_abundance(100)
itm_arena_tunic_red.set_body_armor(16)
itm_arena_tunic_red.set_leg_armor(6)


itm_arena_tunic_blue = Item("itm_arena_tunic_blue", "Arena_Tunic_Blue")
itm_arena_tunic_blue.add_mesh(ItemMesh("arena_tunicB_new"))
itm_arena_tunic_blue.add_flag(ItemType.BODY_ARMOR)
itm_arena_tunic_blue.add_flag(ItemFlag.COVERS_LEGS)
itm_arena_tunic_blue.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_arena_tunic_blue.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_arena_tunic_blue.set_price(27)
itm_arena_tunic_blue.add_modifier(IModBit.TETTERED)
itm_arena_tunic_blue.add_modifier(IModBit.RAGGED)
itm_arena_tunic_blue.add_modifier(IModBit.STURDY)
itm_arena_tunic_blue.add_modifier(IModBit.THICK)
itm_arena_tunic_blue.add_modifier(IModBit.HARDENED)
itm_arena_tunic_blue.set_weight(2.0)
itm_arena_tunic_blue.set_abundance(100)
itm_arena_tunic_blue.set_body_armor(16)
itm_arena_tunic_blue.set_leg_armor(6)


itm_arena_tunic_green = Item("itm_arena_tunic_green", "Arena_Tunic_Green")
itm_arena_tunic_green.add_mesh(ItemMesh("arena_tunicG_new"))
itm_arena_tunic_green.add_flag(ItemType.BODY_ARMOR)
itm_arena_tunic_green.add_flag(ItemFlag.COVERS_LEGS)
itm_arena_tunic_green.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_arena_tunic_green.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_arena_tunic_green.set_price(27)
itm_arena_tunic_green.add_modifier(IModBit.TETTERED)
itm_arena_tunic_green.add_modifier(IModBit.RAGGED)
itm_arena_tunic_green.add_modifier(IModBit.STURDY)
itm_arena_tunic_green.add_modifier(IModBit.THICK)
itm_arena_tunic_green.add_modifier(IModBit.HARDENED)
itm_arena_tunic_green.set_weight(2.0)
itm_arena_tunic_green.set_abundance(100)
itm_arena_tunic_green.set_body_armor(16)
itm_arena_tunic_green.set_leg_armor(6)


itm_arena_tunic_yellow = Item("itm_arena_tunic_yellow", "Arena_Tunic_Yellow")
itm_arena_tunic_yellow.add_mesh(ItemMesh("arena_tunicY_new"))
itm_arena_tunic_yellow.add_flag(ItemType.BODY_ARMOR)
itm_arena_tunic_yellow.add_flag(ItemFlag.COVERS_LEGS)
itm_arena_tunic_yellow.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_arena_tunic_yellow.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_arena_tunic_yellow.set_price(27)
itm_arena_tunic_yellow.add_modifier(IModBit.TETTERED)
itm_arena_tunic_yellow.add_modifier(IModBit.RAGGED)
itm_arena_tunic_yellow.add_modifier(IModBit.STURDY)
itm_arena_tunic_yellow.add_modifier(IModBit.THICK)
itm_arena_tunic_yellow.add_modifier(IModBit.HARDENED)
itm_arena_tunic_yellow.set_weight(2.0)
itm_arena_tunic_yellow.set_abundance(100)
itm_arena_tunic_yellow.set_body_armor(16)
itm_arena_tunic_yellow.set_leg_armor(6)


itm_arena_helmet_red = Item("itm_arena_helmet_red", "Arena_Helmet_Red")
itm_arena_helmet_red.add_mesh(ItemMesh("arena_helmetR"))
itm_arena_helmet_red.add_flag(ItemType.HEAD_ARMOR)
itm_arena_helmet_red.add_flag(ItemFlag.FITS_TO_HEAD)
itm_arena_helmet_red.add_flag(ItemFlag.OFFSET_LANCE)
itm_arena_helmet_red.set_price(187)
itm_arena_helmet_red.add_modifier(IModBit.CRACKED)
itm_arena_helmet_red.add_modifier(IModBit.RUSTY)
itm_arena_helmet_red.add_modifier(IModBit.BATTERED)
itm_arena_helmet_red.add_modifier(IModBit.CRUDE)
itm_arena_helmet_red.add_modifier(IModBit.THICK)
itm_arena_helmet_red.add_modifier(IModBit.REINFORCED)
itm_arena_helmet_red.add_modifier(IModBit.LORDLY)
itm_arena_helmet_red.set_weight(1.25)
itm_arena_helmet_red.set_abundance(100)
itm_arena_helmet_red.set_head_armor(26)


itm_arena_helmet_blue = Item("itm_arena_helmet_blue", "Arena_Helmet_Blue")
itm_arena_helmet_blue.add_mesh(ItemMesh("arena_helmetB"))
itm_arena_helmet_blue.add_flag(ItemType.HEAD_ARMOR)
itm_arena_helmet_blue.add_flag(ItemFlag.FITS_TO_HEAD)
itm_arena_helmet_blue.add_flag(ItemFlag.OFFSET_LANCE)
itm_arena_helmet_blue.set_price(187)
itm_arena_helmet_blue.add_modifier(IModBit.CRACKED)
itm_arena_helmet_blue.add_modifier(IModBit.RUSTY)
itm_arena_helmet_blue.add_modifier(IModBit.BATTERED)
itm_arena_helmet_blue.add_modifier(IModBit.CRUDE)
itm_arena_helmet_blue.add_modifier(IModBit.THICK)
itm_arena_helmet_blue.add_modifier(IModBit.REINFORCED)
itm_arena_helmet_blue.add_modifier(IModBit.LORDLY)
itm_arena_helmet_blue.set_weight(1.25)
itm_arena_helmet_blue.set_abundance(100)
itm_arena_helmet_blue.set_head_armor(26)


itm_arena_helmet_green = Item("itm_arena_helmet_green", "Arena_Helmet_Green")
itm_arena_helmet_green.add_mesh(ItemMesh("arena_helmetG"))
itm_arena_helmet_green.add_flag(ItemType.HEAD_ARMOR)
itm_arena_helmet_green.add_flag(ItemFlag.FITS_TO_HEAD)
itm_arena_helmet_green.add_flag(ItemFlag.OFFSET_LANCE)
itm_arena_helmet_green.set_price(187)
itm_arena_helmet_green.add_modifier(IModBit.CRACKED)
itm_arena_helmet_green.add_modifier(IModBit.RUSTY)
itm_arena_helmet_green.add_modifier(IModBit.BATTERED)
itm_arena_helmet_green.add_modifier(IModBit.CRUDE)
itm_arena_helmet_green.add_modifier(IModBit.THICK)
itm_arena_helmet_green.add_modifier(IModBit.REINFORCED)
itm_arena_helmet_green.add_modifier(IModBit.LORDLY)
itm_arena_helmet_green.set_weight(1.25)
itm_arena_helmet_green.set_abundance(100)
itm_arena_helmet_green.set_head_armor(26)


itm_arena_helmet_yellow = Item("itm_arena_helmet_yellow", "Arena_Helmet_Yellow")
itm_arena_helmet_yellow.add_mesh(ItemMesh("arena_helmetY"))
itm_arena_helmet_yellow.add_flag(ItemType.HEAD_ARMOR)
itm_arena_helmet_yellow.add_flag(ItemFlag.FITS_TO_HEAD)
itm_arena_helmet_yellow.add_flag(ItemFlag.OFFSET_LANCE)
itm_arena_helmet_yellow.set_price(187)
itm_arena_helmet_yellow.add_modifier(IModBit.CRACKED)
itm_arena_helmet_yellow.add_modifier(IModBit.RUSTY)
itm_arena_helmet_yellow.add_modifier(IModBit.BATTERED)
itm_arena_helmet_yellow.add_modifier(IModBit.CRUDE)
itm_arena_helmet_yellow.add_modifier(IModBit.THICK)
itm_arena_helmet_yellow.add_modifier(IModBit.REINFORCED)
itm_arena_helmet_yellow.add_modifier(IModBit.LORDLY)
itm_arena_helmet_yellow.set_weight(1.25)
itm_arena_helmet_yellow.set_abundance(100)
itm_arena_helmet_yellow.set_head_armor(26)


itm_steppe_helmet_white = Item("itm_steppe_helmet_white", "Steppe_Helmet_White")
itm_steppe_helmet_white.add_mesh(ItemMesh("steppe_helmetW"))
itm_steppe_helmet_white.add_flag(ItemType.HEAD_ARMOR)
itm_steppe_helmet_white.add_flag(ItemFlag.FITS_TO_HEAD)
itm_steppe_helmet_white.add_flag(ItemFlag.OFFSET_LANCE)
itm_steppe_helmet_white.set_price(187)
itm_steppe_helmet_white.add_modifier(IModBit.CRACKED)
itm_steppe_helmet_white.add_modifier(IModBit.RUSTY)
itm_steppe_helmet_white.add_modifier(IModBit.BATTERED)
itm_steppe_helmet_white.add_modifier(IModBit.CRUDE)
itm_steppe_helmet_white.add_modifier(IModBit.THICK)
itm_steppe_helmet_white.add_modifier(IModBit.REINFORCED)
itm_steppe_helmet_white.add_modifier(IModBit.LORDLY)
itm_steppe_helmet_white.set_weight(1.25)
itm_steppe_helmet_white.set_abundance(100)
itm_steppe_helmet_white.set_head_armor(20)


itm_steppe_helmet_red = Item("itm_steppe_helmet_red", "Steppe_Helmet_Red")
itm_steppe_helmet_red.add_mesh(ItemMesh("steppe_helmetR"))
itm_steppe_helmet_red.add_flag(ItemType.HEAD_ARMOR)
itm_steppe_helmet_red.add_flag(ItemFlag.FITS_TO_HEAD)
itm_steppe_helmet_red.add_flag(ItemFlag.OFFSET_LANCE)
itm_steppe_helmet_red.set_price(187)
itm_steppe_helmet_red.add_modifier(IModBit.CRACKED)
itm_steppe_helmet_red.add_modifier(IModBit.RUSTY)
itm_steppe_helmet_red.add_modifier(IModBit.BATTERED)
itm_steppe_helmet_red.add_modifier(IModBit.CRUDE)
itm_steppe_helmet_red.add_modifier(IModBit.THICK)
itm_steppe_helmet_red.add_modifier(IModBit.REINFORCED)
itm_steppe_helmet_red.add_modifier(IModBit.LORDLY)
itm_steppe_helmet_red.set_weight(1.25)
itm_steppe_helmet_red.set_abundance(100)
itm_steppe_helmet_red.set_head_armor(20)


itm_steppe_helmet_blue = Item("itm_steppe_helmet_blue", "Steppe_Helmet_Blue")
itm_steppe_helmet_blue.add_mesh(ItemMesh("steppe_helmetB"))
itm_steppe_helmet_blue.add_flag(ItemType.HEAD_ARMOR)
itm_steppe_helmet_blue.add_flag(ItemFlag.FITS_TO_HEAD)
itm_steppe_helmet_blue.add_flag(ItemFlag.OFFSET_LANCE)
itm_steppe_helmet_blue.set_price(187)
itm_steppe_helmet_blue.add_modifier(IModBit.CRACKED)
itm_steppe_helmet_blue.add_modifier(IModBit.RUSTY)
itm_steppe_helmet_blue.add_modifier(IModBit.BATTERED)
itm_steppe_helmet_blue.add_modifier(IModBit.CRUDE)
itm_steppe_helmet_blue.add_modifier(IModBit.THICK)
itm_steppe_helmet_blue.add_modifier(IModBit.REINFORCED)
itm_steppe_helmet_blue.add_modifier(IModBit.LORDLY)
itm_steppe_helmet_blue.set_weight(1.25)
itm_steppe_helmet_blue.set_abundance(100)
itm_steppe_helmet_blue.set_head_armor(20)


itm_steppe_helmet_green = Item("itm_steppe_helmet_green", "Steppe_Helmet_Green")
itm_steppe_helmet_green.add_mesh(ItemMesh("steppe_helmetG"))
itm_steppe_helmet_green.add_flag(ItemType.HEAD_ARMOR)
itm_steppe_helmet_green.add_flag(ItemFlag.FITS_TO_HEAD)
itm_steppe_helmet_green.add_flag(ItemFlag.OFFSET_LANCE)
itm_steppe_helmet_green.set_price(187)
itm_steppe_helmet_green.add_modifier(IModBit.CRACKED)
itm_steppe_helmet_green.add_modifier(IModBit.RUSTY)
itm_steppe_helmet_green.add_modifier(IModBit.BATTERED)
itm_steppe_helmet_green.add_modifier(IModBit.CRUDE)
itm_steppe_helmet_green.add_modifier(IModBit.THICK)
itm_steppe_helmet_green.add_modifier(IModBit.REINFORCED)
itm_steppe_helmet_green.add_modifier(IModBit.LORDLY)
itm_steppe_helmet_green.set_weight(1.25)
itm_steppe_helmet_green.set_abundance(100)
itm_steppe_helmet_green.set_head_armor(20)


itm_steppe_helmet_yellow = Item("itm_steppe_helmet_yellow", "Steppe_Helmet_Yellow")
itm_steppe_helmet_yellow.add_mesh(ItemMesh("steppe_helmetY"))
itm_steppe_helmet_yellow.add_flag(ItemType.HEAD_ARMOR)
itm_steppe_helmet_yellow.add_flag(ItemFlag.FITS_TO_HEAD)
itm_steppe_helmet_yellow.add_flag(ItemFlag.OFFSET_LANCE)
itm_steppe_helmet_yellow.set_price(187)
itm_steppe_helmet_yellow.add_modifier(IModBit.CRACKED)
itm_steppe_helmet_yellow.add_modifier(IModBit.RUSTY)
itm_steppe_helmet_yellow.add_modifier(IModBit.BATTERED)
itm_steppe_helmet_yellow.add_modifier(IModBit.CRUDE)
itm_steppe_helmet_yellow.add_modifier(IModBit.THICK)
itm_steppe_helmet_yellow.add_modifier(IModBit.REINFORCED)
itm_steppe_helmet_yellow.add_modifier(IModBit.LORDLY)
itm_steppe_helmet_yellow.set_weight(1.25)
itm_steppe_helmet_yellow.set_abundance(100)
itm_steppe_helmet_yellow.set_head_armor(20)


itm_tourney_helm_white = Item("itm_tourney_helm_white", "Tourney_Helm_White")
itm_tourney_helm_white.add_mesh(ItemMesh("tourney_helmR"))
itm_tourney_helm_white.add_flag(ItemType.HEAD_ARMOR)
itm_tourney_helm_white.add_flag(ItemFlag.COVERS_HEAD)
itm_tourney_helm_white.add_flag(ItemFlag.IS_COUCHABLE)
itm_tourney_helm_white.set_price(760)
itm_tourney_helm_white.add_modifier(IModBit.CRACKED)
itm_tourney_helm_white.add_modifier(IModBit.RUSTY)
itm_tourney_helm_white.add_modifier(IModBit.BATTERED)
itm_tourney_helm_white.add_modifier(IModBit.CRUDE)
itm_tourney_helm_white.add_modifier(IModBit.THICK)
itm_tourney_helm_white.add_modifier(IModBit.REINFORCED)
itm_tourney_helm_white.add_modifier(IModBit.LORDLY)
itm_tourney_helm_white.set_weight(2.75)
itm_tourney_helm_white.set_abundance(100)
itm_tourney_helm_white.set_head_armor(30)


itm_tourney_helm_red = Item("itm_tourney_helm_red", "Tourney_Helm_Red")
itm_tourney_helm_red.add_mesh(ItemMesh("tourney_helmR"))
itm_tourney_helm_red.add_flag(ItemType.HEAD_ARMOR)
itm_tourney_helm_red.add_flag(ItemFlag.COVERS_HEAD)
itm_tourney_helm_red.add_flag(ItemFlag.IS_COUCHABLE)
itm_tourney_helm_red.set_price(760)
itm_tourney_helm_red.add_modifier(IModBit.CRACKED)
itm_tourney_helm_red.add_modifier(IModBit.RUSTY)
itm_tourney_helm_red.add_modifier(IModBit.BATTERED)
itm_tourney_helm_red.add_modifier(IModBit.CRUDE)
itm_tourney_helm_red.add_modifier(IModBit.THICK)
itm_tourney_helm_red.add_modifier(IModBit.REINFORCED)
itm_tourney_helm_red.add_modifier(IModBit.LORDLY)
itm_tourney_helm_red.set_weight(2.75)
itm_tourney_helm_red.set_abundance(100)
itm_tourney_helm_red.set_head_armor(30)


itm_tourney_helm_blue = Item("itm_tourney_helm_blue", "Tourney_Helm_Blue")
itm_tourney_helm_blue.add_mesh(ItemMesh("tourney_helmB"))
itm_tourney_helm_blue.add_flag(ItemType.HEAD_ARMOR)
itm_tourney_helm_blue.add_flag(ItemFlag.COVERS_HEAD)
itm_tourney_helm_blue.add_flag(ItemFlag.IS_COUCHABLE)
itm_tourney_helm_blue.set_price(760)
itm_tourney_helm_blue.add_modifier(IModBit.CRACKED)
itm_tourney_helm_blue.add_modifier(IModBit.RUSTY)
itm_tourney_helm_blue.add_modifier(IModBit.BATTERED)
itm_tourney_helm_blue.add_modifier(IModBit.CRUDE)
itm_tourney_helm_blue.add_modifier(IModBit.THICK)
itm_tourney_helm_blue.add_modifier(IModBit.REINFORCED)
itm_tourney_helm_blue.add_modifier(IModBit.LORDLY)
itm_tourney_helm_blue.set_weight(2.75)
itm_tourney_helm_blue.set_abundance(100)
itm_tourney_helm_blue.set_head_armor(30)


itm_tourney_helm_green = Item("itm_tourney_helm_green", "Tourney_Helm_Green")
itm_tourney_helm_green.add_mesh(ItemMesh("tourney_helmG"))
itm_tourney_helm_green.add_flag(ItemType.HEAD_ARMOR)
itm_tourney_helm_green.add_flag(ItemFlag.COVERS_HEAD)
itm_tourney_helm_green.add_flag(ItemFlag.IS_COUCHABLE)
itm_tourney_helm_green.set_price(760)
itm_tourney_helm_green.add_modifier(IModBit.CRACKED)
itm_tourney_helm_green.add_modifier(IModBit.RUSTY)
itm_tourney_helm_green.add_modifier(IModBit.BATTERED)
itm_tourney_helm_green.add_modifier(IModBit.CRUDE)
itm_tourney_helm_green.add_modifier(IModBit.THICK)
itm_tourney_helm_green.add_modifier(IModBit.REINFORCED)
itm_tourney_helm_green.add_modifier(IModBit.LORDLY)
itm_tourney_helm_green.set_weight(2.75)
itm_tourney_helm_green.set_abundance(100)
itm_tourney_helm_green.set_head_armor(30)


itm_tourney_helm_yellow = Item("itm_tourney_helm_yellow", "Tourney_Helm_Yellow")
itm_tourney_helm_yellow.add_mesh(ItemMesh("tourney_helmY"))
itm_tourney_helm_yellow.add_flag(ItemType.HEAD_ARMOR)
itm_tourney_helm_yellow.add_flag(ItemFlag.COVERS_HEAD)
itm_tourney_helm_yellow.add_flag(ItemFlag.IS_COUCHABLE)
itm_tourney_helm_yellow.set_price(760)
itm_tourney_helm_yellow.add_modifier(IModBit.CRACKED)
itm_tourney_helm_yellow.add_modifier(IModBit.RUSTY)
itm_tourney_helm_yellow.add_modifier(IModBit.BATTERED)
itm_tourney_helm_yellow.add_modifier(IModBit.CRUDE)
itm_tourney_helm_yellow.add_modifier(IModBit.THICK)
itm_tourney_helm_yellow.add_modifier(IModBit.REINFORCED)
itm_tourney_helm_yellow.add_modifier(IModBit.LORDLY)
itm_tourney_helm_yellow.set_weight(2.75)
itm_tourney_helm_yellow.set_abundance(100)
itm_tourney_helm_yellow.set_head_armor(30)


itm_arena_turban_red = Item("itm_arena_turban_red", "Arena_Turban")
itm_arena_turban_red.add_mesh(ItemMesh("tuareg_open"))
itm_arena_turban_red.add_flag(ItemType.HEAD_ARMOR)
itm_arena_turban_red.add_flag(ItemFlag.FITS_TO_HEAD)
itm_arena_turban_red.add_flag(ItemFlag.OFFSET_LANCE)
itm_arena_turban_red.set_price(187)
itm_arena_turban_red.add_modifier(IModBit.CRACKED)
itm_arena_turban_red.add_modifier(IModBit.RUSTY)
itm_arena_turban_red.add_modifier(IModBit.BATTERED)
itm_arena_turban_red.add_modifier(IModBit.CRUDE)
itm_arena_turban_red.add_modifier(IModBit.THICK)
itm_arena_turban_red.add_modifier(IModBit.REINFORCED)
itm_arena_turban_red.add_modifier(IModBit.LORDLY)
itm_arena_turban_red.set_weight(1.25)
itm_arena_turban_red.set_abundance(100)
itm_arena_turban_red.set_head_armor(26)


itm_arena_turban_blue = Item("itm_arena_turban_blue", "Arena_Turban")
itm_arena_turban_blue.add_mesh(ItemMesh("tuareg_open"))
itm_arena_turban_blue.add_flag(ItemType.HEAD_ARMOR)
itm_arena_turban_blue.add_flag(ItemFlag.FITS_TO_HEAD)
itm_arena_turban_blue.add_flag(ItemFlag.OFFSET_LANCE)
itm_arena_turban_blue.set_price(187)
itm_arena_turban_blue.add_modifier(IModBit.CRACKED)
itm_arena_turban_blue.add_modifier(IModBit.RUSTY)
itm_arena_turban_blue.add_modifier(IModBit.BATTERED)
itm_arena_turban_blue.add_modifier(IModBit.CRUDE)
itm_arena_turban_blue.add_modifier(IModBit.THICK)
itm_arena_turban_blue.add_modifier(IModBit.REINFORCED)
itm_arena_turban_blue.add_modifier(IModBit.LORDLY)
itm_arena_turban_blue.set_weight(1.25)
itm_arena_turban_blue.set_abundance(100)
itm_arena_turban_blue.set_head_armor(26)


itm_arena_turban_green = Item("itm_arena_turban_green", "Arena_Turban")
itm_arena_turban_green.add_mesh(ItemMesh("tuareg_open"))
itm_arena_turban_green.add_flag(ItemType.HEAD_ARMOR)
itm_arena_turban_green.add_flag(ItemFlag.FITS_TO_HEAD)
itm_arena_turban_green.add_flag(ItemFlag.OFFSET_LANCE)
itm_arena_turban_green.set_price(187)
itm_arena_turban_green.add_modifier(IModBit.CRACKED)
itm_arena_turban_green.add_modifier(IModBit.RUSTY)
itm_arena_turban_green.add_modifier(IModBit.BATTERED)
itm_arena_turban_green.add_modifier(IModBit.CRUDE)
itm_arena_turban_green.add_modifier(IModBit.THICK)
itm_arena_turban_green.add_modifier(IModBit.REINFORCED)
itm_arena_turban_green.add_modifier(IModBit.LORDLY)
itm_arena_turban_green.set_weight(1.25)
itm_arena_turban_green.set_abundance(100)
itm_arena_turban_green.set_head_armor(26)


itm_arena_turban_yellow = Item("itm_arena_turban_yellow", "Arena_Turban")
itm_arena_turban_yellow.add_mesh(ItemMesh("tuareg_open"))
itm_arena_turban_yellow.add_flag(ItemType.HEAD_ARMOR)
itm_arena_turban_yellow.add_flag(ItemFlag.FITS_TO_HEAD)
itm_arena_turban_yellow.add_flag(ItemFlag.OFFSET_LANCE)
itm_arena_turban_yellow.set_price(187)
itm_arena_turban_yellow.add_modifier(IModBit.CRACKED)
itm_arena_turban_yellow.add_modifier(IModBit.RUSTY)
itm_arena_turban_yellow.add_modifier(IModBit.BATTERED)
itm_arena_turban_yellow.add_modifier(IModBit.CRUDE)
itm_arena_turban_yellow.add_modifier(IModBit.THICK)
itm_arena_turban_yellow.add_modifier(IModBit.REINFORCED)
itm_arena_turban_yellow.add_modifier(IModBit.LORDLY)
itm_arena_turban_yellow.set_weight(1.25)
itm_arena_turban_yellow.set_abundance(100)
itm_arena_turban_yellow.set_head_armor(26)


itm_book_tactics = Item("itm_book_tactics", "De_Re_Militari")
itm_book_tactics.add_mesh(ItemMesh("book_a"))
itm_book_tactics.add_flag(ItemType.BOOK)
itm_book_tactics.set_price(4000)
itm_book_tactics.set_weight(2.0)
itm_book_tactics.set_abundance(100)


itm_book_persuasion = Item("itm_book_persuasion", "Rhetorica_ad_Herennium")
itm_book_persuasion.add_mesh(ItemMesh("book_b"))
itm_book_persuasion.add_flag(ItemType.BOOK)
itm_book_persuasion.set_price(5000)
itm_book_persuasion.set_weight(2.0)
itm_book_persuasion.set_abundance(100)


itm_book_leadership = Item("itm_book_leadership", "The_Life_of_Alixenus_the_Great")
itm_book_leadership.add_mesh(ItemMesh("book_d"))
itm_book_leadership.add_flag(ItemType.BOOK)
itm_book_leadership.set_price(4200)
itm_book_leadership.set_weight(2.0)
itm_book_leadership.set_abundance(100)


itm_book_intelligence = Item("itm_book_intelligence", "Essays_on_Logic")
itm_book_intelligence.add_mesh(ItemMesh("book_e"))
itm_book_intelligence.add_flag(ItemType.BOOK)
itm_book_intelligence.set_price(2900)
itm_book_intelligence.set_weight(2.0)
itm_book_intelligence.set_abundance(100)


itm_book_trade = Item("itm_book_trade", "A_Treatise_on_the_Value_of_Things")
itm_book_trade.add_mesh(ItemMesh("book_f"))
itm_book_trade.add_flag(ItemType.BOOK)
itm_book_trade.set_price(3100)
itm_book_trade.set_weight(2.0)
itm_book_trade.set_abundance(100)


itm_book_weapon_mastery = Item("itm_book_weapon_mastery", "On_the_Art_of_Fighting_with_Swords")
itm_book_weapon_mastery.add_mesh(ItemMesh("book_d"))
itm_book_weapon_mastery.add_flag(ItemType.BOOK)
itm_book_weapon_mastery.set_price(4200)
itm_book_weapon_mastery.set_weight(2.0)
itm_book_weapon_mastery.set_abundance(100)


itm_book_engineering = Item("itm_book_engineering", "Method_of_Mechanical_Theorems")
itm_book_engineering.add_mesh(ItemMesh("book_open"))
itm_book_engineering.add_flag(ItemType.BOOK)
itm_book_engineering.set_price(4000)
itm_book_engineering.set_weight(2.0)
itm_book_engineering.set_abundance(100)


itm_book_wound_treatment_reference = Item("itm_book_wound_treatment_reference", "The_Book_of_Healing")
itm_book_wound_treatment_reference.add_mesh(ItemMesh("book_c"))
itm_book_wound_treatment_reference.add_flag(ItemType.BOOK)
itm_book_wound_treatment_reference.set_price(3500)
itm_book_wound_treatment_reference.set_weight(2.0)
itm_book_wound_treatment_reference.set_abundance(100)


itm_book_training_reference = Item("itm_book_training_reference", "Manual_of_Arms")
itm_book_training_reference.add_mesh(ItemMesh("book_open"))
itm_book_training_reference.add_flag(ItemType.BOOK)
itm_book_training_reference.set_price(3500)
itm_book_training_reference.set_weight(2.0)
itm_book_training_reference.set_abundance(100)


itm_book_surgery_reference = Item("itm_book_surgery_reference", "The_Great_Book_of_Surgery")
itm_book_surgery_reference.add_mesh(ItemMesh("book_c"))
itm_book_surgery_reference.add_flag(ItemType.BOOK)
itm_book_surgery_reference.set_price(3500)
itm_book_surgery_reference.set_weight(2.0)
itm_book_surgery_reference.set_abundance(100)


itm_spice = Item("itm_spice", "Spice")
itm_spice.add_mesh(ItemMesh("spice_sack"))
itm_spice.add_flag(ItemType.GOODS)
itm_spice.add_flag(ItemFlag.IS_MERCHANDISE)
itm_spice.add_flag(ItemFlag.IS_CONSUMABLE)
itm_spice.set_price(880)
itm_spice.set_weight(40.0)
itm_spice.set_abundance(25)
itm_spice.set_max_ammo(50)


itm_salt = Item("itm_salt", "Salt")
itm_salt.add_mesh(ItemMesh("salt_sack"))
itm_salt.add_flag(ItemType.GOODS)
itm_salt.add_flag(ItemFlag.IS_MERCHANDISE)
itm_salt.set_price(255)
itm_salt.set_weight(50.0)
itm_salt.set_abundance(120)


itm_oil = Item("itm_oil", "Oil")
itm_oil.add_mesh(ItemMesh("oil"))
itm_oil.add_flag(ItemType.GOODS)
itm_oil.add_flag(ItemFlag.IS_MERCHANDISE)
itm_oil.add_flag(ItemFlag.IS_CONSUMABLE)
itm_oil.set_price(450)
itm_oil.set_weight(50.0)
itm_oil.set_abundance(60)
itm_oil.set_max_ammo(50)


itm_pottery = Item("itm_pottery", "Pottery")
itm_pottery.add_mesh(ItemMesh("jug"))
itm_pottery.add_flag(ItemType.GOODS)
itm_pottery.add_flag(ItemFlag.IS_MERCHANDISE)
itm_pottery.set_price(100)
itm_pottery.set_weight(50.0)
itm_pottery.set_abundance(90)


itm_raw_flax = Item("itm_raw_flax", "Flax_Bundle")
itm_raw_flax.add_mesh(ItemMesh("raw_flax"))
itm_raw_flax.add_flag(ItemType.GOODS)
itm_raw_flax.add_flag(ItemFlag.IS_MERCHANDISE)
itm_raw_flax.set_price(150)
itm_raw_flax.set_weight(40.0)
itm_raw_flax.set_abundance(90)


itm_linen = Item("itm_linen", "Linen")
itm_linen.add_mesh(ItemMesh("linen"))
itm_linen.add_flag(ItemType.GOODS)
itm_linen.add_flag(ItemFlag.IS_MERCHANDISE)
itm_linen.set_price(250)
itm_linen.set_weight(40.0)
itm_linen.set_abundance(90)


itm_wool = Item("itm_wool", "Wool")
itm_wool.add_mesh(ItemMesh("wool_sack"))
itm_wool.add_flag(ItemType.GOODS)
itm_wool.add_flag(ItemFlag.IS_MERCHANDISE)
itm_wool.set_price(130)
itm_wool.set_weight(40.0)
itm_wool.set_abundance(90)


itm_wool_cloth = Item("itm_wool_cloth", "Wool_Cloth")
itm_wool_cloth.add_mesh(ItemMesh("wool_cloth"))
itm_wool_cloth.add_flag(ItemType.GOODS)
itm_wool_cloth.add_flag(ItemFlag.IS_MERCHANDISE)
itm_wool_cloth.set_price(250)
itm_wool_cloth.set_weight(40.0)
itm_wool_cloth.set_abundance(90)


itm_raw_silk = Item("itm_raw_silk", "Raw_Silk")
itm_raw_silk.add_mesh(ItemMesh("raw_silk_bundle"))
itm_raw_silk.add_flag(ItemType.GOODS)
itm_raw_silk.add_flag(ItemFlag.IS_MERCHANDISE)
itm_raw_silk.set_price(600)
itm_raw_silk.set_weight(30.0)
itm_raw_silk.set_abundance(90)


itm_raw_dyes = Item("itm_raw_dyes", "Dyes")
itm_raw_dyes.add_mesh(ItemMesh("dyes"))
itm_raw_dyes.add_flag(ItemType.GOODS)
itm_raw_dyes.add_flag(ItemFlag.IS_MERCHANDISE)
itm_raw_dyes.set_price(200)
itm_raw_dyes.set_weight(10.0)
itm_raw_dyes.set_abundance(90)


itm_velvet = Item("itm_velvet", "Velvet")
itm_velvet.add_mesh(ItemMesh("velvet"))
itm_velvet.add_flag(ItemType.GOODS)
itm_velvet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_velvet.set_price(1025)
itm_velvet.set_weight(40.0)
itm_velvet.set_abundance(30)


itm_iron = Item("itm_iron", "Iron")
itm_iron.add_mesh(ItemMesh("iron"))
itm_iron.add_flag(ItemType.GOODS)
itm_iron.add_flag(ItemFlag.IS_MERCHANDISE)
itm_iron.set_price(264)
itm_iron.set_weight(60.0)
itm_iron.set_abundance(60)


itm_tools = Item("itm_tools", "Tools")
itm_tools.add_mesh(ItemMesh("iron_hammer"))
itm_tools.add_flag(ItemType.GOODS)
itm_tools.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tools.set_price(410)
itm_tools.set_weight(50.0)
itm_tools.set_abundance(90)


itm_raw_leather = Item("itm_raw_leather", "Hides")
itm_raw_leather.add_mesh(ItemMesh("leatherwork_inventory"))
itm_raw_leather.add_flag(ItemType.GOODS)
itm_raw_leather.add_flag(ItemFlag.IS_MERCHANDISE)
itm_raw_leather.set_price(120)
itm_raw_leather.set_weight(40.0)
itm_raw_leather.set_abundance(90)


itm_leatherwork = Item("itm_leatherwork", "Leatherwork")
itm_leatherwork.add_mesh(ItemMesh("leatherwork_frame"))
itm_leatherwork.add_flag(ItemType.GOODS)
itm_leatherwork.add_flag(ItemFlag.IS_MERCHANDISE)
itm_leatherwork.set_price(220)
itm_leatherwork.set_weight(40.0)
itm_leatherwork.set_abundance(90)


itm_raw_date_fruit = Item("itm_raw_date_fruit", "Date_Fruit")
itm_raw_date_fruit.add_mesh(ItemMesh("date_inventory"))
itm_raw_date_fruit.add_flag(ItemType.GOODS)
itm_raw_date_fruit.add_flag(ItemFlag.IS_MERCHANDISE)
itm_raw_date_fruit.add_flag(ItemFlag.IS_FOOD)
itm_raw_date_fruit.add_flag(ItemFlag.IS_CONSUMABLE)
itm_raw_date_fruit.set_price(120)
itm_raw_date_fruit.set_weight(40.0)
itm_raw_date_fruit.set_abundance(100)
itm_raw_date_fruit.set_head_armor(10)
itm_raw_date_fruit.set_max_ammo(10)


itm_furs = Item("itm_furs", "Furs")
itm_furs.add_mesh(ItemMesh("fur_pack"))
itm_furs.add_flag(ItemType.GOODS)
itm_furs.add_flag(ItemFlag.IS_MERCHANDISE)
itm_furs.set_price(391)
itm_furs.set_weight(40.0)
itm_furs.set_abundance(90)


itm_wine = Item("itm_wine", "Wine")
itm_wine.add_mesh(ItemMesh("amphora_slim"))
itm_wine.add_flag(ItemType.GOODS)
itm_wine.add_flag(ItemFlag.IS_MERCHANDISE)
itm_wine.add_flag(ItemFlag.IS_CONSUMABLE)
itm_wine.set_price(220)
itm_wine.set_weight(30.0)
itm_wine.set_abundance(60)
itm_wine.set_max_ammo(50)


itm_ale = Item("itm_ale", "Ale")
itm_ale.add_mesh(ItemMesh("ale_barrel"))
itm_ale.add_flag(ItemType.GOODS)
itm_ale.add_flag(ItemFlag.IS_MERCHANDISE)
itm_ale.add_flag(ItemFlag.IS_CONSUMABLE)
itm_ale.set_price(120)
itm_ale.set_weight(30.0)
itm_ale.set_abundance(70)
itm_ale.set_max_ammo(50)


itm_smoked_fish = Item("itm_smoked_fish", "Smoked_Fish")
itm_smoked_fish.add_mesh(ItemMesh("smoked_fish"))
itm_smoked_fish.add_flag(ItemType.GOODS)
itm_smoked_fish.add_flag(ItemFlag.IS_MERCHANDISE)
itm_smoked_fish.add_flag(ItemFlag.IS_FOOD)
itm_smoked_fish.add_flag(ItemFlag.IS_CONSUMABLE)
itm_smoked_fish.set_price(65)
itm_smoked_fish.set_weight(15.0)
itm_smoked_fish.set_abundance(110)
itm_smoked_fish.set_head_armor(50)
itm_smoked_fish.set_max_ammo(50)


itm_cheese = Item("itm_cheese", "Cheese")
itm_cheese.add_mesh(ItemMesh("cheese_b"))
itm_cheese.add_flag(ItemType.GOODS)
itm_cheese.add_flag(ItemFlag.IS_MERCHANDISE)
itm_cheese.add_flag(ItemFlag.IS_FOOD)
itm_cheese.add_flag(ItemFlag.IS_CONSUMABLE)
itm_cheese.set_price(75)
itm_cheese.set_weight(6.0)
itm_cheese.set_abundance(110)
itm_cheese.set_head_armor(40)
itm_cheese.set_max_ammo(30)


itm_honey = Item("itm_honey", "Honey")
itm_honey.add_mesh(ItemMesh("honey_pot"))
itm_honey.add_flag(ItemType.GOODS)
itm_honey.add_flag(ItemFlag.IS_MERCHANDISE)
itm_honey.add_flag(ItemFlag.IS_FOOD)
itm_honey.add_flag(ItemFlag.IS_CONSUMABLE)
itm_honey.set_price(220)
itm_honey.set_weight(5.0)
itm_honey.set_abundance(110)
itm_honey.set_head_armor(40)
itm_honey.set_max_ammo(30)


itm_sausages = Item("itm_sausages", "Sausages")
itm_sausages.add_mesh(ItemMesh("sausages"))
itm_sausages.add_flag(ItemType.GOODS)
itm_sausages.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sausages.add_flag(ItemFlag.IS_FOOD)
itm_sausages.add_flag(ItemFlag.IS_CONSUMABLE)
itm_sausages.set_price(85)
itm_sausages.set_weight(10.0)
itm_sausages.set_abundance(110)
itm_sausages.set_head_armor(40)
itm_sausages.set_max_ammo(40)


itm_cabbages = Item("itm_cabbages", "Cabbages")
itm_cabbages.add_mesh(ItemMesh("cabbage"))
itm_cabbages.add_flag(ItemType.GOODS)
itm_cabbages.add_flag(ItemFlag.IS_MERCHANDISE)
itm_cabbages.add_flag(ItemFlag.IS_FOOD)
itm_cabbages.add_flag(ItemFlag.IS_CONSUMABLE)
itm_cabbages.set_price(30)
itm_cabbages.set_weight(15.0)
itm_cabbages.set_abundance(110)
itm_cabbages.set_head_armor(40)
itm_cabbages.set_max_ammo(50)


itm_dried_meat = Item("itm_dried_meat", "Dried_Meat")
itm_dried_meat.add_mesh(ItemMesh("smoked_meat"))
itm_dried_meat.add_flag(ItemType.GOODS)
itm_dried_meat.add_flag(ItemFlag.IS_MERCHANDISE)
itm_dried_meat.add_flag(ItemFlag.IS_FOOD)
itm_dried_meat.add_flag(ItemFlag.IS_CONSUMABLE)
itm_dried_meat.set_price(85)
itm_dried_meat.set_weight(15.0)
itm_dried_meat.set_abundance(100)
itm_dried_meat.set_head_armor(70)
itm_dried_meat.set_max_ammo(50)


itm_apples = Item("itm_apples", "Fruit")
itm_apples.add_mesh(ItemMesh("apple_basket"))
itm_apples.add_flag(ItemType.GOODS)
itm_apples.add_flag(ItemFlag.IS_MERCHANDISE)
itm_apples.add_flag(ItemFlag.IS_FOOD)
itm_apples.add_flag(ItemFlag.IS_CONSUMABLE)
itm_apples.set_price(44)
itm_apples.set_weight(20.0)
itm_apples.set_abundance(110)
itm_apples.set_head_armor(40)
itm_apples.set_max_ammo(50)


itm_raw_grapes = Item("itm_raw_grapes", "Grapes")
itm_raw_grapes.add_mesh(ItemMesh("grapes_inventory"))
itm_raw_grapes.add_flag(ItemType.GOODS)
itm_raw_grapes.add_flag(ItemFlag.IS_MERCHANDISE)
itm_raw_grapes.add_flag(ItemFlag.IS_CONSUMABLE)
itm_raw_grapes.set_price(75)
itm_raw_grapes.set_weight(40.0)
itm_raw_grapes.set_abundance(90)
itm_raw_grapes.set_head_armor(10)
itm_raw_grapes.set_max_ammo(10)


itm_raw_olives = Item("itm_raw_olives", "Olives")
itm_raw_olives.add_mesh(ItemMesh("olive_inventory"))
itm_raw_olives.add_flag(ItemType.GOODS)
itm_raw_olives.add_flag(ItemFlag.IS_MERCHANDISE)
itm_raw_olives.add_flag(ItemFlag.IS_CONSUMABLE)
itm_raw_olives.set_price(100)
itm_raw_olives.set_weight(40.0)
itm_raw_olives.set_abundance(90)
itm_raw_olives.set_head_armor(10)
itm_raw_olives.set_max_ammo(10)


itm_grain = Item("itm_grain", "Grain")
itm_grain.add_mesh(ItemMesh("wheat_sack"))
itm_grain.add_flag(ItemType.GOODS)
itm_grain.add_flag(ItemFlag.IS_MERCHANDISE)
itm_grain.add_flag(ItemFlag.IS_CONSUMABLE)
itm_grain.set_price(30)
itm_grain.set_weight(30.0)
itm_grain.set_abundance(110)
itm_grain.set_head_armor(40)
itm_grain.set_max_ammo(50)


itm_cattle_meat = Item("itm_cattle_meat", "Beef")
itm_cattle_meat.add_mesh(ItemMesh("raw_meat"))
itm_cattle_meat.add_flag(ItemType.GOODS)
itm_cattle_meat.add_flag(ItemFlag.IS_MERCHANDISE)
itm_cattle_meat.add_flag(ItemFlag.IS_FOOD)
itm_cattle_meat.add_flag(ItemFlag.IS_CONSUMABLE)
itm_cattle_meat.set_price(80)
itm_cattle_meat.set_weight(20.0)
itm_cattle_meat.set_abundance(100)
itm_cattle_meat.set_head_armor(80)
itm_cattle_meat.set_max_ammo(50)


itm_bread = Item("itm_bread", "Bread")
itm_bread.add_mesh(ItemMesh("bread_a"))
itm_bread.add_flag(ItemType.GOODS)
itm_bread.add_flag(ItemFlag.IS_MERCHANDISE)
itm_bread.add_flag(ItemFlag.IS_FOOD)
itm_bread.add_flag(ItemFlag.IS_CONSUMABLE)
itm_bread.set_price(50)
itm_bread.set_weight(30.0)
itm_bread.set_abundance(110)
itm_bread.set_head_armor(40)
itm_bread.set_max_ammo(50)


itm_chicken = Item("itm_chicken", "Chicken")
itm_chicken.add_mesh(ItemMesh("chicken"))
itm_chicken.add_flag(ItemType.GOODS)
itm_chicken.add_flag(ItemFlag.IS_MERCHANDISE)
itm_chicken.add_flag(ItemFlag.IS_FOOD)
itm_chicken.add_flag(ItemFlag.IS_CONSUMABLE)
itm_chicken.set_price(95)
itm_chicken.set_weight(10.0)
itm_chicken.set_abundance(110)
itm_chicken.set_head_armor(40)
itm_chicken.set_max_ammo(50)


itm_pork = Item("itm_pork", "Pork")
itm_pork.add_mesh(ItemMesh("pork"))
itm_pork.add_flag(ItemType.GOODS)
itm_pork.add_flag(ItemFlag.IS_MERCHANDISE)
itm_pork.add_flag(ItemFlag.IS_FOOD)
itm_pork.add_flag(ItemFlag.IS_CONSUMABLE)
itm_pork.set_price(75)
itm_pork.set_weight(15.0)
itm_pork.set_abundance(100)
itm_pork.set_head_armor(70)
itm_pork.set_max_ammo(50)


itm_butter = Item("itm_butter", "Butter")
itm_butter.add_mesh(ItemMesh("butter_pot"))
itm_butter.add_flag(ItemType.GOODS)
itm_butter.add_flag(ItemFlag.IS_MERCHANDISE)
itm_butter.add_flag(ItemFlag.IS_FOOD)
itm_butter.add_flag(ItemFlag.IS_CONSUMABLE)
itm_butter.set_price(150)
itm_butter.set_weight(6.0)
itm_butter.set_abundance(110)
itm_butter.set_head_armor(40)
itm_butter.set_max_ammo(30)


itm_siege_supply = Item("itm_siege_supply", "Supplies")
itm_siege_supply.add_mesh(ItemMesh("ale_barrel"))
itm_siege_supply.add_flag(ItemType.GOODS)
itm_siege_supply.set_price(96)
itm_siege_supply.set_weight(40.0)
itm_siege_supply.set_abundance(70)


itm_quest_wine = Item("itm_quest_wine", "Wine")
itm_quest_wine.add_mesh(ItemMesh("amphora_slim"))
itm_quest_wine.add_flag(ItemType.GOODS)
itm_quest_wine.set_price(46)
itm_quest_wine.set_weight(40.0)
itm_quest_wine.set_abundance(60)
itm_quest_wine.set_max_ammo(50)


itm_quest_ale = Item("itm_quest_ale", "Ale")
itm_quest_ale.add_mesh(ItemMesh("ale_barrel"))
itm_quest_ale.add_flag(ItemType.GOODS)
itm_quest_ale.set_price(31)
itm_quest_ale.set_weight(40.0)
itm_quest_ale.set_abundance(70)
itm_quest_ale.set_max_ammo(50)


itm_sumpter_horse = Item("itm_sumpter_horse", "Sumpter_Horse")
itm_sumpter_horse.add_mesh(ItemMesh("sumpter_horse"))
itm_sumpter_horse.add_flag(ItemType.HORSE)
itm_sumpter_horse.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sumpter_horse.set_price(134)
itm_sumpter_horse.add_modifier(IModBit.HEAVY)
itm_sumpter_horse.add_modifier(IModBit.LAME)
itm_sumpter_horse.add_modifier(IModBit.SWAYBACKED)
itm_sumpter_horse.add_modifier(IModBit.STUBBORN)
itm_sumpter_horse.add_modifier(IModBit.SPIRITED)
itm_sumpter_horse.set_abundance(90)
itm_sumpter_horse.set_body_armor(14)
itm_sumpter_horse.set_difficulty(1)
itm_sumpter_horse.set_hit_points(100)
itm_sumpter_horse.set_speed_rating(39)
itm_sumpter_horse.set_missile_speed(37)
itm_sumpter_horse.set_weapon_length(100)
itm_sumpter_horse.set_thrust_damage(9, 0)


itm_saddle_horse = Item("itm_saddle_horse", "Saddle_Horse")
itm_saddle_horse.add_mesh(ItemMesh("saddle_horse"))
meshx = ItemMesh("horse_c")
meshx.add_modifier(IModBit.HEAVY)
meshx.add_modifier(IModBit.SPIRITED)
itm_saddle_horse.add_mesh(meshx)
itm_saddle_horse.add_flag(ItemType.HORSE)
itm_saddle_horse.add_flag(ItemFlag.IS_MERCHANDISE)
itm_saddle_horse.set_price(240)
itm_saddle_horse.add_modifier(IModBit.HEAVY)
itm_saddle_horse.add_modifier(IModBit.LAME)
itm_saddle_horse.add_modifier(IModBit.SWAYBACKED)
itm_saddle_horse.add_modifier(IModBit.STUBBORN)
itm_saddle_horse.add_modifier(IModBit.SPIRITED)
itm_saddle_horse.set_abundance(90)
itm_saddle_horse.set_body_armor(8)
itm_saddle_horse.set_difficulty(1)
itm_saddle_horse.set_hit_points(100)
itm_saddle_horse.set_speed_rating(44)
itm_saddle_horse.set_missile_speed(45)
itm_saddle_horse.set_weapon_length(104)
itm_saddle_horse.set_thrust_damage(10, 0)


itm_steppe_horse = Item("itm_steppe_horse", "Steppe_Horse")
itm_steppe_horse.add_mesh(ItemMesh("steppe_horse"))
itm_steppe_horse.add_flag(ItemType.HORSE)
itm_steppe_horse.add_flag(ItemFlag.IS_MERCHANDISE)
itm_steppe_horse.set_price(192)
itm_steppe_horse.add_modifier(IModBit.HEAVY)
itm_steppe_horse.add_modifier(IModBit.LAME)
itm_steppe_horse.add_modifier(IModBit.SWAYBACKED)
itm_steppe_horse.add_modifier(IModBit.STUBBORN)
itm_steppe_horse.add_modifier(IModBit.SPIRITED)
itm_steppe_horse.set_abundance(80)
itm_steppe_horse.set_body_armor(10)
itm_steppe_horse.set_difficulty(2)
itm_steppe_horse.set_hit_points(120)
itm_steppe_horse.set_speed_rating(51)
itm_steppe_horse.set_missile_speed(40)
itm_steppe_horse.set_weapon_length(98)
itm_steppe_horse.set_thrust_damage(8, 0)
itm_steppe_horse.allow_in_faction(fac.kingdom_2)
itm_steppe_horse.allow_in_faction(fac.kingdom_3)


itm_arabian_horse_a = Item("itm_arabian_horse_a", "Desert_Horse")
itm_arabian_horse_a.add_mesh(ItemMesh("arabian_horse_a"))
itm_arabian_horse_a.add_flag(ItemType.HORSE)
itm_arabian_horse_a.add_flag(ItemFlag.IS_MERCHANDISE)
itm_arabian_horse_a.set_price(550)
itm_arabian_horse_a.add_modifier(IModBit.HEAVY)
itm_arabian_horse_a.add_modifier(IModBit.LAME)
itm_arabian_horse_a.add_modifier(IModBit.SWAYBACKED)
itm_arabian_horse_a.add_modifier(IModBit.STUBBORN)
itm_arabian_horse_a.add_modifier(IModBit.SPIRITED)
itm_arabian_horse_a.add_modifier(IModBit.CHAMPION)
itm_arabian_horse_a.set_abundance(80)
itm_arabian_horse_a.set_body_armor(10)
itm_arabian_horse_a.set_difficulty(2)
itm_arabian_horse_a.set_hit_points(110)
itm_arabian_horse_a.set_speed_rating(50)
itm_arabian_horse_a.set_missile_speed(42)
itm_arabian_horse_a.set_weapon_length(100)
itm_arabian_horse_a.set_thrust_damage(12, 0)
itm_arabian_horse_a.allow_in_faction(fac.kingdom_3)
itm_arabian_horse_a.allow_in_faction(fac.kingdom_6)


itm_courser = Item("itm_courser", "Courser")
itm_courser.add_mesh(ItemMesh("courser"))
itm_courser.add_flag(ItemType.HORSE)
itm_courser.add_flag(ItemFlag.IS_MERCHANDISE)
itm_courser.set_price(600)
itm_courser.add_modifier(IModBit.HEAVY)
itm_courser.add_modifier(IModBit.LAME)
itm_courser.add_modifier(IModBit.SWAYBACKED)
itm_courser.add_modifier(IModBit.STUBBORN)
itm_courser.add_modifier(IModBit.SPIRITED)
itm_courser.add_modifier(IModBit.CHAMPION)
itm_courser.set_abundance(70)
itm_courser.set_body_armor(12)
itm_courser.set_difficulty(2)
itm_courser.set_hit_points(110)
itm_courser.set_speed_rating(44)
itm_courser.set_missile_speed(50)
itm_courser.set_weapon_length(106)
itm_courser.set_thrust_damage(12, 0)


itm_arabian_horse_b = Item("itm_arabian_horse_b", "Sarranid_Horse")
itm_arabian_horse_b.add_mesh(ItemMesh("arabian_horse_b"))
itm_arabian_horse_b.add_flag(ItemType.HORSE)
itm_arabian_horse_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_arabian_horse_b.set_price(700)
itm_arabian_horse_b.add_modifier(IModBit.HEAVY)
itm_arabian_horse_b.add_modifier(IModBit.LAME)
itm_arabian_horse_b.add_modifier(IModBit.SWAYBACKED)
itm_arabian_horse_b.add_modifier(IModBit.STUBBORN)
itm_arabian_horse_b.add_modifier(IModBit.SPIRITED)
itm_arabian_horse_b.add_modifier(IModBit.CHAMPION)
itm_arabian_horse_b.set_abundance(80)
itm_arabian_horse_b.set_body_armor(10)
itm_arabian_horse_b.set_difficulty(3)
itm_arabian_horse_b.set_hit_points(120)
itm_arabian_horse_b.set_speed_rating(54)
itm_arabian_horse_b.set_missile_speed(43)
itm_arabian_horse_b.set_weapon_length(100)
itm_arabian_horse_b.set_thrust_damage(16, 0)
itm_arabian_horse_b.allow_in_faction(fac.kingdom_6)


itm_hunter = Item("itm_hunter", "Hunter")
itm_hunter.add_mesh(ItemMesh("hunting_horse"))
meshx = ItemMesh("hunting_horse")
meshx.add_modifier(IModBit.HEAVY)
meshx.add_modifier(IModBit.SPIRITED)
itm_hunter.add_mesh(meshx)
itm_hunter.add_flag(ItemType.HORSE)
itm_hunter.add_flag(ItemFlag.IS_MERCHANDISE)
itm_hunter.set_price(810)
itm_hunter.add_modifier(IModBit.HEAVY)
itm_hunter.add_modifier(IModBit.LAME)
itm_hunter.add_modifier(IModBit.SWAYBACKED)
itm_hunter.add_modifier(IModBit.STUBBORN)
itm_hunter.add_modifier(IModBit.SPIRITED)
itm_hunter.add_modifier(IModBit.CHAMPION)
itm_hunter.set_abundance(60)
itm_hunter.set_body_armor(18)
itm_hunter.set_difficulty(3)
itm_hunter.set_hit_points(160)
itm_hunter.set_speed_rating(44)
itm_hunter.set_missile_speed(43)
itm_hunter.set_weapon_length(108)
itm_hunter.set_thrust_damage(24, 0)


itm_warhorse = Item("itm_warhorse", "War_Horse")
itm_warhorse.add_mesh(ItemMesh("warhorse_chain"))
itm_warhorse.add_flag(ItemType.HORSE)
itm_warhorse.add_flag(ItemFlag.IS_MERCHANDISE)
itm_warhorse.set_price(1224)
itm_warhorse.add_modifier(IModBit.HEAVY)
itm_warhorse.add_modifier(IModBit.LAME)
itm_warhorse.add_modifier(IModBit.SWAYBACKED)
itm_warhorse.add_modifier(IModBit.STUBBORN)
itm_warhorse.add_modifier(IModBit.SPIRITED)
itm_warhorse.add_modifier(IModBit.CHAMPION)
itm_warhorse.set_abundance(50)
itm_warhorse.set_body_armor(40)
itm_warhorse.set_difficulty(4)
itm_warhorse.set_hit_points(165)
itm_warhorse.set_speed_rating(41)
itm_warhorse.set_missile_speed(40)
itm_warhorse.set_weapon_length(110)
itm_warhorse.set_thrust_damage(28, 0)


itm_charger = Item("itm_charger", "Charger")
itm_charger.add_mesh(ItemMesh("charger_new"))
itm_charger.add_flag(ItemType.HORSE)
itm_charger.add_flag(ItemFlag.IS_MERCHANDISE)
itm_charger.set_price(1811)
itm_charger.add_modifier(IModBit.HEAVY)
itm_charger.add_modifier(IModBit.LAME)
itm_charger.add_modifier(IModBit.SWAYBACKED)
itm_charger.add_modifier(IModBit.STUBBORN)
itm_charger.add_modifier(IModBit.SPIRITED)
itm_charger.add_modifier(IModBit.CHAMPION)
itm_charger.set_abundance(40)
itm_charger.set_body_armor(58)
itm_charger.set_difficulty(4)
itm_charger.set_hit_points(165)
itm_charger.set_speed_rating(44)
itm_charger.set_missile_speed(40)
itm_charger.set_weapon_length(112)
itm_charger.set_thrust_damage(32, 0)
itm_charger.allow_in_faction(fac.kingdom_1)
itm_charger.allow_in_faction(fac.kingdom_5)


itm_arrows = Item("itm_arrows", "Arrows")
itm_arrows.add_mesh(ItemMesh("arrow"))
itm_arrows.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
itm_arrows.add_mesh(ItemMesh("quiver", ItemMesh.ixmesh_carry))
itm_arrows.add_flag(ItemType.ARROWS)
itm_arrows.add_flag(ItemFlag.IS_DEFAULT_AMMO)
itm_arrows.add_flag(ItemFlag.IS_MERCHANDISE)
itm_arrows.add_capability(ItemCapability.CARRY_QUIVER_BACK)
itm_arrows.set_price(72)
itm_arrows.add_modifier(IModBit.BENT)
itm_arrows.add_modifier(IModBit.LARGE_BAG)
itm_arrows.set_weight(3.0)
itm_arrows.set_abundance(160)
itm_arrows.set_weapon_length(95)
itm_arrows.set_max_ammo(30)
itm_arrows.set_thrust_damage(1, 1)


itm_khergit_arrows = Item("itm_khergit_arrows", "Khergit_Arrows")
itm_khergit_arrows.add_mesh(ItemMesh("arrow_b"))
itm_khergit_arrows.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
itm_khergit_arrows.add_mesh(ItemMesh("quiver_b", ItemMesh.ixmesh_carry))
itm_khergit_arrows.add_flag(ItemType.ARROWS)
itm_khergit_arrows.add_flag(ItemFlag.IS_MERCHANDISE)
itm_khergit_arrows.add_capability(ItemCapability.CARRY_QUIVER_BACK_RIGHT)
itm_khergit_arrows.set_price(410)
itm_khergit_arrows.add_modifier(IModBit.BENT)
itm_khergit_arrows.add_modifier(IModBit.LARGE_BAG)
itm_khergit_arrows.set_weight(3.5)
itm_khergit_arrows.set_abundance(30)
itm_khergit_arrows.set_weapon_length(95)
itm_khergit_arrows.set_max_ammo(30)
itm_khergit_arrows.set_thrust_damage(3, 1)


itm_barbed_arrows = Item("itm_barbed_arrows", "Barbed_Arrows")
itm_barbed_arrows.add_mesh(ItemMesh("barbed_arrow"))
itm_barbed_arrows.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
itm_barbed_arrows.add_mesh(ItemMesh("quiver_d", ItemMesh.ixmesh_carry))
itm_barbed_arrows.add_flag(ItemType.ARROWS)
itm_barbed_arrows.add_flag(ItemFlag.IS_MERCHANDISE)
itm_barbed_arrows.add_capability(ItemCapability.CARRY_QUIVER_BACK_RIGHT)
itm_barbed_arrows.set_price(124)
itm_barbed_arrows.add_modifier(IModBit.BENT)
itm_barbed_arrows.add_modifier(IModBit.LARGE_BAG)
itm_barbed_arrows.set_weight(3.0)
itm_barbed_arrows.set_abundance(70)
itm_barbed_arrows.set_weapon_length(95)
itm_barbed_arrows.set_max_ammo(30)
itm_barbed_arrows.set_thrust_damage(2, 1)


itm_bodkin_arrows = Item("itm_bodkin_arrows", "Bodkin_Arrows")
itm_bodkin_arrows.add_mesh(ItemMesh("piercing_arrow"))
itm_bodkin_arrows.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
itm_bodkin_arrows.add_mesh(ItemMesh("quiver_c", ItemMesh.ixmesh_carry))
itm_bodkin_arrows.add_flag(ItemType.ARROWS)
itm_bodkin_arrows.add_flag(ItemFlag.IS_MERCHANDISE)
itm_bodkin_arrows.add_capability(ItemCapability.CARRY_QUIVER_BACK_RIGHT)
itm_bodkin_arrows.set_price(350)
itm_bodkin_arrows.add_modifier(IModBit.BENT)
itm_bodkin_arrows.add_modifier(IModBit.LARGE_BAG)
itm_bodkin_arrows.set_weight(3.0)
itm_bodkin_arrows.set_abundance(50)
itm_bodkin_arrows.set_weapon_length(91)
itm_bodkin_arrows.set_max_ammo(28)
itm_bodkin_arrows.set_thrust_damage(3, 1)


itm_bolts = Item("itm_bolts", "Bolts")
itm_bolts.add_mesh(ItemMesh("bolt"))
itm_bolts.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
itm_bolts.add_mesh(ItemMesh("bolt_bag", ItemMesh.ixmesh_carry))
meshx = ItemMesh("bolt_bag_b", ItemMesh.ixmesh_carry)
meshx.add_modifier(IModBit.LARGE_BAG)
itm_bolts.add_mesh(meshx)
itm_bolts.add_flag(ItemType.BOLTS)
itm_bolts.add_flag(ItemFlag.IS_DEFAULT_AMMO)
itm_bolts.add_flag(ItemFlag.IS_MERCHANDISE)
itm_bolts.add_flag(ItemFlag.COVERS_LEGS)
itm_bolts.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_bolts.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_bolts.add_capability(ItemCapability.CARRY_QUIVER_RIGHT_VERTICAL)
itm_bolts.set_price(64)
itm_bolts.add_modifier(IModBit.BENT)
itm_bolts.add_modifier(IModBit.LARGE_BAG)
itm_bolts.set_weight(2.25)
itm_bolts.set_abundance(90)
itm_bolts.set_weapon_length(63)
itm_bolts.set_max_ammo(29)
itm_bolts.set_thrust_damage(1, 1)


itm_steel_bolts = Item("itm_steel_bolts", "Steel_Bolts")
itm_steel_bolts.add_mesh(ItemMesh("bolt"))
itm_steel_bolts.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
itm_steel_bolts.add_mesh(ItemMesh("bolt_bag_c", ItemMesh.ixmesh_carry))
itm_steel_bolts.add_flag(ItemType.BOLTS)
itm_steel_bolts.add_flag(ItemFlag.IS_MERCHANDISE)
itm_steel_bolts.add_flag(ItemFlag.COVERS_LEGS)
itm_steel_bolts.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_steel_bolts.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_steel_bolts.add_capability(ItemCapability.CARRY_QUIVER_RIGHT_VERTICAL)
itm_steel_bolts.set_price(210)
itm_steel_bolts.add_modifier(IModBit.BENT)
itm_steel_bolts.add_modifier(IModBit.LARGE_BAG)
itm_steel_bolts.set_weight(2.5)
itm_steel_bolts.set_abundance(20)
itm_steel_bolts.set_weapon_length(63)
itm_steel_bolts.set_max_ammo(29)
itm_steel_bolts.set_thrust_damage(2, 1)


itm_cartridges = Item("itm_cartridges", "Cartridges")
itm_cartridges.add_mesh(ItemMesh("cartridge_a"))
itm_cartridges.add_flag(ItemType.BULLETS)
itm_cartridges.add_flag(ItemFlag.IS_DEFAULT_AMMO)
itm_cartridges.add_flag(ItemFlag.IS_MERCHANDISE)
itm_cartridges.add_flag(ItemFlag.COVERS_LEGS)
itm_cartridges.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_cartridges.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_cartridges.set_price(41)
itm_cartridges.add_modifier(IModBit.BENT)
itm_cartridges.add_modifier(IModBit.LARGE_BAG)
itm_cartridges.set_weight(2.25)
itm_cartridges.set_abundance(90)
itm_cartridges.set_weapon_length(3)
itm_cartridges.set_max_ammo(50)
itm_cartridges.set_thrust_damage(1, 1)


itm_pilgrim_disguise = Item("itm_pilgrim_disguise", "Pilgrim_Disguise")
itm_pilgrim_disguise.add_mesh(ItemMesh("pilgrim_outfit"))
itm_pilgrim_disguise.add_flag(ItemType.BODY_ARMOR)
itm_pilgrim_disguise.add_flag(ItemFlag.COVERS_LEGS)
itm_pilgrim_disguise.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_pilgrim_disguise.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_pilgrim_disguise.add_flag(ItemFlag.IS_CIVILIAN)
itm_pilgrim_disguise.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_pilgrim_disguise.set_price(25)
itm_pilgrim_disguise.add_modifier(IModBit.TETTERED)
itm_pilgrim_disguise.add_modifier(IModBit.RAGGED)
itm_pilgrim_disguise.add_modifier(IModBit.STURDY)
itm_pilgrim_disguise.add_modifier(IModBit.THICK)
itm_pilgrim_disguise.add_modifier(IModBit.HARDENED)
itm_pilgrim_disguise.set_weight(2.0)
itm_pilgrim_disguise.set_abundance(100)
itm_pilgrim_disguise.set_body_armor(19)
itm_pilgrim_disguise.set_leg_armor(8)


itm_pilgrim_hood = Item("itm_pilgrim_hood", "Pilgrim_Hood")
itm_pilgrim_hood.add_mesh(ItemMesh("pilgrim_hood"))
itm_pilgrim_hood.add_flag(ItemType.HEAD_ARMOR)
itm_pilgrim_hood.add_flag(ItemFlag.IS_CIVILIAN)
itm_pilgrim_hood.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_pilgrim_hood.set_price(35)
itm_pilgrim_hood.add_modifier(IModBit.TETTERED)
itm_pilgrim_hood.add_modifier(IModBit.RAGGED)
itm_pilgrim_hood.add_modifier(IModBit.STURDY)
itm_pilgrim_hood.add_modifier(IModBit.THICK)
itm_pilgrim_hood.add_modifier(IModBit.HARDENED)
itm_pilgrim_hood.set_weight(1.25)
itm_pilgrim_hood.set_abundance(100)
itm_pilgrim_hood.set_head_armor(14)


itm_leather_gloves = Item("itm_leather_gloves", "Leather_Gloves")
itm_leather_gloves.add_mesh(ItemMesh("leather_gloves_L"))
itm_leather_gloves.add_flag(ItemType.HAND_ARMOR)
itm_leather_gloves.add_flag(ItemFlag.IS_MERCHANDISE)
itm_leather_gloves.set_price(90)
itm_leather_gloves.add_modifier(IModBit.TETTERED)
itm_leather_gloves.add_modifier(IModBit.RAGGED)
itm_leather_gloves.add_modifier(IModBit.STURDY)
itm_leather_gloves.add_modifier(IModBit.THICK)
itm_leather_gloves.add_modifier(IModBit.HARDENED)
itm_leather_gloves.set_weight(0.25)
itm_leather_gloves.set_abundance(120)
itm_leather_gloves.set_body_armor(2)


itm_mail_mittens = Item("itm_mail_mittens", "Mail_Mittens")
itm_mail_mittens.add_mesh(ItemMesh("mail_mittens_L"))
itm_mail_mittens.add_flag(ItemType.HAND_ARMOR)
itm_mail_mittens.add_flag(ItemFlag.IS_MERCHANDISE)
itm_mail_mittens.set_price(350)
itm_mail_mittens.add_modifier(IModBit.RUSTY)
itm_mail_mittens.add_modifier(IModBit.BATTERED)
itm_mail_mittens.add_modifier(IModBit.CRUDE)
itm_mail_mittens.add_modifier(IModBit.THICK)
itm_mail_mittens.add_modifier(IModBit.REINFORCED)
itm_mail_mittens.add_modifier(IModBit.LORDLY)
itm_mail_mittens.set_weight(0.5)
itm_mail_mittens.set_abundance(100)
itm_mail_mittens.set_body_armor(4)


itm_scale_gauntlets = Item("itm_scale_gauntlets", "Scale_Gauntlets")
itm_scale_gauntlets.add_mesh(ItemMesh("scale_gauntlets_b_L"))
itm_scale_gauntlets.add_flag(ItemType.HAND_ARMOR)
itm_scale_gauntlets.add_flag(ItemFlag.IS_MERCHANDISE)
itm_scale_gauntlets.set_price(710)
itm_scale_gauntlets.add_modifier(IModBit.RUSTY)
itm_scale_gauntlets.add_modifier(IModBit.BATTERED)
itm_scale_gauntlets.add_modifier(IModBit.CRUDE)
itm_scale_gauntlets.add_modifier(IModBit.THICK)
itm_scale_gauntlets.add_modifier(IModBit.REINFORCED)
itm_scale_gauntlets.add_modifier(IModBit.LORDLY)
itm_scale_gauntlets.set_weight(0.75)
itm_scale_gauntlets.set_abundance(100)
itm_scale_gauntlets.set_body_armor(5)


itm_lamellar_gauntlets = Item("itm_lamellar_gauntlets", "Lamellar_Gauntlets")
itm_lamellar_gauntlets.add_mesh(ItemMesh("scale_gauntlets_a_L"))
itm_lamellar_gauntlets.add_flag(ItemType.HAND_ARMOR)
itm_lamellar_gauntlets.add_flag(ItemFlag.IS_MERCHANDISE)
itm_lamellar_gauntlets.set_price(910)
itm_lamellar_gauntlets.add_modifier(IModBit.RUSTY)
itm_lamellar_gauntlets.add_modifier(IModBit.BATTERED)
itm_lamellar_gauntlets.add_modifier(IModBit.CRUDE)
itm_lamellar_gauntlets.add_modifier(IModBit.THICK)
itm_lamellar_gauntlets.add_modifier(IModBit.REINFORCED)
itm_lamellar_gauntlets.add_modifier(IModBit.LORDLY)
itm_lamellar_gauntlets.set_weight(0.75)
itm_lamellar_gauntlets.set_abundance(100)
itm_lamellar_gauntlets.set_body_armor(6)


itm_gauntlets = Item("itm_gauntlets", "Gauntlets")
itm_gauntlets.add_mesh(ItemMesh("gauntlets_L"))
meshx = ItemMesh("gauntlets_L")
meshx.add_modifier(IModBit.REINFORCED)
itm_gauntlets.add_mesh(meshx)
itm_gauntlets.add_flag(ItemType.HAND_ARMOR)
itm_gauntlets.add_flag(ItemFlag.IS_MERCHANDISE)
itm_gauntlets.set_price(1040)
itm_gauntlets.add_modifier(IModBit.RUSTY)
itm_gauntlets.add_modifier(IModBit.BATTERED)
itm_gauntlets.add_modifier(IModBit.CRUDE)
itm_gauntlets.add_modifier(IModBit.THICK)
itm_gauntlets.add_modifier(IModBit.REINFORCED)
itm_gauntlets.add_modifier(IModBit.LORDLY)
itm_gauntlets.set_weight(1.0)
itm_gauntlets.set_abundance(100)
itm_gauntlets.set_body_armor(7)


itm_wrapping_boots = Item("itm_wrapping_boots", "Wrapping_Boots")
itm_wrapping_boots.add_mesh(ItemMesh("wrapping_boots_a"))
itm_wrapping_boots.add_flag(ItemType.FOOT_ARMOR)
itm_wrapping_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_wrapping_boots.add_flag(ItemFlag.IS_MERCHANDISE)
itm_wrapping_boots.add_flag(ItemFlag.IS_CIVILIAN)
itm_wrapping_boots.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_wrapping_boots.set_price(3)
itm_wrapping_boots.add_modifier(IModBit.TETTERED)
itm_wrapping_boots.add_modifier(IModBit.RAGGED)
itm_wrapping_boots.add_modifier(IModBit.STURDY)
itm_wrapping_boots.add_modifier(IModBit.THICK)
itm_wrapping_boots.add_modifier(IModBit.HARDENED)
itm_wrapping_boots.set_weight(1.0)
itm_wrapping_boots.set_abundance(100)
itm_wrapping_boots.set_leg_armor(3)


itm_woolen_hose = Item("itm_woolen_hose", "Woolen_Hose")
itm_woolen_hose.add_mesh(ItemMesh("woolen_hose_a"))
itm_woolen_hose.add_flag(ItemType.FOOT_ARMOR)
itm_woolen_hose.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_woolen_hose.add_flag(ItemFlag.IS_MERCHANDISE)
itm_woolen_hose.add_flag(ItemFlag.IS_CIVILIAN)
itm_woolen_hose.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_woolen_hose.set_price(6)
itm_woolen_hose.add_modifier(IModBit.TETTERED)
itm_woolen_hose.add_modifier(IModBit.RAGGED)
itm_woolen_hose.add_modifier(IModBit.STURDY)
itm_woolen_hose.add_modifier(IModBit.THICK)
itm_woolen_hose.add_modifier(IModBit.HARDENED)
itm_woolen_hose.set_weight(1.0)
itm_woolen_hose.set_abundance(100)
itm_woolen_hose.set_leg_armor(4)


itm_blue_hose = Item("itm_blue_hose", "Blue_Hose")
itm_blue_hose.add_mesh(ItemMesh("blue_hose_a"))
itm_blue_hose.add_flag(ItemType.FOOT_ARMOR)
itm_blue_hose.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_blue_hose.add_flag(ItemFlag.IS_MERCHANDISE)
itm_blue_hose.add_flag(ItemFlag.IS_CIVILIAN)
itm_blue_hose.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_blue_hose.set_price(11)
itm_blue_hose.add_modifier(IModBit.TETTERED)
itm_blue_hose.add_modifier(IModBit.RAGGED)
itm_blue_hose.add_modifier(IModBit.STURDY)
itm_blue_hose.add_modifier(IModBit.THICK)
itm_blue_hose.add_modifier(IModBit.HARDENED)
itm_blue_hose.set_weight(1.0)
itm_blue_hose.set_abundance(100)
itm_blue_hose.set_leg_armor(5)


itm_hunter_boots = Item("itm_hunter_boots", "Hunter_Boots")
itm_hunter_boots.add_mesh(ItemMesh("hunter_boots_a"))
itm_hunter_boots.add_flag(ItemType.FOOT_ARMOR)
itm_hunter_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_hunter_boots.add_flag(ItemFlag.IS_MERCHANDISE)
itm_hunter_boots.add_flag(ItemFlag.IS_CIVILIAN)
itm_hunter_boots.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_hunter_boots.set_price(19)
itm_hunter_boots.add_modifier(IModBit.TETTERED)
itm_hunter_boots.add_modifier(IModBit.RAGGED)
itm_hunter_boots.add_modifier(IModBit.STURDY)
itm_hunter_boots.add_modifier(IModBit.THICK)
itm_hunter_boots.add_modifier(IModBit.HARDENED)
itm_hunter_boots.set_weight(1.25)
itm_hunter_boots.set_abundance(100)
itm_hunter_boots.set_leg_armor(9)


itm_hide_boots = Item("itm_hide_boots", "Hide_Boots")
itm_hide_boots.add_mesh(ItemMesh("hide_boots_a"))
itm_hide_boots.add_flag(ItemType.FOOT_ARMOR)
itm_hide_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_hide_boots.add_flag(ItemFlag.IS_MERCHANDISE)
itm_hide_boots.add_flag(ItemFlag.IS_CIVILIAN)
itm_hide_boots.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_hide_boots.set_price(34)
itm_hide_boots.add_modifier(IModBit.TETTERED)
itm_hide_boots.add_modifier(IModBit.RAGGED)
itm_hide_boots.add_modifier(IModBit.STURDY)
itm_hide_boots.add_modifier(IModBit.THICK)
itm_hide_boots.add_modifier(IModBit.HARDENED)
itm_hide_boots.set_weight(1.0)
itm_hide_boots.set_abundance(100)
itm_hide_boots.set_leg_armor(10)


itm_ankle_boots = Item("itm_ankle_boots", "Ankle_Boots")
itm_ankle_boots.add_mesh(ItemMesh("ankle_boots_a_new"))
itm_ankle_boots.add_flag(ItemType.FOOT_ARMOR)
itm_ankle_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_ankle_boots.add_flag(ItemFlag.IS_MERCHANDISE)
itm_ankle_boots.add_flag(ItemFlag.IS_CIVILIAN)
itm_ankle_boots.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_ankle_boots.set_price(75)
itm_ankle_boots.add_modifier(IModBit.TETTERED)
itm_ankle_boots.add_modifier(IModBit.RAGGED)
itm_ankle_boots.add_modifier(IModBit.STURDY)
itm_ankle_boots.add_modifier(IModBit.THICK)
itm_ankle_boots.add_modifier(IModBit.HARDENED)
itm_ankle_boots.set_weight(1.0)
itm_ankle_boots.set_abundance(100)
itm_ankle_boots.set_leg_armor(12)


itm_nomad_boots = Item("itm_nomad_boots", "Nomad_Boots")
itm_nomad_boots.add_mesh(ItemMesh("nomad_boots_a"))
itm_nomad_boots.add_flag(ItemType.FOOT_ARMOR)
itm_nomad_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_nomad_boots.add_flag(ItemFlag.IS_MERCHANDISE)
itm_nomad_boots.add_flag(ItemFlag.IS_CIVILIAN)
itm_nomad_boots.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_nomad_boots.set_price(90)
itm_nomad_boots.add_modifier(IModBit.TETTERED)
itm_nomad_boots.add_modifier(IModBit.RAGGED)
itm_nomad_boots.add_modifier(IModBit.STURDY)
itm_nomad_boots.add_modifier(IModBit.THICK)
itm_nomad_boots.add_modifier(IModBit.HARDENED)
itm_nomad_boots.set_weight(1.25)
itm_nomad_boots.set_abundance(100)
itm_nomad_boots.set_leg_armor(14)


itm_leather_boots = Item("itm_leather_boots", "Leather_Boots")
itm_leather_boots.add_mesh(ItemMesh("leather_boots_a"))
itm_leather_boots.add_flag(ItemType.FOOT_ARMOR)
itm_leather_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_leather_boots.add_flag(ItemFlag.IS_MERCHANDISE)
itm_leather_boots.add_flag(ItemFlag.IS_CIVILIAN)
itm_leather_boots.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_leather_boots.set_price(174)
itm_leather_boots.add_modifier(IModBit.TETTERED)
itm_leather_boots.add_modifier(IModBit.RAGGED)
itm_leather_boots.add_modifier(IModBit.STURDY)
itm_leather_boots.add_modifier(IModBit.THICK)
itm_leather_boots.add_modifier(IModBit.HARDENED)
itm_leather_boots.set_weight(1.25)
itm_leather_boots.set_abundance(100)
itm_leather_boots.set_leg_armor(16)


itm_splinted_leather_greaves = Item("itm_splinted_leather_greaves", "Splinted_Leather_Greaves")
itm_splinted_leather_greaves.add_mesh(ItemMesh("leather_greaves_a"))
itm_splinted_leather_greaves.add_flag(ItemType.FOOT_ARMOR)
itm_splinted_leather_greaves.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_splinted_leather_greaves.add_flag(ItemFlag.IS_MERCHANDISE)
itm_splinted_leather_greaves.set_price(310)
itm_splinted_leather_greaves.add_modifier(IModBit.RUSTY)
itm_splinted_leather_greaves.add_modifier(IModBit.BATTERED)
itm_splinted_leather_greaves.add_modifier(IModBit.CRUDE)
itm_splinted_leather_greaves.add_modifier(IModBit.THICK)
itm_splinted_leather_greaves.add_modifier(IModBit.REINFORCED)
itm_splinted_leather_greaves.add_modifier(IModBit.LORDLY)
itm_splinted_leather_greaves.set_weight(2.0)
itm_splinted_leather_greaves.set_abundance(100)
itm_splinted_leather_greaves.set_leg_armor(21)


itm_mail_chausses = Item("itm_mail_chausses", "Mail_Chausses")
itm_mail_chausses.add_mesh(ItemMesh("mail_chausses_a"))
itm_mail_chausses.add_flag(ItemType.FOOT_ARMOR)
itm_mail_chausses.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_mail_chausses.add_flag(ItemFlag.IS_MERCHANDISE)
itm_mail_chausses.set_price(530)
itm_mail_chausses.add_modifier(IModBit.RUSTY)
itm_mail_chausses.add_modifier(IModBit.BATTERED)
itm_mail_chausses.add_modifier(IModBit.CRUDE)
itm_mail_chausses.add_modifier(IModBit.THICK)
itm_mail_chausses.add_modifier(IModBit.REINFORCED)
itm_mail_chausses.add_modifier(IModBit.LORDLY)
itm_mail_chausses.set_weight(3.0)
itm_mail_chausses.set_abundance(100)
itm_mail_chausses.set_leg_armor(24)


itm_splinted_greaves = Item("itm_splinted_greaves", "Splinted_Greaves")
itm_splinted_greaves.add_mesh(ItemMesh("splinted_greaves_a"))
itm_splinted_greaves.add_flag(ItemType.FOOT_ARMOR)
itm_splinted_greaves.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_splinted_greaves.add_flag(ItemFlag.IS_MERCHANDISE)
itm_splinted_greaves.set_price(853)
itm_splinted_greaves.add_modifier(IModBit.RUSTY)
itm_splinted_greaves.add_modifier(IModBit.BATTERED)
itm_splinted_greaves.add_modifier(IModBit.CRUDE)
itm_splinted_greaves.add_modifier(IModBit.THICK)
itm_splinted_greaves.add_modifier(IModBit.REINFORCED)
itm_splinted_greaves.add_modifier(IModBit.LORDLY)
itm_splinted_greaves.set_weight(2.75)
itm_splinted_greaves.set_abundance(100)
itm_splinted_greaves.set_leg_armor(28)
itm_splinted_greaves.set_difficulty(7)


itm_mail_boots = Item("itm_mail_boots", "Mail_Boots")
itm_mail_boots.add_mesh(ItemMesh("mail_boots_a"))
itm_mail_boots.add_flag(ItemType.FOOT_ARMOR)
itm_mail_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_mail_boots.add_flag(ItemFlag.IS_MERCHANDISE)
itm_mail_boots.set_price(1250)
itm_mail_boots.add_modifier(IModBit.RUSTY)
itm_mail_boots.add_modifier(IModBit.BATTERED)
itm_mail_boots.add_modifier(IModBit.CRUDE)
itm_mail_boots.add_modifier(IModBit.THICK)
itm_mail_boots.add_modifier(IModBit.REINFORCED)
itm_mail_boots.add_modifier(IModBit.LORDLY)
itm_mail_boots.set_weight(3.0)
itm_mail_boots.set_abundance(100)
itm_mail_boots.set_leg_armor(31)
itm_mail_boots.set_difficulty(8)


itm_iron_greaves = Item("itm_iron_greaves", "Iron_Greaves")
itm_iron_greaves.add_mesh(ItemMesh("iron_greaves_a"))
itm_iron_greaves.add_flag(ItemType.FOOT_ARMOR)
itm_iron_greaves.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_iron_greaves.add_flag(ItemFlag.IS_MERCHANDISE)
itm_iron_greaves.set_price(1770)
itm_iron_greaves.add_modifier(IModBit.RUSTY)
itm_iron_greaves.add_modifier(IModBit.BATTERED)
itm_iron_greaves.add_modifier(IModBit.CRUDE)
itm_iron_greaves.add_modifier(IModBit.THICK)
itm_iron_greaves.add_modifier(IModBit.REINFORCED)
itm_iron_greaves.add_modifier(IModBit.LORDLY)
itm_iron_greaves.set_weight(3.5)
itm_iron_greaves.set_abundance(100)
itm_iron_greaves.set_leg_armor(33)
itm_iron_greaves.set_difficulty(9)


itm_black_greaves = Item("itm_black_greaves", "Black_Greaves")
itm_black_greaves.add_mesh(ItemMesh("black_greaves"))
itm_black_greaves.add_flag(ItemType.FOOT_ARMOR)
itm_black_greaves.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_black_greaves.set_price(2361)
itm_black_greaves.add_modifier(IModBit.RUSTY)
itm_black_greaves.add_modifier(IModBit.BATTERED)
itm_black_greaves.add_modifier(IModBit.CRUDE)
itm_black_greaves.add_modifier(IModBit.THICK)
itm_black_greaves.add_modifier(IModBit.REINFORCED)
itm_black_greaves.add_modifier(IModBit.LORDLY)
itm_black_greaves.set_weight(3.5)
itm_black_greaves.set_abundance(100)
itm_black_greaves.set_leg_armor(35)


itm_khergit_leather_boots = Item("itm_khergit_leather_boots", "Khergit_Leather_Boots")
itm_khergit_leather_boots.add_mesh(ItemMesh("khergit_leather_boots"))
itm_khergit_leather_boots.add_flag(ItemType.FOOT_ARMOR)
itm_khergit_leather_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_khergit_leather_boots.add_flag(ItemFlag.IS_MERCHANDISE)
itm_khergit_leather_boots.add_flag(ItemFlag.IS_CIVILIAN)
itm_khergit_leather_boots.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_khergit_leather_boots.set_price(120)
itm_khergit_leather_boots.add_modifier(IModBit.TETTERED)
itm_khergit_leather_boots.add_modifier(IModBit.RAGGED)
itm_khergit_leather_boots.add_modifier(IModBit.STURDY)
itm_khergit_leather_boots.add_modifier(IModBit.THICK)
itm_khergit_leather_boots.add_modifier(IModBit.HARDENED)
itm_khergit_leather_boots.set_weight(1.0)
itm_khergit_leather_boots.set_abundance(100)
itm_khergit_leather_boots.set_leg_armor(18)


itm_sarranid_boots_a = Item("itm_sarranid_boots_a", "Sarranid_Shoes")
itm_sarranid_boots_a.add_mesh(ItemMesh("sarranid_shoes"))
itm_sarranid_boots_a.add_flag(ItemType.FOOT_ARMOR)
itm_sarranid_boots_a.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_sarranid_boots_a.add_flag(ItemFlag.IS_CIVILIAN)
itm_sarranid_boots_a.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_sarranid_boots_a.set_price(30)
itm_sarranid_boots_a.add_modifier(IModBit.TETTERED)
itm_sarranid_boots_a.add_modifier(IModBit.RAGGED)
itm_sarranid_boots_a.add_modifier(IModBit.STURDY)
itm_sarranid_boots_a.add_modifier(IModBit.THICK)
itm_sarranid_boots_a.add_modifier(IModBit.HARDENED)
itm_sarranid_boots_a.set_weight(1.0)
itm_sarranid_boots_a.set_abundance(100)
itm_sarranid_boots_a.set_leg_armor(8)


itm_sarranid_boots_b = Item("itm_sarranid_boots_b", "Sarranid_Leather_Boots")
itm_sarranid_boots_b.add_mesh(ItemMesh("sarranid_boots"))
itm_sarranid_boots_b.add_flag(ItemType.FOOT_ARMOR)
itm_sarranid_boots_b.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_sarranid_boots_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sarranid_boots_b.add_flag(ItemFlag.IS_CIVILIAN)
itm_sarranid_boots_b.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_sarranid_boots_b.set_price(120)
itm_sarranid_boots_b.add_modifier(IModBit.TETTERED)
itm_sarranid_boots_b.add_modifier(IModBit.RAGGED)
itm_sarranid_boots_b.add_modifier(IModBit.STURDY)
itm_sarranid_boots_b.add_modifier(IModBit.THICK)
itm_sarranid_boots_b.add_modifier(IModBit.HARDENED)
itm_sarranid_boots_b.set_weight(2.0)
itm_sarranid_boots_b.set_abundance(100)
itm_sarranid_boots_b.set_leg_armor(16)


itm_sarranid_boots_c = Item("itm_sarranid_boots_c", "Plated_Boots")
itm_sarranid_boots_c.add_mesh(ItemMesh("sarranid_camel_boots"))
itm_sarranid_boots_c.add_flag(ItemType.FOOT_ARMOR)
itm_sarranid_boots_c.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_sarranid_boots_c.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sarranid_boots_c.add_flag(ItemFlag.IS_CIVILIAN)
itm_sarranid_boots_c.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_sarranid_boots_c.set_price(280)
itm_sarranid_boots_c.add_modifier(IModBit.CRACKED)
itm_sarranid_boots_c.add_modifier(IModBit.RUSTY)
itm_sarranid_boots_c.add_modifier(IModBit.BATTERED)
itm_sarranid_boots_c.add_modifier(IModBit.CRUDE)
itm_sarranid_boots_c.add_modifier(IModBit.THICK)
itm_sarranid_boots_c.add_modifier(IModBit.REINFORCED)
itm_sarranid_boots_c.add_modifier(IModBit.LORDLY)
itm_sarranid_boots_c.set_weight(3.0)
itm_sarranid_boots_c.set_abundance(100)
itm_sarranid_boots_c.set_leg_armor(20)


itm_sarranid_boots_d = Item("itm_sarranid_boots_d", "Sarranid_Mail_Boots")
itm_sarranid_boots_d.add_mesh(ItemMesh("sarranid_mail_chausses"))
itm_sarranid_boots_d.add_flag(ItemType.FOOT_ARMOR)
itm_sarranid_boots_d.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_sarranid_boots_d.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sarranid_boots_d.add_flag(ItemFlag.IS_CIVILIAN)
itm_sarranid_boots_d.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_sarranid_boots_d.set_price(920)
itm_sarranid_boots_d.add_modifier(IModBit.RUSTY)
itm_sarranid_boots_d.add_modifier(IModBit.BATTERED)
itm_sarranid_boots_d.add_modifier(IModBit.CRUDE)
itm_sarranid_boots_d.add_modifier(IModBit.THICK)
itm_sarranid_boots_d.add_modifier(IModBit.REINFORCED)
itm_sarranid_boots_d.add_modifier(IModBit.LORDLY)
itm_sarranid_boots_d.set_weight(3.0)
itm_sarranid_boots_d.set_abundance(100)
itm_sarranid_boots_d.set_leg_armor(30)


itm_sarranid_head_cloth = Item("itm_sarranid_head_cloth", "Lady_Head_Cloth")
itm_sarranid_head_cloth.add_mesh(ItemMesh("tulbent"))
itm_sarranid_head_cloth.add_flag(ItemType.HEAD_ARMOR)
itm_sarranid_head_cloth.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_sarranid_head_cloth.add_flag(ItemFlag.COVERS_LEGS)
itm_sarranid_head_cloth.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_sarranid_head_cloth.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_sarranid_head_cloth.add_flag(ItemFlag.IS_CIVILIAN)
itm_sarranid_head_cloth.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_sarranid_head_cloth.set_price(1)
itm_sarranid_head_cloth.add_modifier(IModBit.TETTERED)
itm_sarranid_head_cloth.add_modifier(IModBit.RAGGED)
itm_sarranid_head_cloth.add_modifier(IModBit.STURDY)
itm_sarranid_head_cloth.add_modifier(IModBit.THICK)
itm_sarranid_head_cloth.add_modifier(IModBit.HARDENED)
itm_sarranid_head_cloth.set_weight(0.5)
itm_sarranid_head_cloth.set_abundance(100)
itm_sarranid_head_cloth.set_head_armor(4)


itm_sarranid_head_cloth_b = Item("itm_sarranid_head_cloth_b", "Lady_Head_Cloth")
itm_sarranid_head_cloth_b.add_mesh(ItemMesh("tulbent_b"))
itm_sarranid_head_cloth_b.add_flag(ItemType.HEAD_ARMOR)
itm_sarranid_head_cloth_b.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_sarranid_head_cloth_b.add_flag(ItemFlag.COVERS_LEGS)
itm_sarranid_head_cloth_b.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_sarranid_head_cloth_b.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_sarranid_head_cloth_b.add_flag(ItemFlag.IS_CIVILIAN)
itm_sarranid_head_cloth_b.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_sarranid_head_cloth_b.set_price(1)
itm_sarranid_head_cloth_b.add_modifier(IModBit.TETTERED)
itm_sarranid_head_cloth_b.add_modifier(IModBit.RAGGED)
itm_sarranid_head_cloth_b.add_modifier(IModBit.STURDY)
itm_sarranid_head_cloth_b.add_modifier(IModBit.THICK)
itm_sarranid_head_cloth_b.add_modifier(IModBit.HARDENED)
itm_sarranid_head_cloth_b.set_weight(0.5)
itm_sarranid_head_cloth_b.set_abundance(100)
itm_sarranid_head_cloth_b.set_head_armor(4)


itm_sarranid_felt_head_cloth = Item("itm_sarranid_felt_head_cloth", "Head_Cloth")
itm_sarranid_felt_head_cloth.add_mesh(ItemMesh("common_tulbent"))
itm_sarranid_felt_head_cloth.add_flag(ItemType.HEAD_ARMOR)
itm_sarranid_felt_head_cloth.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_sarranid_felt_head_cloth.add_flag(ItemFlag.IS_CIVILIAN)
itm_sarranid_felt_head_cloth.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_sarranid_felt_head_cloth.set_price(1)
itm_sarranid_felt_head_cloth.add_modifier(IModBit.TETTERED)
itm_sarranid_felt_head_cloth.add_modifier(IModBit.RAGGED)
itm_sarranid_felt_head_cloth.add_modifier(IModBit.STURDY)
itm_sarranid_felt_head_cloth.add_modifier(IModBit.THICK)
itm_sarranid_felt_head_cloth.add_modifier(IModBit.HARDENED)
itm_sarranid_felt_head_cloth.set_weight(0.5)
itm_sarranid_felt_head_cloth.set_abundance(100)
itm_sarranid_felt_head_cloth.set_head_armor(4)


itm_sarranid_felt_head_cloth_b = Item("itm_sarranid_felt_head_cloth_b", "Head_Cloth")
itm_sarranid_felt_head_cloth_b.add_mesh(ItemMesh("common_tulbent_b"))
itm_sarranid_felt_head_cloth_b.add_flag(ItemType.HEAD_ARMOR)
itm_sarranid_felt_head_cloth_b.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_sarranid_felt_head_cloth_b.add_flag(ItemFlag.IS_CIVILIAN)
itm_sarranid_felt_head_cloth_b.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_sarranid_felt_head_cloth_b.set_price(1)
itm_sarranid_felt_head_cloth_b.add_modifier(IModBit.TETTERED)
itm_sarranid_felt_head_cloth_b.add_modifier(IModBit.RAGGED)
itm_sarranid_felt_head_cloth_b.add_modifier(IModBit.STURDY)
itm_sarranid_felt_head_cloth_b.add_modifier(IModBit.THICK)
itm_sarranid_felt_head_cloth_b.add_modifier(IModBit.HARDENED)
itm_sarranid_felt_head_cloth_b.set_weight(0.5)
itm_sarranid_felt_head_cloth_b.set_abundance(100)
itm_sarranid_felt_head_cloth_b.set_head_armor(4)


itm_lady_dress_ruby = Item("itm_lady_dress_ruby", "Lady_Dress")
itm_lady_dress_ruby.add_mesh(ItemMesh("lady_dress_r"))
itm_lady_dress_ruby.add_flag(ItemType.BODY_ARMOR)
itm_lady_dress_ruby.add_flag(ItemFlag.COVERS_LEGS)
itm_lady_dress_ruby.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_lady_dress_ruby.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_lady_dress_ruby.add_flag(ItemFlag.IS_CIVILIAN)
itm_lady_dress_ruby.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_lady_dress_ruby.set_price(500)
itm_lady_dress_ruby.add_modifier(IModBit.TETTERED)
itm_lady_dress_ruby.add_modifier(IModBit.RAGGED)
itm_lady_dress_ruby.add_modifier(IModBit.STURDY)
itm_lady_dress_ruby.add_modifier(IModBit.THICK)
itm_lady_dress_ruby.add_modifier(IModBit.HARDENED)
itm_lady_dress_ruby.set_weight(3.0)
itm_lady_dress_ruby.set_abundance(100)
itm_lady_dress_ruby.set_body_armor(10)
itm_lady_dress_ruby.set_leg_armor(10)


itm_lady_dress_green = Item("itm_lady_dress_green", "Lady_Dress")
itm_lady_dress_green.add_mesh(ItemMesh("lady_dress_g"))
itm_lady_dress_green.add_flag(ItemType.BODY_ARMOR)
itm_lady_dress_green.add_flag(ItemFlag.COVERS_LEGS)
itm_lady_dress_green.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_lady_dress_green.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_lady_dress_green.add_flag(ItemFlag.IS_CIVILIAN)
itm_lady_dress_green.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_lady_dress_green.set_price(500)
itm_lady_dress_green.add_modifier(IModBit.TETTERED)
itm_lady_dress_green.add_modifier(IModBit.RAGGED)
itm_lady_dress_green.add_modifier(IModBit.STURDY)
itm_lady_dress_green.add_modifier(IModBit.THICK)
itm_lady_dress_green.add_modifier(IModBit.HARDENED)
itm_lady_dress_green.set_weight(3.0)
itm_lady_dress_green.set_abundance(100)
itm_lady_dress_green.set_body_armor(10)
itm_lady_dress_green.set_leg_armor(10)


itm_lady_dress_blue = Item("itm_lady_dress_blue", "Lady_Dress")
itm_lady_dress_blue.add_mesh(ItemMesh("lady_dress_b"))
itm_lady_dress_blue.add_flag(ItemType.BODY_ARMOR)
itm_lady_dress_blue.add_flag(ItemFlag.COVERS_LEGS)
itm_lady_dress_blue.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_lady_dress_blue.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_lady_dress_blue.add_flag(ItemFlag.IS_CIVILIAN)
itm_lady_dress_blue.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_lady_dress_blue.set_price(500)
itm_lady_dress_blue.add_modifier(IModBit.TETTERED)
itm_lady_dress_blue.add_modifier(IModBit.RAGGED)
itm_lady_dress_blue.add_modifier(IModBit.STURDY)
itm_lady_dress_blue.add_modifier(IModBit.THICK)
itm_lady_dress_blue.add_modifier(IModBit.HARDENED)
itm_lady_dress_blue.set_weight(3.0)
itm_lady_dress_blue.set_abundance(100)
itm_lady_dress_blue.set_body_armor(10)
itm_lady_dress_blue.set_leg_armor(10)


itm_red_dress = Item("itm_red_dress", "Red_Dress")
itm_red_dress.add_mesh(ItemMesh("red_dress"))
itm_red_dress.add_flag(ItemType.BODY_ARMOR)
itm_red_dress.add_flag(ItemFlag.COVERS_LEGS)
itm_red_dress.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_red_dress.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_red_dress.add_flag(ItemFlag.IS_CIVILIAN)
itm_red_dress.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_red_dress.set_price(500)
itm_red_dress.add_modifier(IModBit.TETTERED)
itm_red_dress.add_modifier(IModBit.RAGGED)
itm_red_dress.add_modifier(IModBit.STURDY)
itm_red_dress.add_modifier(IModBit.THICK)
itm_red_dress.add_modifier(IModBit.HARDENED)
itm_red_dress.set_weight(3.0)
itm_red_dress.set_abundance(100)
itm_red_dress.set_body_armor(10)
itm_red_dress.set_leg_armor(10)


itm_brown_dress = Item("itm_brown_dress", "Brown_Dress")
itm_brown_dress.add_mesh(ItemMesh("brown_dress"))
itm_brown_dress.add_flag(ItemType.BODY_ARMOR)
itm_brown_dress.add_flag(ItemFlag.COVERS_LEGS)
itm_brown_dress.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_brown_dress.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_brown_dress.add_flag(ItemFlag.IS_CIVILIAN)
itm_brown_dress.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_brown_dress.set_price(500)
itm_brown_dress.add_modifier(IModBit.TETTERED)
itm_brown_dress.add_modifier(IModBit.RAGGED)
itm_brown_dress.add_modifier(IModBit.STURDY)
itm_brown_dress.add_modifier(IModBit.THICK)
itm_brown_dress.add_modifier(IModBit.HARDENED)
itm_brown_dress.set_weight(3.0)
itm_brown_dress.set_abundance(100)
itm_brown_dress.set_body_armor(10)
itm_brown_dress.set_leg_armor(10)


itm_green_dress = Item("itm_green_dress", "Green_Dress")
itm_green_dress.add_mesh(ItemMesh("green_dress"))
itm_green_dress.add_flag(ItemType.BODY_ARMOR)
itm_green_dress.add_flag(ItemFlag.COVERS_LEGS)
itm_green_dress.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_green_dress.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_green_dress.add_flag(ItemFlag.IS_CIVILIAN)
itm_green_dress.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_green_dress.set_price(500)
itm_green_dress.add_modifier(IModBit.TETTERED)
itm_green_dress.add_modifier(IModBit.RAGGED)
itm_green_dress.add_modifier(IModBit.STURDY)
itm_green_dress.add_modifier(IModBit.THICK)
itm_green_dress.add_modifier(IModBit.HARDENED)
itm_green_dress.set_weight(3.0)
itm_green_dress.set_abundance(100)
itm_green_dress.set_body_armor(10)
itm_green_dress.set_leg_armor(10)


itm_khergit_lady_dress = Item("itm_khergit_lady_dress", "Khergit_Lady_Dress")
itm_khergit_lady_dress.add_mesh(ItemMesh("khergit_lady_dress"))
itm_khergit_lady_dress.add_flag(ItemType.BODY_ARMOR)
itm_khergit_lady_dress.add_flag(ItemFlag.COVERS_LEGS)
itm_khergit_lady_dress.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_khergit_lady_dress.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_khergit_lady_dress.add_flag(ItemFlag.IS_CIVILIAN)
itm_khergit_lady_dress.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_khergit_lady_dress.set_price(500)
itm_khergit_lady_dress.add_modifier(IModBit.TETTERED)
itm_khergit_lady_dress.add_modifier(IModBit.RAGGED)
itm_khergit_lady_dress.add_modifier(IModBit.STURDY)
itm_khergit_lady_dress.add_modifier(IModBit.THICK)
itm_khergit_lady_dress.add_modifier(IModBit.HARDENED)
itm_khergit_lady_dress.set_weight(3.0)
itm_khergit_lady_dress.set_abundance(100)
itm_khergit_lady_dress.set_body_armor(10)
itm_khergit_lady_dress.set_leg_armor(10)


itm_khergit_lady_dress_b = Item("itm_khergit_lady_dress_b", "Khergit_Leather_Lady_Dress")
itm_khergit_lady_dress_b.add_mesh(ItemMesh("khergit_lady_dress_b"))
itm_khergit_lady_dress_b.add_flag(ItemType.BODY_ARMOR)
itm_khergit_lady_dress_b.add_flag(ItemFlag.COVERS_LEGS)
itm_khergit_lady_dress_b.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_khergit_lady_dress_b.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_khergit_lady_dress_b.add_flag(ItemFlag.IS_CIVILIAN)
itm_khergit_lady_dress_b.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_khergit_lady_dress_b.set_price(500)
itm_khergit_lady_dress_b.add_modifier(IModBit.TETTERED)
itm_khergit_lady_dress_b.add_modifier(IModBit.RAGGED)
itm_khergit_lady_dress_b.add_modifier(IModBit.STURDY)
itm_khergit_lady_dress_b.add_modifier(IModBit.THICK)
itm_khergit_lady_dress_b.add_modifier(IModBit.HARDENED)
itm_khergit_lady_dress_b.set_weight(3.0)
itm_khergit_lady_dress_b.set_abundance(100)
itm_khergit_lady_dress_b.set_body_armor(10)
itm_khergit_lady_dress_b.set_leg_armor(10)


itm_sarranid_lady_dress = Item("itm_sarranid_lady_dress", "Sarranid_Lady_Dress")
itm_sarranid_lady_dress.add_mesh(ItemMesh("sarranid_lady_dress"))
itm_sarranid_lady_dress.add_flag(ItemType.BODY_ARMOR)
itm_sarranid_lady_dress.add_flag(ItemFlag.COVERS_LEGS)
itm_sarranid_lady_dress.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_sarranid_lady_dress.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_sarranid_lady_dress.add_flag(ItemFlag.IS_CIVILIAN)
itm_sarranid_lady_dress.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_sarranid_lady_dress.set_price(500)
itm_sarranid_lady_dress.add_modifier(IModBit.TETTERED)
itm_sarranid_lady_dress.add_modifier(IModBit.RAGGED)
itm_sarranid_lady_dress.add_modifier(IModBit.STURDY)
itm_sarranid_lady_dress.add_modifier(IModBit.THICK)
itm_sarranid_lady_dress.add_modifier(IModBit.HARDENED)
itm_sarranid_lady_dress.set_weight(3.0)
itm_sarranid_lady_dress.set_abundance(100)
itm_sarranid_lady_dress.set_body_armor(10)
itm_sarranid_lady_dress.set_leg_armor(10)


itm_sarranid_lady_dress_b = Item("itm_sarranid_lady_dress_b", "Sarranid_Lady_Dress")
itm_sarranid_lady_dress_b.add_mesh(ItemMesh("sarranid_lady_dress_b"))
itm_sarranid_lady_dress_b.add_flag(ItemType.BODY_ARMOR)
itm_sarranid_lady_dress_b.add_flag(ItemFlag.COVERS_LEGS)
itm_sarranid_lady_dress_b.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_sarranid_lady_dress_b.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_sarranid_lady_dress_b.add_flag(ItemFlag.IS_CIVILIAN)
itm_sarranid_lady_dress_b.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_sarranid_lady_dress_b.set_price(500)
itm_sarranid_lady_dress_b.add_modifier(IModBit.TETTERED)
itm_sarranid_lady_dress_b.add_modifier(IModBit.RAGGED)
itm_sarranid_lady_dress_b.add_modifier(IModBit.STURDY)
itm_sarranid_lady_dress_b.add_modifier(IModBit.THICK)
itm_sarranid_lady_dress_b.add_modifier(IModBit.HARDENED)
itm_sarranid_lady_dress_b.set_weight(3.0)
itm_sarranid_lady_dress_b.set_abundance(100)
itm_sarranid_lady_dress_b.set_body_armor(10)
itm_sarranid_lady_dress_b.set_leg_armor(10)


itm_sarranid_common_dress = Item("itm_sarranid_common_dress", "Sarranid_Dress")
itm_sarranid_common_dress.add_mesh(ItemMesh("sarranid_common_dress"))
itm_sarranid_common_dress.add_flag(ItemType.BODY_ARMOR)
itm_sarranid_common_dress.add_flag(ItemFlag.COVERS_LEGS)
itm_sarranid_common_dress.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_sarranid_common_dress.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_sarranid_common_dress.add_flag(ItemFlag.IS_CIVILIAN)
itm_sarranid_common_dress.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_sarranid_common_dress.set_price(500)
itm_sarranid_common_dress.add_modifier(IModBit.TETTERED)
itm_sarranid_common_dress.add_modifier(IModBit.RAGGED)
itm_sarranid_common_dress.add_modifier(IModBit.STURDY)
itm_sarranid_common_dress.add_modifier(IModBit.THICK)
itm_sarranid_common_dress.add_modifier(IModBit.HARDENED)
itm_sarranid_common_dress.set_weight(3.0)
itm_sarranid_common_dress.set_abundance(100)
itm_sarranid_common_dress.set_body_armor(10)
itm_sarranid_common_dress.set_leg_armor(10)


itm_sarranid_common_dress_b = Item("itm_sarranid_common_dress_b", "Sarranid_Dress")
itm_sarranid_common_dress_b.add_mesh(ItemMesh("sarranid_common_dress_b"))
itm_sarranid_common_dress_b.add_flag(ItemType.BODY_ARMOR)
itm_sarranid_common_dress_b.add_flag(ItemFlag.COVERS_LEGS)
itm_sarranid_common_dress_b.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_sarranid_common_dress_b.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_sarranid_common_dress_b.add_flag(ItemFlag.IS_CIVILIAN)
itm_sarranid_common_dress_b.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_sarranid_common_dress_b.set_price(500)
itm_sarranid_common_dress_b.add_modifier(IModBit.TETTERED)
itm_sarranid_common_dress_b.add_modifier(IModBit.RAGGED)
itm_sarranid_common_dress_b.add_modifier(IModBit.STURDY)
itm_sarranid_common_dress_b.add_modifier(IModBit.THICK)
itm_sarranid_common_dress_b.add_modifier(IModBit.HARDENED)
itm_sarranid_common_dress_b.set_weight(3.0)
itm_sarranid_common_dress_b.set_abundance(100)
itm_sarranid_common_dress_b.set_body_armor(10)
itm_sarranid_common_dress_b.set_leg_armor(10)


itm_courtly_outfit = Item("itm_courtly_outfit", "Courtly_Outfit")
itm_courtly_outfit.add_mesh(ItemMesh("nobleman_outf"))
itm_courtly_outfit.add_flag(ItemType.BODY_ARMOR)
itm_courtly_outfit.add_flag(ItemFlag.COVERS_LEGS)
itm_courtly_outfit.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_courtly_outfit.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_courtly_outfit.add_flag(ItemFlag.IS_CIVILIAN)
itm_courtly_outfit.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_courtly_outfit.set_price(348)
itm_courtly_outfit.add_modifier(IModBit.TETTERED)
itm_courtly_outfit.add_modifier(IModBit.RAGGED)
itm_courtly_outfit.add_modifier(IModBit.STURDY)
itm_courtly_outfit.add_modifier(IModBit.THICK)
itm_courtly_outfit.add_modifier(IModBit.HARDENED)
itm_courtly_outfit.set_weight(4.0)
itm_courtly_outfit.set_abundance(100)
itm_courtly_outfit.set_body_armor(14)
itm_courtly_outfit.set_leg_armor(10)


itm_nobleman_outfit = Item("itm_nobleman_outfit", "Nobleman_Outfit")
itm_nobleman_outfit.add_mesh(ItemMesh("nobleman_outfit_b_new"))
itm_nobleman_outfit.add_flag(ItemType.BODY_ARMOR)
itm_nobleman_outfit.add_flag(ItemFlag.COVERS_LEGS)
itm_nobleman_outfit.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_nobleman_outfit.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_nobleman_outfit.add_flag(ItemFlag.IS_CIVILIAN)
itm_nobleman_outfit.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_nobleman_outfit.set_price(348)
itm_nobleman_outfit.add_modifier(IModBit.TETTERED)
itm_nobleman_outfit.add_modifier(IModBit.RAGGED)
itm_nobleman_outfit.add_modifier(IModBit.STURDY)
itm_nobleman_outfit.add_modifier(IModBit.THICK)
itm_nobleman_outfit.add_modifier(IModBit.HARDENED)
itm_nobleman_outfit.set_weight(4.0)
itm_nobleman_outfit.set_abundance(100)
itm_nobleman_outfit.set_body_armor(15)
itm_nobleman_outfit.set_leg_armor(12)


itm_nomad_armor = Item("itm_nomad_armor", "Nomad_Armor")
itm_nomad_armor.add_mesh(ItemMesh("nomad_armor_new"))
itm_nomad_armor.add_flag(ItemType.BODY_ARMOR)
itm_nomad_armor.add_flag(ItemFlag.IS_MERCHANDISE)
itm_nomad_armor.add_flag(ItemFlag.COVERS_LEGS)
itm_nomad_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_nomad_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_nomad_armor.set_price(25)
itm_nomad_armor.add_modifier(IModBit.TETTERED)
itm_nomad_armor.add_modifier(IModBit.RAGGED)
itm_nomad_armor.add_modifier(IModBit.STURDY)
itm_nomad_armor.add_modifier(IModBit.THICK)
itm_nomad_armor.add_modifier(IModBit.HARDENED)
itm_nomad_armor.set_weight(2.0)
itm_nomad_armor.set_abundance(100)
itm_nomad_armor.set_body_armor(24)


itm_khergit_armor = Item("itm_khergit_armor", "Khergit_Armor")
itm_khergit_armor.add_mesh(ItemMesh("khergit_armor_new"))
itm_khergit_armor.add_flag(ItemType.BODY_ARMOR)
itm_khergit_armor.add_flag(ItemFlag.IS_MERCHANDISE)
itm_khergit_armor.add_flag(ItemFlag.COVERS_LEGS)
itm_khergit_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_khergit_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_khergit_armor.set_price(38)
itm_khergit_armor.add_modifier(IModBit.TETTERED)
itm_khergit_armor.add_modifier(IModBit.RAGGED)
itm_khergit_armor.add_modifier(IModBit.STURDY)
itm_khergit_armor.add_modifier(IModBit.THICK)
itm_khergit_armor.add_modifier(IModBit.HARDENED)
itm_khergit_armor.set_weight(2.0)
itm_khergit_armor.set_abundance(100)
itm_khergit_armor.set_body_armor(24)


itm_leather_jacket = Item("itm_leather_jacket", "Leather_Jacket")
itm_leather_jacket.add_mesh(ItemMesh("leather_jacket_new"))
itm_leather_jacket.add_flag(ItemType.BODY_ARMOR)
itm_leather_jacket.add_flag(ItemFlag.IS_MERCHANDISE)
itm_leather_jacket.add_flag(ItemFlag.COVERS_LEGS)
itm_leather_jacket.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_leather_jacket.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_leather_jacket.add_flag(ItemFlag.IS_CIVILIAN)
itm_leather_jacket.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_leather_jacket.set_price(50)
itm_leather_jacket.add_modifier(IModBit.TETTERED)
itm_leather_jacket.add_modifier(IModBit.RAGGED)
itm_leather_jacket.add_modifier(IModBit.STURDY)
itm_leather_jacket.add_modifier(IModBit.THICK)
itm_leather_jacket.add_modifier(IModBit.HARDENED)
itm_leather_jacket.set_weight(3.0)
itm_leather_jacket.set_abundance(100)
itm_leather_jacket.set_body_armor(20)


itm_rawhide_coat = Item("itm_rawhide_coat", "Rawhide_Coat")
itm_rawhide_coat.add_mesh(ItemMesh("coat_of_plates_b"))
itm_rawhide_coat.add_flag(ItemType.BODY_ARMOR)
itm_rawhide_coat.add_flag(ItemFlag.IS_MERCHANDISE)
itm_rawhide_coat.add_flag(ItemFlag.COVERS_LEGS)
itm_rawhide_coat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_rawhide_coat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_rawhide_coat.add_flag(ItemFlag.IS_CIVILIAN)
itm_rawhide_coat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_rawhide_coat.set_price(12)
itm_rawhide_coat.add_modifier(IModBit.TETTERED)
itm_rawhide_coat.add_modifier(IModBit.RAGGED)
itm_rawhide_coat.add_modifier(IModBit.STURDY)
itm_rawhide_coat.add_modifier(IModBit.THICK)
itm_rawhide_coat.add_modifier(IModBit.HARDENED)
itm_rawhide_coat.set_weight(5.0)
itm_rawhide_coat.set_abundance(100)
itm_rawhide_coat.set_body_armor(10)


itm_leather_armor = Item("itm_leather_armor", "Leather_Armor")
itm_leather_armor.add_mesh(ItemMesh("tattered_leather_armor_a"))
itm_leather_armor.add_flag(ItemType.BODY_ARMOR)
itm_leather_armor.add_flag(ItemFlag.IS_MERCHANDISE)
itm_leather_armor.add_flag(ItemFlag.COVERS_LEGS)
itm_leather_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_leather_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_leather_armor.set_price(65)
itm_leather_armor.add_modifier(IModBit.TETTERED)
itm_leather_armor.add_modifier(IModBit.RAGGED)
itm_leather_armor.add_modifier(IModBit.STURDY)
itm_leather_armor.add_modifier(IModBit.THICK)
itm_leather_armor.add_modifier(IModBit.HARDENED)
itm_leather_armor.set_weight(7.0)
itm_leather_armor.set_abundance(100)
itm_leather_armor.set_body_armor(18)


itm_fur_coat = Item("itm_fur_coat", "Fur_Coat")
itm_fur_coat.add_mesh(ItemMesh("fur_coat"))
itm_fur_coat.add_flag(ItemType.BODY_ARMOR)
itm_fur_coat.add_flag(ItemFlag.IS_MERCHANDISE)
itm_fur_coat.add_flag(ItemFlag.COVERS_LEGS)
itm_fur_coat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_fur_coat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_fur_coat.add_flag(ItemFlag.IS_CIVILIAN)
itm_fur_coat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_fur_coat.set_price(117)
itm_fur_coat.add_modifier(IModBit.RUSTY)
itm_fur_coat.add_modifier(IModBit.BATTERED)
itm_fur_coat.add_modifier(IModBit.CRUDE)
itm_fur_coat.add_modifier(IModBit.THICK)
itm_fur_coat.add_modifier(IModBit.REINFORCED)
itm_fur_coat.add_modifier(IModBit.LORDLY)
itm_fur_coat.set_weight(6.0)
itm_fur_coat.set_abundance(100)
itm_fur_coat.set_body_armor(13)
itm_fur_coat.set_leg_armor(6)


itm_coat = Item("itm_coat", "Coat")
itm_coat.add_mesh(ItemMesh("nobleman_outf"))
itm_coat.add_flag(ItemType.BODY_ARMOR)
itm_coat.add_flag(ItemFlag.COVERS_LEGS)
itm_coat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_coat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_coat.add_flag(ItemFlag.IS_CIVILIAN)
itm_coat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_coat.set_price(348)
itm_coat.add_modifier(IModBit.TETTERED)
itm_coat.add_modifier(IModBit.RAGGED)
itm_coat.add_modifier(IModBit.STURDY)
itm_coat.add_modifier(IModBit.THICK)
itm_coat.add_modifier(IModBit.HARDENED)
itm_coat.set_weight(4.0)
itm_coat.set_abundance(100)
itm_coat.set_body_armor(14)
itm_coat.set_leg_armor(10)


itm_leather_coat = Item("itm_leather_coat", "Leather_Coat")
itm_leather_coat.add_mesh(ItemMesh("nobleman_outf"))
itm_leather_coat.add_flag(ItemType.BODY_ARMOR)
itm_leather_coat.add_flag(ItemFlag.COVERS_LEGS)
itm_leather_coat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_leather_coat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_leather_coat.add_flag(ItemFlag.IS_CIVILIAN)
itm_leather_coat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_leather_coat.set_price(348)
itm_leather_coat.add_modifier(IModBit.TETTERED)
itm_leather_coat.add_modifier(IModBit.RAGGED)
itm_leather_coat.add_modifier(IModBit.STURDY)
itm_leather_coat.add_modifier(IModBit.THICK)
itm_leather_coat.add_modifier(IModBit.HARDENED)
itm_leather_coat.set_weight(4.0)
itm_leather_coat.set_abundance(100)
itm_leather_coat.set_body_armor(14)
itm_leather_coat.set_leg_armor(10)


itm_mail_coat = Item("itm_mail_coat", "Coat_of_Mail")
itm_mail_coat.add_mesh(ItemMesh("nobleman_outf"))
itm_mail_coat.add_flag(ItemType.BODY_ARMOR)
itm_mail_coat.add_flag(ItemFlag.COVERS_LEGS)
itm_mail_coat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_mail_coat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_mail_coat.add_flag(ItemFlag.IS_CIVILIAN)
itm_mail_coat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_mail_coat.set_price(348)
itm_mail_coat.add_modifier(IModBit.TETTERED)
itm_mail_coat.add_modifier(IModBit.RAGGED)
itm_mail_coat.add_modifier(IModBit.STURDY)
itm_mail_coat.add_modifier(IModBit.THICK)
itm_mail_coat.add_modifier(IModBit.HARDENED)
itm_mail_coat.set_weight(4.0)
itm_mail_coat.set_abundance(100)
itm_mail_coat.set_body_armor(14)
itm_mail_coat.set_leg_armor(10)


itm_long_mail_coat = Item("itm_long_mail_coat", "Long_Coat_of_Mail")
itm_long_mail_coat.add_mesh(ItemMesh("nobleman_outf"))
itm_long_mail_coat.add_flag(ItemType.BODY_ARMOR)
itm_long_mail_coat.add_flag(ItemFlag.COVERS_LEGS)
itm_long_mail_coat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_long_mail_coat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_long_mail_coat.add_flag(ItemFlag.IS_CIVILIAN)
itm_long_mail_coat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_long_mail_coat.set_price(348)
itm_long_mail_coat.add_modifier(IModBit.TETTERED)
itm_long_mail_coat.add_modifier(IModBit.RAGGED)
itm_long_mail_coat.add_modifier(IModBit.STURDY)
itm_long_mail_coat.add_modifier(IModBit.THICK)
itm_long_mail_coat.add_modifier(IModBit.HARDENED)
itm_long_mail_coat.set_weight(4.0)
itm_long_mail_coat.set_abundance(100)
itm_long_mail_coat.set_body_armor(14)
itm_long_mail_coat.set_leg_armor(10)


itm_mail_with_tunic_red = Item("itm_mail_with_tunic_red", "Mail_with_Tunic")
itm_mail_with_tunic_red.add_mesh(ItemMesh("arena_armorR_new"))
itm_mail_with_tunic_red.add_flag(ItemType.BODY_ARMOR)
itm_mail_with_tunic_red.add_flag(ItemFlag.COVERS_LEGS)
itm_mail_with_tunic_red.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_mail_with_tunic_red.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_mail_with_tunic_red.set_price(650)
itm_mail_with_tunic_red.add_modifier(IModBit.RUSTY)
itm_mail_with_tunic_red.add_modifier(IModBit.BATTERED)
itm_mail_with_tunic_red.add_modifier(IModBit.CRUDE)
itm_mail_with_tunic_red.add_modifier(IModBit.THICK)
itm_mail_with_tunic_red.add_modifier(IModBit.REINFORCED)
itm_mail_with_tunic_red.add_modifier(IModBit.LORDLY)
itm_mail_with_tunic_red.set_weight(16.0)
itm_mail_with_tunic_red.set_abundance(100)
itm_mail_with_tunic_red.set_body_armor(39)
itm_mail_with_tunic_red.set_leg_armor(8)


itm_mail_with_tunic_green = Item("itm_mail_with_tunic_green", "Mail_with_Tunic")
itm_mail_with_tunic_green.add_mesh(ItemMesh("arena_armorG_new"))
itm_mail_with_tunic_green.add_flag(ItemType.BODY_ARMOR)
itm_mail_with_tunic_green.add_flag(ItemFlag.COVERS_LEGS)
itm_mail_with_tunic_green.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_mail_with_tunic_green.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_mail_with_tunic_green.set_price(650)
itm_mail_with_tunic_green.add_modifier(IModBit.RUSTY)
itm_mail_with_tunic_green.add_modifier(IModBit.BATTERED)
itm_mail_with_tunic_green.add_modifier(IModBit.CRUDE)
itm_mail_with_tunic_green.add_modifier(IModBit.THICK)
itm_mail_with_tunic_green.add_modifier(IModBit.REINFORCED)
itm_mail_with_tunic_green.add_modifier(IModBit.LORDLY)
itm_mail_with_tunic_green.set_weight(16.0)
itm_mail_with_tunic_green.set_abundance(100)
itm_mail_with_tunic_green.set_body_armor(39)
itm_mail_with_tunic_green.set_leg_armor(8)


itm_hide_coat = Item("itm_hide_coat", "Hide_Coat")
itm_hide_coat.add_mesh(ItemMesh("nobleman_outf"))
itm_hide_coat.add_flag(ItemType.BODY_ARMOR)
itm_hide_coat.add_flag(ItemFlag.COVERS_LEGS)
itm_hide_coat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_hide_coat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_hide_coat.add_flag(ItemFlag.IS_CIVILIAN)
itm_hide_coat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_hide_coat.set_price(348)
itm_hide_coat.add_modifier(IModBit.TETTERED)
itm_hide_coat.add_modifier(IModBit.RAGGED)
itm_hide_coat.add_modifier(IModBit.STURDY)
itm_hide_coat.add_modifier(IModBit.THICK)
itm_hide_coat.add_modifier(IModBit.HARDENED)
itm_hide_coat.set_weight(4.0)
itm_hide_coat.set_abundance(100)
itm_hide_coat.set_body_armor(14)
itm_hide_coat.set_leg_armor(10)


itm_merchant_outfit = Item("itm_merchant_outfit", "Merchant_Outfit")
itm_merchant_outfit.add_mesh(ItemMesh("nobleman_outf"))
itm_merchant_outfit.add_flag(ItemType.BODY_ARMOR)
itm_merchant_outfit.add_flag(ItemFlag.COVERS_LEGS)
itm_merchant_outfit.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_merchant_outfit.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_merchant_outfit.add_flag(ItemFlag.IS_CIVILIAN)
itm_merchant_outfit.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_merchant_outfit.set_price(348)
itm_merchant_outfit.add_modifier(IModBit.TETTERED)
itm_merchant_outfit.add_modifier(IModBit.RAGGED)
itm_merchant_outfit.add_modifier(IModBit.STURDY)
itm_merchant_outfit.add_modifier(IModBit.THICK)
itm_merchant_outfit.add_modifier(IModBit.HARDENED)
itm_merchant_outfit.set_weight(4.0)
itm_merchant_outfit.set_abundance(100)
itm_merchant_outfit.set_body_armor(14)
itm_merchant_outfit.set_leg_armor(10)


itm_homespun_dress = Item("itm_homespun_dress", "Homespun_Dress")
itm_homespun_dress.add_mesh(ItemMesh("nobleman_outf"))
itm_homespun_dress.add_flag(ItemType.BODY_ARMOR)
itm_homespun_dress.add_flag(ItemFlag.COVERS_LEGS)
itm_homespun_dress.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_homespun_dress.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_homespun_dress.add_flag(ItemFlag.IS_CIVILIAN)
itm_homespun_dress.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_homespun_dress.set_price(348)
itm_homespun_dress.add_modifier(IModBit.TETTERED)
itm_homespun_dress.add_modifier(IModBit.RAGGED)
itm_homespun_dress.add_modifier(IModBit.STURDY)
itm_homespun_dress.add_modifier(IModBit.THICK)
itm_homespun_dress.add_modifier(IModBit.HARDENED)
itm_homespun_dress.set_weight(4.0)
itm_homespun_dress.set_abundance(100)
itm_homespun_dress.set_body_armor(14)
itm_homespun_dress.set_leg_armor(10)


itm_thick_coat = Item("itm_thick_coat", "Thick_Coat")
itm_thick_coat.add_mesh(ItemMesh("nobleman_outf"))
itm_thick_coat.add_flag(ItemType.BODY_ARMOR)
itm_thick_coat.add_flag(ItemFlag.COVERS_LEGS)
itm_thick_coat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_thick_coat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_thick_coat.add_flag(ItemFlag.IS_CIVILIAN)
itm_thick_coat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_thick_coat.set_price(348)
itm_thick_coat.add_modifier(IModBit.TETTERED)
itm_thick_coat.add_modifier(IModBit.RAGGED)
itm_thick_coat.add_modifier(IModBit.STURDY)
itm_thick_coat.add_modifier(IModBit.THICK)
itm_thick_coat.add_modifier(IModBit.HARDENED)
itm_thick_coat.set_weight(4.0)
itm_thick_coat.set_abundance(100)
itm_thick_coat.set_body_armor(14)
itm_thick_coat.set_leg_armor(10)


itm_coat_with_cape = Item("itm_coat_with_cape", "Coat_with_Cape")
itm_coat_with_cape.add_mesh(ItemMesh("nobleman_outf"))
itm_coat_with_cape.add_flag(ItemType.BODY_ARMOR)
itm_coat_with_cape.add_flag(ItemFlag.COVERS_LEGS)
itm_coat_with_cape.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_coat_with_cape.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_coat_with_cape.add_flag(ItemFlag.IS_CIVILIAN)
itm_coat_with_cape.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_coat_with_cape.set_price(348)
itm_coat_with_cape.add_modifier(IModBit.TETTERED)
itm_coat_with_cape.add_modifier(IModBit.RAGGED)
itm_coat_with_cape.add_modifier(IModBit.STURDY)
itm_coat_with_cape.add_modifier(IModBit.THICK)
itm_coat_with_cape.add_modifier(IModBit.HARDENED)
itm_coat_with_cape.set_weight(4.0)
itm_coat_with_cape.set_abundance(100)
itm_coat_with_cape.set_body_armor(14)
itm_coat_with_cape.set_leg_armor(10)


itm_steppe_outfit = Item("itm_steppe_outfit", "Steppe_Outfit")
itm_steppe_outfit.add_mesh(ItemMesh("nobleman_outf"))
itm_steppe_outfit.add_flag(ItemType.BODY_ARMOR)
itm_steppe_outfit.add_flag(ItemFlag.COVERS_LEGS)
itm_steppe_outfit.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_steppe_outfit.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_steppe_outfit.add_flag(ItemFlag.IS_CIVILIAN)
itm_steppe_outfit.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_steppe_outfit.set_price(348)
itm_steppe_outfit.add_modifier(IModBit.TETTERED)
itm_steppe_outfit.add_modifier(IModBit.RAGGED)
itm_steppe_outfit.add_modifier(IModBit.STURDY)
itm_steppe_outfit.add_modifier(IModBit.THICK)
itm_steppe_outfit.add_modifier(IModBit.HARDENED)
itm_steppe_outfit.set_weight(4.0)
itm_steppe_outfit.set_abundance(100)
itm_steppe_outfit.set_body_armor(14)
itm_steppe_outfit.set_leg_armor(10)


itm_nordic_outfit = Item("itm_nordic_outfit", "Nordic_Outfit")
itm_nordic_outfit.add_mesh(ItemMesh("nobleman_outf"))
itm_nordic_outfit.add_flag(ItemType.BODY_ARMOR)
itm_nordic_outfit.add_flag(ItemFlag.COVERS_LEGS)
itm_nordic_outfit.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_nordic_outfit.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_nordic_outfit.add_flag(ItemFlag.IS_CIVILIAN)
itm_nordic_outfit.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_nordic_outfit.set_price(348)
itm_nordic_outfit.add_modifier(IModBit.TETTERED)
itm_nordic_outfit.add_modifier(IModBit.RAGGED)
itm_nordic_outfit.add_modifier(IModBit.STURDY)
itm_nordic_outfit.add_modifier(IModBit.THICK)
itm_nordic_outfit.add_modifier(IModBit.HARDENED)
itm_nordic_outfit.set_weight(4.0)
itm_nordic_outfit.set_abundance(100)
itm_nordic_outfit.set_body_armor(14)
itm_nordic_outfit.set_leg_armor(10)


itm_nordic_armor = Item("itm_nordic_armor", "Nordic_Armor")
itm_nordic_armor.add_mesh(ItemMesh("nobleman_outf"))
itm_nordic_armor.add_flag(ItemType.BODY_ARMOR)
itm_nordic_armor.add_flag(ItemFlag.COVERS_LEGS)
itm_nordic_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_nordic_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_nordic_armor.add_flag(ItemFlag.IS_CIVILIAN)
itm_nordic_armor.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_nordic_armor.set_price(348)
itm_nordic_armor.add_modifier(IModBit.TETTERED)
itm_nordic_armor.add_modifier(IModBit.RAGGED)
itm_nordic_armor.add_modifier(IModBit.STURDY)
itm_nordic_armor.add_modifier(IModBit.THICK)
itm_nordic_armor.add_modifier(IModBit.HARDENED)
itm_nordic_armor.set_weight(4.0)
itm_nordic_armor.set_abundance(100)
itm_nordic_armor.set_body_armor(14)
itm_nordic_armor.set_leg_armor(10)


itm_hide_armor = Item("itm_hide_armor", "Hide_Armor")
itm_hide_armor.add_mesh(ItemMesh("nobleman_outf"))
itm_hide_armor.add_flag(ItemType.BODY_ARMOR)
itm_hide_armor.add_flag(ItemFlag.COVERS_LEGS)
itm_hide_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_hide_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_hide_armor.add_flag(ItemFlag.IS_CIVILIAN)
itm_hide_armor.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_hide_armor.set_price(348)
itm_hide_armor.add_modifier(IModBit.TETTERED)
itm_hide_armor.add_modifier(IModBit.RAGGED)
itm_hide_armor.add_modifier(IModBit.STURDY)
itm_hide_armor.add_modifier(IModBit.THICK)
itm_hide_armor.add_modifier(IModBit.HARDENED)
itm_hide_armor.set_weight(4.0)
itm_hide_armor.set_abundance(100)
itm_hide_armor.set_body_armor(14)
itm_hide_armor.set_leg_armor(10)


itm_cloaked_tunic = Item("itm_cloaked_tunic", "Cloaked_Tunic")
itm_cloaked_tunic.add_mesh(ItemMesh("nobleman_outf"))
itm_cloaked_tunic.add_flag(ItemType.BODY_ARMOR)
itm_cloaked_tunic.add_flag(ItemFlag.COVERS_LEGS)
itm_cloaked_tunic.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_cloaked_tunic.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_cloaked_tunic.add_flag(ItemFlag.IS_CIVILIAN)
itm_cloaked_tunic.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_cloaked_tunic.set_price(348)
itm_cloaked_tunic.add_modifier(IModBit.TETTERED)
itm_cloaked_tunic.add_modifier(IModBit.RAGGED)
itm_cloaked_tunic.add_modifier(IModBit.STURDY)
itm_cloaked_tunic.add_modifier(IModBit.THICK)
itm_cloaked_tunic.add_modifier(IModBit.HARDENED)
itm_cloaked_tunic.set_weight(4.0)
itm_cloaked_tunic.set_abundance(100)
itm_cloaked_tunic.set_body_armor(14)
itm_cloaked_tunic.set_leg_armor(10)


itm_sleeveless_tunic = Item("itm_sleeveless_tunic", "Sleeveless_Tunic")
itm_sleeveless_tunic.add_mesh(ItemMesh("nobleman_outf"))
itm_sleeveless_tunic.add_flag(ItemType.BODY_ARMOR)
itm_sleeveless_tunic.add_flag(ItemFlag.COVERS_LEGS)
itm_sleeveless_tunic.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_sleeveless_tunic.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_sleeveless_tunic.add_flag(ItemFlag.IS_CIVILIAN)
itm_sleeveless_tunic.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_sleeveless_tunic.set_price(348)
itm_sleeveless_tunic.add_modifier(IModBit.TETTERED)
itm_sleeveless_tunic.add_modifier(IModBit.RAGGED)
itm_sleeveless_tunic.add_modifier(IModBit.STURDY)
itm_sleeveless_tunic.add_modifier(IModBit.THICK)
itm_sleeveless_tunic.add_modifier(IModBit.HARDENED)
itm_sleeveless_tunic.set_weight(4.0)
itm_sleeveless_tunic.set_abundance(100)
itm_sleeveless_tunic.set_body_armor(14)
itm_sleeveless_tunic.set_leg_armor(10)


itm_sleeveless_leather_tunic = Item("itm_sleeveless_leather_tunic", "Sleeveless_Leather_Tunic")
itm_sleeveless_leather_tunic.add_mesh(ItemMesh("nobleman_outf"))
itm_sleeveless_leather_tunic.add_flag(ItemType.BODY_ARMOR)
itm_sleeveless_leather_tunic.add_flag(ItemFlag.COVERS_LEGS)
itm_sleeveless_leather_tunic.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_sleeveless_leather_tunic.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_sleeveless_leather_tunic.add_flag(ItemFlag.IS_CIVILIAN)
itm_sleeveless_leather_tunic.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_sleeveless_leather_tunic.set_price(348)
itm_sleeveless_leather_tunic.add_modifier(IModBit.TETTERED)
itm_sleeveless_leather_tunic.add_modifier(IModBit.RAGGED)
itm_sleeveless_leather_tunic.add_modifier(IModBit.STURDY)
itm_sleeveless_leather_tunic.add_modifier(IModBit.THICK)
itm_sleeveless_leather_tunic.add_modifier(IModBit.HARDENED)
itm_sleeveless_leather_tunic.set_weight(4.0)
itm_sleeveless_leather_tunic.set_abundance(100)
itm_sleeveless_leather_tunic.set_body_armor(14)
itm_sleeveless_leather_tunic.set_leg_armor(10)


itm_linen_shirt = Item("itm_linen_shirt", "Linen_Shirt")
itm_linen_shirt.add_mesh(ItemMesh("nobleman_outf"))
itm_linen_shirt.add_flag(ItemType.BODY_ARMOR)
itm_linen_shirt.add_flag(ItemFlag.COVERS_LEGS)
itm_linen_shirt.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_linen_shirt.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_linen_shirt.add_flag(ItemFlag.IS_CIVILIAN)
itm_linen_shirt.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_linen_shirt.set_price(348)
itm_linen_shirt.add_modifier(IModBit.TETTERED)
itm_linen_shirt.add_modifier(IModBit.RAGGED)
itm_linen_shirt.add_modifier(IModBit.STURDY)
itm_linen_shirt.add_modifier(IModBit.THICK)
itm_linen_shirt.add_modifier(IModBit.HARDENED)
itm_linen_shirt.set_weight(4.0)
itm_linen_shirt.set_abundance(100)
itm_linen_shirt.set_body_armor(14)
itm_linen_shirt.set_leg_armor(10)


itm_wool_coat = Item("itm_wool_coat", "Wool_Coat")
itm_wool_coat.add_mesh(ItemMesh("nobleman_outf"))
itm_wool_coat.add_flag(ItemType.BODY_ARMOR)
itm_wool_coat.add_flag(ItemFlag.COVERS_LEGS)
itm_wool_coat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_wool_coat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_wool_coat.add_flag(ItemFlag.IS_CIVILIAN)
itm_wool_coat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_wool_coat.set_price(348)
itm_wool_coat.add_modifier(IModBit.TETTERED)
itm_wool_coat.add_modifier(IModBit.RAGGED)
itm_wool_coat.add_modifier(IModBit.STURDY)
itm_wool_coat.add_modifier(IModBit.THICK)
itm_wool_coat.add_modifier(IModBit.HARDENED)
itm_wool_coat.set_weight(4.0)
itm_wool_coat.set_abundance(100)
itm_wool_coat.set_body_armor(14)
itm_wool_coat.set_leg_armor(10)


itm_dress = Item("itm_dress", "Dress")
itm_dress.add_mesh(ItemMesh("dress"))
itm_dress.add_flag(ItemType.BODY_ARMOR)
itm_dress.add_flag(ItemFlag.IS_MERCHANDISE)
itm_dress.add_flag(ItemFlag.COVERS_LEGS)
itm_dress.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_dress.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_dress.add_flag(ItemFlag.IS_CIVILIAN)
itm_dress.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_dress.set_price(6)
itm_dress.add_modifier(IModBit.TETTERED)
itm_dress.add_modifier(IModBit.RAGGED)
itm_dress.add_modifier(IModBit.STURDY)
itm_dress.add_modifier(IModBit.THICK)
itm_dress.add_modifier(IModBit.HARDENED)
itm_dress.set_weight(1.0)
itm_dress.set_abundance(100)
itm_dress.set_body_armor(6)
itm_dress.set_leg_armor(2)


itm_blue_dress = Item("itm_blue_dress", "Blue_Dress")
itm_blue_dress.add_mesh(ItemMesh("blue_dress_new"))
itm_blue_dress.add_flag(ItemType.BODY_ARMOR)
itm_blue_dress.add_flag(ItemFlag.IS_MERCHANDISE)
itm_blue_dress.add_flag(ItemFlag.COVERS_LEGS)
itm_blue_dress.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_blue_dress.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_blue_dress.add_flag(ItemFlag.IS_CIVILIAN)
itm_blue_dress.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_blue_dress.set_price(6)
itm_blue_dress.add_modifier(IModBit.TETTERED)
itm_blue_dress.add_modifier(IModBit.RAGGED)
itm_blue_dress.add_modifier(IModBit.STURDY)
itm_blue_dress.add_modifier(IModBit.THICK)
itm_blue_dress.add_modifier(IModBit.HARDENED)
itm_blue_dress.set_weight(1.0)
itm_blue_dress.set_abundance(100)
itm_blue_dress.set_body_armor(6)
itm_blue_dress.set_leg_armor(2)


itm_peasant_dress = Item("itm_peasant_dress", "Peasant_Dress")
itm_peasant_dress.add_mesh(ItemMesh("peasant_dress_b_new"))
itm_peasant_dress.add_flag(ItemType.BODY_ARMOR)
itm_peasant_dress.add_flag(ItemFlag.IS_MERCHANDISE)
itm_peasant_dress.add_flag(ItemFlag.COVERS_LEGS)
itm_peasant_dress.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_peasant_dress.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_peasant_dress.add_flag(ItemFlag.IS_CIVILIAN)
itm_peasant_dress.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_peasant_dress.set_price(6)
itm_peasant_dress.add_modifier(IModBit.TETTERED)
itm_peasant_dress.add_modifier(IModBit.RAGGED)
itm_peasant_dress.add_modifier(IModBit.STURDY)
itm_peasant_dress.add_modifier(IModBit.THICK)
itm_peasant_dress.add_modifier(IModBit.HARDENED)
itm_peasant_dress.set_weight(1.0)
itm_peasant_dress.set_abundance(100)
itm_peasant_dress.set_body_armor(6)
itm_peasant_dress.set_leg_armor(2)


itm_woolen_dress = Item("itm_woolen_dress", "Woolen_Dress")
itm_woolen_dress.add_mesh(ItemMesh("woolen_dress"))
itm_woolen_dress.add_flag(ItemType.BODY_ARMOR)
itm_woolen_dress.add_flag(ItemFlag.IS_MERCHANDISE)
itm_woolen_dress.add_flag(ItemFlag.COVERS_LEGS)
itm_woolen_dress.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_woolen_dress.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_woolen_dress.add_flag(ItemFlag.IS_CIVILIAN)
itm_woolen_dress.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_woolen_dress.set_price(10)
itm_woolen_dress.add_modifier(IModBit.TETTERED)
itm_woolen_dress.add_modifier(IModBit.RAGGED)
itm_woolen_dress.add_modifier(IModBit.STURDY)
itm_woolen_dress.add_modifier(IModBit.THICK)
itm_woolen_dress.add_modifier(IModBit.HARDENED)
itm_woolen_dress.set_weight(1.75)
itm_woolen_dress.set_abundance(100)
itm_woolen_dress.set_body_armor(8)
itm_woolen_dress.set_leg_armor(2)


itm_shirt = Item("itm_shirt", "Shirt")
itm_shirt.add_mesh(ItemMesh("shirt"))
itm_shirt.add_flag(ItemType.BODY_ARMOR)
itm_shirt.add_flag(ItemFlag.IS_MERCHANDISE)
itm_shirt.add_flag(ItemFlag.COVERS_LEGS)
itm_shirt.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_shirt.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_shirt.add_flag(ItemFlag.IS_CIVILIAN)
itm_shirt.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_shirt.set_price(3)
itm_shirt.add_modifier(IModBit.TETTERED)
itm_shirt.add_modifier(IModBit.RAGGED)
itm_shirt.add_modifier(IModBit.STURDY)
itm_shirt.add_modifier(IModBit.THICK)
itm_shirt.add_modifier(IModBit.HARDENED)
itm_shirt.set_weight(1.0)
itm_shirt.set_abundance(100)
itm_shirt.set_body_armor(5)


itm_linen_tunic = Item("itm_linen_tunic", "Linen_Tunic")
itm_linen_tunic.add_mesh(ItemMesh("shirt_a"))
itm_linen_tunic.add_flag(ItemType.BODY_ARMOR)
itm_linen_tunic.add_flag(ItemFlag.IS_MERCHANDISE)
itm_linen_tunic.add_flag(ItemFlag.COVERS_LEGS)
itm_linen_tunic.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_linen_tunic.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_linen_tunic.add_flag(ItemFlag.IS_CIVILIAN)
itm_linen_tunic.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_linen_tunic.set_price(6)
itm_linen_tunic.add_modifier(IModBit.TETTERED)
itm_linen_tunic.add_modifier(IModBit.RAGGED)
itm_linen_tunic.add_modifier(IModBit.STURDY)
itm_linen_tunic.add_modifier(IModBit.THICK)
itm_linen_tunic.add_modifier(IModBit.HARDENED)
itm_linen_tunic.set_weight(1.0)
itm_linen_tunic.set_abundance(100)
itm_linen_tunic.set_body_armor(6)
itm_linen_tunic.set_leg_armor(1)


itm_short_tunic = Item("itm_short_tunic", "Red_Tunic")
itm_short_tunic.add_mesh(ItemMesh("rich_tunic_a"))
itm_short_tunic.add_flag(ItemType.BODY_ARMOR)
itm_short_tunic.add_flag(ItemFlag.COVERS_LEGS)
itm_short_tunic.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_short_tunic.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_short_tunic.add_flag(ItemFlag.IS_CIVILIAN)
itm_short_tunic.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_short_tunic.set_price(10)
itm_short_tunic.add_modifier(IModBit.TETTERED)
itm_short_tunic.add_modifier(IModBit.RAGGED)
itm_short_tunic.add_modifier(IModBit.STURDY)
itm_short_tunic.add_modifier(IModBit.THICK)
itm_short_tunic.add_modifier(IModBit.HARDENED)
itm_short_tunic.set_weight(1.0)
itm_short_tunic.set_abundance(100)
itm_short_tunic.set_body_armor(7)
itm_short_tunic.set_leg_armor(1)


itm_red_shirt = Item("itm_red_shirt", "Red_Shirt")
itm_red_shirt.add_mesh(ItemMesh("rich_tunic_a"))
itm_red_shirt.add_flag(ItemType.BODY_ARMOR)
itm_red_shirt.add_flag(ItemFlag.IS_MERCHANDISE)
itm_red_shirt.add_flag(ItemFlag.COVERS_LEGS)
itm_red_shirt.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_red_shirt.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_red_shirt.add_flag(ItemFlag.IS_CIVILIAN)
itm_red_shirt.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_red_shirt.set_price(10)
itm_red_shirt.add_modifier(IModBit.TETTERED)
itm_red_shirt.add_modifier(IModBit.RAGGED)
itm_red_shirt.add_modifier(IModBit.STURDY)
itm_red_shirt.add_modifier(IModBit.THICK)
itm_red_shirt.add_modifier(IModBit.HARDENED)
itm_red_shirt.set_weight(1.0)
itm_red_shirt.set_abundance(100)
itm_red_shirt.set_body_armor(7)
itm_red_shirt.set_leg_armor(1)


itm_red_tunic = Item("itm_red_tunic", "Red_Tunic")
itm_red_tunic.add_mesh(ItemMesh("arena_tunicR_new"))
itm_red_tunic.add_flag(ItemType.BODY_ARMOR)
itm_red_tunic.add_flag(ItemFlag.IS_MERCHANDISE)
itm_red_tunic.add_flag(ItemFlag.COVERS_LEGS)
itm_red_tunic.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_red_tunic.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_red_tunic.add_flag(ItemFlag.IS_CIVILIAN)
itm_red_tunic.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_red_tunic.set_price(10)
itm_red_tunic.add_modifier(IModBit.TETTERED)
itm_red_tunic.add_modifier(IModBit.RAGGED)
itm_red_tunic.add_modifier(IModBit.STURDY)
itm_red_tunic.add_modifier(IModBit.THICK)
itm_red_tunic.add_modifier(IModBit.HARDENED)
itm_red_tunic.set_weight(1.0)
itm_red_tunic.set_abundance(100)
itm_red_tunic.set_body_armor(7)
itm_red_tunic.set_leg_armor(1)


itm_green_tunic = Item("itm_green_tunic", "Green_Tunic")
itm_green_tunic.add_mesh(ItemMesh("arena_tunicG_new"))
itm_green_tunic.add_flag(ItemType.BODY_ARMOR)
itm_green_tunic.add_flag(ItemFlag.IS_MERCHANDISE)
itm_green_tunic.add_flag(ItemFlag.COVERS_LEGS)
itm_green_tunic.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_green_tunic.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_green_tunic.add_flag(ItemFlag.IS_CIVILIAN)
itm_green_tunic.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_green_tunic.set_price(10)
itm_green_tunic.add_modifier(IModBit.TETTERED)
itm_green_tunic.add_modifier(IModBit.RAGGED)
itm_green_tunic.add_modifier(IModBit.STURDY)
itm_green_tunic.add_modifier(IModBit.THICK)
itm_green_tunic.add_modifier(IModBit.HARDENED)
itm_green_tunic.set_weight(1.0)
itm_green_tunic.set_abundance(100)
itm_green_tunic.set_body_armor(7)
itm_green_tunic.set_leg_armor(1)


itm_blue_tunic = Item("itm_blue_tunic", "Blue_Tunic")
itm_blue_tunic.add_mesh(ItemMesh("arena_tunicB_new"))
itm_blue_tunic.add_flag(ItemType.BODY_ARMOR)
itm_blue_tunic.add_flag(ItemFlag.IS_MERCHANDISE)
itm_blue_tunic.add_flag(ItemFlag.COVERS_LEGS)
itm_blue_tunic.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_blue_tunic.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_blue_tunic.add_flag(ItemFlag.IS_CIVILIAN)
itm_blue_tunic.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_blue_tunic.set_price(10)
itm_blue_tunic.add_modifier(IModBit.TETTERED)
itm_blue_tunic.add_modifier(IModBit.RAGGED)
itm_blue_tunic.add_modifier(IModBit.STURDY)
itm_blue_tunic.add_modifier(IModBit.THICK)
itm_blue_tunic.add_modifier(IModBit.HARDENED)
itm_blue_tunic.set_weight(1.0)
itm_blue_tunic.set_abundance(100)
itm_blue_tunic.set_body_armor(7)
itm_blue_tunic.set_leg_armor(1)


itm_robe = Item("itm_robe", "Robe")
itm_robe.add_mesh(ItemMesh("robe"))
itm_robe.add_flag(ItemType.BODY_ARMOR)
itm_robe.add_flag(ItemFlag.IS_MERCHANDISE)
itm_robe.add_flag(ItemFlag.COVERS_LEGS)
itm_robe.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_robe.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_robe.add_flag(ItemFlag.IS_CIVILIAN)
itm_robe.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_robe.set_price(31)
itm_robe.add_modifier(IModBit.TETTERED)
itm_robe.add_modifier(IModBit.RAGGED)
itm_robe.add_modifier(IModBit.STURDY)
itm_robe.add_modifier(IModBit.THICK)
itm_robe.add_modifier(IModBit.HARDENED)
itm_robe.set_weight(1.5)
itm_robe.set_abundance(100)
itm_robe.set_body_armor(8)
itm_robe.set_leg_armor(6)


itm_coarse_tunic = Item("itm_coarse_tunic", "Tunic_with_vest")
itm_coarse_tunic.add_mesh(ItemMesh("coarse_tunic_a"))
itm_coarse_tunic.add_flag(ItemType.BODY_ARMOR)
itm_coarse_tunic.add_flag(ItemFlag.IS_MERCHANDISE)
itm_coarse_tunic.add_flag(ItemFlag.COVERS_LEGS)
itm_coarse_tunic.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_coarse_tunic.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_coarse_tunic.add_flag(ItemFlag.IS_CIVILIAN)
itm_coarse_tunic.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_coarse_tunic.set_price(47)
itm_coarse_tunic.add_modifier(IModBit.TETTERED)
itm_coarse_tunic.add_modifier(IModBit.RAGGED)
itm_coarse_tunic.add_modifier(IModBit.STURDY)
itm_coarse_tunic.add_modifier(IModBit.THICK)
itm_coarse_tunic.add_modifier(IModBit.HARDENED)
itm_coarse_tunic.set_weight(2.0)
itm_coarse_tunic.set_abundance(100)
itm_coarse_tunic.set_body_armor(11)
itm_coarse_tunic.set_leg_armor(6)


itm_leather_apron = Item("itm_leather_apron", "Leather_Apron")
itm_leather_apron.add_mesh(ItemMesh("leather_apron"))
itm_leather_apron.add_flag(ItemType.BODY_ARMOR)
itm_leather_apron.add_flag(ItemFlag.IS_MERCHANDISE)
itm_leather_apron.add_flag(ItemFlag.COVERS_LEGS)
itm_leather_apron.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_leather_apron.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_leather_apron.add_flag(ItemFlag.IS_CIVILIAN)
itm_leather_apron.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_leather_apron.set_price(61)
itm_leather_apron.add_modifier(IModBit.TETTERED)
itm_leather_apron.add_modifier(IModBit.RAGGED)
itm_leather_apron.add_modifier(IModBit.STURDY)
itm_leather_apron.add_modifier(IModBit.THICK)
itm_leather_apron.add_modifier(IModBit.HARDENED)
itm_leather_apron.set_weight(3.0)
itm_leather_apron.set_abundance(100)
itm_leather_apron.set_body_armor(12)
itm_leather_apron.set_leg_armor(7)


itm_tabard = Item("itm_tabard", "Tabard")
itm_tabard.add_mesh(ItemMesh("tabard_b"))
itm_tabard.add_flag(ItemType.BODY_ARMOR)
itm_tabard.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tabard.add_flag(ItemFlag.COVERS_LEGS)
itm_tabard.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_tabard.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_tabard.add_flag(ItemFlag.IS_CIVILIAN)
itm_tabard.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_tabard.set_price(107)
itm_tabard.add_modifier(IModBit.TETTERED)
itm_tabard.add_modifier(IModBit.RAGGED)
itm_tabard.add_modifier(IModBit.STURDY)
itm_tabard.add_modifier(IModBit.THICK)
itm_tabard.add_modifier(IModBit.HARDENED)
itm_tabard.set_weight(3.0)
itm_tabard.set_abundance(100)
itm_tabard.set_body_armor(14)
itm_tabard.set_leg_armor(6)


itm_leather_vest = Item("itm_leather_vest", "Leather_Vest")
itm_leather_vest.add_mesh(ItemMesh("leather_vest_a"))
itm_leather_vest.add_flag(ItemType.BODY_ARMOR)
itm_leather_vest.add_flag(ItemFlag.IS_MERCHANDISE)
itm_leather_vest.add_flag(ItemFlag.COVERS_LEGS)
itm_leather_vest.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_leather_vest.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_leather_vest.add_flag(ItemFlag.IS_CIVILIAN)
itm_leather_vest.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_leather_vest.set_price(146)
itm_leather_vest.add_modifier(IModBit.TETTERED)
itm_leather_vest.add_modifier(IModBit.RAGGED)
itm_leather_vest.add_modifier(IModBit.STURDY)
itm_leather_vest.add_modifier(IModBit.THICK)
itm_leather_vest.add_modifier(IModBit.HARDENED)
itm_leather_vest.set_weight(4.0)
itm_leather_vest.set_abundance(100)
itm_leather_vest.set_body_armor(15)
itm_leather_vest.set_leg_armor(7)


itm_steppe_armor = Item("itm_steppe_armor", "Steppe_Armor")
itm_steppe_armor.add_mesh(ItemMesh("lamellar_leather"))
itm_steppe_armor.add_flag(ItemType.BODY_ARMOR)
itm_steppe_armor.add_flag(ItemFlag.IS_MERCHANDISE)
itm_steppe_armor.add_flag(ItemFlag.COVERS_LEGS)
itm_steppe_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_steppe_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_steppe_armor.set_price(195)
itm_steppe_armor.add_modifier(IModBit.TETTERED)
itm_steppe_armor.add_modifier(IModBit.RAGGED)
itm_steppe_armor.add_modifier(IModBit.STURDY)
itm_steppe_armor.add_modifier(IModBit.THICK)
itm_steppe_armor.add_modifier(IModBit.HARDENED)
itm_steppe_armor.set_weight(5.0)
itm_steppe_armor.set_abundance(100)
itm_steppe_armor.set_body_armor(16)
itm_steppe_armor.set_leg_armor(8)


itm_gambeson = Item("itm_gambeson", "Gambeson")
itm_gambeson.add_mesh(ItemMesh("white_gambeson"))
itm_gambeson.add_flag(ItemType.BODY_ARMOR)
itm_gambeson.add_flag(ItemFlag.IS_MERCHANDISE)
itm_gambeson.add_flag(ItemFlag.COVERS_LEGS)
itm_gambeson.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_gambeson.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_gambeson.add_flag(ItemFlag.IS_CIVILIAN)
itm_gambeson.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_gambeson.set_price(260)
itm_gambeson.add_modifier(IModBit.TETTERED)
itm_gambeson.add_modifier(IModBit.RAGGED)
itm_gambeson.add_modifier(IModBit.STURDY)
itm_gambeson.add_modifier(IModBit.THICK)
itm_gambeson.add_modifier(IModBit.HARDENED)
itm_gambeson.set_weight(5.0)
itm_gambeson.set_abundance(100)
itm_gambeson.set_body_armor(20)
itm_gambeson.set_leg_armor(5)


itm_blue_gambeson = Item("itm_blue_gambeson", "Blue_Gambeson")
itm_blue_gambeson.add_mesh(ItemMesh("blue_gambeson"))
itm_blue_gambeson.add_flag(ItemType.BODY_ARMOR)
itm_blue_gambeson.add_flag(ItemFlag.IS_MERCHANDISE)
itm_blue_gambeson.add_flag(ItemFlag.COVERS_LEGS)
itm_blue_gambeson.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_blue_gambeson.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_blue_gambeson.add_flag(ItemFlag.IS_CIVILIAN)
itm_blue_gambeson.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_blue_gambeson.set_price(270)
itm_blue_gambeson.add_modifier(IModBit.TETTERED)
itm_blue_gambeson.add_modifier(IModBit.RAGGED)
itm_blue_gambeson.add_modifier(IModBit.STURDY)
itm_blue_gambeson.add_modifier(IModBit.THICK)
itm_blue_gambeson.add_modifier(IModBit.HARDENED)
itm_blue_gambeson.set_weight(5.0)
itm_blue_gambeson.set_abundance(100)
itm_blue_gambeson.set_body_armor(21)
itm_blue_gambeson.set_leg_armor(5)


itm_red_gambeson = Item("itm_red_gambeson", "Red_Gambeson")
itm_red_gambeson.add_mesh(ItemMesh("red_gambeson_a"))
itm_red_gambeson.add_flag(ItemType.BODY_ARMOR)
itm_red_gambeson.add_flag(ItemFlag.IS_MERCHANDISE)
itm_red_gambeson.add_flag(ItemFlag.COVERS_LEGS)
itm_red_gambeson.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_red_gambeson.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_red_gambeson.add_flag(ItemFlag.IS_CIVILIAN)
itm_red_gambeson.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_red_gambeson.set_price(275)
itm_red_gambeson.add_modifier(IModBit.TETTERED)
itm_red_gambeson.add_modifier(IModBit.RAGGED)
itm_red_gambeson.add_modifier(IModBit.STURDY)
itm_red_gambeson.add_modifier(IModBit.THICK)
itm_red_gambeson.add_modifier(IModBit.HARDENED)
itm_red_gambeson.set_weight(5.0)
itm_red_gambeson.set_abundance(100)
itm_red_gambeson.set_body_armor(21)
itm_red_gambeson.set_leg_armor(5)


itm_padded_cloth = Item("itm_padded_cloth", "Aketon")
itm_padded_cloth.add_mesh(ItemMesh("padded_cloth_a"))
itm_padded_cloth.add_flag(ItemType.BODY_ARMOR)
itm_padded_cloth.add_flag(ItemFlag.IS_MERCHANDISE)
itm_padded_cloth.add_flag(ItemFlag.COVERS_LEGS)
itm_padded_cloth.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_padded_cloth.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_padded_cloth.set_price(297)
itm_padded_cloth.add_modifier(IModBit.TETTERED)
itm_padded_cloth.add_modifier(IModBit.RAGGED)
itm_padded_cloth.add_modifier(IModBit.STURDY)
itm_padded_cloth.add_modifier(IModBit.THICK)
itm_padded_cloth.add_modifier(IModBit.HARDENED)
itm_padded_cloth.set_weight(11.0)
itm_padded_cloth.set_abundance(100)
itm_padded_cloth.set_body_armor(22)
itm_padded_cloth.set_leg_armor(6)


itm_aketon_green = Item("itm_aketon_green", "Padded_Cloth")
itm_aketon_green.add_mesh(ItemMesh("padded_cloth_b"))
itm_aketon_green.add_flag(ItemType.BODY_ARMOR)
itm_aketon_green.add_flag(ItemFlag.IS_MERCHANDISE)
itm_aketon_green.add_flag(ItemFlag.COVERS_LEGS)
itm_aketon_green.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_aketon_green.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_aketon_green.set_price(297)
itm_aketon_green.add_modifier(IModBit.TETTERED)
itm_aketon_green.add_modifier(IModBit.RAGGED)
itm_aketon_green.add_modifier(IModBit.STURDY)
itm_aketon_green.add_modifier(IModBit.THICK)
itm_aketon_green.add_modifier(IModBit.HARDENED)
itm_aketon_green.set_weight(11.0)
itm_aketon_green.set_abundance(100)
itm_aketon_green.set_body_armor(22)
itm_aketon_green.set_leg_armor(6)


itm_leather_jerkin = Item("itm_leather_jerkin", "Leather_Jerkin")
itm_leather_jerkin.add_mesh(ItemMesh("ragged_leather_jerkin"))
itm_leather_jerkin.add_flag(ItemType.BODY_ARMOR)
itm_leather_jerkin.add_flag(ItemFlag.IS_MERCHANDISE)
itm_leather_jerkin.add_flag(ItemFlag.COVERS_LEGS)
itm_leather_jerkin.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_leather_jerkin.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_leather_jerkin.add_flag(ItemFlag.IS_CIVILIAN)
itm_leather_jerkin.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_leather_jerkin.set_price(321)
itm_leather_jerkin.add_modifier(IModBit.TETTERED)
itm_leather_jerkin.add_modifier(IModBit.RAGGED)
itm_leather_jerkin.add_modifier(IModBit.STURDY)
itm_leather_jerkin.add_modifier(IModBit.THICK)
itm_leather_jerkin.add_modifier(IModBit.HARDENED)
itm_leather_jerkin.set_weight(6.0)
itm_leather_jerkin.set_abundance(100)
itm_leather_jerkin.set_body_armor(23)
itm_leather_jerkin.set_leg_armor(6)


itm_nomad_vest = Item("itm_nomad_vest", "Nomad_Vest")
itm_nomad_vest.add_mesh(ItemMesh("nomad_vest_new"))
itm_nomad_vest.add_flag(ItemType.BODY_ARMOR)
itm_nomad_vest.add_flag(ItemFlag.IS_MERCHANDISE)
itm_nomad_vest.add_flag(ItemFlag.COVERS_LEGS)
itm_nomad_vest.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_nomad_vest.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_nomad_vest.add_flag(ItemFlag.IS_CIVILIAN)
itm_nomad_vest.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_nomad_vest.set_price(360)
itm_nomad_vest.add_modifier(IModBit.TETTERED)
itm_nomad_vest.add_modifier(IModBit.RAGGED)
itm_nomad_vest.add_modifier(IModBit.STURDY)
itm_nomad_vest.add_modifier(IModBit.THICK)
itm_nomad_vest.add_modifier(IModBit.HARDENED)
itm_nomad_vest.set_weight(7.0)
itm_nomad_vest.set_abundance(50)
itm_nomad_vest.set_body_armor(22)
itm_nomad_vest.set_leg_armor(8)


itm_ragged_outfit = Item("itm_ragged_outfit", "Ragged_Outfit")
itm_ragged_outfit.add_mesh(ItemMesh("ragged_outfit_a_new"))
itm_ragged_outfit.add_flag(ItemType.BODY_ARMOR)
itm_ragged_outfit.add_flag(ItemFlag.IS_MERCHANDISE)
itm_ragged_outfit.add_flag(ItemFlag.COVERS_LEGS)
itm_ragged_outfit.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_ragged_outfit.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_ragged_outfit.add_flag(ItemFlag.IS_CIVILIAN)
itm_ragged_outfit.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_ragged_outfit.set_price(390)
itm_ragged_outfit.add_modifier(IModBit.TETTERED)
itm_ragged_outfit.add_modifier(IModBit.RAGGED)
itm_ragged_outfit.add_modifier(IModBit.STURDY)
itm_ragged_outfit.add_modifier(IModBit.THICK)
itm_ragged_outfit.add_modifier(IModBit.HARDENED)
itm_ragged_outfit.set_weight(7.0)
itm_ragged_outfit.set_abundance(100)
itm_ragged_outfit.set_body_armor(23)
itm_ragged_outfit.set_leg_armor(9)


itm_padded_leather = Item("itm_padded_leather", "Padded_Leather")
itm_padded_leather.add_mesh(ItemMesh("leather_armor_b"))
itm_padded_leather.add_flag(ItemType.BODY_ARMOR)
itm_padded_leather.add_flag(ItemFlag.IS_MERCHANDISE)
itm_padded_leather.add_flag(ItemFlag.COVERS_LEGS)
itm_padded_leather.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_padded_leather.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_padded_leather.add_flag(ItemFlag.IS_CIVILIAN)
itm_padded_leather.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_padded_leather.set_price(454)
itm_padded_leather.add_modifier(IModBit.TETTERED)
itm_padded_leather.add_modifier(IModBit.RAGGED)
itm_padded_leather.add_modifier(IModBit.STURDY)
itm_padded_leather.add_modifier(IModBit.THICK)
itm_padded_leather.add_modifier(IModBit.HARDENED)
itm_padded_leather.set_weight(12.0)
itm_padded_leather.set_abundance(100)
itm_padded_leather.set_body_armor(27)
itm_padded_leather.set_leg_armor(10)


itm_tribal_warrior_outfit = Item("itm_tribal_warrior_outfit", "Tribal_Warrior_Outfit")
itm_tribal_warrior_outfit.add_mesh(ItemMesh("tribal_warrior_outfit_a_new"))
itm_tribal_warrior_outfit.add_flag(ItemType.BODY_ARMOR)
itm_tribal_warrior_outfit.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tribal_warrior_outfit.add_flag(ItemFlag.COVERS_LEGS)
itm_tribal_warrior_outfit.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_tribal_warrior_outfit.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_tribal_warrior_outfit.add_flag(ItemFlag.IS_CIVILIAN)
itm_tribal_warrior_outfit.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_tribal_warrior_outfit.set_price(520)
itm_tribal_warrior_outfit.add_modifier(IModBit.TETTERED)
itm_tribal_warrior_outfit.add_modifier(IModBit.RAGGED)
itm_tribal_warrior_outfit.add_modifier(IModBit.STURDY)
itm_tribal_warrior_outfit.add_modifier(IModBit.THICK)
itm_tribal_warrior_outfit.add_modifier(IModBit.HARDENED)
itm_tribal_warrior_outfit.set_weight(14.0)
itm_tribal_warrior_outfit.set_abundance(100)
itm_tribal_warrior_outfit.set_body_armor(30)
itm_tribal_warrior_outfit.set_leg_armor(10)


itm_nomad_robe = Item("itm_nomad_robe", "Nomad_Robe")
itm_nomad_robe.add_mesh(ItemMesh("nomad_robe_a"))
itm_nomad_robe.add_flag(ItemType.BODY_ARMOR)
itm_nomad_robe.add_flag(ItemFlag.IS_MERCHANDISE)
itm_nomad_robe.add_flag(ItemFlag.COVERS_LEGS)
itm_nomad_robe.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_nomad_robe.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_nomad_robe.add_flag(ItemFlag.IS_CIVILIAN)
itm_nomad_robe.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_nomad_robe.set_price(610)
itm_nomad_robe.add_modifier(IModBit.TETTERED)
itm_nomad_robe.add_modifier(IModBit.RAGGED)
itm_nomad_robe.add_modifier(IModBit.STURDY)
itm_nomad_robe.add_modifier(IModBit.THICK)
itm_nomad_robe.add_modifier(IModBit.HARDENED)
itm_nomad_robe.set_weight(15.0)
itm_nomad_robe.set_abundance(100)
itm_nomad_robe.set_body_armor(32)
itm_nomad_robe.set_leg_armor(10)


itm_studded_leather_coat = Item("itm_studded_leather_coat", "Studded_Leather_Coat")
itm_studded_leather_coat.add_mesh(ItemMesh("leather_armor_a"))
itm_studded_leather_coat.add_flag(ItemType.BODY_ARMOR)
itm_studded_leather_coat.add_flag(ItemFlag.IS_MERCHANDISE)
itm_studded_leather_coat.add_flag(ItemFlag.COVERS_LEGS)
itm_studded_leather_coat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_studded_leather_coat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_studded_leather_coat.set_price(690)
itm_studded_leather_coat.add_modifier(IModBit.RUSTY)
itm_studded_leather_coat.add_modifier(IModBit.BATTERED)
itm_studded_leather_coat.add_modifier(IModBit.CRUDE)
itm_studded_leather_coat.add_modifier(IModBit.THICK)
itm_studded_leather_coat.add_modifier(IModBit.REINFORCED)
itm_studded_leather_coat.add_modifier(IModBit.LORDLY)
itm_studded_leather_coat.set_weight(14.0)
itm_studded_leather_coat.set_abundance(100)
itm_studded_leather_coat.set_body_armor(36)
itm_studded_leather_coat.set_leg_armor(10)
itm_studded_leather_coat.set_difficulty(7)


itm_byrnie = Item("itm_byrnie", "Byrnie")
itm_byrnie.add_mesh(ItemMesh("byrnie_a_new"))
itm_byrnie.add_flag(ItemType.BODY_ARMOR)
itm_byrnie.add_flag(ItemFlag.IS_MERCHANDISE)
itm_byrnie.add_flag(ItemFlag.COVERS_LEGS)
itm_byrnie.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_byrnie.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_byrnie.set_price(795)
itm_byrnie.add_modifier(IModBit.RUSTY)
itm_byrnie.add_modifier(IModBit.BATTERED)
itm_byrnie.add_modifier(IModBit.CRUDE)
itm_byrnie.add_modifier(IModBit.THICK)
itm_byrnie.add_modifier(IModBit.REINFORCED)
itm_byrnie.add_modifier(IModBit.LORDLY)
itm_byrnie.set_weight(17.0)
itm_byrnie.set_abundance(100)
itm_byrnie.set_body_armor(39)
itm_byrnie.set_leg_armor(6)
itm_byrnie.set_difficulty(7)


itm_haubergeon = Item("itm_haubergeon", "Haubergeon")
itm_haubergeon.add_mesh(ItemMesh("haubergeon_c"))
itm_haubergeon.add_flag(ItemType.BODY_ARMOR)
itm_haubergeon.add_flag(ItemFlag.IS_MERCHANDISE)
itm_haubergeon.add_flag(ItemFlag.COVERS_LEGS)
itm_haubergeon.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_haubergeon.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_haubergeon.set_price(863)
itm_haubergeon.add_modifier(IModBit.RUSTY)
itm_haubergeon.add_modifier(IModBit.BATTERED)
itm_haubergeon.add_modifier(IModBit.CRUDE)
itm_haubergeon.add_modifier(IModBit.THICK)
itm_haubergeon.add_modifier(IModBit.REINFORCED)
itm_haubergeon.add_modifier(IModBit.LORDLY)
itm_haubergeon.set_weight(18.0)
itm_haubergeon.set_abundance(100)
itm_haubergeon.set_body_armor(41)
itm_haubergeon.set_leg_armor(6)
itm_haubergeon.set_difficulty(6)


itm_lamellar_vest = Item("itm_lamellar_vest", "Lamellar_Vest")
itm_lamellar_vest.add_mesh(ItemMesh("lamellar_vest_a"))
itm_lamellar_vest.add_flag(ItemType.BODY_ARMOR)
itm_lamellar_vest.add_flag(ItemFlag.IS_MERCHANDISE)
itm_lamellar_vest.add_flag(ItemFlag.COVERS_LEGS)
itm_lamellar_vest.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_lamellar_vest.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_lamellar_vest.add_flag(ItemFlag.IS_CIVILIAN)
itm_lamellar_vest.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_lamellar_vest.set_price(970)
itm_lamellar_vest.add_modifier(IModBit.TETTERED)
itm_lamellar_vest.add_modifier(IModBit.RAGGED)
itm_lamellar_vest.add_modifier(IModBit.STURDY)
itm_lamellar_vest.add_modifier(IModBit.THICK)
itm_lamellar_vest.add_modifier(IModBit.HARDENED)
itm_lamellar_vest.set_weight(18.0)
itm_lamellar_vest.set_abundance(100)
itm_lamellar_vest.set_body_armor(40)
itm_lamellar_vest.set_leg_armor(8)
itm_lamellar_vest.set_difficulty(7)


itm_lamellar_vest_khergit = Item("itm_lamellar_vest_khergit", "Khergit_Lamellar_Vest")
itm_lamellar_vest_khergit.add_mesh(ItemMesh("lamellar_vest_b"))
itm_lamellar_vest_khergit.add_flag(ItemType.BODY_ARMOR)
itm_lamellar_vest_khergit.add_flag(ItemFlag.IS_MERCHANDISE)
itm_lamellar_vest_khergit.add_flag(ItemFlag.COVERS_LEGS)
itm_lamellar_vest_khergit.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_lamellar_vest_khergit.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_lamellar_vest_khergit.add_flag(ItemFlag.IS_CIVILIAN)
itm_lamellar_vest_khergit.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_lamellar_vest_khergit.set_price(970)
itm_lamellar_vest_khergit.add_modifier(IModBit.TETTERED)
itm_lamellar_vest_khergit.add_modifier(IModBit.RAGGED)
itm_lamellar_vest_khergit.add_modifier(IModBit.STURDY)
itm_lamellar_vest_khergit.add_modifier(IModBit.THICK)
itm_lamellar_vest_khergit.add_modifier(IModBit.HARDENED)
itm_lamellar_vest_khergit.set_weight(18.0)
itm_lamellar_vest_khergit.set_abundance(100)
itm_lamellar_vest_khergit.set_body_armor(40)
itm_lamellar_vest_khergit.set_leg_armor(8)
itm_lamellar_vest_khergit.set_difficulty(7)


itm_mail_shirt = Item("itm_mail_shirt", "Mail_Shirt")
itm_mail_shirt.add_mesh(ItemMesh("mail_shirt_a"))
itm_mail_shirt.add_flag(ItemType.BODY_ARMOR)
itm_mail_shirt.add_flag(ItemFlag.IS_MERCHANDISE)
itm_mail_shirt.add_flag(ItemFlag.COVERS_LEGS)
itm_mail_shirt.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_mail_shirt.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_mail_shirt.set_price(1040)
itm_mail_shirt.add_modifier(IModBit.RUSTY)
itm_mail_shirt.add_modifier(IModBit.BATTERED)
itm_mail_shirt.add_modifier(IModBit.CRUDE)
itm_mail_shirt.add_modifier(IModBit.THICK)
itm_mail_shirt.add_modifier(IModBit.REINFORCED)
itm_mail_shirt.add_modifier(IModBit.LORDLY)
itm_mail_shirt.set_weight(19.0)
itm_mail_shirt.set_abundance(100)
itm_mail_shirt.set_body_armor(37)
itm_mail_shirt.set_leg_armor(12)
itm_mail_shirt.set_difficulty(7)


itm_mail_hauberk = Item("itm_mail_hauberk", "Mail_Hauberk")
itm_mail_hauberk.add_mesh(ItemMesh("hauberk_a_new"))
itm_mail_hauberk.add_flag(ItemType.BODY_ARMOR)
itm_mail_hauberk.add_flag(ItemFlag.IS_MERCHANDISE)
itm_mail_hauberk.add_flag(ItemFlag.COVERS_LEGS)
itm_mail_hauberk.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_mail_hauberk.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_mail_hauberk.set_price(1320)
itm_mail_hauberk.add_modifier(IModBit.RUSTY)
itm_mail_hauberk.add_modifier(IModBit.BATTERED)
itm_mail_hauberk.add_modifier(IModBit.CRUDE)
itm_mail_hauberk.add_modifier(IModBit.THICK)
itm_mail_hauberk.add_modifier(IModBit.REINFORCED)
itm_mail_hauberk.add_modifier(IModBit.LORDLY)
itm_mail_hauberk.set_weight(19.0)
itm_mail_hauberk.set_abundance(100)
itm_mail_hauberk.set_body_armor(40)
itm_mail_hauberk.set_leg_armor(12)
itm_mail_hauberk.set_difficulty(7)


itm_mail_with_surcoat = Item("itm_mail_with_surcoat", "Mail_with_Surcoat")
itm_mail_with_surcoat.add_mesh(ItemMesh("mail_long_surcoat_new"))
itm_mail_with_surcoat.add_flag(ItemType.BODY_ARMOR)
itm_mail_with_surcoat.add_flag(ItemFlag.IS_MERCHANDISE)
itm_mail_with_surcoat.add_flag(ItemFlag.COVERS_LEGS)
itm_mail_with_surcoat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_mail_with_surcoat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_mail_with_surcoat.set_price(1544)
itm_mail_with_surcoat.add_modifier(IModBit.RUSTY)
itm_mail_with_surcoat.add_modifier(IModBit.BATTERED)
itm_mail_with_surcoat.add_modifier(IModBit.CRUDE)
itm_mail_with_surcoat.add_modifier(IModBit.THICK)
itm_mail_with_surcoat.add_modifier(IModBit.REINFORCED)
itm_mail_with_surcoat.add_modifier(IModBit.LORDLY)
itm_mail_with_surcoat.set_weight(22.0)
itm_mail_with_surcoat.set_abundance(100)
itm_mail_with_surcoat.set_body_armor(42)
itm_mail_with_surcoat.set_leg_armor(14)
itm_mail_with_surcoat.set_difficulty(7)


itm_surcoat_over_mail = Item("itm_surcoat_over_mail", "Surcoat_over_Mail")
itm_surcoat_over_mail.add_mesh(ItemMesh("surcoat_over_mail_new"))
itm_surcoat_over_mail.add_flag(ItemType.BODY_ARMOR)
itm_surcoat_over_mail.add_flag(ItemFlag.IS_MERCHANDISE)
itm_surcoat_over_mail.add_flag(ItemFlag.COVERS_LEGS)
itm_surcoat_over_mail.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_surcoat_over_mail.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_surcoat_over_mail.set_price(1720)
itm_surcoat_over_mail.add_modifier(IModBit.RUSTY)
itm_surcoat_over_mail.add_modifier(IModBit.BATTERED)
itm_surcoat_over_mail.add_modifier(IModBit.CRUDE)
itm_surcoat_over_mail.add_modifier(IModBit.THICK)
itm_surcoat_over_mail.add_modifier(IModBit.REINFORCED)
itm_surcoat_over_mail.add_modifier(IModBit.LORDLY)
itm_surcoat_over_mail.set_weight(22.0)
itm_surcoat_over_mail.set_abundance(100)
itm_surcoat_over_mail.set_body_armor(43)
itm_surcoat_over_mail.set_leg_armor(14)
itm_surcoat_over_mail.set_difficulty(7)


itm_brigandine_red = Item("itm_brigandine_red", "Brigandine")
itm_brigandine_red.add_mesh(ItemMesh("brigandine_b"))
itm_brigandine_red.add_flag(ItemType.BODY_ARMOR)
itm_brigandine_red.add_flag(ItemFlag.IS_MERCHANDISE)
itm_brigandine_red.add_flag(ItemFlag.COVERS_LEGS)
itm_brigandine_red.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_brigandine_red.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_brigandine_red.set_price(1830)
itm_brigandine_red.add_modifier(IModBit.RUSTY)
itm_brigandine_red.add_modifier(IModBit.BATTERED)
itm_brigandine_red.add_modifier(IModBit.CRUDE)
itm_brigandine_red.add_modifier(IModBit.THICK)
itm_brigandine_red.add_modifier(IModBit.REINFORCED)
itm_brigandine_red.add_modifier(IModBit.LORDLY)
itm_brigandine_red.set_weight(19.0)
itm_brigandine_red.set_abundance(100)
itm_brigandine_red.set_body_armor(46)
itm_brigandine_red.set_leg_armor(12)


itm_lamellar_armor = Item("itm_lamellar_armor", "Lamellar_Armor")
itm_lamellar_armor.add_mesh(ItemMesh("lamellar_armor_b"))
itm_lamellar_armor.add_flag(ItemType.BODY_ARMOR)
itm_lamellar_armor.add_flag(ItemFlag.IS_MERCHANDISE)
itm_lamellar_armor.add_flag(ItemFlag.COVERS_LEGS)
itm_lamellar_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_lamellar_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_lamellar_armor.set_price(2410)
itm_lamellar_armor.add_modifier(IModBit.RUSTY)
itm_lamellar_armor.add_modifier(IModBit.BATTERED)
itm_lamellar_armor.add_modifier(IModBit.CRUDE)
itm_lamellar_armor.add_modifier(IModBit.THICK)
itm_lamellar_armor.add_modifier(IModBit.REINFORCED)
itm_lamellar_armor.add_modifier(IModBit.LORDLY)
itm_lamellar_armor.set_weight(25.0)
itm_lamellar_armor.set_abundance(100)
itm_lamellar_armor.set_body_armor(48)
itm_lamellar_armor.set_leg_armor(13)


itm_scale_armor = Item("itm_scale_armor", "Scale_Armor")
itm_scale_armor.add_mesh(ItemMesh("lamellar_armor_e"))
itm_scale_armor.add_flag(ItemType.BODY_ARMOR)
itm_scale_armor.add_flag(ItemFlag.IS_MERCHANDISE)
itm_scale_armor.add_flag(ItemFlag.COVERS_LEGS)
itm_scale_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_scale_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_scale_armor.set_price(2558)
itm_scale_armor.add_modifier(IModBit.RUSTY)
itm_scale_armor.add_modifier(IModBit.BATTERED)
itm_scale_armor.add_modifier(IModBit.CRUDE)
itm_scale_armor.add_modifier(IModBit.THICK)
itm_scale_armor.add_modifier(IModBit.REINFORCED)
itm_scale_armor.add_modifier(IModBit.LORDLY)
itm_scale_armor.set_weight(25.0)
itm_scale_armor.set_abundance(100)
itm_scale_armor.set_body_armor(52)
itm_scale_armor.set_leg_armor(13)
itm_scale_armor.set_difficulty(8)


itm_banded_armor = Item("itm_banded_armor", "Banded_Armor")
itm_banded_armor.add_mesh(ItemMesh("banded_armor_a"))
itm_banded_armor.add_flag(ItemType.BODY_ARMOR)
itm_banded_armor.add_flag(ItemFlag.IS_MERCHANDISE)
itm_banded_armor.add_flag(ItemFlag.COVERS_LEGS)
itm_banded_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_banded_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_banded_armor.set_price(2710)
itm_banded_armor.add_modifier(IModBit.RUSTY)
itm_banded_armor.add_modifier(IModBit.BATTERED)
itm_banded_armor.add_modifier(IModBit.CRUDE)
itm_banded_armor.add_modifier(IModBit.THICK)
itm_banded_armor.add_modifier(IModBit.REINFORCED)
itm_banded_armor.add_modifier(IModBit.LORDLY)
itm_banded_armor.set_weight(23.0)
itm_banded_armor.set_abundance(100)
itm_banded_armor.set_body_armor(49)
itm_banded_armor.set_leg_armor(14)
itm_banded_armor.set_difficulty(8)


itm_cuir_bouilli = Item("itm_cuir_bouilli", "Cuir_Bouilli")
itm_cuir_bouilli.add_mesh(ItemMesh("cuir_bouilli_a"))
itm_cuir_bouilli.add_flag(ItemType.BODY_ARMOR)
itm_cuir_bouilli.add_flag(ItemFlag.IS_MERCHANDISE)
itm_cuir_bouilli.add_flag(ItemFlag.COVERS_LEGS)
itm_cuir_bouilli.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_cuir_bouilli.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_cuir_bouilli.set_price(3100)
itm_cuir_bouilli.add_modifier(IModBit.RUSTY)
itm_cuir_bouilli.add_modifier(IModBit.BATTERED)
itm_cuir_bouilli.add_modifier(IModBit.CRUDE)
itm_cuir_bouilli.add_modifier(IModBit.THICK)
itm_cuir_bouilli.add_modifier(IModBit.REINFORCED)
itm_cuir_bouilli.add_modifier(IModBit.LORDLY)
itm_cuir_bouilli.set_weight(24.0)
itm_cuir_bouilli.set_abundance(100)
itm_cuir_bouilli.set_body_armor(50)
itm_cuir_bouilli.set_leg_armor(15)
itm_cuir_bouilli.set_difficulty(8)


itm_coat_of_plates = Item("itm_coat_of_plates", "Coat_of_Plates")
itm_coat_of_plates.add_mesh(ItemMesh("coat_of_plates_a"))
itm_coat_of_plates.add_flag(ItemType.BODY_ARMOR)
itm_coat_of_plates.add_flag(ItemFlag.IS_MERCHANDISE)
itm_coat_of_plates.add_flag(ItemFlag.COVERS_LEGS)
itm_coat_of_plates.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_coat_of_plates.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_coat_of_plates.set_price(3828)
itm_coat_of_plates.add_modifier(IModBit.RUSTY)
itm_coat_of_plates.add_modifier(IModBit.BATTERED)
itm_coat_of_plates.add_modifier(IModBit.CRUDE)
itm_coat_of_plates.add_modifier(IModBit.THICK)
itm_coat_of_plates.add_modifier(IModBit.REINFORCED)
itm_coat_of_plates.add_modifier(IModBit.LORDLY)
itm_coat_of_plates.set_weight(25.0)
itm_coat_of_plates.set_abundance(100)
itm_coat_of_plates.set_body_armor(52)
itm_coat_of_plates.set_leg_armor(16)
itm_coat_of_plates.set_difficulty(8)


itm_coat_of_plates_red = Item("itm_coat_of_plates_red", "Coat_of_Plates")
itm_coat_of_plates_red.add_mesh(ItemMesh("coat_of_plates_red"))
itm_coat_of_plates_red.add_flag(ItemType.BODY_ARMOR)
itm_coat_of_plates_red.add_flag(ItemFlag.IS_MERCHANDISE)
itm_coat_of_plates_red.add_flag(ItemFlag.COVERS_LEGS)
itm_coat_of_plates_red.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_coat_of_plates_red.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_coat_of_plates_red.set_price(3828)
itm_coat_of_plates_red.add_modifier(IModBit.RUSTY)
itm_coat_of_plates_red.add_modifier(IModBit.BATTERED)
itm_coat_of_plates_red.add_modifier(IModBit.CRUDE)
itm_coat_of_plates_red.add_modifier(IModBit.THICK)
itm_coat_of_plates_red.add_modifier(IModBit.REINFORCED)
itm_coat_of_plates_red.add_modifier(IModBit.LORDLY)
itm_coat_of_plates_red.set_weight(25.0)
itm_coat_of_plates_red.set_abundance(100)
itm_coat_of_plates_red.set_body_armor(52)
itm_coat_of_plates_red.set_leg_armor(16)
itm_coat_of_plates_red.set_difficulty(8)


itm_plate_armor = Item("itm_plate_armor", "Plate_Armor")
itm_plate_armor.add_mesh(ItemMesh("full_plate_armor"))
itm_plate_armor.add_flag(ItemType.BODY_ARMOR)
itm_plate_armor.add_flag(ItemFlag.IS_MERCHANDISE)
itm_plate_armor.add_flag(ItemFlag.COVERS_LEGS)
itm_plate_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_plate_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_plate_armor.set_price(6553)
itm_plate_armor.add_modifier(IModBit.CRACKED)
itm_plate_armor.add_modifier(IModBit.RUSTY)
itm_plate_armor.add_modifier(IModBit.BATTERED)
itm_plate_armor.add_modifier(IModBit.CRUDE)
itm_plate_armor.add_modifier(IModBit.THICK)
itm_plate_armor.add_modifier(IModBit.REINFORCED)
itm_plate_armor.add_modifier(IModBit.LORDLY)
itm_plate_armor.set_weight(27.0)
itm_plate_armor.set_abundance(100)
itm_plate_armor.set_body_armor(55)
itm_plate_armor.set_leg_armor(17)
itm_plate_armor.set_difficulty(9)


itm_black_armor = Item("itm_black_armor", "Black_Armor")
itm_black_armor.add_mesh(ItemMesh("black_armor"))
itm_black_armor.add_flag(ItemType.BODY_ARMOR)
itm_black_armor.add_flag(ItemFlag.COVERS_LEGS)
itm_black_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_black_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_black_armor.set_price(9496)
itm_black_armor.add_modifier(IModBit.CRACKED)
itm_black_armor.add_modifier(IModBit.RUSTY)
itm_black_armor.add_modifier(IModBit.BATTERED)
itm_black_armor.add_modifier(IModBit.CRUDE)
itm_black_armor.add_modifier(IModBit.THICK)
itm_black_armor.add_modifier(IModBit.REINFORCED)
itm_black_armor.add_modifier(IModBit.LORDLY)
itm_black_armor.set_weight(28.0)
itm_black_armor.set_abundance(100)
itm_black_armor.set_body_armor(57)
itm_black_armor.set_leg_armor(18)
itm_black_armor.set_difficulty(10)


itm_pelt_coat = Item("itm_pelt_coat", "Pelt_Coat")
itm_pelt_coat.add_mesh(ItemMesh("thick_coat_a"))
itm_pelt_coat.add_flag(ItemType.BODY_ARMOR)
itm_pelt_coat.add_flag(ItemFlag.IS_MERCHANDISE)
itm_pelt_coat.add_flag(ItemFlag.COVERS_LEGS)
itm_pelt_coat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_pelt_coat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_pelt_coat.set_price(14)
itm_pelt_coat.add_modifier(IModBit.TETTERED)
itm_pelt_coat.add_modifier(IModBit.RAGGED)
itm_pelt_coat.add_modifier(IModBit.STURDY)
itm_pelt_coat.add_modifier(IModBit.THICK)
itm_pelt_coat.add_modifier(IModBit.HARDENED)
itm_pelt_coat.set_weight(2.0)
itm_pelt_coat.set_abundance(100)
itm_pelt_coat.set_body_armor(9)
itm_pelt_coat.set_leg_armor(1)


itm_khergit_elite_armor = Item("itm_khergit_elite_armor", "Khergit_Elite_Armor")
itm_khergit_elite_armor.add_mesh(ItemMesh("lamellar_armor_d"))
itm_khergit_elite_armor.add_flag(ItemType.BODY_ARMOR)
itm_khergit_elite_armor.add_flag(ItemFlag.IS_MERCHANDISE)
itm_khergit_elite_armor.add_flag(ItemFlag.COVERS_LEGS)
itm_khergit_elite_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_khergit_elite_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_khergit_elite_armor.set_price(3828)
itm_khergit_elite_armor.add_modifier(IModBit.RUSTY)
itm_khergit_elite_armor.add_modifier(IModBit.BATTERED)
itm_khergit_elite_armor.add_modifier(IModBit.CRUDE)
itm_khergit_elite_armor.add_modifier(IModBit.THICK)
itm_khergit_elite_armor.add_modifier(IModBit.REINFORCED)
itm_khergit_elite_armor.add_modifier(IModBit.LORDLY)
itm_khergit_elite_armor.set_weight(25.0)
itm_khergit_elite_armor.set_abundance(100)
itm_khergit_elite_armor.set_body_armor(52)
itm_khergit_elite_armor.set_leg_armor(16)
itm_khergit_elite_armor.set_difficulty(8)


itm_vaegir_elite_armor = Item("itm_vaegir_elite_armor", "Vaegir_Elite_Armor")
itm_vaegir_elite_armor.add_mesh(ItemMesh("lamellar_armor_c"))
itm_vaegir_elite_armor.add_flag(ItemType.BODY_ARMOR)
itm_vaegir_elite_armor.add_flag(ItemFlag.IS_MERCHANDISE)
itm_vaegir_elite_armor.add_flag(ItemFlag.COVERS_LEGS)
itm_vaegir_elite_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_vaegir_elite_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_vaegir_elite_armor.set_price(3828)
itm_vaegir_elite_armor.add_modifier(IModBit.RUSTY)
itm_vaegir_elite_armor.add_modifier(IModBit.BATTERED)
itm_vaegir_elite_armor.add_modifier(IModBit.CRUDE)
itm_vaegir_elite_armor.add_modifier(IModBit.THICK)
itm_vaegir_elite_armor.add_modifier(IModBit.REINFORCED)
itm_vaegir_elite_armor.add_modifier(IModBit.LORDLY)
itm_vaegir_elite_armor.set_weight(25.0)
itm_vaegir_elite_armor.set_abundance(100)
itm_vaegir_elite_armor.set_body_armor(52)
itm_vaegir_elite_armor.set_leg_armor(16)
itm_vaegir_elite_armor.set_difficulty(8)


itm_sarranid_elite_armor = Item("itm_sarranid_elite_armor", "Sarranid_Elite_Armor")
itm_sarranid_elite_armor.add_mesh(ItemMesh("tunic_armor_a"))
itm_sarranid_elite_armor.add_flag(ItemType.BODY_ARMOR)
itm_sarranid_elite_armor.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sarranid_elite_armor.add_flag(ItemFlag.COVERS_LEGS)
itm_sarranid_elite_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_sarranid_elite_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_sarranid_elite_armor.add_flag(ItemFlag.IS_CIVILIAN)
itm_sarranid_elite_armor.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_sarranid_elite_armor.set_price(3828)
itm_sarranid_elite_armor.add_modifier(IModBit.RUSTY)
itm_sarranid_elite_armor.add_modifier(IModBit.BATTERED)
itm_sarranid_elite_armor.add_modifier(IModBit.CRUDE)
itm_sarranid_elite_armor.add_modifier(IModBit.THICK)
itm_sarranid_elite_armor.add_modifier(IModBit.REINFORCED)
itm_sarranid_elite_armor.add_modifier(IModBit.LORDLY)
itm_sarranid_elite_armor.set_weight(25.0)
itm_sarranid_elite_armor.set_abundance(100)
itm_sarranid_elite_armor.set_body_armor(52)
itm_sarranid_elite_armor.set_leg_armor(16)
itm_sarranid_elite_armor.set_difficulty(8)


itm_sarranid_dress_a = Item("itm_sarranid_dress_a", "Dress")
itm_sarranid_dress_a.add_mesh(ItemMesh("woolen_dress"))
itm_sarranid_dress_a.add_flag(ItemType.BODY_ARMOR)
itm_sarranid_dress_a.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sarranid_dress_a.add_flag(ItemFlag.COVERS_LEGS)
itm_sarranid_dress_a.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_sarranid_dress_a.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_sarranid_dress_a.set_price(33)
itm_sarranid_dress_a.add_modifier(IModBit.TETTERED)
itm_sarranid_dress_a.add_modifier(IModBit.RAGGED)
itm_sarranid_dress_a.add_modifier(IModBit.STURDY)
itm_sarranid_dress_a.add_modifier(IModBit.THICK)
itm_sarranid_dress_a.add_modifier(IModBit.HARDENED)
itm_sarranid_dress_a.set_weight(1.0)
itm_sarranid_dress_a.set_abundance(100)
itm_sarranid_dress_a.set_body_armor(9)
itm_sarranid_dress_a.set_leg_armor(9)


itm_sarranid_dress_b = Item("itm_sarranid_dress_b", "Dress")
itm_sarranid_dress_b.add_mesh(ItemMesh("woolen_dress"))
itm_sarranid_dress_b.add_flag(ItemType.BODY_ARMOR)
itm_sarranid_dress_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sarranid_dress_b.add_flag(ItemFlag.COVERS_LEGS)
itm_sarranid_dress_b.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_sarranid_dress_b.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_sarranid_dress_b.set_price(33)
itm_sarranid_dress_b.add_modifier(IModBit.TETTERED)
itm_sarranid_dress_b.add_modifier(IModBit.RAGGED)
itm_sarranid_dress_b.add_modifier(IModBit.STURDY)
itm_sarranid_dress_b.add_modifier(IModBit.THICK)
itm_sarranid_dress_b.add_modifier(IModBit.HARDENED)
itm_sarranid_dress_b.set_weight(1.0)
itm_sarranid_dress_b.set_abundance(100)
itm_sarranid_dress_b.set_body_armor(9)
itm_sarranid_dress_b.set_leg_armor(9)


itm_sarranid_cloth_robe = Item("itm_sarranid_cloth_robe", "Worn_Robe")
itm_sarranid_cloth_robe.add_mesh(ItemMesh("sar_robe"))
itm_sarranid_cloth_robe.add_flag(ItemType.BODY_ARMOR)
itm_sarranid_cloth_robe.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sarranid_cloth_robe.add_flag(ItemFlag.COVERS_LEGS)
itm_sarranid_cloth_robe.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_sarranid_cloth_robe.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_sarranid_cloth_robe.set_price(33)
itm_sarranid_cloth_robe.add_modifier(IModBit.TETTERED)
itm_sarranid_cloth_robe.add_modifier(IModBit.RAGGED)
itm_sarranid_cloth_robe.add_modifier(IModBit.STURDY)
itm_sarranid_cloth_robe.add_modifier(IModBit.THICK)
itm_sarranid_cloth_robe.add_modifier(IModBit.HARDENED)
itm_sarranid_cloth_robe.set_weight(1.0)
itm_sarranid_cloth_robe.set_abundance(100)
itm_sarranid_cloth_robe.set_body_armor(9)
itm_sarranid_cloth_robe.set_leg_armor(9)


itm_sarranid_cloth_robe_b = Item("itm_sarranid_cloth_robe_b", "Worn_Robe")
itm_sarranid_cloth_robe_b.add_mesh(ItemMesh("sar_robe_b"))
itm_sarranid_cloth_robe_b.add_flag(ItemType.BODY_ARMOR)
itm_sarranid_cloth_robe_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sarranid_cloth_robe_b.add_flag(ItemFlag.COVERS_LEGS)
itm_sarranid_cloth_robe_b.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_sarranid_cloth_robe_b.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_sarranid_cloth_robe_b.set_price(33)
itm_sarranid_cloth_robe_b.add_modifier(IModBit.TETTERED)
itm_sarranid_cloth_robe_b.add_modifier(IModBit.RAGGED)
itm_sarranid_cloth_robe_b.add_modifier(IModBit.STURDY)
itm_sarranid_cloth_robe_b.add_modifier(IModBit.THICK)
itm_sarranid_cloth_robe_b.add_modifier(IModBit.HARDENED)
itm_sarranid_cloth_robe_b.set_weight(1.0)
itm_sarranid_cloth_robe_b.set_abundance(100)
itm_sarranid_cloth_robe_b.set_body_armor(9)
itm_sarranid_cloth_robe_b.set_leg_armor(9)


itm_skirmisher_armor = Item("itm_skirmisher_armor", "Skirmisher_Armor")
itm_skirmisher_armor.add_mesh(ItemMesh("skirmisher_armor"))
itm_skirmisher_armor.add_flag(ItemType.BODY_ARMOR)
itm_skirmisher_armor.add_flag(ItemFlag.IS_MERCHANDISE)
itm_skirmisher_armor.add_flag(ItemFlag.COVERS_LEGS)
itm_skirmisher_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_skirmisher_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_skirmisher_armor.set_price(74)
itm_skirmisher_armor.add_modifier(IModBit.TETTERED)
itm_skirmisher_armor.add_modifier(IModBit.RAGGED)
itm_skirmisher_armor.add_modifier(IModBit.STURDY)
itm_skirmisher_armor.add_modifier(IModBit.THICK)
itm_skirmisher_armor.add_modifier(IModBit.HARDENED)
itm_skirmisher_armor.set_weight(3.0)
itm_skirmisher_armor.set_abundance(100)
itm_skirmisher_armor.set_body_armor(15)
itm_skirmisher_armor.set_leg_armor(9)


itm_archers_vest = Item("itm_archers_vest", "Archer's_Padded_Vest")
itm_archers_vest.add_mesh(ItemMesh("archers_vest"))
itm_archers_vest.add_flag(ItemType.BODY_ARMOR)
itm_archers_vest.add_flag(ItemFlag.IS_MERCHANDISE)
itm_archers_vest.add_flag(ItemFlag.COVERS_LEGS)
itm_archers_vest.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_archers_vest.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_archers_vest.set_price(260)
itm_archers_vest.add_modifier(IModBit.TETTERED)
itm_archers_vest.add_modifier(IModBit.RAGGED)
itm_archers_vest.add_modifier(IModBit.STURDY)
itm_archers_vest.add_modifier(IModBit.THICK)
itm_archers_vest.add_modifier(IModBit.HARDENED)
itm_archers_vest.set_weight(6.0)
itm_archers_vest.set_abundance(100)
itm_archers_vest.set_body_armor(23)
itm_archers_vest.set_leg_armor(12)


itm_sarranid_leather_armor = Item("itm_sarranid_leather_armor", "Sarranid_Leather_Armor")
itm_sarranid_leather_armor.add_mesh(ItemMesh("sarranid_leather_armor"))
itm_sarranid_leather_armor.add_flag(ItemType.BODY_ARMOR)
itm_sarranid_leather_armor.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sarranid_leather_armor.add_flag(ItemFlag.COVERS_LEGS)
itm_sarranid_leather_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_sarranid_leather_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_sarranid_leather_armor.set_price(650)
itm_sarranid_leather_armor.add_modifier(IModBit.RUSTY)
itm_sarranid_leather_armor.add_modifier(IModBit.BATTERED)
itm_sarranid_leather_armor.add_modifier(IModBit.CRUDE)
itm_sarranid_leather_armor.add_modifier(IModBit.THICK)
itm_sarranid_leather_armor.add_modifier(IModBit.REINFORCED)
itm_sarranid_leather_armor.add_modifier(IModBit.LORDLY)
itm_sarranid_leather_armor.set_weight(9.0)
itm_sarranid_leather_armor.set_abundance(100)
itm_sarranid_leather_armor.set_body_armor(32)
itm_sarranid_leather_armor.set_leg_armor(12)


itm_sarranid_cavalry_robe = Item("itm_sarranid_cavalry_robe", "Cavalry_Robe")
itm_sarranid_cavalry_robe.add_mesh(ItemMesh("arabian_armor_a"))
itm_sarranid_cavalry_robe.add_flag(ItemType.BODY_ARMOR)
itm_sarranid_cavalry_robe.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sarranid_cavalry_robe.add_flag(ItemFlag.COVERS_LEGS)
itm_sarranid_cavalry_robe.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_sarranid_cavalry_robe.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_sarranid_cavalry_robe.add_flag(ItemFlag.IS_CIVILIAN)
itm_sarranid_cavalry_robe.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_sarranid_cavalry_robe.set_price(990)
itm_sarranid_cavalry_robe.add_modifier(IModBit.RUSTY)
itm_sarranid_cavalry_robe.add_modifier(IModBit.BATTERED)
itm_sarranid_cavalry_robe.add_modifier(IModBit.CRUDE)
itm_sarranid_cavalry_robe.add_modifier(IModBit.THICK)
itm_sarranid_cavalry_robe.add_modifier(IModBit.REINFORCED)
itm_sarranid_cavalry_robe.add_modifier(IModBit.LORDLY)
itm_sarranid_cavalry_robe.set_weight(15.0)
itm_sarranid_cavalry_robe.set_abundance(100)
itm_sarranid_cavalry_robe.set_body_armor(36)
itm_sarranid_cavalry_robe.set_leg_armor(8)


itm_arabian_armor_b = Item("itm_arabian_armor_b", "Sarranid_Guard_Armor")
itm_arabian_armor_b.add_mesh(ItemMesh("arabian_armor_b"))
itm_arabian_armor_b.add_flag(ItemType.BODY_ARMOR)
itm_arabian_armor_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_arabian_armor_b.add_flag(ItemFlag.COVERS_LEGS)
itm_arabian_armor_b.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_arabian_armor_b.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_arabian_armor_b.set_price(1200)
itm_arabian_armor_b.add_modifier(IModBit.RUSTY)
itm_arabian_armor_b.add_modifier(IModBit.BATTERED)
itm_arabian_armor_b.add_modifier(IModBit.CRUDE)
itm_arabian_armor_b.add_modifier(IModBit.THICK)
itm_arabian_armor_b.add_modifier(IModBit.REINFORCED)
itm_arabian_armor_b.add_modifier(IModBit.LORDLY)
itm_arabian_armor_b.set_weight(19.0)
itm_arabian_armor_b.set_abundance(100)
itm_arabian_armor_b.set_body_armor(38)
itm_arabian_armor_b.set_leg_armor(8)


itm_sarranid_mail_shirt = Item("itm_sarranid_mail_shirt", "Sarranid_Mail_Shirt")
itm_sarranid_mail_shirt.add_mesh(ItemMesh("sarranian_mail_shirt"))
itm_sarranid_mail_shirt.add_flag(ItemType.BODY_ARMOR)
itm_sarranid_mail_shirt.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sarranid_mail_shirt.add_flag(ItemFlag.COVERS_LEGS)
itm_sarranid_mail_shirt.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_sarranid_mail_shirt.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_sarranid_mail_shirt.add_flag(ItemFlag.IS_CIVILIAN)
itm_sarranid_mail_shirt.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_sarranid_mail_shirt.set_price(1400)
itm_sarranid_mail_shirt.add_modifier(IModBit.RUSTY)
itm_sarranid_mail_shirt.add_modifier(IModBit.BATTERED)
itm_sarranid_mail_shirt.add_modifier(IModBit.CRUDE)
itm_sarranid_mail_shirt.add_modifier(IModBit.THICK)
itm_sarranid_mail_shirt.add_modifier(IModBit.REINFORCED)
itm_sarranid_mail_shirt.add_modifier(IModBit.LORDLY)
itm_sarranid_mail_shirt.set_weight(19.0)
itm_sarranid_mail_shirt.set_abundance(100)
itm_sarranid_mail_shirt.set_body_armor(40)
itm_sarranid_mail_shirt.set_leg_armor(14)
itm_sarranid_mail_shirt.set_difficulty(7)


itm_mamluke_mail = Item("itm_mamluke_mail", "Mamluke_Mail")
itm_mamluke_mail.add_mesh(ItemMesh("sarranid_elite_cavalary"))
itm_mamluke_mail.add_flag(ItemType.BODY_ARMOR)
itm_mamluke_mail.add_flag(ItemFlag.IS_MERCHANDISE)
itm_mamluke_mail.add_flag(ItemFlag.COVERS_LEGS)
itm_mamluke_mail.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_mamluke_mail.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_mamluke_mail.add_flag(ItemFlag.IS_CIVILIAN)
itm_mamluke_mail.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_mamluke_mail.set_price(2900)
itm_mamluke_mail.add_modifier(IModBit.RUSTY)
itm_mamluke_mail.add_modifier(IModBit.BATTERED)
itm_mamluke_mail.add_modifier(IModBit.CRUDE)
itm_mamluke_mail.add_modifier(IModBit.THICK)
itm_mamluke_mail.add_modifier(IModBit.REINFORCED)
itm_mamluke_mail.add_modifier(IModBit.LORDLY)
itm_mamluke_mail.set_weight(24.0)
itm_mamluke_mail.set_abundance(100)
itm_mamluke_mail.set_body_armor(48)
itm_mamluke_mail.set_leg_armor(16)
itm_mamluke_mail.set_difficulty(8)


itm_burlap_tunic = Item("itm_burlap_tunic", "Burlap_Tunic")
itm_burlap_tunic.add_mesh(ItemMesh("shirt"))
itm_burlap_tunic.add_flag(ItemType.BODY_ARMOR)
itm_burlap_tunic.add_flag(ItemFlag.COVERS_LEGS)
itm_burlap_tunic.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_burlap_tunic.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_burlap_tunic.set_price(5)
itm_burlap_tunic.add_modifier(IModBit.RUSTY)
itm_burlap_tunic.add_modifier(IModBit.BATTERED)
itm_burlap_tunic.add_modifier(IModBit.CRUDE)
itm_burlap_tunic.add_modifier(IModBit.THICK)
itm_burlap_tunic.add_modifier(IModBit.REINFORCED)
itm_burlap_tunic.add_modifier(IModBit.LORDLY)
itm_burlap_tunic.set_weight(1.0)
itm_burlap_tunic.set_abundance(100)
itm_burlap_tunic.set_body_armor(3)
itm_burlap_tunic.set_leg_armor(1)


itm_heraldic_mail_with_surcoat = Item("itm_heraldic_mail_with_surcoat", "Heraldic_Mail_with_Surcoat")
itm_heraldic_mail_with_surcoat.add_mesh(ItemMesh("heraldic_armor_new_a"))
itm_heraldic_mail_with_surcoat.add_flag(ItemType.BODY_ARMOR)
itm_heraldic_mail_with_surcoat.add_flag(ItemFlag.IS_MERCHANDISE)
itm_heraldic_mail_with_surcoat.add_flag(ItemFlag.COVERS_LEGS)
itm_heraldic_mail_with_surcoat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_heraldic_mail_with_surcoat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_heraldic_mail_with_surcoat.set_price(3454)
itm_heraldic_mail_with_surcoat.add_modifier(IModBit.RUSTY)
itm_heraldic_mail_with_surcoat.add_modifier(IModBit.BATTERED)
itm_heraldic_mail_with_surcoat.add_modifier(IModBit.CRUDE)
itm_heraldic_mail_with_surcoat.add_modifier(IModBit.THICK)
itm_heraldic_mail_with_surcoat.add_modifier(IModBit.REINFORCED)
itm_heraldic_mail_with_surcoat.add_modifier(IModBit.LORDLY)
itm_heraldic_mail_with_surcoat.set_weight(22.0)
itm_heraldic_mail_with_surcoat.set_abundance(100)
itm_heraldic_mail_with_surcoat.set_body_armor(49)
itm_heraldic_mail_with_surcoat.set_leg_armor(17)
itm_heraldic_mail_with_surcoat.set_difficulty(7)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270485 1224979098644774912 1224979098644774913


itm_heraldic_mail_with_tunic = Item("itm_heraldic_mail_with_tunic", "Heraldic_Mail")
itm_heraldic_mail_with_tunic.add_mesh(ItemMesh("heraldic_armor_new_b"))
itm_heraldic_mail_with_tunic.add_flag(ItemType.BODY_ARMOR)
itm_heraldic_mail_with_tunic.add_flag(ItemFlag.IS_MERCHANDISE)
itm_heraldic_mail_with_tunic.add_flag(ItemFlag.COVERS_LEGS)
itm_heraldic_mail_with_tunic.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_heraldic_mail_with_tunic.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_heraldic_mail_with_tunic.set_price(3520)
itm_heraldic_mail_with_tunic.add_modifier(IModBit.RUSTY)
itm_heraldic_mail_with_tunic.add_modifier(IModBit.BATTERED)
itm_heraldic_mail_with_tunic.add_modifier(IModBit.CRUDE)
itm_heraldic_mail_with_tunic.add_modifier(IModBit.THICK)
itm_heraldic_mail_with_tunic.add_modifier(IModBit.REINFORCED)
itm_heraldic_mail_with_tunic.add_modifier(IModBit.LORDLY)
itm_heraldic_mail_with_tunic.set_weight(22.0)
itm_heraldic_mail_with_tunic.set_abundance(100)
itm_heraldic_mail_with_tunic.set_body_armor(50)
itm_heraldic_mail_with_tunic.set_leg_armor(16)
itm_heraldic_mail_with_tunic.set_difficulty(7)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270486 1224979098644774912 1224979098644774913


itm_heraldic_mail_with_tunic_b = Item("itm_heraldic_mail_with_tunic_b", "Heraldic_Mail")
itm_heraldic_mail_with_tunic_b.add_mesh(ItemMesh("heraldic_armor_new_c"))
itm_heraldic_mail_with_tunic_b.add_flag(ItemType.BODY_ARMOR)
itm_heraldic_mail_with_tunic_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_heraldic_mail_with_tunic_b.add_flag(ItemFlag.COVERS_LEGS)
itm_heraldic_mail_with_tunic_b.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_heraldic_mail_with_tunic_b.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_heraldic_mail_with_tunic_b.set_price(3610)
itm_heraldic_mail_with_tunic_b.add_modifier(IModBit.RUSTY)
itm_heraldic_mail_with_tunic_b.add_modifier(IModBit.BATTERED)
itm_heraldic_mail_with_tunic_b.add_modifier(IModBit.CRUDE)
itm_heraldic_mail_with_tunic_b.add_modifier(IModBit.THICK)
itm_heraldic_mail_with_tunic_b.add_modifier(IModBit.REINFORCED)
itm_heraldic_mail_with_tunic_b.add_modifier(IModBit.LORDLY)
itm_heraldic_mail_with_tunic_b.set_weight(22.0)
itm_heraldic_mail_with_tunic_b.set_abundance(100)
itm_heraldic_mail_with_tunic_b.set_body_armor(50)
itm_heraldic_mail_with_tunic_b.set_leg_armor(16)
itm_heraldic_mail_with_tunic_b.set_difficulty(7)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270487 1224979098644774912 1224979098644774913


itm_heraldic_mail_with_tabard = Item("itm_heraldic_mail_with_tabard", "Heraldic_Mail_with_Tabard")
itm_heraldic_mail_with_tabard.add_mesh(ItemMesh("heraldic_armor_new_d"))
itm_heraldic_mail_with_tabard.add_flag(ItemType.BODY_ARMOR)
itm_heraldic_mail_with_tabard.add_flag(ItemFlag.IS_MERCHANDISE)
itm_heraldic_mail_with_tabard.add_flag(ItemFlag.COVERS_LEGS)
itm_heraldic_mail_with_tabard.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_heraldic_mail_with_tabard.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_heraldic_mail_with_tabard.set_price(3654)
itm_heraldic_mail_with_tabard.add_modifier(IModBit.RUSTY)
itm_heraldic_mail_with_tabard.add_modifier(IModBit.BATTERED)
itm_heraldic_mail_with_tabard.add_modifier(IModBit.CRUDE)
itm_heraldic_mail_with_tabard.add_modifier(IModBit.THICK)
itm_heraldic_mail_with_tabard.add_modifier(IModBit.REINFORCED)
itm_heraldic_mail_with_tabard.add_modifier(IModBit.LORDLY)
itm_heraldic_mail_with_tabard.set_weight(21.0)
itm_heraldic_mail_with_tabard.set_abundance(100)
itm_heraldic_mail_with_tabard.set_body_armor(51)
itm_heraldic_mail_with_tabard.set_leg_armor(15)
itm_heraldic_mail_with_tabard.set_difficulty(7)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270488 1224979098644774912 1224979098644774913


itm_turret_hat_ruby = Item("itm_turret_hat_ruby", "Turret_Hat")
itm_turret_hat_ruby.add_mesh(ItemMesh("turret_hat_r"))
itm_turret_hat_ruby.add_flag(ItemType.HEAD_ARMOR)
itm_turret_hat_ruby.add_flag(ItemFlag.IS_CIVILIAN)
itm_turret_hat_ruby.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_turret_hat_ruby.add_flag(ItemFlag.FITS_TO_HEAD)
itm_turret_hat_ruby.add_flag(ItemFlag.OFFSET_LANCE)
itm_turret_hat_ruby.set_price(70)
itm_turret_hat_ruby.add_modifier(IModBit.TETTERED)
itm_turret_hat_ruby.add_modifier(IModBit.RAGGED)
itm_turret_hat_ruby.add_modifier(IModBit.STURDY)
itm_turret_hat_ruby.add_modifier(IModBit.THICK)
itm_turret_hat_ruby.add_modifier(IModBit.HARDENED)
itm_turret_hat_ruby.set_weight(0.5)
itm_turret_hat_ruby.set_abundance(100)
itm_turret_hat_ruby.set_head_armor(8)


itm_turret_hat_blue = Item("itm_turret_hat_blue", "Turret_Hat")
itm_turret_hat_blue.add_mesh(ItemMesh("turret_hat_b"))
itm_turret_hat_blue.add_flag(ItemType.HEAD_ARMOR)
itm_turret_hat_blue.add_flag(ItemFlag.IS_CIVILIAN)
itm_turret_hat_blue.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_turret_hat_blue.add_flag(ItemFlag.FITS_TO_HEAD)
itm_turret_hat_blue.add_flag(ItemFlag.OFFSET_LANCE)
itm_turret_hat_blue.set_price(80)
itm_turret_hat_blue.add_modifier(IModBit.TETTERED)
itm_turret_hat_blue.add_modifier(IModBit.RAGGED)
itm_turret_hat_blue.add_modifier(IModBit.STURDY)
itm_turret_hat_blue.add_modifier(IModBit.THICK)
itm_turret_hat_blue.add_modifier(IModBit.HARDENED)
itm_turret_hat_blue.set_weight(0.5)
itm_turret_hat_blue.set_abundance(100)
itm_turret_hat_blue.set_head_armor(8)


itm_turret_hat_green = Item("itm_turret_hat_green", "Barbette")
itm_turret_hat_green.add_mesh(ItemMesh("barbette_new"))
itm_turret_hat_green.add_flag(ItemType.HEAD_ARMOR)
itm_turret_hat_green.add_flag(ItemFlag.IS_MERCHANDISE)
itm_turret_hat_green.add_flag(ItemFlag.IS_CIVILIAN)
itm_turret_hat_green.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_turret_hat_green.add_flag(ItemFlag.FITS_TO_HEAD)
itm_turret_hat_green.add_flag(ItemFlag.OFFSET_LANCE)
itm_turret_hat_green.set_price(70)
itm_turret_hat_green.add_modifier(IModBit.TETTERED)
itm_turret_hat_green.add_modifier(IModBit.RAGGED)
itm_turret_hat_green.add_modifier(IModBit.STURDY)
itm_turret_hat_green.add_modifier(IModBit.THICK)
itm_turret_hat_green.add_modifier(IModBit.HARDENED)
itm_turret_hat_green.set_weight(0.5)
itm_turret_hat_green.set_abundance(100)
itm_turret_hat_green.set_head_armor(6)


itm_head_wrappings = Item("itm_head_wrappings", "Head_Wrapping")
itm_head_wrappings.add_mesh(ItemMesh("head_wrapping"))
itm_head_wrappings.add_flag(ItemType.HEAD_ARMOR)
itm_head_wrappings.add_flag(ItemFlag.FITS_TO_HEAD)
itm_head_wrappings.add_flag(ItemFlag.OFFSET_LANCE)
itm_head_wrappings.set_price(16)
itm_head_wrappings.add_modifier(IModBit.TETTERED)
itm_head_wrappings.add_modifier(IModBit.RAGGED)
itm_head_wrappings.add_modifier(IModBit.STURDY)
itm_head_wrappings.add_modifier(IModBit.THICK)
itm_head_wrappings.set_weight(0.25)
itm_head_wrappings.set_abundance(100)
itm_head_wrappings.set_head_armor(3)


itm_court_hat = Item("itm_court_hat", "Turret_Hat")
itm_court_hat.add_mesh(ItemMesh("court_hat"))
itm_court_hat.add_flag(ItemType.HEAD_ARMOR)
itm_court_hat.add_flag(ItemFlag.IS_CIVILIAN)
itm_court_hat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_court_hat.add_flag(ItemFlag.FITS_TO_HEAD)
itm_court_hat.add_flag(ItemFlag.OFFSET_LANCE)
itm_court_hat.set_price(80)
itm_court_hat.add_modifier(IModBit.TETTERED)
itm_court_hat.add_modifier(IModBit.RAGGED)
itm_court_hat.add_modifier(IModBit.STURDY)
itm_court_hat.add_modifier(IModBit.THICK)
itm_court_hat.add_modifier(IModBit.HARDENED)
itm_court_hat.set_weight(0.5)
itm_court_hat.set_abundance(100)
itm_court_hat.set_head_armor(8)


itm_wimple_a = Item("itm_wimple_a", "Wimple")
itm_wimple_a.add_mesh(ItemMesh("wimple_a_new"))
itm_wimple_a.add_flag(ItemType.HEAD_ARMOR)
itm_wimple_a.add_flag(ItemFlag.IS_MERCHANDISE)
itm_wimple_a.add_flag(ItemFlag.IS_CIVILIAN)
itm_wimple_a.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_wimple_a.add_flag(ItemFlag.FITS_TO_HEAD)
itm_wimple_a.add_flag(ItemFlag.OFFSET_LANCE)
itm_wimple_a.set_price(10)
itm_wimple_a.add_modifier(IModBit.TETTERED)
itm_wimple_a.add_modifier(IModBit.RAGGED)
itm_wimple_a.add_modifier(IModBit.STURDY)
itm_wimple_a.add_modifier(IModBit.THICK)
itm_wimple_a.add_modifier(IModBit.HARDENED)
itm_wimple_a.set_weight(0.5)
itm_wimple_a.set_abundance(100)
itm_wimple_a.set_head_armor(4)


itm_wimple_with_veil = Item("itm_wimple_with_veil", "Wimple_with_Veil")
itm_wimple_with_veil.add_mesh(ItemMesh("wimple_b_new"))
itm_wimple_with_veil.add_flag(ItemType.HEAD_ARMOR)
itm_wimple_with_veil.add_flag(ItemFlag.IS_MERCHANDISE)
itm_wimple_with_veil.add_flag(ItemFlag.IS_CIVILIAN)
itm_wimple_with_veil.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_wimple_with_veil.add_flag(ItemFlag.FITS_TO_HEAD)
itm_wimple_with_veil.add_flag(ItemFlag.OFFSET_LANCE)
itm_wimple_with_veil.set_price(10)
itm_wimple_with_veil.add_modifier(IModBit.TETTERED)
itm_wimple_with_veil.add_modifier(IModBit.RAGGED)
itm_wimple_with_veil.add_modifier(IModBit.STURDY)
itm_wimple_with_veil.add_modifier(IModBit.THICK)
itm_wimple_with_veil.add_modifier(IModBit.HARDENED)
itm_wimple_with_veil.set_weight(0.5)
itm_wimple_with_veil.set_abundance(100)
itm_wimple_with_veil.set_head_armor(4)


itm_straw_hat = Item("itm_straw_hat", "Straw_Hat")
itm_straw_hat.add_mesh(ItemMesh("straw_hat_new"))
itm_straw_hat.add_flag(ItemType.HEAD_ARMOR)
itm_straw_hat.add_flag(ItemFlag.IS_MERCHANDISE)
itm_straw_hat.add_flag(ItemFlag.IS_CIVILIAN)
itm_straw_hat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_straw_hat.set_price(9)
itm_straw_hat.add_modifier(IModBit.TETTERED)
itm_straw_hat.add_modifier(IModBit.RAGGED)
itm_straw_hat.add_modifier(IModBit.STURDY)
itm_straw_hat.add_modifier(IModBit.THICK)
itm_straw_hat.add_modifier(IModBit.HARDENED)
itm_straw_hat.set_weight(1.0)
itm_straw_hat.set_abundance(100)
itm_straw_hat.set_head_armor(2)


itm_common_hood = Item("itm_common_hood", "Hood")
itm_common_hood.add_mesh(ItemMesh("hood_new"))
itm_common_hood.add_flag(ItemType.HEAD_ARMOR)
itm_common_hood.add_flag(ItemFlag.IS_MERCHANDISE)
itm_common_hood.add_flag(ItemFlag.IS_CIVILIAN)
itm_common_hood.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_common_hood.set_price(9)
itm_common_hood.add_modifier(IModBit.TETTERED)
itm_common_hood.add_modifier(IModBit.RAGGED)
itm_common_hood.add_modifier(IModBit.STURDY)
itm_common_hood.add_modifier(IModBit.THICK)
itm_common_hood.add_modifier(IModBit.HARDENED)
itm_common_hood.set_weight(1.0)
itm_common_hood.set_abundance(100)
itm_common_hood.set_head_armor(10)


itm_hood_b = Item("itm_hood_b", "Hood")
itm_hood_b.add_mesh(ItemMesh("hood_b"))
itm_hood_b.add_flag(ItemType.HEAD_ARMOR)
itm_hood_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_hood_b.add_flag(ItemFlag.IS_CIVILIAN)
itm_hood_b.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_hood_b.set_price(9)
itm_hood_b.add_modifier(IModBit.TETTERED)
itm_hood_b.add_modifier(IModBit.RAGGED)
itm_hood_b.add_modifier(IModBit.STURDY)
itm_hood_b.add_modifier(IModBit.THICK)
itm_hood_b.add_modifier(IModBit.HARDENED)
itm_hood_b.set_weight(1.0)
itm_hood_b.set_abundance(100)
itm_hood_b.set_head_armor(10)


itm_hood_c = Item("itm_hood_c", "Hood")
itm_hood_c.add_mesh(ItemMesh("hood_c"))
itm_hood_c.add_flag(ItemType.HEAD_ARMOR)
itm_hood_c.add_flag(ItemFlag.IS_MERCHANDISE)
itm_hood_c.add_flag(ItemFlag.IS_CIVILIAN)
itm_hood_c.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_hood_c.set_price(9)
itm_hood_c.add_modifier(IModBit.TETTERED)
itm_hood_c.add_modifier(IModBit.RAGGED)
itm_hood_c.add_modifier(IModBit.STURDY)
itm_hood_c.add_modifier(IModBit.THICK)
itm_hood_c.add_modifier(IModBit.HARDENED)
itm_hood_c.set_weight(1.0)
itm_hood_c.set_abundance(100)
itm_hood_c.set_head_armor(10)


itm_hood_d = Item("itm_hood_d", "Hood")
itm_hood_d.add_mesh(ItemMesh("hood_d"))
itm_hood_d.add_flag(ItemType.HEAD_ARMOR)
itm_hood_d.add_flag(ItemFlag.IS_MERCHANDISE)
itm_hood_d.add_flag(ItemFlag.IS_CIVILIAN)
itm_hood_d.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_hood_d.set_price(9)
itm_hood_d.add_modifier(IModBit.TETTERED)
itm_hood_d.add_modifier(IModBit.RAGGED)
itm_hood_d.add_modifier(IModBit.STURDY)
itm_hood_d.add_modifier(IModBit.THICK)
itm_hood_d.add_modifier(IModBit.HARDENED)
itm_hood_d.set_weight(1.0)
itm_hood_d.set_abundance(100)
itm_hood_d.set_head_armor(10)


itm_headcloth = Item("itm_headcloth", "Headcloth")
itm_headcloth.add_mesh(ItemMesh("headcloth_a_new"))
itm_headcloth.add_flag(ItemType.HEAD_ARMOR)
itm_headcloth.add_flag(ItemFlag.IS_MERCHANDISE)
itm_headcloth.add_flag(ItemFlag.IS_CIVILIAN)
itm_headcloth.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_headcloth.set_price(1)
itm_headcloth.add_modifier(IModBit.TETTERED)
itm_headcloth.add_modifier(IModBit.RAGGED)
itm_headcloth.add_modifier(IModBit.STURDY)
itm_headcloth.add_modifier(IModBit.THICK)
itm_headcloth.add_modifier(IModBit.HARDENED)
itm_headcloth.set_weight(0.5)
itm_headcloth.set_abundance(100)
itm_headcloth.set_head_armor(4)


itm_woolen_hood = Item("itm_woolen_hood", "Woolen_Hood")
itm_woolen_hood.add_mesh(ItemMesh("woolen_hood"))
itm_woolen_hood.add_flag(ItemType.HEAD_ARMOR)
itm_woolen_hood.add_flag(ItemFlag.IS_MERCHANDISE)
itm_woolen_hood.add_flag(ItemFlag.IS_CIVILIAN)
itm_woolen_hood.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_woolen_hood.set_price(4)
itm_woolen_hood.add_modifier(IModBit.TETTERED)
itm_woolen_hood.add_modifier(IModBit.RAGGED)
itm_woolen_hood.add_modifier(IModBit.STURDY)
itm_woolen_hood.add_modifier(IModBit.THICK)
itm_woolen_hood.add_modifier(IModBit.HARDENED)
itm_woolen_hood.set_weight(1.0)
itm_woolen_hood.set_abundance(100)
itm_woolen_hood.set_head_armor(8)


itm_arming_cap = Item("itm_arming_cap", "Arming_Cap")
itm_arming_cap.add_mesh(ItemMesh("arming_cap_a_new"))
itm_arming_cap.add_flag(ItemType.HEAD_ARMOR)
itm_arming_cap.add_flag(ItemFlag.IS_MERCHANDISE)
itm_arming_cap.add_flag(ItemFlag.IS_CIVILIAN)
itm_arming_cap.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_arming_cap.set_price(5)
itm_arming_cap.add_modifier(IModBit.TETTERED)
itm_arming_cap.add_modifier(IModBit.RAGGED)
itm_arming_cap.add_modifier(IModBit.STURDY)
itm_arming_cap.add_modifier(IModBit.THICK)
itm_arming_cap.add_modifier(IModBit.HARDENED)
itm_arming_cap.set_weight(1.0)
itm_arming_cap.set_abundance(100)
itm_arming_cap.set_head_armor(7)


itm_fur_hat = Item("itm_fur_hat", "Fur_Hat")
itm_fur_hat.add_mesh(ItemMesh("fur_hat_a_new"))
itm_fur_hat.add_flag(ItemType.HEAD_ARMOR)
itm_fur_hat.add_flag(ItemFlag.IS_MERCHANDISE)
itm_fur_hat.add_flag(ItemFlag.IS_CIVILIAN)
itm_fur_hat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_fur_hat.set_price(4)
itm_fur_hat.add_modifier(IModBit.TETTERED)
itm_fur_hat.add_modifier(IModBit.RAGGED)
itm_fur_hat.add_modifier(IModBit.STURDY)
itm_fur_hat.add_modifier(IModBit.THICK)
itm_fur_hat.add_modifier(IModBit.HARDENED)
itm_fur_hat.set_weight(0.5)
itm_fur_hat.set_abundance(100)
itm_fur_hat.set_head_armor(8)


itm_nomad_cap = Item("itm_nomad_cap", "Nomad_Cap")
itm_nomad_cap.add_mesh(ItemMesh("nomad_cap_a_new"))
itm_nomad_cap.add_flag(ItemType.HEAD_ARMOR)
itm_nomad_cap.add_flag(ItemFlag.IS_MERCHANDISE)
itm_nomad_cap.add_flag(ItemFlag.IS_CIVILIAN)
itm_nomad_cap.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_nomad_cap.set_price(6)
itm_nomad_cap.add_modifier(IModBit.TETTERED)
itm_nomad_cap.add_modifier(IModBit.RAGGED)
itm_nomad_cap.add_modifier(IModBit.STURDY)
itm_nomad_cap.add_modifier(IModBit.THICK)
itm_nomad_cap.add_modifier(IModBit.HARDENED)
itm_nomad_cap.set_weight(0.75)
itm_nomad_cap.set_abundance(100)
itm_nomad_cap.set_head_armor(10)


itm_nomad_cap_b = Item("itm_nomad_cap_b", "Nomad_Cap")
itm_nomad_cap_b.add_mesh(ItemMesh("nomad_cap_b_new"))
itm_nomad_cap_b.add_flag(ItemType.HEAD_ARMOR)
itm_nomad_cap_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_nomad_cap_b.add_flag(ItemFlag.IS_CIVILIAN)
itm_nomad_cap_b.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_nomad_cap_b.set_price(6)
itm_nomad_cap_b.add_modifier(IModBit.TETTERED)
itm_nomad_cap_b.add_modifier(IModBit.RAGGED)
itm_nomad_cap_b.add_modifier(IModBit.STURDY)
itm_nomad_cap_b.add_modifier(IModBit.THICK)
itm_nomad_cap_b.add_modifier(IModBit.HARDENED)
itm_nomad_cap_b.set_weight(0.75)
itm_nomad_cap_b.set_abundance(100)
itm_nomad_cap_b.set_head_armor(13)


itm_steppe_cap = Item("itm_steppe_cap", "Steppe_Cap")
itm_steppe_cap.add_mesh(ItemMesh("steppe_cap_a_new"))
itm_steppe_cap.add_flag(ItemType.HEAD_ARMOR)
itm_steppe_cap.add_flag(ItemFlag.IS_MERCHANDISE)
itm_steppe_cap.add_flag(ItemFlag.IS_CIVILIAN)
itm_steppe_cap.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_steppe_cap.set_price(14)
itm_steppe_cap.add_modifier(IModBit.TETTERED)
itm_steppe_cap.add_modifier(IModBit.RAGGED)
itm_steppe_cap.add_modifier(IModBit.STURDY)
itm_steppe_cap.add_modifier(IModBit.THICK)
itm_steppe_cap.add_modifier(IModBit.HARDENED)
itm_steppe_cap.set_weight(1.0)
itm_steppe_cap.set_abundance(100)
itm_steppe_cap.set_head_armor(14)


itm_padded_coif = Item("itm_padded_coif", "Padded_Coif")
itm_padded_coif.add_mesh(ItemMesh("padded_coif_a_new"))
itm_padded_coif.add_flag(ItemType.HEAD_ARMOR)
itm_padded_coif.add_flag(ItemFlag.IS_MERCHANDISE)
itm_padded_coif.set_price(6)
itm_padded_coif.add_modifier(IModBit.TETTERED)
itm_padded_coif.add_modifier(IModBit.RAGGED)
itm_padded_coif.add_modifier(IModBit.STURDY)
itm_padded_coif.add_modifier(IModBit.THICK)
itm_padded_coif.add_modifier(IModBit.HARDENED)
itm_padded_coif.set_weight(1.0)
itm_padded_coif.set_abundance(100)
itm_padded_coif.set_head_armor(11)


itm_woolen_cap = Item("itm_woolen_cap", "Woolen_Cap")
itm_woolen_cap.add_mesh(ItemMesh("woolen_cap_new"))
itm_woolen_cap.add_flag(ItemType.HEAD_ARMOR)
itm_woolen_cap.add_flag(ItemFlag.IS_MERCHANDISE)
itm_woolen_cap.add_flag(ItemFlag.IS_CIVILIAN)
itm_woolen_cap.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_woolen_cap.set_price(2)
itm_woolen_cap.add_modifier(IModBit.TETTERED)
itm_woolen_cap.add_modifier(IModBit.RAGGED)
itm_woolen_cap.add_modifier(IModBit.STURDY)
itm_woolen_cap.add_modifier(IModBit.THICK)
itm_woolen_cap.add_modifier(IModBit.HARDENED)
itm_woolen_cap.set_weight(1.0)
itm_woolen_cap.set_abundance(100)
itm_woolen_cap.set_head_armor(6)


itm_felt_hat = Item("itm_felt_hat", "Felt_Hat")
itm_felt_hat.add_mesh(ItemMesh("felt_hat_a_new"))
itm_felt_hat.add_flag(ItemType.HEAD_ARMOR)
itm_felt_hat.add_flag(ItemFlag.IS_MERCHANDISE)
itm_felt_hat.add_flag(ItemFlag.IS_CIVILIAN)
itm_felt_hat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_felt_hat.set_price(4)
itm_felt_hat.add_modifier(IModBit.TETTERED)
itm_felt_hat.add_modifier(IModBit.RAGGED)
itm_felt_hat.add_modifier(IModBit.STURDY)
itm_felt_hat.add_modifier(IModBit.THICK)
itm_felt_hat.add_modifier(IModBit.HARDENED)
itm_felt_hat.set_weight(1.0)
itm_felt_hat.set_abundance(100)
itm_felt_hat.set_head_armor(8)


itm_felt_hat_b = Item("itm_felt_hat_b", "Felt_Hat")
itm_felt_hat_b.add_mesh(ItemMesh("felt_hat_b_new"))
itm_felt_hat_b.add_flag(ItemType.HEAD_ARMOR)
itm_felt_hat_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_felt_hat_b.add_flag(ItemFlag.IS_CIVILIAN)
itm_felt_hat_b.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_felt_hat_b.set_price(4)
itm_felt_hat_b.add_modifier(IModBit.TETTERED)
itm_felt_hat_b.add_modifier(IModBit.RAGGED)
itm_felt_hat_b.add_modifier(IModBit.STURDY)
itm_felt_hat_b.add_modifier(IModBit.THICK)
itm_felt_hat_b.add_modifier(IModBit.HARDENED)
itm_felt_hat_b.set_weight(1.0)
itm_felt_hat_b.set_abundance(100)
itm_felt_hat_b.set_head_armor(8)


itm_leather_cap = Item("itm_leather_cap", "Leather_Cap")
itm_leather_cap.add_mesh(ItemMesh("leather_cap_a_new"))
itm_leather_cap.add_flag(ItemType.HEAD_ARMOR)
itm_leather_cap.add_flag(ItemFlag.IS_MERCHANDISE)
itm_leather_cap.add_flag(ItemFlag.IS_CIVILIAN)
itm_leather_cap.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_leather_cap.set_price(8)
itm_leather_cap.add_modifier(IModBit.TETTERED)
itm_leather_cap.add_modifier(IModBit.RAGGED)
itm_leather_cap.add_modifier(IModBit.STURDY)
itm_leather_cap.add_modifier(IModBit.THICK)
itm_leather_cap.add_modifier(IModBit.HARDENED)
itm_leather_cap.set_weight(1.0)
itm_leather_cap.set_abundance(100)
itm_leather_cap.set_head_armor(18)


itm_female_hood = Item("itm_female_hood", "Lady's_Hood")
itm_female_hood.add_mesh(ItemMesh("ladys_hood_new"))
itm_female_hood.add_flag(ItemType.HEAD_ARMOR)
itm_female_hood.add_flag(ItemFlag.IS_MERCHANDISE)
itm_female_hood.add_flag(ItemFlag.IS_CIVILIAN)
itm_female_hood.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_female_hood.set_price(9)
itm_female_hood.add_modifier(IModBit.TETTERED)
itm_female_hood.add_modifier(IModBit.RAGGED)
itm_female_hood.add_modifier(IModBit.STURDY)
itm_female_hood.add_modifier(IModBit.THICK)
itm_female_hood.add_modifier(IModBit.HARDENED)
itm_female_hood.set_weight(1.0)
itm_female_hood.set_abundance(100)
itm_female_hood.set_head_armor(10)


itm_leather_steppe_cap_a = Item("itm_leather_steppe_cap_a", "Steppe_Cap")
itm_leather_steppe_cap_a.add_mesh(ItemMesh("leather_steppe_cap_a_new"))
itm_leather_steppe_cap_a.add_flag(ItemType.HEAD_ARMOR)
itm_leather_steppe_cap_a.add_flag(ItemFlag.IS_MERCHANDISE)
itm_leather_steppe_cap_a.set_price(24)
itm_leather_steppe_cap_a.add_modifier(IModBit.TETTERED)
itm_leather_steppe_cap_a.add_modifier(IModBit.RAGGED)
itm_leather_steppe_cap_a.add_modifier(IModBit.STURDY)
itm_leather_steppe_cap_a.add_modifier(IModBit.THICK)
itm_leather_steppe_cap_a.add_modifier(IModBit.HARDENED)
itm_leather_steppe_cap_a.set_weight(1.0)
itm_leather_steppe_cap_a.set_abundance(100)
itm_leather_steppe_cap_a.set_head_armor(15)


itm_leather_steppe_cap_b = Item("itm_leather_steppe_cap_b", "Steppe_Cap_")
itm_leather_steppe_cap_b.add_mesh(ItemMesh("tattered_steppe_cap_b_new"))
itm_leather_steppe_cap_b.add_flag(ItemType.HEAD_ARMOR)
itm_leather_steppe_cap_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_leather_steppe_cap_b.set_price(36)
itm_leather_steppe_cap_b.add_modifier(IModBit.TETTERED)
itm_leather_steppe_cap_b.add_modifier(IModBit.RAGGED)
itm_leather_steppe_cap_b.add_modifier(IModBit.STURDY)
itm_leather_steppe_cap_b.add_modifier(IModBit.THICK)
itm_leather_steppe_cap_b.add_modifier(IModBit.HARDENED)
itm_leather_steppe_cap_b.set_weight(1.0)
itm_leather_steppe_cap_b.set_abundance(100)
itm_leather_steppe_cap_b.set_head_armor(16)


itm_leather_steppe_cap_c = Item("itm_leather_steppe_cap_c", "Steppe_Cap")
itm_leather_steppe_cap_c.add_mesh(ItemMesh("steppe_cap_a_new"))
itm_leather_steppe_cap_c.add_flag(ItemType.HEAD_ARMOR)
itm_leather_steppe_cap_c.add_flag(ItemFlag.IS_MERCHANDISE)
itm_leather_steppe_cap_c.set_price(51)
itm_leather_steppe_cap_c.add_modifier(IModBit.TETTERED)
itm_leather_steppe_cap_c.add_modifier(IModBit.RAGGED)
itm_leather_steppe_cap_c.add_modifier(IModBit.STURDY)
itm_leather_steppe_cap_c.add_modifier(IModBit.THICK)
itm_leather_steppe_cap_c.add_modifier(IModBit.HARDENED)
itm_leather_steppe_cap_c.set_weight(1.0)
itm_leather_steppe_cap_c.set_abundance(100)
itm_leather_steppe_cap_c.set_head_armor(16)


itm_leather_warrior_cap = Item("itm_leather_warrior_cap", "Leather_Warrior_Cap")
itm_leather_warrior_cap.add_mesh(ItemMesh("skull_cap_new_b"))
itm_leather_warrior_cap.add_flag(ItemType.HEAD_ARMOR)
itm_leather_warrior_cap.add_flag(ItemFlag.IS_MERCHANDISE)
itm_leather_warrior_cap.add_flag(ItemFlag.IS_CIVILIAN)
itm_leather_warrior_cap.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_leather_warrior_cap.set_price(14)
itm_leather_warrior_cap.add_modifier(IModBit.TETTERED)
itm_leather_warrior_cap.add_modifier(IModBit.RAGGED)
itm_leather_warrior_cap.add_modifier(IModBit.STURDY)
itm_leather_warrior_cap.add_modifier(IModBit.THICK)
itm_leather_warrior_cap.add_modifier(IModBit.HARDENED)
itm_leather_warrior_cap.set_weight(1.0)
itm_leather_warrior_cap.set_abundance(100)
itm_leather_warrior_cap.set_head_armor(18)


itm_skullcap = Item("itm_skullcap", "Skullcap")
itm_skullcap.add_mesh(ItemMesh("skull_cap_new_a"))
itm_skullcap.add_flag(ItemType.HEAD_ARMOR)
itm_skullcap.add_flag(ItemFlag.IS_MERCHANDISE)
itm_skullcap.set_price(60)
itm_skullcap.add_modifier(IModBit.CRACKED)
itm_skullcap.add_modifier(IModBit.RUSTY)
itm_skullcap.add_modifier(IModBit.BATTERED)
itm_skullcap.add_modifier(IModBit.CRUDE)
itm_skullcap.add_modifier(IModBit.THICK)
itm_skullcap.add_modifier(IModBit.REINFORCED)
itm_skullcap.add_modifier(IModBit.LORDLY)
itm_skullcap.set_weight(1.0)
itm_skullcap.set_abundance(100)
itm_skullcap.set_head_armor(20)


itm_mail_coif = Item("itm_mail_coif", "Mail_Coif")
itm_mail_coif.add_mesh(ItemMesh("mail_coif_new"))
itm_mail_coif.add_flag(ItemType.HEAD_ARMOR)
itm_mail_coif.add_flag(ItemFlag.IS_MERCHANDISE)
itm_mail_coif.set_price(71)
itm_mail_coif.add_modifier(IModBit.RUSTY)
itm_mail_coif.add_modifier(IModBit.BATTERED)
itm_mail_coif.add_modifier(IModBit.CRUDE)
itm_mail_coif.add_modifier(IModBit.THICK)
itm_mail_coif.add_modifier(IModBit.REINFORCED)
itm_mail_coif.add_modifier(IModBit.LORDLY)
itm_mail_coif.set_weight(1.25)
itm_mail_coif.set_abundance(100)
itm_mail_coif.set_head_armor(22)
itm_mail_coif.set_difficulty(7)


itm_footman_helmet = Item("itm_footman_helmet", "Footman's_Helmet")
itm_footman_helmet.add_mesh(ItemMesh("skull_cap_new"))
itm_footman_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_footman_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_footman_helmet.set_price(95)
itm_footman_helmet.add_modifier(IModBit.CRACKED)
itm_footman_helmet.add_modifier(IModBit.RUSTY)
itm_footman_helmet.add_modifier(IModBit.BATTERED)
itm_footman_helmet.add_modifier(IModBit.CRUDE)
itm_footman_helmet.add_modifier(IModBit.THICK)
itm_footman_helmet.add_modifier(IModBit.REINFORCED)
itm_footman_helmet.add_modifier(IModBit.LORDLY)
itm_footman_helmet.set_weight(1.5)
itm_footman_helmet.set_abundance(100)
itm_footman_helmet.set_head_armor(24)


itm_nasal_helmet = Item("itm_nasal_helmet", "Nasal_Helmet")
itm_nasal_helmet.add_mesh(ItemMesh("nasal_helmet_b"))
itm_nasal_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_nasal_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_nasal_helmet.set_price(121)
itm_nasal_helmet.add_modifier(IModBit.CRACKED)
itm_nasal_helmet.add_modifier(IModBit.RUSTY)
itm_nasal_helmet.add_modifier(IModBit.BATTERED)
itm_nasal_helmet.add_modifier(IModBit.CRUDE)
itm_nasal_helmet.add_modifier(IModBit.THICK)
itm_nasal_helmet.add_modifier(IModBit.REINFORCED)
itm_nasal_helmet.add_modifier(IModBit.LORDLY)
itm_nasal_helmet.set_weight(1.25)
itm_nasal_helmet.set_abundance(100)
itm_nasal_helmet.set_head_armor(26)
itm_nasal_helmet.set_difficulty(7)


itm_norman_helmet = Item("itm_norman_helmet", "Helmet_with_Cap")
itm_norman_helmet.add_mesh(ItemMesh("norman_helmet_a"))
itm_norman_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_norman_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_norman_helmet.add_flag(ItemFlag.FITS_TO_HEAD)
itm_norman_helmet.add_flag(ItemFlag.OFFSET_LANCE)
itm_norman_helmet.set_price(147)
itm_norman_helmet.add_modifier(IModBit.CRACKED)
itm_norman_helmet.add_modifier(IModBit.RUSTY)
itm_norman_helmet.add_modifier(IModBit.BATTERED)
itm_norman_helmet.add_modifier(IModBit.CRUDE)
itm_norman_helmet.add_modifier(IModBit.THICK)
itm_norman_helmet.add_modifier(IModBit.REINFORCED)
itm_norman_helmet.add_modifier(IModBit.LORDLY)
itm_norman_helmet.set_weight(1.25)
itm_norman_helmet.set_abundance(100)
itm_norman_helmet.set_head_armor(28)
itm_norman_helmet.set_difficulty(7)


itm_segmented_helmet = Item("itm_segmented_helmet", "Segmented_Helmet")
itm_segmented_helmet.add_mesh(ItemMesh("segmented_helm_new"))
itm_segmented_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_segmented_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_segmented_helmet.set_price(174)
itm_segmented_helmet.add_modifier(IModBit.CRACKED)
itm_segmented_helmet.add_modifier(IModBit.RUSTY)
itm_segmented_helmet.add_modifier(IModBit.BATTERED)
itm_segmented_helmet.add_modifier(IModBit.CRUDE)
itm_segmented_helmet.add_modifier(IModBit.THICK)
itm_segmented_helmet.add_modifier(IModBit.REINFORCED)
itm_segmented_helmet.add_modifier(IModBit.LORDLY)
itm_segmented_helmet.set_weight(1.25)
itm_segmented_helmet.set_abundance(100)
itm_segmented_helmet.set_head_armor(31)
itm_segmented_helmet.set_difficulty(7)


itm_helmet_with_neckguard = Item("itm_helmet_with_neckguard", "Helmet_with_Neckguard")
itm_helmet_with_neckguard.add_mesh(ItemMesh("neckguard_helm_new"))
itm_helmet_with_neckguard.add_flag(ItemType.HEAD_ARMOR)
itm_helmet_with_neckguard.add_flag(ItemFlag.IS_MERCHANDISE)
itm_helmet_with_neckguard.set_price(190)
itm_helmet_with_neckguard.add_modifier(IModBit.CRACKED)
itm_helmet_with_neckguard.add_modifier(IModBit.RUSTY)
itm_helmet_with_neckguard.add_modifier(IModBit.BATTERED)
itm_helmet_with_neckguard.add_modifier(IModBit.CRUDE)
itm_helmet_with_neckguard.add_modifier(IModBit.THICK)
itm_helmet_with_neckguard.add_modifier(IModBit.REINFORCED)
itm_helmet_with_neckguard.add_modifier(IModBit.LORDLY)
itm_helmet_with_neckguard.set_weight(1.5)
itm_helmet_with_neckguard.set_abundance(100)
itm_helmet_with_neckguard.set_head_armor(32)
itm_helmet_with_neckguard.set_difficulty(7)


itm_flat_topped_helmet = Item("itm_flat_topped_helmet", "Flat_Topped_Helmet")
itm_flat_topped_helmet.add_mesh(ItemMesh("flattop_helmet_new"))
itm_flat_topped_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_flat_topped_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_flat_topped_helmet.set_price(203)
itm_flat_topped_helmet.add_modifier(IModBit.CRACKED)
itm_flat_topped_helmet.add_modifier(IModBit.RUSTY)
itm_flat_topped_helmet.add_modifier(IModBit.BATTERED)
itm_flat_topped_helmet.add_modifier(IModBit.CRUDE)
itm_flat_topped_helmet.add_modifier(IModBit.THICK)
itm_flat_topped_helmet.add_modifier(IModBit.REINFORCED)
itm_flat_topped_helmet.add_modifier(IModBit.LORDLY)
itm_flat_topped_helmet.set_weight(1.75)
itm_flat_topped_helmet.set_abundance(100)
itm_flat_topped_helmet.set_head_armor(33)
itm_flat_topped_helmet.set_difficulty(7)


itm_kettle_hat = Item("itm_kettle_hat", "Kettle_Hat")
itm_kettle_hat.add_mesh(ItemMesh("kettle_hat_new"))
itm_kettle_hat.add_flag(ItemType.HEAD_ARMOR)
itm_kettle_hat.add_flag(ItemFlag.IS_MERCHANDISE)
itm_kettle_hat.set_price(240)
itm_kettle_hat.add_modifier(IModBit.CRACKED)
itm_kettle_hat.add_modifier(IModBit.RUSTY)
itm_kettle_hat.add_modifier(IModBit.BATTERED)
itm_kettle_hat.add_modifier(IModBit.CRUDE)
itm_kettle_hat.add_modifier(IModBit.THICK)
itm_kettle_hat.add_modifier(IModBit.REINFORCED)
itm_kettle_hat.add_modifier(IModBit.LORDLY)
itm_kettle_hat.set_weight(1.75)
itm_kettle_hat.set_abundance(100)
itm_kettle_hat.set_head_armor(35)
itm_kettle_hat.set_difficulty(7)


itm_spiked_helmet = Item("itm_spiked_helmet", "Spiked_Helmet")
itm_spiked_helmet.add_mesh(ItemMesh("spiked_helmet_new"))
itm_spiked_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_spiked_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_spiked_helmet.set_price(278)
itm_spiked_helmet.add_modifier(IModBit.CRACKED)
itm_spiked_helmet.add_modifier(IModBit.RUSTY)
itm_spiked_helmet.add_modifier(IModBit.BATTERED)
itm_spiked_helmet.add_modifier(IModBit.CRUDE)
itm_spiked_helmet.add_modifier(IModBit.THICK)
itm_spiked_helmet.add_modifier(IModBit.REINFORCED)
itm_spiked_helmet.add_modifier(IModBit.LORDLY)
itm_spiked_helmet.set_weight(2.0)
itm_spiked_helmet.set_abundance(100)
itm_spiked_helmet.set_head_armor(38)
itm_spiked_helmet.set_difficulty(7)


itm_nordic_helmet = Item("itm_nordic_helmet", "Nordic_Helmet")
itm_nordic_helmet.add_mesh(ItemMesh("helmet_w_eyeguard_new"))
itm_nordic_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_nordic_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_nordic_helmet.set_price(340)
itm_nordic_helmet.add_modifier(IModBit.CRACKED)
itm_nordic_helmet.add_modifier(IModBit.RUSTY)
itm_nordic_helmet.add_modifier(IModBit.BATTERED)
itm_nordic_helmet.add_modifier(IModBit.CRUDE)
itm_nordic_helmet.add_modifier(IModBit.THICK)
itm_nordic_helmet.add_modifier(IModBit.REINFORCED)
itm_nordic_helmet.add_modifier(IModBit.LORDLY)
itm_nordic_helmet.set_weight(2.0)
itm_nordic_helmet.set_abundance(100)
itm_nordic_helmet.set_head_armor(40)
itm_nordic_helmet.set_difficulty(7)


itm_khergit_lady_hat = Item("itm_khergit_lady_hat", "Khergit_Lady_Hat")
itm_khergit_lady_hat.add_mesh(ItemMesh("khergit_lady_hat"))
itm_khergit_lady_hat.add_flag(ItemType.HEAD_ARMOR)
itm_khergit_lady_hat.add_flag(ItemFlag.COVERS_LEGS)
itm_khergit_lady_hat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_khergit_lady_hat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_khergit_lady_hat.add_flag(ItemFlag.IS_CIVILIAN)
itm_khergit_lady_hat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_khergit_lady_hat.add_flag(ItemFlag.FITS_TO_HEAD)
itm_khergit_lady_hat.add_flag(ItemFlag.OFFSET_LANCE)
itm_khergit_lady_hat.set_price(1)
itm_khergit_lady_hat.add_modifier(IModBit.TETTERED)
itm_khergit_lady_hat.add_modifier(IModBit.RAGGED)
itm_khergit_lady_hat.add_modifier(IModBit.STURDY)
itm_khergit_lady_hat.add_modifier(IModBit.THICK)
itm_khergit_lady_hat.add_modifier(IModBit.HARDENED)
itm_khergit_lady_hat.set_weight(0.5)
itm_khergit_lady_hat.set_abundance(100)
itm_khergit_lady_hat.set_head_armor(4)


itm_khergit_lady_hat_b = Item("itm_khergit_lady_hat_b", "Khergit_Lady_Leather_Hat")
itm_khergit_lady_hat_b.add_mesh(ItemMesh("khergit_lady_hat_b"))
itm_khergit_lady_hat_b.add_flag(ItemType.HEAD_ARMOR)
itm_khergit_lady_hat_b.add_flag(ItemFlag.COVERS_LEGS)
itm_khergit_lady_hat_b.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_khergit_lady_hat_b.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_khergit_lady_hat_b.add_flag(ItemFlag.IS_CIVILIAN)
itm_khergit_lady_hat_b.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_khergit_lady_hat_b.add_flag(ItemFlag.FITS_TO_HEAD)
itm_khergit_lady_hat_b.add_flag(ItemFlag.OFFSET_LANCE)
itm_khergit_lady_hat_b.set_price(1)
itm_khergit_lady_hat_b.add_modifier(IModBit.TETTERED)
itm_khergit_lady_hat_b.add_modifier(IModBit.RAGGED)
itm_khergit_lady_hat_b.add_modifier(IModBit.STURDY)
itm_khergit_lady_hat_b.add_modifier(IModBit.THICK)
itm_khergit_lady_hat_b.add_modifier(IModBit.HARDENED)
itm_khergit_lady_hat_b.set_weight(0.5)
itm_khergit_lady_hat_b.set_abundance(100)
itm_khergit_lady_hat_b.set_head_armor(4)


itm_sarranid_felt_hat = Item("itm_sarranid_felt_hat", "Sarranid_Felt_Hat")
itm_sarranid_felt_hat.add_mesh(ItemMesh("sar_helmet3"))
itm_sarranid_felt_hat.add_flag(ItemType.HEAD_ARMOR)
itm_sarranid_felt_hat.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sarranid_felt_hat.set_price(16)
itm_sarranid_felt_hat.add_modifier(IModBit.TETTERED)
itm_sarranid_felt_hat.add_modifier(IModBit.RAGGED)
itm_sarranid_felt_hat.add_modifier(IModBit.STURDY)
itm_sarranid_felt_hat.add_modifier(IModBit.THICK)
itm_sarranid_felt_hat.add_modifier(IModBit.HARDENED)
itm_sarranid_felt_hat.set_weight(2.0)
itm_sarranid_felt_hat.set_abundance(100)
itm_sarranid_felt_hat.set_head_armor(5)
itm_sarranid_felt_hat.set_difficulty(7)


itm_turban = Item("itm_turban", "Turban")
itm_turban.add_mesh(ItemMesh("tuareg_open"))
itm_turban.add_flag(ItemType.HEAD_ARMOR)
itm_turban.add_flag(ItemFlag.IS_MERCHANDISE)
itm_turban.set_price(28)
itm_turban.add_modifier(IModBit.TETTERED)
itm_turban.add_modifier(IModBit.RAGGED)
itm_turban.add_modifier(IModBit.STURDY)
itm_turban.add_modifier(IModBit.THICK)
itm_turban.add_modifier(IModBit.HARDENED)
itm_turban.set_weight(1.0)
itm_turban.set_abundance(100)
itm_turban.set_head_armor(11)
itm_turban.set_difficulty(7)


itm_desert_turban = Item("itm_desert_turban", "Desert_Turban")
itm_desert_turban.add_mesh(ItemMesh("tuareg"))
itm_desert_turban.add_flag(ItemType.HEAD_ARMOR)
itm_desert_turban.add_flag(ItemFlag.IS_MERCHANDISE)
itm_desert_turban.add_flag(ItemFlag.COVERS_BEARD)
itm_desert_turban.set_price(38)
itm_desert_turban.add_modifier(IModBit.TETTERED)
itm_desert_turban.add_modifier(IModBit.RAGGED)
itm_desert_turban.add_modifier(IModBit.STURDY)
itm_desert_turban.add_modifier(IModBit.THICK)
itm_desert_turban.add_modifier(IModBit.HARDENED)
itm_desert_turban.set_weight(1.5)
itm_desert_turban.set_abundance(100)
itm_desert_turban.set_head_armor(14)
itm_desert_turban.set_difficulty(7)


itm_sarranid_warrior_cap = Item("itm_sarranid_warrior_cap", "Sarranid_Warrior_Cap")
itm_sarranid_warrior_cap.add_mesh(ItemMesh("tuareg_helmet"))
itm_sarranid_warrior_cap.add_flag(ItemType.HEAD_ARMOR)
itm_sarranid_warrior_cap.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sarranid_warrior_cap.add_flag(ItemFlag.COVERS_BEARD)
itm_sarranid_warrior_cap.set_price(90)
itm_sarranid_warrior_cap.add_modifier(IModBit.CRACKED)
itm_sarranid_warrior_cap.add_modifier(IModBit.RUSTY)
itm_sarranid_warrior_cap.add_modifier(IModBit.BATTERED)
itm_sarranid_warrior_cap.add_modifier(IModBit.CRUDE)
itm_sarranid_warrior_cap.add_modifier(IModBit.THICK)
itm_sarranid_warrior_cap.add_modifier(IModBit.REINFORCED)
itm_sarranid_warrior_cap.add_modifier(IModBit.LORDLY)
itm_sarranid_warrior_cap.set_weight(2.0)
itm_sarranid_warrior_cap.set_abundance(100)
itm_sarranid_warrior_cap.set_head_armor(19)
itm_sarranid_warrior_cap.set_difficulty(7)


itm_sarranid_horseman_helmet = Item("itm_sarranid_horseman_helmet", "Horseman_Helmet")
itm_sarranid_horseman_helmet.add_mesh(ItemMesh("sar_helmet2"))
itm_sarranid_horseman_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_sarranid_horseman_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sarranid_horseman_helmet.set_price(180)
itm_sarranid_horseman_helmet.add_modifier(IModBit.CRACKED)
itm_sarranid_horseman_helmet.add_modifier(IModBit.RUSTY)
itm_sarranid_horseman_helmet.add_modifier(IModBit.BATTERED)
itm_sarranid_horseman_helmet.add_modifier(IModBit.CRUDE)
itm_sarranid_horseman_helmet.add_modifier(IModBit.THICK)
itm_sarranid_horseman_helmet.add_modifier(IModBit.REINFORCED)
itm_sarranid_horseman_helmet.add_modifier(IModBit.LORDLY)
itm_sarranid_horseman_helmet.set_weight(2.75)
itm_sarranid_horseman_helmet.set_abundance(100)
itm_sarranid_horseman_helmet.set_head_armor(25)
itm_sarranid_horseman_helmet.set_difficulty(7)


itm_sarranid_helmet1 = Item("itm_sarranid_helmet1", "Sarranid_Keffiyeh_Helmet")
itm_sarranid_helmet1.add_mesh(ItemMesh("sar_helmet1"))
itm_sarranid_helmet1.add_flag(ItemType.HEAD_ARMOR)
itm_sarranid_helmet1.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sarranid_helmet1.set_price(290)
itm_sarranid_helmet1.add_modifier(IModBit.CRACKED)
itm_sarranid_helmet1.add_modifier(IModBit.RUSTY)
itm_sarranid_helmet1.add_modifier(IModBit.BATTERED)
itm_sarranid_helmet1.add_modifier(IModBit.CRUDE)
itm_sarranid_helmet1.add_modifier(IModBit.THICK)
itm_sarranid_helmet1.add_modifier(IModBit.REINFORCED)
itm_sarranid_helmet1.add_modifier(IModBit.LORDLY)
itm_sarranid_helmet1.set_weight(2.5)
itm_sarranid_helmet1.set_abundance(100)
itm_sarranid_helmet1.set_head_armor(35)
itm_sarranid_helmet1.set_difficulty(7)


itm_sarranid_mail_coif = Item("itm_sarranid_mail_coif", "Sarranid_Mail_Coif")
itm_sarranid_mail_coif.add_mesh(ItemMesh("tuareg_helmet2"))
itm_sarranid_mail_coif.add_flag(ItemType.HEAD_ARMOR)
itm_sarranid_mail_coif.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sarranid_mail_coif.set_price(430)
itm_sarranid_mail_coif.add_modifier(IModBit.CRACKED)
itm_sarranid_mail_coif.add_modifier(IModBit.RUSTY)
itm_sarranid_mail_coif.add_modifier(IModBit.BATTERED)
itm_sarranid_mail_coif.add_modifier(IModBit.CRUDE)
itm_sarranid_mail_coif.add_modifier(IModBit.THICK)
itm_sarranid_mail_coif.add_modifier(IModBit.REINFORCED)
itm_sarranid_mail_coif.add_modifier(IModBit.LORDLY)
itm_sarranid_mail_coif.set_weight(3.0)
itm_sarranid_mail_coif.set_abundance(100)
itm_sarranid_mail_coif.set_head_armor(41)
itm_sarranid_mail_coif.set_difficulty(7)


itm_sarranid_veiled_helmet = Item("itm_sarranid_veiled_helmet", "Sarranid_Veiled_Helmet")
itm_sarranid_veiled_helmet.add_mesh(ItemMesh("sar_helmet4"))
itm_sarranid_veiled_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_sarranid_veiled_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sarranid_veiled_helmet.add_flag(ItemFlag.COVERS_BEARD)
itm_sarranid_veiled_helmet.set_price(810)
itm_sarranid_veiled_helmet.add_modifier(IModBit.CRACKED)
itm_sarranid_veiled_helmet.add_modifier(IModBit.RUSTY)
itm_sarranid_veiled_helmet.add_modifier(IModBit.BATTERED)
itm_sarranid_veiled_helmet.add_modifier(IModBit.CRUDE)
itm_sarranid_veiled_helmet.add_modifier(IModBit.THICK)
itm_sarranid_veiled_helmet.add_modifier(IModBit.REINFORCED)
itm_sarranid_veiled_helmet.add_modifier(IModBit.LORDLY)
itm_sarranid_veiled_helmet.set_weight(3.5)
itm_sarranid_veiled_helmet.set_abundance(100)
itm_sarranid_veiled_helmet.set_head_armor(47)
itm_sarranid_veiled_helmet.set_difficulty(7)


itm_nordic_archer_helmet = Item("itm_nordic_archer_helmet", "Nordic_Leather_Helmet")
itm_nordic_archer_helmet.add_mesh(ItemMesh("Helmet_A_vs2"))
itm_nordic_archer_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_nordic_archer_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_nordic_archer_helmet.set_price(40)
itm_nordic_archer_helmet.add_modifier(IModBit.CRACKED)
itm_nordic_archer_helmet.add_modifier(IModBit.RUSTY)
itm_nordic_archer_helmet.add_modifier(IModBit.BATTERED)
itm_nordic_archer_helmet.add_modifier(IModBit.CRUDE)
itm_nordic_archer_helmet.add_modifier(IModBit.THICK)
itm_nordic_archer_helmet.add_modifier(IModBit.REINFORCED)
itm_nordic_archer_helmet.add_modifier(IModBit.LORDLY)
itm_nordic_archer_helmet.set_weight(1.25)
itm_nordic_archer_helmet.set_abundance(100)
itm_nordic_archer_helmet.set_head_armor(14)
itm_nordic_archer_helmet.set_difficulty(7)


itm_nordic_veteran_archer_helmet = Item("itm_nordic_veteran_archer_helmet", "Nordic_Leather_Helmet")
itm_nordic_veteran_archer_helmet.add_mesh(ItemMesh("Helmet_A"))
itm_nordic_veteran_archer_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_nordic_veteran_archer_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_nordic_veteran_archer_helmet.set_price(70)
itm_nordic_veteran_archer_helmet.add_modifier(IModBit.CRACKED)
itm_nordic_veteran_archer_helmet.add_modifier(IModBit.RUSTY)
itm_nordic_veteran_archer_helmet.add_modifier(IModBit.BATTERED)
itm_nordic_veteran_archer_helmet.add_modifier(IModBit.CRUDE)
itm_nordic_veteran_archer_helmet.add_modifier(IModBit.THICK)
itm_nordic_veteran_archer_helmet.add_modifier(IModBit.REINFORCED)
itm_nordic_veteran_archer_helmet.add_modifier(IModBit.LORDLY)
itm_nordic_veteran_archer_helmet.set_weight(1.5)
itm_nordic_veteran_archer_helmet.set_abundance(100)
itm_nordic_veteran_archer_helmet.set_head_armor(20)
itm_nordic_veteran_archer_helmet.set_difficulty(7)


itm_nordic_footman_helmet = Item("itm_nordic_footman_helmet", "Nordic_Footman_Helmet")
itm_nordic_footman_helmet.add_mesh(ItemMesh("Helmet_B_vs2"))
itm_nordic_footman_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_nordic_footman_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_nordic_footman_helmet.add_flag(ItemFlag.FITS_TO_HEAD)
itm_nordic_footman_helmet.add_flag(ItemFlag.OFFSET_LANCE)
itm_nordic_footman_helmet.set_price(150)
itm_nordic_footman_helmet.add_modifier(IModBit.CRACKED)
itm_nordic_footman_helmet.add_modifier(IModBit.RUSTY)
itm_nordic_footman_helmet.add_modifier(IModBit.BATTERED)
itm_nordic_footman_helmet.add_modifier(IModBit.CRUDE)
itm_nordic_footman_helmet.add_modifier(IModBit.THICK)
itm_nordic_footman_helmet.add_modifier(IModBit.REINFORCED)
itm_nordic_footman_helmet.add_modifier(IModBit.LORDLY)
itm_nordic_footman_helmet.set_weight(1.75)
itm_nordic_footman_helmet.set_abundance(100)
itm_nordic_footman_helmet.set_head_armor(30)
itm_nordic_footman_helmet.set_difficulty(7)


itm_nordic_fighter_helmet = Item("itm_nordic_fighter_helmet", "Nordic_Fighter_Helmet")
itm_nordic_fighter_helmet.add_mesh(ItemMesh("Helmet_B"))
itm_nordic_fighter_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_nordic_fighter_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_nordic_fighter_helmet.add_flag(ItemFlag.FITS_TO_HEAD)
itm_nordic_fighter_helmet.add_flag(ItemFlag.OFFSET_LANCE)
itm_nordic_fighter_helmet.set_price(240)
itm_nordic_fighter_helmet.add_modifier(IModBit.CRACKED)
itm_nordic_fighter_helmet.add_modifier(IModBit.RUSTY)
itm_nordic_fighter_helmet.add_modifier(IModBit.BATTERED)
itm_nordic_fighter_helmet.add_modifier(IModBit.CRUDE)
itm_nordic_fighter_helmet.add_modifier(IModBit.THICK)
itm_nordic_fighter_helmet.add_modifier(IModBit.REINFORCED)
itm_nordic_fighter_helmet.add_modifier(IModBit.LORDLY)
itm_nordic_fighter_helmet.set_weight(2.0)
itm_nordic_fighter_helmet.set_abundance(100)
itm_nordic_fighter_helmet.set_head_armor(34)
itm_nordic_fighter_helmet.set_difficulty(7)


itm_nordic_huscarl_helmet = Item("itm_nordic_huscarl_helmet", "Nordic_Huscarl's_Helmet")
itm_nordic_huscarl_helmet.add_mesh(ItemMesh("Helmet_C_vs2"))
itm_nordic_huscarl_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_nordic_huscarl_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_nordic_huscarl_helmet.set_price(390)
itm_nordic_huscarl_helmet.add_modifier(IModBit.CRACKED)
itm_nordic_huscarl_helmet.add_modifier(IModBit.RUSTY)
itm_nordic_huscarl_helmet.add_modifier(IModBit.BATTERED)
itm_nordic_huscarl_helmet.add_modifier(IModBit.CRUDE)
itm_nordic_huscarl_helmet.add_modifier(IModBit.THICK)
itm_nordic_huscarl_helmet.add_modifier(IModBit.REINFORCED)
itm_nordic_huscarl_helmet.add_modifier(IModBit.LORDLY)
itm_nordic_huscarl_helmet.set_weight(2.0)
itm_nordic_huscarl_helmet.set_abundance(100)
itm_nordic_huscarl_helmet.set_head_armor(40)
itm_nordic_huscarl_helmet.set_difficulty(7)


itm_nordic_warlord_helmet = Item("itm_nordic_warlord_helmet", "Nordic_Warlord_Helmet")
itm_nordic_warlord_helmet.add_mesh(ItemMesh("Helmet_C"))
itm_nordic_warlord_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_nordic_warlord_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_nordic_warlord_helmet.set_price(880)
itm_nordic_warlord_helmet.add_modifier(IModBit.CRACKED)
itm_nordic_warlord_helmet.add_modifier(IModBit.RUSTY)
itm_nordic_warlord_helmet.add_modifier(IModBit.BATTERED)
itm_nordic_warlord_helmet.add_modifier(IModBit.CRUDE)
itm_nordic_warlord_helmet.add_modifier(IModBit.THICK)
itm_nordic_warlord_helmet.add_modifier(IModBit.REINFORCED)
itm_nordic_warlord_helmet.add_modifier(IModBit.LORDLY)
itm_nordic_warlord_helmet.set_weight(2.25)
itm_nordic_warlord_helmet.set_abundance(100)
itm_nordic_warlord_helmet.set_head_armor(48)
itm_nordic_warlord_helmet.set_difficulty(7)


itm_vaegir_fur_cap = Item("itm_vaegir_fur_cap", "Cap_with_Fur")
itm_vaegir_fur_cap.add_mesh(ItemMesh("vaeg_helmet3"))
itm_vaegir_fur_cap.add_flag(ItemType.HEAD_ARMOR)
itm_vaegir_fur_cap.add_flag(ItemFlag.IS_MERCHANDISE)
itm_vaegir_fur_cap.set_price(50)
itm_vaegir_fur_cap.add_modifier(IModBit.CRACKED)
itm_vaegir_fur_cap.add_modifier(IModBit.RUSTY)
itm_vaegir_fur_cap.add_modifier(IModBit.BATTERED)
itm_vaegir_fur_cap.add_modifier(IModBit.CRUDE)
itm_vaegir_fur_cap.add_modifier(IModBit.THICK)
itm_vaegir_fur_cap.add_modifier(IModBit.REINFORCED)
itm_vaegir_fur_cap.add_modifier(IModBit.LORDLY)
itm_vaegir_fur_cap.set_weight(1.0)
itm_vaegir_fur_cap.set_abundance(100)
itm_vaegir_fur_cap.set_head_armor(15)
itm_vaegir_fur_cap.set_difficulty(7)


itm_vaegir_fur_helmet = Item("itm_vaegir_fur_helmet", "Vaegir_Helmet")
itm_vaegir_fur_helmet.add_mesh(ItemMesh("vaeg_helmet2"))
itm_vaegir_fur_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_vaegir_fur_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_vaegir_fur_helmet.set_price(110)
itm_vaegir_fur_helmet.add_modifier(IModBit.CRACKED)
itm_vaegir_fur_helmet.add_modifier(IModBit.RUSTY)
itm_vaegir_fur_helmet.add_modifier(IModBit.BATTERED)
itm_vaegir_fur_helmet.add_modifier(IModBit.CRUDE)
itm_vaegir_fur_helmet.add_modifier(IModBit.THICK)
itm_vaegir_fur_helmet.add_modifier(IModBit.REINFORCED)
itm_vaegir_fur_helmet.add_modifier(IModBit.LORDLY)
itm_vaegir_fur_helmet.set_weight(2.0)
itm_vaegir_fur_helmet.set_abundance(100)
itm_vaegir_fur_helmet.set_head_armor(21)
itm_vaegir_fur_helmet.set_difficulty(7)


itm_vaegir_spiked_helmet = Item("itm_vaegir_spiked_helmet", "Spiked_Cap")
itm_vaegir_spiked_helmet.add_mesh(ItemMesh("vaeg_helmet1"))
itm_vaegir_spiked_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_vaegir_spiked_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_vaegir_spiked_helmet.set_price(230)
itm_vaegir_spiked_helmet.add_modifier(IModBit.CRACKED)
itm_vaegir_spiked_helmet.add_modifier(IModBit.RUSTY)
itm_vaegir_spiked_helmet.add_modifier(IModBit.BATTERED)
itm_vaegir_spiked_helmet.add_modifier(IModBit.CRUDE)
itm_vaegir_spiked_helmet.add_modifier(IModBit.THICK)
itm_vaegir_spiked_helmet.add_modifier(IModBit.REINFORCED)
itm_vaegir_spiked_helmet.add_modifier(IModBit.LORDLY)
itm_vaegir_spiked_helmet.set_weight(2.5)
itm_vaegir_spiked_helmet.set_abundance(100)
itm_vaegir_spiked_helmet.set_head_armor(32)
itm_vaegir_spiked_helmet.set_difficulty(7)


itm_vaegir_lamellar_helmet = Item("itm_vaegir_lamellar_helmet", "Helmet_with_Lamellar_Guard")
itm_vaegir_lamellar_helmet.add_mesh(ItemMesh("vaeg_helmet4"))
itm_vaegir_lamellar_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_vaegir_lamellar_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_vaegir_lamellar_helmet.set_price(360)
itm_vaegir_lamellar_helmet.add_modifier(IModBit.CRACKED)
itm_vaegir_lamellar_helmet.add_modifier(IModBit.RUSTY)
itm_vaegir_lamellar_helmet.add_modifier(IModBit.BATTERED)
itm_vaegir_lamellar_helmet.add_modifier(IModBit.CRUDE)
itm_vaegir_lamellar_helmet.add_modifier(IModBit.THICK)
itm_vaegir_lamellar_helmet.add_modifier(IModBit.REINFORCED)
itm_vaegir_lamellar_helmet.add_modifier(IModBit.LORDLY)
itm_vaegir_lamellar_helmet.set_weight(2.75)
itm_vaegir_lamellar_helmet.set_abundance(100)
itm_vaegir_lamellar_helmet.set_head_armor(38)
itm_vaegir_lamellar_helmet.set_difficulty(7)


itm_vaegir_noble_helmet = Item("itm_vaegir_noble_helmet", "Vaegir_Nobleman_Helmet")
itm_vaegir_noble_helmet.add_mesh(ItemMesh("vaeg_helmet7"))
itm_vaegir_noble_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_vaegir_noble_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_vaegir_noble_helmet.set_price(710)
itm_vaegir_noble_helmet.add_modifier(IModBit.CRACKED)
itm_vaegir_noble_helmet.add_modifier(IModBit.RUSTY)
itm_vaegir_noble_helmet.add_modifier(IModBit.BATTERED)
itm_vaegir_noble_helmet.add_modifier(IModBit.CRUDE)
itm_vaegir_noble_helmet.add_modifier(IModBit.THICK)
itm_vaegir_noble_helmet.add_modifier(IModBit.REINFORCED)
itm_vaegir_noble_helmet.add_modifier(IModBit.LORDLY)
itm_vaegir_noble_helmet.set_weight(2.75)
itm_vaegir_noble_helmet.set_abundance(100)
itm_vaegir_noble_helmet.set_head_armor(45)
itm_vaegir_noble_helmet.set_difficulty(7)


itm_vaegir_war_helmet = Item("itm_vaegir_war_helmet", "Vaegir_War_Helmet")
itm_vaegir_war_helmet.add_mesh(ItemMesh("vaeg_helmet6"))
itm_vaegir_war_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_vaegir_war_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_vaegir_war_helmet.set_price(820)
itm_vaegir_war_helmet.add_modifier(IModBit.CRACKED)
itm_vaegir_war_helmet.add_modifier(IModBit.RUSTY)
itm_vaegir_war_helmet.add_modifier(IModBit.BATTERED)
itm_vaegir_war_helmet.add_modifier(IModBit.CRUDE)
itm_vaegir_war_helmet.add_modifier(IModBit.THICK)
itm_vaegir_war_helmet.add_modifier(IModBit.REINFORCED)
itm_vaegir_war_helmet.add_modifier(IModBit.LORDLY)
itm_vaegir_war_helmet.set_weight(3.0)
itm_vaegir_war_helmet.set_abundance(100)
itm_vaegir_war_helmet.set_head_armor(47)
itm_vaegir_war_helmet.set_difficulty(7)


itm_vaegir_mask = Item("itm_vaegir_mask", "Vaegir_War_Mask")
itm_vaegir_mask.add_mesh(ItemMesh("vaeg_helmet9"))
itm_vaegir_mask.add_flag(ItemType.HEAD_ARMOR)
itm_vaegir_mask.add_flag(ItemFlag.IS_MERCHANDISE)
itm_vaegir_mask.add_flag(ItemFlag.COVERS_BEARD)
itm_vaegir_mask.set_price(950)
itm_vaegir_mask.add_modifier(IModBit.CRACKED)
itm_vaegir_mask.add_modifier(IModBit.RUSTY)
itm_vaegir_mask.add_modifier(IModBit.BATTERED)
itm_vaegir_mask.add_modifier(IModBit.CRUDE)
itm_vaegir_mask.add_modifier(IModBit.THICK)
itm_vaegir_mask.add_modifier(IModBit.REINFORCED)
itm_vaegir_mask.add_modifier(IModBit.LORDLY)
itm_vaegir_mask.set_weight(3.5)
itm_vaegir_mask.set_abundance(100)
itm_vaegir_mask.set_head_armor(52)
itm_vaegir_mask.set_difficulty(7)


itm_bascinet = Item("itm_bascinet", "Bascinet")
itm_bascinet.add_mesh(ItemMesh("bascinet_avt_new"))
itm_bascinet.add_flag(ItemType.HEAD_ARMOR)
itm_bascinet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_bascinet.set_price(479)
itm_bascinet.add_modifier(IModBit.CRACKED)
itm_bascinet.add_modifier(IModBit.RUSTY)
itm_bascinet.add_modifier(IModBit.BATTERED)
itm_bascinet.add_modifier(IModBit.CRUDE)
itm_bascinet.add_modifier(IModBit.THICK)
itm_bascinet.add_modifier(IModBit.REINFORCED)
itm_bascinet.add_modifier(IModBit.LORDLY)
itm_bascinet.set_weight(2.25)
itm_bascinet.set_abundance(100)
itm_bascinet.set_head_armor(45)
itm_bascinet.set_difficulty(8)


itm_bascinet_2 = Item("itm_bascinet_2", "Bascinet_with_Aventail")
itm_bascinet_2.add_mesh(ItemMesh("bascinet_new_a"))
itm_bascinet_2.add_flag(ItemType.HEAD_ARMOR)
itm_bascinet_2.add_flag(ItemFlag.IS_MERCHANDISE)
itm_bascinet_2.set_price(479)
itm_bascinet_2.add_modifier(IModBit.CRACKED)
itm_bascinet_2.add_modifier(IModBit.RUSTY)
itm_bascinet_2.add_modifier(IModBit.BATTERED)
itm_bascinet_2.add_modifier(IModBit.CRUDE)
itm_bascinet_2.add_modifier(IModBit.THICK)
itm_bascinet_2.add_modifier(IModBit.REINFORCED)
itm_bascinet_2.add_modifier(IModBit.LORDLY)
itm_bascinet_2.set_weight(2.25)
itm_bascinet_2.set_abundance(100)
itm_bascinet_2.set_head_armor(45)
itm_bascinet_2.set_difficulty(8)


itm_bascinet_3 = Item("itm_bascinet_3", "Bascinet_with_Nose_Guard")
itm_bascinet_3.add_mesh(ItemMesh("bascinet_new_b"))
itm_bascinet_3.add_flag(ItemType.HEAD_ARMOR)
itm_bascinet_3.add_flag(ItemFlag.IS_MERCHANDISE)
itm_bascinet_3.set_price(479)
itm_bascinet_3.add_modifier(IModBit.CRACKED)
itm_bascinet_3.add_modifier(IModBit.RUSTY)
itm_bascinet_3.add_modifier(IModBit.BATTERED)
itm_bascinet_3.add_modifier(IModBit.CRUDE)
itm_bascinet_3.add_modifier(IModBit.THICK)
itm_bascinet_3.add_modifier(IModBit.REINFORCED)
itm_bascinet_3.add_modifier(IModBit.LORDLY)
itm_bascinet_3.set_weight(2.25)
itm_bascinet_3.set_abundance(100)
itm_bascinet_3.set_head_armor(45)
itm_bascinet_3.set_difficulty(8)


itm_guard_helmet = Item("itm_guard_helmet", "Guard_Helmet")
itm_guard_helmet.add_mesh(ItemMesh("reinf_helmet_new"))
itm_guard_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_guard_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_guard_helmet.set_price(555)
itm_guard_helmet.add_modifier(IModBit.CRACKED)
itm_guard_helmet.add_modifier(IModBit.RUSTY)
itm_guard_helmet.add_modifier(IModBit.BATTERED)
itm_guard_helmet.add_modifier(IModBit.CRUDE)
itm_guard_helmet.add_modifier(IModBit.THICK)
itm_guard_helmet.add_modifier(IModBit.REINFORCED)
itm_guard_helmet.add_modifier(IModBit.LORDLY)
itm_guard_helmet.set_weight(2.5)
itm_guard_helmet.set_abundance(100)
itm_guard_helmet.set_head_armor(47)
itm_guard_helmet.set_difficulty(9)


itm_black_helmet = Item("itm_black_helmet", "Black_Helmet")
itm_black_helmet.add_mesh(ItemMesh("black_helm"))
itm_black_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_black_helmet.set_price(638)
itm_black_helmet.add_modifier(IModBit.CRACKED)
itm_black_helmet.add_modifier(IModBit.RUSTY)
itm_black_helmet.add_modifier(IModBit.BATTERED)
itm_black_helmet.add_modifier(IModBit.CRUDE)
itm_black_helmet.add_modifier(IModBit.THICK)
itm_black_helmet.add_modifier(IModBit.REINFORCED)
itm_black_helmet.add_modifier(IModBit.LORDLY)
itm_black_helmet.set_weight(2.75)
itm_black_helmet.set_abundance(100)
itm_black_helmet.set_head_armor(50)
itm_black_helmet.set_difficulty(9)


itm_full_helm = Item("itm_full_helm", "Full_Helm")
itm_full_helm.add_mesh(ItemMesh("great_helmet_new_b"))
itm_full_helm.add_flag(ItemType.HEAD_ARMOR)
itm_full_helm.add_flag(ItemFlag.IS_MERCHANDISE)
itm_full_helm.add_flag(ItemFlag.COVERS_HEAD)
itm_full_helm.add_flag(ItemFlag.IS_COUCHABLE)
itm_full_helm.set_price(811)
itm_full_helm.add_modifier(IModBit.CRACKED)
itm_full_helm.add_modifier(IModBit.RUSTY)
itm_full_helm.add_modifier(IModBit.BATTERED)
itm_full_helm.add_modifier(IModBit.CRUDE)
itm_full_helm.add_modifier(IModBit.THICK)
itm_full_helm.add_modifier(IModBit.REINFORCED)
itm_full_helm.add_modifier(IModBit.LORDLY)
itm_full_helm.set_weight(2.5)
itm_full_helm.set_abundance(100)
itm_full_helm.set_head_armor(51)
itm_full_helm.set_difficulty(10)


itm_great_helmet = Item("itm_great_helmet", "Great_Helmet")
itm_great_helmet.add_mesh(ItemMesh("great_helmet_new"))
itm_great_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_great_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_great_helmet.add_flag(ItemFlag.COVERS_HEAD)
itm_great_helmet.add_flag(ItemFlag.IS_COUCHABLE)
itm_great_helmet.set_price(980)
itm_great_helmet.add_modifier(IModBit.CRACKED)
itm_great_helmet.add_modifier(IModBit.RUSTY)
itm_great_helmet.add_modifier(IModBit.BATTERED)
itm_great_helmet.add_modifier(IModBit.CRUDE)
itm_great_helmet.add_modifier(IModBit.THICK)
itm_great_helmet.add_modifier(IModBit.REINFORCED)
itm_great_helmet.add_modifier(IModBit.LORDLY)
itm_great_helmet.set_weight(2.75)
itm_great_helmet.set_abundance(100)
itm_great_helmet.set_head_armor(53)
itm_great_helmet.set_difficulty(10)


itm_winged_great_helmet = Item("itm_winged_great_helmet", "Winged_Great_Helmet")
itm_winged_great_helmet.add_mesh(ItemMesh("maciejowski_helmet_new"))
itm_winged_great_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_winged_great_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_winged_great_helmet.add_flag(ItemFlag.COVERS_HEAD)
itm_winged_great_helmet.add_flag(ItemFlag.IS_COUCHABLE)
itm_winged_great_helmet.set_price(1240)
itm_winged_great_helmet.add_modifier(IModBit.CRACKED)
itm_winged_great_helmet.add_modifier(IModBit.RUSTY)
itm_winged_great_helmet.add_modifier(IModBit.BATTERED)
itm_winged_great_helmet.add_modifier(IModBit.CRUDE)
itm_winged_great_helmet.add_modifier(IModBit.THICK)
itm_winged_great_helmet.add_modifier(IModBit.REINFORCED)
itm_winged_great_helmet.add_modifier(IModBit.LORDLY)
itm_winged_great_helmet.set_weight(2.75)
itm_winged_great_helmet.set_abundance(100)
itm_winged_great_helmet.set_head_armor(55)
itm_winged_great_helmet.set_difficulty(10)


itm_wooden_stick = Item("itm_wooden_stick", "Wooden_Stick")
itm_wooden_stick.add_mesh(ItemMesh("wooden_stick"))
itm_wooden_stick.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_wooden_stick.add_flag(ItemFlag.IS_MERCHANDISE)
itm_wooden_stick.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
itm_wooden_stick.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_wooden_stick.add_flag(ItemFlag.IS_PRIMARY)
itm_wooden_stick.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_wooden_stick.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_wooden_stick.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_wooden_stick.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_wooden_stick.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_wooden_stick.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_wooden_stick.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_wooden_stick.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_wooden_stick.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_wooden_stick.add_capability(ItemCapability.FORCE_64_BITS)
itm_wooden_stick.set_price(4)
itm_wooden_stick.set_weight(2.5)
itm_wooden_stick.set_abundance(100)
itm_wooden_stick.set_hit_points(13312)
itm_wooden_stick.set_speed_rating(99)
itm_wooden_stick.set_weapon_length(63)
itm_wooden_stick.set_thrust_damage(0, 1)
itm_wooden_stick.set_swing_damage(13, 2)


itm_cudgel = Item("itm_cudgel", "Cudgel")
itm_cudgel.add_mesh(ItemMesh("club"))
itm_cudgel.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_cudgel.add_flag(ItemFlag.IS_MERCHANDISE)
itm_cudgel.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
itm_cudgel.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_cudgel.add_flag(ItemFlag.IS_PRIMARY)
itm_cudgel.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_cudgel.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_cudgel.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_cudgel.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_cudgel.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_cudgel.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_cudgel.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_cudgel.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_cudgel.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_cudgel.add_capability(ItemCapability.FORCE_64_BITS)
itm_cudgel.set_price(4)
itm_cudgel.set_weight(2.5)
itm_cudgel.set_abundance(100)
itm_cudgel.set_hit_points(13312)
itm_cudgel.set_speed_rating(99)
itm_cudgel.set_weapon_length(70)
itm_cudgel.set_thrust_damage(0, 1)
itm_cudgel.set_swing_damage(13, 2)


itm_hammer = Item("itm_hammer", "Hammer")
itm_hammer.add_mesh(ItemMesh("iron_hammer_new"))
itm_hammer.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_hammer.add_flag(ItemFlag.IS_MERCHANDISE)
itm_hammer.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_hammer.add_flag(ItemFlag.IS_PRIMARY)
itm_hammer.add_flag(ItemFlag.CAN_KNOCK_DOWN)
itm_hammer.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_hammer.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_hammer.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_hammer.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_hammer.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_hammer.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_hammer.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_hammer.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_hammer.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_hammer.add_capability(ItemCapability.FORCE_64_BITS)
itm_hammer.set_price(7)
itm_hammer.add_modifier(IModBit.RUSTY)
itm_hammer.add_modifier(IModBit.CHIPPED)
itm_hammer.add_modifier(IModBit.HEAVY)
itm_hammer.set_weight(2.0)
itm_hammer.set_abundance(100)
itm_hammer.set_hit_points(24576)
itm_hammer.set_speed_rating(100)
itm_hammer.set_weapon_length(55)
itm_hammer.set_thrust_damage(0, 1)
itm_hammer.set_swing_damage(24, 2)


itm_club = Item("itm_club", "Club")
itm_club.add_mesh(ItemMesh("club"))
itm_club.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_club.add_flag(ItemFlag.IS_MERCHANDISE)
itm_club.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
itm_club.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_club.add_flag(ItemFlag.IS_PRIMARY)
itm_club.add_flag(ItemFlag.CAN_KNOCK_DOWN)
itm_club.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_club.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_club.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_club.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_club.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_club.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_club.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_club.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_club.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_club.add_capability(ItemCapability.FORCE_64_BITS)
itm_club.set_price(11)
itm_club.set_weight(2.5)
itm_club.set_abundance(100)
itm_club.set_hit_points(20480)
itm_club.set_speed_rating(98)
itm_club.set_weapon_length(70)
itm_club.set_thrust_damage(0, 1)
itm_club.set_swing_damage(20, 2)


itm_winged_mace = Item("itm_winged_mace", "Flanged_Mace")
itm_winged_mace.add_mesh(ItemMesh("flanged_mace"))
itm_winged_mace.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_winged_mace.add_flag(ItemFlag.IS_MERCHANDISE)
itm_winged_mace.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_winged_mace.add_flag(ItemFlag.IS_PRIMARY)
itm_winged_mace.add_flag(ItemFlag.CAN_KNOCK_DOWN)
itm_winged_mace.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_winged_mace.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_winged_mace.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_winged_mace.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_winged_mace.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_winged_mace.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
itm_winged_mace.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_winged_mace.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_winged_mace.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_winged_mace.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_winged_mace.add_capability(ItemCapability.FORCE_64_BITS)
itm_winged_mace.set_price(122)
itm_winged_mace.add_modifier(IModBit.RUSTY)
itm_winged_mace.add_modifier(IModBit.CHIPPED)
itm_winged_mace.add_modifier(IModBit.HEAVY)
itm_winged_mace.set_weight(3.5)
itm_winged_mace.set_abundance(100)
itm_winged_mace.set_hit_points(24576)
itm_winged_mace.set_speed_rating(103)
itm_winged_mace.set_weapon_length(70)
itm_winged_mace.set_thrust_damage(0, 1)
itm_winged_mace.set_swing_damage(24, 2)


itm_spiked_mace = Item("itm_spiked_mace", "Spiked_Mace")
itm_spiked_mace.add_mesh(ItemMesh("spiked_mace_new"))
itm_spiked_mace.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_spiked_mace.add_flag(ItemFlag.IS_MERCHANDISE)
itm_spiked_mace.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_spiked_mace.add_flag(ItemFlag.IS_PRIMARY)
itm_spiked_mace.add_flag(ItemFlag.CAN_KNOCK_DOWN)
itm_spiked_mace.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_spiked_mace.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_spiked_mace.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_spiked_mace.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_spiked_mace.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_spiked_mace.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
itm_spiked_mace.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_spiked_mace.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_spiked_mace.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_spiked_mace.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_spiked_mace.add_capability(ItemCapability.FORCE_64_BITS)
itm_spiked_mace.set_price(180)
itm_spiked_mace.add_modifier(IModBit.RUSTY)
itm_spiked_mace.add_modifier(IModBit.CHIPPED)
itm_spiked_mace.add_modifier(IModBit.BALANCED)
itm_spiked_mace.add_modifier(IModBit.HEAVY)
itm_spiked_mace.set_weight(3.5)
itm_spiked_mace.set_abundance(100)
itm_spiked_mace.set_hit_points(28672)
itm_spiked_mace.set_speed_rating(98)
itm_spiked_mace.set_weapon_length(70)
itm_spiked_mace.set_thrust_damage(0, 1)
itm_spiked_mace.set_swing_damage(28, 2)


itm_military_hammer = Item("itm_military_hammer", "Military_Hammer")
itm_military_hammer.add_mesh(ItemMesh("military_hammer"))
itm_military_hammer.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_military_hammer.add_flag(ItemFlag.IS_MERCHANDISE)
itm_military_hammer.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_military_hammer.add_flag(ItemFlag.IS_PRIMARY)
itm_military_hammer.add_flag(ItemFlag.CAN_KNOCK_DOWN)
itm_military_hammer.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_military_hammer.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_military_hammer.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_military_hammer.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_military_hammer.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_military_hammer.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
itm_military_hammer.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_military_hammer.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_military_hammer.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_military_hammer.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_military_hammer.add_capability(ItemCapability.FORCE_64_BITS)
itm_military_hammer.set_price(317)
itm_military_hammer.add_modifier(IModBit.RUSTY)
itm_military_hammer.add_modifier(IModBit.CHIPPED)
itm_military_hammer.add_modifier(IModBit.HEAVY)
itm_military_hammer.set_weight(2.0)
itm_military_hammer.set_abundance(100)
itm_military_hammer.set_hit_points(31744)
itm_military_hammer.set_speed_rating(95)
itm_military_hammer.set_weapon_length(70)
itm_military_hammer.set_thrust_damage(0, 1)
itm_military_hammer.set_swing_damage(31, 2)


itm_maul = Item("itm_maul", "Maul")
itm_maul.add_mesh(ItemMesh("maul_b"))
itm_maul.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_maul.add_flag(ItemFlag.IS_MERCHANDISE)
itm_maul.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
itm_maul.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_maul.add_flag(ItemFlag.IS_TWO_HANDED)
itm_maul.add_flag(ItemFlag.IS_PRIMARY)
itm_maul.add_flag(ItemFlag.HAS_CRUSH_THROUGH)
itm_maul.add_flag(ItemFlag.IS_UNBALANCED)
itm_maul.add_flag(ItemFlag.CAN_KNOCK_DOWN)
itm_maul.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_maul.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_maul.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_maul.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_maul.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_maul.add_capability(ItemCapability.CARRY_SPEAR)
itm_maul.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_maul.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_maul.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_maul.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_maul.add_capability(ItemCapability.FORCE_64_BITS)
itm_maul.set_price(97)
itm_maul.add_modifier(IModBit.RUSTY)
itm_maul.add_modifier(IModBit.CHIPPED)
itm_maul.add_modifier(IModBit.HEAVY)
itm_maul.set_weight(6.0)
itm_maul.set_abundance(100)
itm_maul.set_difficulty(11)
itm_maul.set_hit_points(36864)
itm_maul.set_speed_rating(83)
itm_maul.set_weapon_length(79)
itm_maul.set_thrust_damage(0, 1)
itm_maul.set_swing_damage(36, 2)


itm_sledgehammer = Item("itm_sledgehammer", "Sledgehammer")
itm_sledgehammer.add_mesh(ItemMesh("maul_c"))
itm_sledgehammer.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_sledgehammer.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sledgehammer.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
itm_sledgehammer.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_sledgehammer.add_flag(ItemFlag.IS_TWO_HANDED)
itm_sledgehammer.add_flag(ItemFlag.IS_PRIMARY)
itm_sledgehammer.add_flag(ItemFlag.HAS_CRUSH_THROUGH)
itm_sledgehammer.add_flag(ItemFlag.IS_UNBALANCED)
itm_sledgehammer.add_flag(ItemFlag.CAN_KNOCK_DOWN)
itm_sledgehammer.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_sledgehammer.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_sledgehammer.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_sledgehammer.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sledgehammer.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sledgehammer.add_capability(ItemCapability.CARRY_SPEAR)
itm_sledgehammer.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_sledgehammer.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_sledgehammer.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_sledgehammer.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_sledgehammer.add_capability(ItemCapability.FORCE_64_BITS)
itm_sledgehammer.set_price(101)
itm_sledgehammer.add_modifier(IModBit.RUSTY)
itm_sledgehammer.add_modifier(IModBit.CHIPPED)
itm_sledgehammer.add_modifier(IModBit.HEAVY)
itm_sledgehammer.set_weight(7.0)
itm_sledgehammer.set_abundance(100)
itm_sledgehammer.set_difficulty(12)
itm_sledgehammer.set_hit_points(39936)
itm_sledgehammer.set_speed_rating(81)
itm_sledgehammer.set_weapon_length(82)
itm_sledgehammer.set_thrust_damage(0, 1)
itm_sledgehammer.set_swing_damage(39, 2)


itm_warhammer = Item("itm_warhammer", "Great_Hammer")
itm_warhammer.add_mesh(ItemMesh("maul_d"))
itm_warhammer.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_warhammer.add_flag(ItemFlag.IS_MERCHANDISE)
itm_warhammer.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
itm_warhammer.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_warhammer.add_flag(ItemFlag.IS_TWO_HANDED)
itm_warhammer.add_flag(ItemFlag.IS_PRIMARY)
itm_warhammer.add_flag(ItemFlag.HAS_CRUSH_THROUGH)
itm_warhammer.add_flag(ItemFlag.IS_UNBALANCED)
itm_warhammer.add_flag(ItemFlag.CAN_KNOCK_DOWN)
itm_warhammer.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_warhammer.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_warhammer.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_warhammer.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_warhammer.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_warhammer.add_capability(ItemCapability.CARRY_SPEAR)
itm_warhammer.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_warhammer.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_warhammer.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_warhammer.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_warhammer.add_capability(ItemCapability.FORCE_64_BITS)
itm_warhammer.set_price(290)
itm_warhammer.add_modifier(IModBit.RUSTY)
itm_warhammer.add_modifier(IModBit.CHIPPED)
itm_warhammer.add_modifier(IModBit.HEAVY)
itm_warhammer.set_weight(9.0)
itm_warhammer.set_abundance(100)
itm_warhammer.set_difficulty(14)
itm_warhammer.set_hit_points(46080)
itm_warhammer.set_speed_rating(79)
itm_warhammer.set_weapon_length(75)
itm_warhammer.set_thrust_damage(0, 1)
itm_warhammer.set_swing_damage(45, 2)


itm_pickaxe = Item("itm_pickaxe", "Pickaxe")
itm_pickaxe.add_mesh(ItemMesh("fighting_pick_new"))
itm_pickaxe.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_pickaxe.add_flag(ItemFlag.IS_MERCHANDISE)
itm_pickaxe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_pickaxe.add_flag(ItemFlag.IS_PRIMARY)
itm_pickaxe.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_pickaxe.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_pickaxe.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_pickaxe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_pickaxe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_pickaxe.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
itm_pickaxe.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_pickaxe.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_pickaxe.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_pickaxe.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_pickaxe.add_capability(ItemCapability.FORCE_64_BITS)
itm_pickaxe.set_price(27)
itm_pickaxe.add_modifier(IModBit.RUSTY)
itm_pickaxe.add_modifier(IModBit.CHIPPED)
itm_pickaxe.add_modifier(IModBit.BALANCED)
itm_pickaxe.add_modifier(IModBit.HEAVY)
itm_pickaxe.set_weight(3.0)
itm_pickaxe.set_abundance(100)
itm_pickaxe.set_hit_points(19456)
itm_pickaxe.set_speed_rating(99)
itm_pickaxe.set_weapon_length(70)
itm_pickaxe.set_thrust_damage(0, 1)
itm_pickaxe.set_swing_damage(19, 1)


itm_spiked_club = Item("itm_spiked_club", "Spiked_Club")
itm_spiked_club.add_mesh(ItemMesh("spiked_club"))
itm_spiked_club.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_spiked_club.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_spiked_club.add_flag(ItemFlag.IS_PRIMARY)
itm_spiked_club.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_spiked_club.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_spiked_club.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_spiked_club.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_spiked_club.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_spiked_club.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
itm_spiked_club.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_spiked_club.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_spiked_club.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_spiked_club.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_spiked_club.add_capability(ItemCapability.FORCE_64_BITS)
itm_spiked_club.set_price(83)
itm_spiked_club.add_modifier(IModBit.RUSTY)
itm_spiked_club.add_modifier(IModBit.CHIPPED)
itm_spiked_club.add_modifier(IModBit.HEAVY)
itm_spiked_club.set_weight(3.0)
itm_spiked_club.set_abundance(100)
itm_spiked_club.set_hit_points(21504)
itm_spiked_club.set_speed_rating(97)
itm_spiked_club.set_weapon_length(70)
itm_spiked_club.set_thrust_damage(0, 1)
itm_spiked_club.set_swing_damage(21, 1)


itm_fighting_pick = Item("itm_fighting_pick", "Fighting_Pick")
itm_fighting_pick.add_mesh(ItemMesh("fighting_pick_new"))
itm_fighting_pick.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_fighting_pick.add_flag(ItemFlag.IS_MERCHANDISE)
itm_fighting_pick.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_fighting_pick.add_flag(ItemFlag.IS_PRIMARY)
itm_fighting_pick.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_fighting_pick.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_fighting_pick.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_fighting_pick.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_fighting_pick.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_fighting_pick.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
itm_fighting_pick.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_fighting_pick.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_fighting_pick.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_fighting_pick.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_fighting_pick.add_capability(ItemCapability.FORCE_64_BITS)
itm_fighting_pick.set_price(108)
itm_fighting_pick.add_modifier(IModBit.RUSTY)
itm_fighting_pick.add_modifier(IModBit.CHIPPED)
itm_fighting_pick.add_modifier(IModBit.BALANCED)
itm_fighting_pick.add_modifier(IModBit.HEAVY)
itm_fighting_pick.set_weight(1.0)
itm_fighting_pick.set_abundance(100)
itm_fighting_pick.set_hit_points(22528)
itm_fighting_pick.set_speed_rating(98)
itm_fighting_pick.set_weapon_length(70)
itm_fighting_pick.set_thrust_damage(0, 1)
itm_fighting_pick.set_swing_damage(22, 1)


itm_military_pick = Item("itm_military_pick", "Military_Pick")
itm_military_pick.add_mesh(ItemMesh("steel_pick_new"))
itm_military_pick.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_military_pick.add_flag(ItemFlag.IS_MERCHANDISE)
itm_military_pick.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_military_pick.add_flag(ItemFlag.IS_PRIMARY)
itm_military_pick.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_military_pick.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_military_pick.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_military_pick.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_military_pick.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_military_pick.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
itm_military_pick.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_military_pick.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_military_pick.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_military_pick.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_military_pick.add_capability(ItemCapability.FORCE_64_BITS)
itm_military_pick.set_price(280)
itm_military_pick.add_modifier(IModBit.RUSTY)
itm_military_pick.add_modifier(IModBit.CHIPPED)
itm_military_pick.add_modifier(IModBit.BALANCED)
itm_military_pick.add_modifier(IModBit.HEAVY)
itm_military_pick.set_weight(1.5)
itm_military_pick.set_abundance(100)
itm_military_pick.set_hit_points(31744)
itm_military_pick.set_speed_rating(97)
itm_military_pick.set_weapon_length(70)
itm_military_pick.set_thrust_damage(0, 1)
itm_military_pick.set_swing_damage(31, 1)


itm_morningstar = Item("itm_morningstar", "Morningstar")
itm_morningstar.add_mesh(ItemMesh("mace_morningstar_new"))
itm_morningstar.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_morningstar.add_flag(ItemFlag.IS_MERCHANDISE)
itm_morningstar.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_morningstar.add_flag(ItemFlag.IS_PRIMARY)
itm_morningstar.add_flag(ItemFlag.HAS_CRUSH_THROUGH)
itm_morningstar.add_flag(ItemFlag.IS_UNBALANCED)
itm_morningstar.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_morningstar.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_morningstar.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_morningstar.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_morningstar.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_morningstar.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_morningstar.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_morningstar.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_morningstar.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
itm_morningstar.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_morningstar.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_morningstar.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_morningstar.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_morningstar.add_capability(ItemCapability.FORCE_64_BITS)
itm_morningstar.set_price(305)
itm_morningstar.add_modifier(IModBit.RUSTY)
itm_morningstar.add_modifier(IModBit.CHIPPED)
itm_morningstar.add_modifier(IModBit.HEAVY)
itm_morningstar.set_weight(4.5)
itm_morningstar.set_abundance(100)
itm_morningstar.set_difficulty(13)
itm_morningstar.set_hit_points(38912)
itm_morningstar.set_speed_rating(95)
itm_morningstar.set_weapon_length(85)
itm_morningstar.set_thrust_damage(0, 1)
itm_morningstar.set_swing_damage(38, 1)


itm_sickle = Item("itm_sickle", "Sickle")
itm_sickle.add_mesh(ItemMesh("sickle"))
itm_sickle.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_sickle.add_flag(ItemFlag.NO_PARRY)
itm_sickle.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sickle.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_sickle.add_flag(ItemFlag.IS_PRIMARY)
itm_sickle.add_flag(ItemFlag.IS_SECONDARY)
itm_sickle.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_sickle.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_sickle.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_sickle.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sickle.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sickle.add_capability(ItemCapability.FORCE_64_BITS)
itm_sickle.set_price(9)
itm_sickle.set_weight(1.5)
itm_sickle.set_abundance(100)
itm_sickle.set_hit_points(20480)
itm_sickle.set_speed_rating(99)
itm_sickle.set_weapon_length(40)
itm_sickle.set_thrust_damage(0, 1)
itm_sickle.set_swing_damage(20, 0)


itm_cleaver = Item("itm_cleaver", "Cleaver")
itm_cleaver.add_mesh(ItemMesh("cleaver_new"))
itm_cleaver.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_cleaver.add_flag(ItemFlag.NO_PARRY)
itm_cleaver.add_flag(ItemFlag.IS_MERCHANDISE)
itm_cleaver.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_cleaver.add_flag(ItemFlag.IS_PRIMARY)
itm_cleaver.add_flag(ItemFlag.IS_SECONDARY)
itm_cleaver.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_cleaver.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_cleaver.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_cleaver.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_cleaver.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_cleaver.add_capability(ItemCapability.FORCE_64_BITS)
itm_cleaver.set_price(14)
itm_cleaver.set_weight(1.5)
itm_cleaver.set_abundance(100)
itm_cleaver.set_hit_points(24576)
itm_cleaver.set_speed_rating(103)
itm_cleaver.set_weapon_length(35)
itm_cleaver.set_thrust_damage(0, 1)
itm_cleaver.set_swing_damage(24, 0)


itm_knife = Item("itm_knife", "Knife")
itm_knife.add_mesh(ItemMesh("peasant_knife_new"))
itm_knife.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_knife.add_flag(ItemFlag.NO_PARRY)
itm_knife.add_flag(ItemFlag.IS_MERCHANDISE)
itm_knife.add_flag(ItemFlag.IS_PRIMARY)
itm_knife.add_flag(ItemFlag.IS_SECONDARY)
itm_knife.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_knife.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_knife.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_knife.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_knife.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_knife.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_knife.add_capability(ItemCapability.CARRY_DAGGER_FRONT_LEFT)
itm_knife.add_capability(ItemCapability.FORCE_64_BITS)
itm_knife.set_price(18)
itm_knife.add_modifier(IModBit.RUSTY)
itm_knife.add_modifier(IModBit.CHIPPED)
itm_knife.add_modifier(IModBit.BALANCED)
itm_knife.add_modifier(IModBit.TEMPERED)
itm_knife.set_weight(0.5)
itm_knife.set_abundance(100)
itm_knife.set_hit_points(21504)
itm_knife.set_speed_rating(110)
itm_knife.set_weapon_length(40)
itm_knife.set_thrust_damage(13, 1)
itm_knife.set_swing_damage(21, 0)


itm_butchering_knife = Item("itm_butchering_knife", "Butchering_Knife")
itm_butchering_knife.add_mesh(ItemMesh("khyber_knife_new"))
itm_butchering_knife.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_butchering_knife.add_flag(ItemFlag.NO_PARRY)
itm_butchering_knife.add_flag(ItemFlag.IS_MERCHANDISE)
itm_butchering_knife.add_flag(ItemFlag.IS_PRIMARY)
itm_butchering_knife.add_flag(ItemFlag.IS_SECONDARY)
itm_butchering_knife.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_butchering_knife.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_butchering_knife.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_butchering_knife.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_butchering_knife.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_butchering_knife.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_butchering_knife.add_capability(ItemCapability.CARRY_DAGGER_FRONT_RIGHT)
itm_butchering_knife.add_capability(ItemCapability.FORCE_64_BITS)
itm_butchering_knife.set_price(23)
itm_butchering_knife.add_modifier(IModBit.RUSTY)
itm_butchering_knife.add_modifier(IModBit.CHIPPED)
itm_butchering_knife.add_modifier(IModBit.BALANCED)
itm_butchering_knife.add_modifier(IModBit.TEMPERED)
itm_butchering_knife.set_weight(0.75)
itm_butchering_knife.set_abundance(100)
itm_butchering_knife.set_hit_points(24576)
itm_butchering_knife.set_speed_rating(108)
itm_butchering_knife.set_weapon_length(60)
itm_butchering_knife.set_thrust_damage(17, 1)
itm_butchering_knife.set_swing_damage(24, 0)


itm_dagger = Item("itm_dagger", "Dagger")
itm_dagger.add_mesh(ItemMesh("dagger_b"))
itm_dagger.add_mesh(ItemMesh("dagger_b_scabbard", ItemMesh.ixmesh_carry))
meshx = ItemMesh("dagger_b")
meshx.add_modifier(IModBit.STURDY)
meshx.add_modifier(IModBit.THICK)
meshx.add_modifier(IModBit.HARDENED)
meshx.add_modifier(IModBit.REINFORCED)
itm_dagger.add_mesh(meshx)
meshx = ItemMesh("dagger_b_scabbard", ItemMesh.ixmesh_carry)
meshx.add_modifier(IModBit.STURDY)
meshx.add_modifier(IModBit.THICK)
meshx.add_modifier(IModBit.HARDENED)
meshx.add_modifier(IModBit.REINFORCED)
itm_dagger.add_mesh(meshx)
itm_dagger.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_dagger.add_flag(ItemFlag.NO_PARRY)
itm_dagger.add_flag(ItemFlag.IS_MERCHANDISE)
itm_dagger.add_flag(ItemFlag.IS_PRIMARY)
itm_dagger.add_flag(ItemFlag.IS_SECONDARY)
itm_dagger.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_dagger.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_dagger.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_dagger.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_dagger.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_dagger.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_dagger.add_capability(ItemCapability.CARRY_DAGGER_FRONT_LEFT)
itm_dagger.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_dagger.add_capability(ItemCapability.FORCE_64_BITS)
itm_dagger.set_price(37)
itm_dagger.add_modifier(IModBit.RUSTY)
itm_dagger.add_modifier(IModBit.CHIPPED)
itm_dagger.add_modifier(IModBit.BALANCED)
itm_dagger.add_modifier(IModBit.TEMPERED)
itm_dagger.add_modifier(IModBit.MASTERWORK)
itm_dagger.set_weight(0.75)
itm_dagger.set_abundance(100)
itm_dagger.set_hit_points(22528)
itm_dagger.set_speed_rating(109)
itm_dagger.set_weapon_length(47)
itm_dagger.set_thrust_damage(19, 1)
itm_dagger.set_swing_damage(22, 0)


itm_falchion = Item("itm_falchion", "Falchion")
itm_falchion.add_mesh(ItemMesh("falchion_new"))
itm_falchion.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_falchion.add_flag(ItemFlag.IS_MERCHANDISE)
itm_falchion.add_flag(ItemFlag.IS_PRIMARY)
itm_falchion.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_falchion.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_falchion.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_falchion.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_falchion.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_falchion.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_falchion.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_falchion.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_falchion.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_falchion.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_falchion.add_capability(ItemCapability.FORCE_64_BITS)
itm_falchion.set_price(105)
itm_falchion.add_modifier(IModBit.RUSTY)
itm_falchion.add_modifier(IModBit.CHIPPED)
itm_falchion.add_modifier(IModBit.BALANCED)
itm_falchion.add_modifier(IModBit.TEMPERED)
itm_falchion.set_weight(2.5)
itm_falchion.set_abundance(100)
itm_falchion.set_difficulty(8)
itm_falchion.set_hit_points(30720)
itm_falchion.set_speed_rating(98)
itm_falchion.set_weapon_length(73)
itm_falchion.set_thrust_damage(0, 1)
itm_falchion.set_swing_damage(30, 0)


itm_scimitar = Item("itm_scimitar", "Scimitar")
itm_scimitar.add_mesh(ItemMesh("scimitar_a"))
itm_scimitar.add_mesh(ItemMesh("scab_scimeter_a", ItemMesh.ixmesh_carry))
itm_scimitar.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_scimitar.add_flag(ItemFlag.IS_MERCHANDISE)
itm_scimitar.add_flag(ItemFlag.IS_PRIMARY)
itm_scimitar.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_scimitar.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_scimitar.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_scimitar.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_scimitar.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_scimitar.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_scimitar.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_scimitar.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_scimitar.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_scimitar.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_scimitar.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_scimitar.add_capability(ItemCapability.FORCE_64_BITS)
itm_scimitar.set_price(210)
itm_scimitar.add_modifier(IModBit.RUSTY)
itm_scimitar.add_modifier(IModBit.CHIPPED)
itm_scimitar.add_modifier(IModBit.BALANCED)
itm_scimitar.add_modifier(IModBit.TEMPERED)
itm_scimitar.add_modifier(IModBit.MASTERWORK)
itm_scimitar.set_weight(1.5)
itm_scimitar.set_abundance(100)
itm_scimitar.set_hit_points(30720)
itm_scimitar.set_speed_rating(101)
itm_scimitar.set_weapon_length(97)
itm_scimitar.set_thrust_damage(0, 1)
itm_scimitar.set_swing_damage(30, 0)


itm_scimitar_b = Item("itm_scimitar_b", "Elite_Scimitar")
itm_scimitar_b.add_mesh(ItemMesh("scimitar_b"))
itm_scimitar_b.add_mesh(ItemMesh("scab_scimeter_b", ItemMesh.ixmesh_carry))
itm_scimitar_b.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_scimitar_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_scimitar_b.add_flag(ItemFlag.IS_PRIMARY)
itm_scimitar_b.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_scimitar_b.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_scimitar_b.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_scimitar_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_scimitar_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_scimitar_b.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_scimitar_b.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_scimitar_b.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_scimitar_b.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_scimitar_b.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_scimitar_b.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_scimitar_b.add_capability(ItemCapability.FORCE_64_BITS)
itm_scimitar_b.set_price(290)
itm_scimitar_b.add_modifier(IModBit.RUSTY)
itm_scimitar_b.add_modifier(IModBit.CHIPPED)
itm_scimitar_b.add_modifier(IModBit.BALANCED)
itm_scimitar_b.add_modifier(IModBit.TEMPERED)
itm_scimitar_b.add_modifier(IModBit.MASTERWORK)
itm_scimitar_b.set_weight(1.5)
itm_scimitar_b.set_abundance(100)
itm_scimitar_b.set_hit_points(32768)
itm_scimitar_b.set_speed_rating(100)
itm_scimitar_b.set_weapon_length(103)
itm_scimitar_b.set_thrust_damage(0, 1)
itm_scimitar_b.set_swing_damage(32, 0)


itm_arabian_sword_a = Item("itm_arabian_sword_a", "Sarranid_Sword")
itm_arabian_sword_a.add_mesh(ItemMesh("arabian_sword_a"))
itm_arabian_sword_a.add_mesh(ItemMesh("scab_arabian_sword_a", ItemMesh.ixmesh_carry))
itm_arabian_sword_a.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_arabian_sword_a.add_flag(ItemFlag.IS_MERCHANDISE)
itm_arabian_sword_a.add_flag(ItemFlag.IS_PRIMARY)
itm_arabian_sword_a.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_arabian_sword_a.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_arabian_sword_a.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_arabian_sword_a.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_arabian_sword_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_arabian_sword_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_arabian_sword_a.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_arabian_sword_a.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_arabian_sword_a.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_arabian_sword_a.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_arabian_sword_a.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_arabian_sword_a.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_arabian_sword_a.add_capability(ItemCapability.FORCE_64_BITS)
itm_arabian_sword_a.set_price(108)
itm_arabian_sword_a.add_modifier(IModBit.RUSTY)
itm_arabian_sword_a.add_modifier(IModBit.CHIPPED)
itm_arabian_sword_a.add_modifier(IModBit.BALANCED)
itm_arabian_sword_a.add_modifier(IModBit.TEMPERED)
itm_arabian_sword_a.add_modifier(IModBit.MASTERWORK)
itm_arabian_sword_a.set_weight(1.5)
itm_arabian_sword_a.set_abundance(100)
itm_arabian_sword_a.set_hit_points(26624)
itm_arabian_sword_a.set_speed_rating(99)
itm_arabian_sword_a.set_weapon_length(97)
itm_arabian_sword_a.set_thrust_damage(19, 1)
itm_arabian_sword_a.set_swing_damage(26, 0)


itm_arabian_sword_b = Item("itm_arabian_sword_b", "Sarranid_Arming_Sword")
itm_arabian_sword_b.add_mesh(ItemMesh("arabian_sword_b"))
itm_arabian_sword_b.add_mesh(ItemMesh("scab_arabian_sword_b", ItemMesh.ixmesh_carry))
itm_arabian_sword_b.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_arabian_sword_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_arabian_sword_b.add_flag(ItemFlag.IS_PRIMARY)
itm_arabian_sword_b.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_arabian_sword_b.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_arabian_sword_b.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_arabian_sword_b.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_arabian_sword_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_arabian_sword_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_arabian_sword_b.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_arabian_sword_b.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_arabian_sword_b.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_arabian_sword_b.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_arabian_sword_b.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_arabian_sword_b.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_arabian_sword_b.add_capability(ItemCapability.FORCE_64_BITS)
itm_arabian_sword_b.set_price(218)
itm_arabian_sword_b.add_modifier(IModBit.RUSTY)
itm_arabian_sword_b.add_modifier(IModBit.CHIPPED)
itm_arabian_sword_b.add_modifier(IModBit.BALANCED)
itm_arabian_sword_b.add_modifier(IModBit.TEMPERED)
itm_arabian_sword_b.add_modifier(IModBit.MASTERWORK)
itm_arabian_sword_b.set_weight(1.5)
itm_arabian_sword_b.set_abundance(100)
itm_arabian_sword_b.set_hit_points(28672)
itm_arabian_sword_b.set_speed_rating(99)
itm_arabian_sword_b.set_weapon_length(97)
itm_arabian_sword_b.set_thrust_damage(19, 1)
itm_arabian_sword_b.set_swing_damage(28, 0)


itm_sarranid_cavalry_sword = Item("itm_sarranid_cavalry_sword", "Sarranid_Cavalry_Sword")
itm_sarranid_cavalry_sword.add_mesh(ItemMesh("arabian_sword_c"))
itm_sarranid_cavalry_sword.add_mesh(ItemMesh("scab_arabian_sword_c", ItemMesh.ixmesh_carry))
itm_sarranid_cavalry_sword.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_sarranid_cavalry_sword.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sarranid_cavalry_sword.add_flag(ItemFlag.IS_PRIMARY)
itm_sarranid_cavalry_sword.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_sarranid_cavalry_sword.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_sarranid_cavalry_sword.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_sarranid_cavalry_sword.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_sarranid_cavalry_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sarranid_cavalry_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sarranid_cavalry_sword.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_sarranid_cavalry_sword.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_sarranid_cavalry_sword.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_sarranid_cavalry_sword.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_sarranid_cavalry_sword.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_sarranid_cavalry_sword.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_sarranid_cavalry_sword.add_capability(ItemCapability.FORCE_64_BITS)
itm_sarranid_cavalry_sword.set_price(310)
itm_sarranid_cavalry_sword.add_modifier(IModBit.RUSTY)
itm_sarranid_cavalry_sword.add_modifier(IModBit.CHIPPED)
itm_sarranid_cavalry_sword.add_modifier(IModBit.BALANCED)
itm_sarranid_cavalry_sword.add_modifier(IModBit.TEMPERED)
itm_sarranid_cavalry_sword.add_modifier(IModBit.MASTERWORK)
itm_sarranid_cavalry_sword.set_weight(1.5)
itm_sarranid_cavalry_sword.set_abundance(100)
itm_sarranid_cavalry_sword.set_hit_points(28672)
itm_sarranid_cavalry_sword.set_speed_rating(98)
itm_sarranid_cavalry_sword.set_weapon_length(105)
itm_sarranid_cavalry_sword.set_thrust_damage(19, 1)
itm_sarranid_cavalry_sword.set_swing_damage(28, 0)


itm_arabian_sword_d = Item("itm_arabian_sword_d", "Sarranid_Guard_Sword")
itm_arabian_sword_d.add_mesh(ItemMesh("arabian_sword_d"))
itm_arabian_sword_d.add_mesh(ItemMesh("scab_arabian_sword_d", ItemMesh.ixmesh_carry))
itm_arabian_sword_d.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_arabian_sword_d.add_flag(ItemFlag.IS_MERCHANDISE)
itm_arabian_sword_d.add_flag(ItemFlag.IS_PRIMARY)
itm_arabian_sword_d.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_arabian_sword_d.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_arabian_sword_d.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_arabian_sword_d.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_arabian_sword_d.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_arabian_sword_d.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_arabian_sword_d.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_arabian_sword_d.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_arabian_sword_d.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_arabian_sword_d.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_arabian_sword_d.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_arabian_sword_d.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_arabian_sword_d.add_capability(ItemCapability.FORCE_64_BITS)
itm_arabian_sword_d.set_price(420)
itm_arabian_sword_d.add_modifier(IModBit.RUSTY)
itm_arabian_sword_d.add_modifier(IModBit.CHIPPED)
itm_arabian_sword_d.add_modifier(IModBit.BALANCED)
itm_arabian_sword_d.add_modifier(IModBit.TEMPERED)
itm_arabian_sword_d.add_modifier(IModBit.MASTERWORK)
itm_arabian_sword_d.set_weight(1.5)
itm_arabian_sword_d.set_abundance(100)
itm_arabian_sword_d.set_hit_points(30720)
itm_arabian_sword_d.set_speed_rating(99)
itm_arabian_sword_d.set_weapon_length(97)
itm_arabian_sword_d.set_thrust_damage(20, 1)
itm_arabian_sword_d.set_swing_damage(30, 0)


itm_great_sword = Item("itm_great_sword", "Great_Sword")
itm_great_sword.add_mesh(ItemMesh("b_bastard_sword"))
itm_great_sword.add_mesh(ItemMesh("scab_bastardsw_b", ItemMesh.ixmesh_carry))
itm_great_sword.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_great_sword.add_flag(ItemFlag.IS_MERCHANDISE)
itm_great_sword.add_flag(ItemFlag.IS_TWO_HANDED)
itm_great_sword.add_flag(ItemFlag.IS_PRIMARY)
itm_great_sword.add_capability(ItemCapability.TWOHANDED_THRUST)
itm_great_sword.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_great_sword.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_great_sword.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_great_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_great_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_great_sword.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_great_sword.add_capability(ItemCapability.CARRY_SWORD_BACK)
itm_great_sword.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_great_sword.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_great_sword.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_great_sword.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_great_sword.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_great_sword.add_capability(ItemCapability.FORCE_64_BITS)
itm_great_sword.set_price(423)
itm_great_sword.add_modifier(IModBit.RUSTY)
itm_great_sword.add_modifier(IModBit.CHIPPED)
itm_great_sword.add_modifier(IModBit.BALANCED)
itm_great_sword.add_modifier(IModBit.TEMPERED)
itm_great_sword.add_modifier(IModBit.MASTERWORK)
itm_great_sword.set_weight(2.75)
itm_great_sword.set_abundance(100)
itm_great_sword.set_difficulty(10)
itm_great_sword.set_hit_points(39936)
itm_great_sword.set_speed_rating(95)
itm_great_sword.set_weapon_length(125)
itm_great_sword.set_thrust_damage(31, 1)
itm_great_sword.set_swing_damage(39, 0)


itm_sword_of_war = Item("itm_sword_of_war", "Sword_of_War")
itm_sword_of_war.add_mesh(ItemMesh("b_bastard_sword"))
itm_sword_of_war.add_mesh(ItemMesh("scab_bastardsw_b", ItemMesh.ixmesh_carry))
itm_sword_of_war.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_sword_of_war.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sword_of_war.add_flag(ItemFlag.IS_TWO_HANDED)
itm_sword_of_war.add_flag(ItemFlag.IS_PRIMARY)
itm_sword_of_war.add_capability(ItemCapability.TWOHANDED_THRUST)
itm_sword_of_war.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_sword_of_war.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_sword_of_war.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_sword_of_war.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sword_of_war.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sword_of_war.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_sword_of_war.add_capability(ItemCapability.CARRY_SWORD_BACK)
itm_sword_of_war.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_sword_of_war.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_sword_of_war.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_sword_of_war.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_sword_of_war.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_sword_of_war.add_capability(ItemCapability.FORCE_64_BITS)
itm_sword_of_war.set_price(524)
itm_sword_of_war.add_modifier(IModBit.RUSTY)
itm_sword_of_war.add_modifier(IModBit.CHIPPED)
itm_sword_of_war.add_modifier(IModBit.BALANCED)
itm_sword_of_war.add_modifier(IModBit.TEMPERED)
itm_sword_of_war.add_modifier(IModBit.MASTERWORK)
itm_sword_of_war.set_weight(3.0)
itm_sword_of_war.set_abundance(100)
itm_sword_of_war.set_difficulty(11)
itm_sword_of_war.set_hit_points(40960)
itm_sword_of_war.set_speed_rating(94)
itm_sword_of_war.set_weapon_length(130)
itm_sword_of_war.set_thrust_damage(31, 1)
itm_sword_of_war.set_swing_damage(40, 0)


itm_hatchet = Item("itm_hatchet", "Hatchet")
itm_hatchet.add_mesh(ItemMesh("hatchet"))
itm_hatchet.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_hatchet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_hatchet.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_hatchet.add_flag(ItemFlag.IS_PRIMARY)
itm_hatchet.add_flag(ItemFlag.IS_SECONDARY)
itm_hatchet.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_hatchet.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_hatchet.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_hatchet.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_hatchet.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_hatchet.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_hatchet.add_capability(ItemCapability.CARRY_AXE_LEFT_HIP)
itm_hatchet.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_hatchet.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_hatchet.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_hatchet.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_hatchet.add_capability(ItemCapability.FORCE_64_BITS)
itm_hatchet.set_price(13)
itm_hatchet.add_modifier(IModBit.RUSTY)
itm_hatchet.add_modifier(IModBit.CHIPPED)
itm_hatchet.add_modifier(IModBit.HEAVY)
itm_hatchet.set_weight(2.0)
itm_hatchet.set_abundance(100)
itm_hatchet.set_hit_points(23552)
itm_hatchet.set_speed_rating(97)
itm_hatchet.set_weapon_length(60)
itm_hatchet.set_thrust_damage(0, 1)
itm_hatchet.set_swing_damage(23, 0)


itm_hand_axe = Item("itm_hand_axe", "Hand_Axe")
itm_hand_axe.add_mesh(ItemMesh("hatchet"))
itm_hand_axe.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_hand_axe.add_flag(ItemFlag.IS_MERCHANDISE)
itm_hand_axe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_hand_axe.add_flag(ItemFlag.IS_PRIMARY)
itm_hand_axe.add_flag(ItemFlag.IS_SECONDARY)
itm_hand_axe.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_hand_axe.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_hand_axe.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_hand_axe.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_hand_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_hand_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_hand_axe.add_capability(ItemCapability.CARRY_AXE_LEFT_HIP)
itm_hand_axe.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_hand_axe.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_hand_axe.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_hand_axe.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_hand_axe.add_capability(ItemCapability.FORCE_64_BITS)
itm_hand_axe.set_price(24)
itm_hand_axe.add_modifier(IModBit.RUSTY)
itm_hand_axe.add_modifier(IModBit.CHIPPED)
itm_hand_axe.add_modifier(IModBit.HEAVY)
itm_hand_axe.set_weight(2.0)
itm_hand_axe.set_abundance(100)
itm_hand_axe.set_difficulty(7)
itm_hand_axe.set_hit_points(27648)
itm_hand_axe.set_speed_rating(95)
itm_hand_axe.set_weapon_length(75)
itm_hand_axe.set_thrust_damage(0, 1)
itm_hand_axe.set_swing_damage(27, 0)


itm_fighting_axe = Item("itm_fighting_axe", "Fighting_Axe")
itm_fighting_axe.add_mesh(ItemMesh("fighting_ax"))
itm_fighting_axe.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_fighting_axe.add_flag(ItemFlag.IS_MERCHANDISE)
itm_fighting_axe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_fighting_axe.add_flag(ItemFlag.IS_PRIMARY)
itm_fighting_axe.add_flag(ItemFlag.IS_SECONDARY)
itm_fighting_axe.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_fighting_axe.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_fighting_axe.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_fighting_axe.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_fighting_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_fighting_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_fighting_axe.add_capability(ItemCapability.CARRY_AXE_LEFT_HIP)
itm_fighting_axe.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_fighting_axe.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_fighting_axe.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_fighting_axe.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_fighting_axe.add_capability(ItemCapability.FORCE_64_BITS)
itm_fighting_axe.set_price(77)
itm_fighting_axe.add_modifier(IModBit.RUSTY)
itm_fighting_axe.add_modifier(IModBit.CHIPPED)
itm_fighting_axe.add_modifier(IModBit.HEAVY)
itm_fighting_axe.set_weight(2.5)
itm_fighting_axe.set_abundance(100)
itm_fighting_axe.set_difficulty(9)
itm_fighting_axe.set_hit_points(31744)
itm_fighting_axe.set_speed_rating(92)
itm_fighting_axe.set_weapon_length(90)
itm_fighting_axe.set_thrust_damage(0, 1)
itm_fighting_axe.set_swing_damage(31, 0)


itm_axe = Item("itm_axe", "Axe")
itm_axe.add_mesh(ItemMesh("iron_ax"))
itm_axe.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_axe.add_flag(ItemFlag.IS_MERCHANDISE)
itm_axe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_axe.add_flag(ItemFlag.IS_TWO_HANDED)
itm_axe.add_flag(ItemFlag.IS_PRIMARY)
itm_axe.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_axe.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_axe.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_axe.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_axe.add_capability(ItemCapability.CARRY_AXE_BACK)
itm_axe.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_axe.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_axe.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_axe.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_axe.add_capability(ItemCapability.FORCE_64_BITS)
itm_axe.set_price(65)
itm_axe.add_modifier(IModBit.RUSTY)
itm_axe.add_modifier(IModBit.CHIPPED)
itm_axe.add_modifier(IModBit.HEAVY)
itm_axe.set_weight(4.0)
itm_axe.set_abundance(100)
itm_axe.set_difficulty(8)
itm_axe.set_hit_points(32768)
itm_axe.set_speed_rating(91)
itm_axe.set_weapon_length(108)
itm_axe.set_thrust_damage(0, 1)
itm_axe.set_swing_damage(32, 0)


itm_voulge = Item("itm_voulge", "Voulge")
itm_voulge.add_mesh(ItemMesh("two_handed_battle_long_axe_a"))
itm_voulge.add_flag(ItemType.POLEARM)
itm_voulge.add_flag(ItemFlag.IS_MERCHANDISE)
itm_voulge.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_voulge.add_flag(ItemFlag.IS_TWO_HANDED)
itm_voulge.add_flag(ItemFlag.IS_PRIMARY)
itm_voulge.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_voulge.add_capability(ItemCapability.POLEARM_THRUST)
itm_voulge.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_voulge.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_voulge.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_voulge.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_voulge.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_voulge.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_voulge.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_voulge.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_voulge.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_voulge.set_price(120)
itm_voulge.add_modifier(IModBit.RUSTY)
itm_voulge.add_modifier(IModBit.CHIPPED)
itm_voulge.add_modifier(IModBit.HEAVY)
itm_voulge.set_weight(3.0)
itm_voulge.set_abundance(100)
itm_voulge.set_difficulty(10)
itm_voulge.set_hit_points(40960)
itm_voulge.set_speed_rating(88)
itm_voulge.set_weapon_length(175)
itm_voulge.set_thrust_damage(18, 1)
itm_voulge.set_swing_damage(40, 0)


itm_battle_axe = Item("itm_battle_axe", "Battle_Axe")
itm_battle_axe.add_mesh(ItemMesh("battle_ax"))
itm_battle_axe.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_battle_axe.add_flag(ItemFlag.IS_MERCHANDISE)
itm_battle_axe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_battle_axe.add_flag(ItemFlag.IS_TWO_HANDED)
itm_battle_axe.add_flag(ItemFlag.IS_PRIMARY)
itm_battle_axe.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_battle_axe.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_battle_axe.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_battle_axe.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_battle_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_battle_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_battle_axe.add_capability(ItemCapability.CARRY_AXE_BACK)
itm_battle_axe.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_battle_axe.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_battle_axe.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_battle_axe.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_battle_axe.add_capability(ItemCapability.FORCE_64_BITS)
itm_battle_axe.set_price(240)
itm_battle_axe.add_modifier(IModBit.RUSTY)
itm_battle_axe.add_modifier(IModBit.CHIPPED)
itm_battle_axe.add_modifier(IModBit.HEAVY)
itm_battle_axe.set_weight(5.0)
itm_battle_axe.set_abundance(100)
itm_battle_axe.set_difficulty(9)
itm_battle_axe.set_hit_points(41984)
itm_battle_axe.set_speed_rating(88)
itm_battle_axe.set_weapon_length(108)
itm_battle_axe.set_thrust_damage(0, 1)
itm_battle_axe.set_swing_damage(41, 0)


itm_war_axe = Item("itm_war_axe", "War_Axe")
itm_war_axe.add_mesh(ItemMesh("war_ax"))
itm_war_axe.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_war_axe.add_flag(ItemFlag.IS_MERCHANDISE)
itm_war_axe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_war_axe.add_flag(ItemFlag.IS_TWO_HANDED)
itm_war_axe.add_flag(ItemFlag.IS_PRIMARY)
itm_war_axe.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_war_axe.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_war_axe.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_war_axe.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_war_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_war_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_war_axe.add_capability(ItemCapability.CARRY_AXE_BACK)
itm_war_axe.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_war_axe.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_war_axe.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_war_axe.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_war_axe.add_capability(ItemCapability.FORCE_64_BITS)
itm_war_axe.set_price(264)
itm_war_axe.add_modifier(IModBit.RUSTY)
itm_war_axe.add_modifier(IModBit.CHIPPED)
itm_war_axe.add_modifier(IModBit.HEAVY)
itm_war_axe.set_weight(5.0)
itm_war_axe.set_abundance(100)
itm_war_axe.set_difficulty(10)
itm_war_axe.set_hit_points(44032)
itm_war_axe.set_speed_rating(86)
itm_war_axe.set_weapon_length(110)
itm_war_axe.set_thrust_damage(0, 1)
itm_war_axe.set_swing_damage(43, 0)


itm_sword_two_handed_b = Item("itm_sword_two_handed_b", "Two_Handed_Sword")
itm_sword_two_handed_b.add_mesh(ItemMesh("sword_two_handed_b"))
itm_sword_two_handed_b.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_sword_two_handed_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sword_two_handed_b.add_flag(ItemFlag.IS_TWO_HANDED)
itm_sword_two_handed_b.add_flag(ItemFlag.IS_PRIMARY)
itm_sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_THRUST)
itm_sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_sword_two_handed_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sword_two_handed_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sword_two_handed_b.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_sword_two_handed_b.add_capability(ItemCapability.CARRY_SWORD_BACK)
itm_sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_sword_two_handed_b.add_capability(ItemCapability.FORCE_64_BITS)
itm_sword_two_handed_b.set_price(670)
itm_sword_two_handed_b.add_modifier(IModBit.RUSTY)
itm_sword_two_handed_b.add_modifier(IModBit.CHIPPED)
itm_sword_two_handed_b.add_modifier(IModBit.BALANCED)
itm_sword_two_handed_b.add_modifier(IModBit.TEMPERED)
itm_sword_two_handed_b.add_modifier(IModBit.MASTERWORK)
itm_sword_two_handed_b.set_weight(2.75)
itm_sword_two_handed_b.set_abundance(100)
itm_sword_two_handed_b.set_difficulty(10)
itm_sword_two_handed_b.set_hit_points(40960)
itm_sword_two_handed_b.set_speed_rating(97)
itm_sword_two_handed_b.set_weapon_length(110)
itm_sword_two_handed_b.set_thrust_damage(28, 1)
itm_sword_two_handed_b.set_swing_damage(40, 0)


itm_sword_two_handed_a = Item("itm_sword_two_handed_a", "Great_Sword")
itm_sword_two_handed_a.add_mesh(ItemMesh("sword_two_handed_a"))
itm_sword_two_handed_a.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_sword_two_handed_a.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sword_two_handed_a.add_flag(ItemFlag.IS_TWO_HANDED)
itm_sword_two_handed_a.add_flag(ItemFlag.IS_PRIMARY)
itm_sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_THRUST)
itm_sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_sword_two_handed_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sword_two_handed_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sword_two_handed_a.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_sword_two_handed_a.add_capability(ItemCapability.CARRY_SWORD_BACK)
itm_sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_sword_two_handed_a.add_capability(ItemCapability.FORCE_64_BITS)
itm_sword_two_handed_a.set_price(1123)
itm_sword_two_handed_a.add_modifier(IModBit.RUSTY)
itm_sword_two_handed_a.add_modifier(IModBit.CHIPPED)
itm_sword_two_handed_a.add_modifier(IModBit.BALANCED)
itm_sword_two_handed_a.add_modifier(IModBit.TEMPERED)
itm_sword_two_handed_a.add_modifier(IModBit.MASTERWORK)
itm_sword_two_handed_a.set_weight(2.75)
itm_sword_two_handed_a.set_abundance(100)
itm_sword_two_handed_a.set_difficulty(10)
itm_sword_two_handed_a.set_hit_points(43008)
itm_sword_two_handed_a.set_speed_rating(96)
itm_sword_two_handed_a.set_weapon_length(120)
itm_sword_two_handed_a.set_thrust_damage(29, 1)
itm_sword_two_handed_a.set_swing_damage(42, 0)


itm_khergit_sword_two_handed_a = Item("itm_khergit_sword_two_handed_a", "Two_Handed_Sabre")
itm_khergit_sword_two_handed_a.add_mesh(ItemMesh("khergit_sword_two_handed_a"))
itm_khergit_sword_two_handed_a.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_khergit_sword_two_handed_a.add_flag(ItemFlag.IS_MERCHANDISE)
itm_khergit_sword_two_handed_a.add_flag(ItemFlag.IS_TWO_HANDED)
itm_khergit_sword_two_handed_a.add_flag(ItemFlag.IS_PRIMARY)
itm_khergit_sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_khergit_sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_khergit_sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_khergit_sword_two_handed_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_khergit_sword_two_handed_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_khergit_sword_two_handed_a.add_capability(ItemCapability.CARRY_SWORD_BACK)
itm_khergit_sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_khergit_sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_khergit_sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_khergit_sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_khergit_sword_two_handed_a.add_capability(ItemCapability.FORCE_64_BITS)
itm_khergit_sword_two_handed_a.set_price(523)
itm_khergit_sword_two_handed_a.add_modifier(IModBit.RUSTY)
itm_khergit_sword_two_handed_a.add_modifier(IModBit.CHIPPED)
itm_khergit_sword_two_handed_a.add_modifier(IModBit.BALANCED)
itm_khergit_sword_two_handed_a.add_modifier(IModBit.TEMPERED)
itm_khergit_sword_two_handed_a.add_modifier(IModBit.MASTERWORK)
itm_khergit_sword_two_handed_a.set_weight(2.75)
itm_khergit_sword_two_handed_a.set_abundance(100)
itm_khergit_sword_two_handed_a.set_difficulty(10)
itm_khergit_sword_two_handed_a.set_hit_points(40960)
itm_khergit_sword_two_handed_a.set_speed_rating(96)
itm_khergit_sword_two_handed_a.set_weapon_length(120)
itm_khergit_sword_two_handed_a.set_thrust_damage(0, 1)
itm_khergit_sword_two_handed_a.set_swing_damage(40, 0)


itm_khergit_sword_two_handed_b = Item("itm_khergit_sword_two_handed_b", "Two_Handed_Sabre")
itm_khergit_sword_two_handed_b.add_mesh(ItemMesh("khergit_sword_two_handed_b"))
itm_khergit_sword_two_handed_b.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_khergit_sword_two_handed_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_khergit_sword_two_handed_b.add_flag(ItemFlag.IS_TWO_HANDED)
itm_khergit_sword_two_handed_b.add_flag(ItemFlag.IS_PRIMARY)
itm_khergit_sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_khergit_sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_khergit_sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_khergit_sword_two_handed_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_khergit_sword_two_handed_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_khergit_sword_two_handed_b.add_capability(ItemCapability.CARRY_SWORD_BACK)
itm_khergit_sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_khergit_sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_khergit_sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_khergit_sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_khergit_sword_two_handed_b.add_capability(ItemCapability.FORCE_64_BITS)
itm_khergit_sword_two_handed_b.set_price(920)
itm_khergit_sword_two_handed_b.add_modifier(IModBit.RUSTY)
itm_khergit_sword_two_handed_b.add_modifier(IModBit.CHIPPED)
itm_khergit_sword_two_handed_b.add_modifier(IModBit.BALANCED)
itm_khergit_sword_two_handed_b.add_modifier(IModBit.TEMPERED)
itm_khergit_sword_two_handed_b.add_modifier(IModBit.MASTERWORK)
itm_khergit_sword_two_handed_b.set_weight(2.75)
itm_khergit_sword_two_handed_b.set_abundance(100)
itm_khergit_sword_two_handed_b.set_difficulty(10)
itm_khergit_sword_two_handed_b.set_hit_points(45056)
itm_khergit_sword_two_handed_b.set_speed_rating(96)
itm_khergit_sword_two_handed_b.set_weapon_length(120)
itm_khergit_sword_two_handed_b.set_thrust_damage(0, 1)
itm_khergit_sword_two_handed_b.set_swing_damage(44, 0)


itm_two_handed_cleaver = Item("itm_two_handed_cleaver", "War_Cleaver")
itm_two_handed_cleaver.add_mesh(ItemMesh("military_cleaver_a"))
itm_two_handed_cleaver.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_two_handed_cleaver.add_flag(ItemFlag.IS_MERCHANDISE)
itm_two_handed_cleaver.add_flag(ItemFlag.IS_TWO_HANDED)
itm_two_handed_cleaver.add_flag(ItemFlag.IS_PRIMARY)
itm_two_handed_cleaver.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_two_handed_cleaver.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_two_handed_cleaver.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_two_handed_cleaver.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_two_handed_cleaver.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_two_handed_cleaver.add_capability(ItemCapability.CARRY_SWORD_BACK)
itm_two_handed_cleaver.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_two_handed_cleaver.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_two_handed_cleaver.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_two_handed_cleaver.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_two_handed_cleaver.add_capability(ItemCapability.FORCE_64_BITS)
itm_two_handed_cleaver.set_price(640)
itm_two_handed_cleaver.add_modifier(IModBit.RUSTY)
itm_two_handed_cleaver.add_modifier(IModBit.CHIPPED)
itm_two_handed_cleaver.add_modifier(IModBit.BALANCED)
itm_two_handed_cleaver.add_modifier(IModBit.TEMPERED)
itm_two_handed_cleaver.add_modifier(IModBit.MASTERWORK)
itm_two_handed_cleaver.set_weight(2.75)
itm_two_handed_cleaver.set_abundance(100)
itm_two_handed_cleaver.set_difficulty(10)
itm_two_handed_cleaver.set_hit_points(46080)
itm_two_handed_cleaver.set_speed_rating(93)
itm_two_handed_cleaver.set_weapon_length(120)
itm_two_handed_cleaver.set_swing_damage(45, 0)


itm_military_cleaver_b = Item("itm_military_cleaver_b", "Soldier's_Cleaver")
itm_military_cleaver_b.add_mesh(ItemMesh("military_cleaver_b"))
itm_military_cleaver_b.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_military_cleaver_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_military_cleaver_b.add_flag(ItemFlag.IS_PRIMARY)
itm_military_cleaver_b.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_military_cleaver_b.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_military_cleaver_b.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_military_cleaver_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_military_cleaver_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_military_cleaver_b.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_military_cleaver_b.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_military_cleaver_b.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_military_cleaver_b.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_military_cleaver_b.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_military_cleaver_b.add_capability(ItemCapability.FORCE_64_BITS)
itm_military_cleaver_b.set_price(193)
itm_military_cleaver_b.add_modifier(IModBit.RUSTY)
itm_military_cleaver_b.add_modifier(IModBit.CHIPPED)
itm_military_cleaver_b.add_modifier(IModBit.BALANCED)
itm_military_cleaver_b.add_modifier(IModBit.TEMPERED)
itm_military_cleaver_b.add_modifier(IModBit.MASTERWORK)
itm_military_cleaver_b.set_weight(1.5)
itm_military_cleaver_b.set_abundance(100)
itm_military_cleaver_b.set_hit_points(31744)
itm_military_cleaver_b.set_speed_rating(96)
itm_military_cleaver_b.set_weapon_length(95)
itm_military_cleaver_b.set_thrust_damage(0, 1)
itm_military_cleaver_b.set_swing_damage(31, 0)


itm_military_cleaver_c = Item("itm_military_cleaver_c", "Military_Cleaver")
itm_military_cleaver_c.add_mesh(ItemMesh("military_cleaver_c"))
itm_military_cleaver_c.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_military_cleaver_c.add_flag(ItemFlag.IS_MERCHANDISE)
itm_military_cleaver_c.add_flag(ItemFlag.IS_PRIMARY)
itm_military_cleaver_c.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_military_cleaver_c.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_military_cleaver_c.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_military_cleaver_c.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_military_cleaver_c.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_military_cleaver_c.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_military_cleaver_c.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_military_cleaver_c.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_military_cleaver_c.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_military_cleaver_c.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_military_cleaver_c.add_capability(ItemCapability.FORCE_64_BITS)
itm_military_cleaver_c.set_price(263)
itm_military_cleaver_c.add_modifier(IModBit.RUSTY)
itm_military_cleaver_c.add_modifier(IModBit.CHIPPED)
itm_military_cleaver_c.add_modifier(IModBit.BALANCED)
itm_military_cleaver_c.add_modifier(IModBit.TEMPERED)
itm_military_cleaver_c.add_modifier(IModBit.MASTERWORK)
itm_military_cleaver_c.set_weight(1.5)
itm_military_cleaver_c.set_abundance(100)
itm_military_cleaver_c.set_hit_points(35840)
itm_military_cleaver_c.set_speed_rating(96)
itm_military_cleaver_c.set_weapon_length(95)
itm_military_cleaver_c.set_thrust_damage(0, 1)
itm_military_cleaver_c.set_swing_damage(35, 0)


itm_military_sickle_a = Item("itm_military_sickle_a", "Military_Sickle")
itm_military_sickle_a.add_mesh(ItemMesh("military_sickle_a"))
itm_military_sickle_a.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_military_sickle_a.add_flag(ItemFlag.IS_MERCHANDISE)
itm_military_sickle_a.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_military_sickle_a.add_flag(ItemFlag.IS_PRIMARY)
itm_military_sickle_a.add_flag(ItemFlag.IS_SECONDARY)
itm_military_sickle_a.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_military_sickle_a.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_military_sickle_a.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_military_sickle_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_military_sickle_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_military_sickle_a.add_capability(ItemCapability.CARRY_AXE_LEFT_HIP)
itm_military_sickle_a.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_military_sickle_a.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_military_sickle_a.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_military_sickle_a.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_military_sickle_a.add_capability(ItemCapability.FORCE_64_BITS)
itm_military_sickle_a.set_price(220)
itm_military_sickle_a.add_modifier(IModBit.RUSTY)
itm_military_sickle_a.add_modifier(IModBit.CHIPPED)
itm_military_sickle_a.add_modifier(IModBit.HEAVY)
itm_military_sickle_a.set_weight(1.0)
itm_military_sickle_a.set_abundance(100)
itm_military_sickle_a.set_difficulty(9)
itm_military_sickle_a.set_hit_points(26624)
itm_military_sickle_a.set_speed_rating(100)
itm_military_sickle_a.set_weapon_length(75)
itm_military_sickle_a.set_thrust_damage(0, 1)
itm_military_sickle_a.set_swing_damage(26, 1)


itm_bastard_sword_a = Item("itm_bastard_sword_a", "Bastard_Sword")
itm_bastard_sword_a.add_mesh(ItemMesh("bastard_sword_a"))
itm_bastard_sword_a.add_mesh(ItemMesh("bastard_sword_a_scabbard", ItemMesh.ixmesh_carry))
itm_bastard_sword_a.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_bastard_sword_a.add_flag(ItemFlag.IS_MERCHANDISE)
itm_bastard_sword_a.add_flag(ItemFlag.IS_PRIMARY)
itm_bastard_sword_a.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_bastard_sword_a.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_bastard_sword_a.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_bastard_sword_a.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_bastard_sword_a.add_capability(ItemCapability.TWOHANDED_THRUST)
itm_bastard_sword_a.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_bastard_sword_a.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_bastard_sword_a.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_bastard_sword_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_bastard_sword_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_bastard_sword_a.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_bastard_sword_a.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_bastard_sword_a.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_bastard_sword_a.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_bastard_sword_a.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_bastard_sword_a.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_bastard_sword_a.add_capability(ItemCapability.FORCE_64_BITS)
itm_bastard_sword_a.set_price(294)
itm_bastard_sword_a.add_modifier(IModBit.RUSTY)
itm_bastard_sword_a.add_modifier(IModBit.CHIPPED)
itm_bastard_sword_a.add_modifier(IModBit.BALANCED)
itm_bastard_sword_a.add_modifier(IModBit.TEMPERED)
itm_bastard_sword_a.add_modifier(IModBit.MASTERWORK)
itm_bastard_sword_a.set_weight(2.0)
itm_bastard_sword_a.set_abundance(100)
itm_bastard_sword_a.set_difficulty(9)
itm_bastard_sword_a.set_hit_points(35840)
itm_bastard_sword_a.set_speed_rating(98)
itm_bastard_sword_a.set_weapon_length(101)
itm_bastard_sword_a.set_thrust_damage(26, 1)
itm_bastard_sword_a.set_swing_damage(35, 0)


itm_bastard_sword_b = Item("itm_bastard_sword_b", "Heavy_Bastard_Sword")
itm_bastard_sword_b.add_mesh(ItemMesh("bastard_sword_b"))
itm_bastard_sword_b.add_mesh(ItemMesh("bastard_sword_b_scabbard", ItemMesh.ixmesh_carry))
itm_bastard_sword_b.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_bastard_sword_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_bastard_sword_b.add_flag(ItemFlag.IS_PRIMARY)
itm_bastard_sword_b.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_bastard_sword_b.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_bastard_sword_b.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_bastard_sword_b.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_bastard_sword_b.add_capability(ItemCapability.TWOHANDED_THRUST)
itm_bastard_sword_b.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_bastard_sword_b.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_bastard_sword_b.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_bastard_sword_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_bastard_sword_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_bastard_sword_b.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_bastard_sword_b.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_bastard_sword_b.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_bastard_sword_b.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_bastard_sword_b.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_bastard_sword_b.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_bastard_sword_b.add_capability(ItemCapability.FORCE_64_BITS)
itm_bastard_sword_b.set_price(526)
itm_bastard_sword_b.add_modifier(IModBit.RUSTY)
itm_bastard_sword_b.add_modifier(IModBit.CHIPPED)
itm_bastard_sword_b.add_modifier(IModBit.BALANCED)
itm_bastard_sword_b.add_modifier(IModBit.TEMPERED)
itm_bastard_sword_b.add_modifier(IModBit.MASTERWORK)
itm_bastard_sword_b.set_weight(2.25)
itm_bastard_sword_b.set_abundance(100)
itm_bastard_sword_b.set_difficulty(9)
itm_bastard_sword_b.set_hit_points(37888)
itm_bastard_sword_b.set_speed_rating(97)
itm_bastard_sword_b.set_weapon_length(105)
itm_bastard_sword_b.set_thrust_damage(27, 1)
itm_bastard_sword_b.set_swing_damage(37, 0)


itm_one_handed_war_axe_a = Item("itm_one_handed_war_axe_a", "One_Handed_Axe")
itm_one_handed_war_axe_a.add_mesh(ItemMesh("one_handed_war_axe_a"))
itm_one_handed_war_axe_a.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_one_handed_war_axe_a.add_flag(ItemFlag.IS_MERCHANDISE)
itm_one_handed_war_axe_a.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_one_handed_war_axe_a.add_flag(ItemFlag.IS_PRIMARY)
itm_one_handed_war_axe_a.add_flag(ItemFlag.IS_SECONDARY)
itm_one_handed_war_axe_a.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_one_handed_war_axe_a.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_one_handed_war_axe_a.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_one_handed_war_axe_a.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_one_handed_war_axe_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_one_handed_war_axe_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_one_handed_war_axe_a.add_capability(ItemCapability.CARRY_AXE_LEFT_HIP)
itm_one_handed_war_axe_a.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_one_handed_war_axe_a.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_one_handed_war_axe_a.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_one_handed_war_axe_a.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_one_handed_war_axe_a.add_capability(ItemCapability.FORCE_64_BITS)
itm_one_handed_war_axe_a.set_price(87)
itm_one_handed_war_axe_a.add_modifier(IModBit.RUSTY)
itm_one_handed_war_axe_a.add_modifier(IModBit.CHIPPED)
itm_one_handed_war_axe_a.add_modifier(IModBit.HEAVY)
itm_one_handed_war_axe_a.set_weight(1.5)
itm_one_handed_war_axe_a.set_abundance(100)
itm_one_handed_war_axe_a.set_difficulty(9)
itm_one_handed_war_axe_a.set_hit_points(32768)
itm_one_handed_war_axe_a.set_speed_rating(98)
itm_one_handed_war_axe_a.set_weapon_length(71)
itm_one_handed_war_axe_a.set_thrust_damage(0, 1)
itm_one_handed_war_axe_a.set_swing_damage(32, 0)


itm_one_handed_battle_axe_a = Item("itm_one_handed_battle_axe_a", "One_Handed_Battle_Axe")
itm_one_handed_battle_axe_a.add_mesh(ItemMesh("one_handed_battle_axe_a"))
itm_one_handed_battle_axe_a.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_one_handed_battle_axe_a.add_flag(ItemFlag.IS_MERCHANDISE)
itm_one_handed_battle_axe_a.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_one_handed_battle_axe_a.add_flag(ItemFlag.IS_PRIMARY)
itm_one_handed_battle_axe_a.add_flag(ItemFlag.IS_SECONDARY)
itm_one_handed_battle_axe_a.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_one_handed_battle_axe_a.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_one_handed_battle_axe_a.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_one_handed_battle_axe_a.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_one_handed_battle_axe_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_one_handed_battle_axe_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_one_handed_battle_axe_a.add_capability(ItemCapability.CARRY_AXE_LEFT_HIP)
itm_one_handed_battle_axe_a.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_one_handed_battle_axe_a.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_one_handed_battle_axe_a.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_one_handed_battle_axe_a.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_one_handed_battle_axe_a.add_capability(ItemCapability.FORCE_64_BITS)
itm_one_handed_battle_axe_a.set_price(142)
itm_one_handed_battle_axe_a.add_modifier(IModBit.RUSTY)
itm_one_handed_battle_axe_a.add_modifier(IModBit.CHIPPED)
itm_one_handed_battle_axe_a.add_modifier(IModBit.HEAVY)
itm_one_handed_battle_axe_a.set_weight(1.5)
itm_one_handed_battle_axe_a.set_abundance(100)
itm_one_handed_battle_axe_a.set_difficulty(9)
itm_one_handed_battle_axe_a.set_hit_points(34816)
itm_one_handed_battle_axe_a.set_speed_rating(98)
itm_one_handed_battle_axe_a.set_weapon_length(73)
itm_one_handed_battle_axe_a.set_thrust_damage(0, 1)
itm_one_handed_battle_axe_a.set_swing_damage(34, 0)


itm_one_handed_war_axe_b = Item("itm_one_handed_war_axe_b", "One_Handed_War_Axe")
itm_one_handed_war_axe_b.add_mesh(ItemMesh("one_handed_war_axe_b"))
itm_one_handed_war_axe_b.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_one_handed_war_axe_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_one_handed_war_axe_b.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_one_handed_war_axe_b.add_flag(ItemFlag.IS_PRIMARY)
itm_one_handed_war_axe_b.add_flag(ItemFlag.IS_SECONDARY)
itm_one_handed_war_axe_b.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_one_handed_war_axe_b.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_one_handed_war_axe_b.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_one_handed_war_axe_b.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_one_handed_war_axe_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_one_handed_war_axe_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_one_handed_war_axe_b.add_capability(ItemCapability.CARRY_AXE_LEFT_HIP)
itm_one_handed_war_axe_b.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_one_handed_war_axe_b.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_one_handed_war_axe_b.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_one_handed_war_axe_b.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_one_handed_war_axe_b.add_capability(ItemCapability.FORCE_64_BITS)
itm_one_handed_war_axe_b.set_price(190)
itm_one_handed_war_axe_b.add_modifier(IModBit.RUSTY)
itm_one_handed_war_axe_b.add_modifier(IModBit.CHIPPED)
itm_one_handed_war_axe_b.add_modifier(IModBit.HEAVY)
itm_one_handed_war_axe_b.set_weight(1.5)
itm_one_handed_war_axe_b.set_abundance(100)
itm_one_handed_war_axe_b.set_difficulty(9)
itm_one_handed_war_axe_b.set_hit_points(34816)
itm_one_handed_war_axe_b.set_speed_rating(98)
itm_one_handed_war_axe_b.set_weapon_length(76)
itm_one_handed_war_axe_b.set_thrust_damage(0, 1)
itm_one_handed_war_axe_b.set_swing_damage(34, 0)


itm_one_handed_battle_axe_b = Item("itm_one_handed_battle_axe_b", "One_Handed_Battle_Axe")
itm_one_handed_battle_axe_b.add_mesh(ItemMesh("one_handed_battle_axe_b"))
itm_one_handed_battle_axe_b.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_one_handed_battle_axe_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_one_handed_battle_axe_b.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_one_handed_battle_axe_b.add_flag(ItemFlag.IS_PRIMARY)
itm_one_handed_battle_axe_b.add_flag(ItemFlag.IS_SECONDARY)
itm_one_handed_battle_axe_b.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_one_handed_battle_axe_b.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_one_handed_battle_axe_b.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_one_handed_battle_axe_b.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_one_handed_battle_axe_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_one_handed_battle_axe_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_one_handed_battle_axe_b.add_capability(ItemCapability.CARRY_AXE_LEFT_HIP)
itm_one_handed_battle_axe_b.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_one_handed_battle_axe_b.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_one_handed_battle_axe_b.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_one_handed_battle_axe_b.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_one_handed_battle_axe_b.add_capability(ItemCapability.FORCE_64_BITS)
itm_one_handed_battle_axe_b.set_price(230)
itm_one_handed_battle_axe_b.add_modifier(IModBit.RUSTY)
itm_one_handed_battle_axe_b.add_modifier(IModBit.CHIPPED)
itm_one_handed_battle_axe_b.add_modifier(IModBit.HEAVY)
itm_one_handed_battle_axe_b.set_weight(1.75)
itm_one_handed_battle_axe_b.set_abundance(100)
itm_one_handed_battle_axe_b.set_difficulty(9)
itm_one_handed_battle_axe_b.set_hit_points(36864)
itm_one_handed_battle_axe_b.set_speed_rating(98)
itm_one_handed_battle_axe_b.set_weapon_length(72)
itm_one_handed_battle_axe_b.set_thrust_damage(0, 1)
itm_one_handed_battle_axe_b.set_swing_damage(36, 0)


itm_one_handed_battle_axe_c = Item("itm_one_handed_battle_axe_c", "One_Handed_Battle_Axe")
itm_one_handed_battle_axe_c.add_mesh(ItemMesh("one_handed_battle_axe_c"))
itm_one_handed_battle_axe_c.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_one_handed_battle_axe_c.add_flag(ItemFlag.IS_MERCHANDISE)
itm_one_handed_battle_axe_c.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_one_handed_battle_axe_c.add_flag(ItemFlag.IS_PRIMARY)
itm_one_handed_battle_axe_c.add_flag(ItemFlag.IS_SECONDARY)
itm_one_handed_battle_axe_c.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_one_handed_battle_axe_c.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_one_handed_battle_axe_c.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_one_handed_battle_axe_c.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_one_handed_battle_axe_c.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_one_handed_battle_axe_c.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_one_handed_battle_axe_c.add_capability(ItemCapability.CARRY_AXE_LEFT_HIP)
itm_one_handed_battle_axe_c.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_one_handed_battle_axe_c.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_one_handed_battle_axe_c.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_one_handed_battle_axe_c.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_one_handed_battle_axe_c.add_capability(ItemCapability.FORCE_64_BITS)
itm_one_handed_battle_axe_c.set_price(550)
itm_one_handed_battle_axe_c.add_modifier(IModBit.RUSTY)
itm_one_handed_battle_axe_c.add_modifier(IModBit.CHIPPED)
itm_one_handed_battle_axe_c.add_modifier(IModBit.HEAVY)
itm_one_handed_battle_axe_c.set_weight(2.0)
itm_one_handed_battle_axe_c.set_abundance(100)
itm_one_handed_battle_axe_c.set_difficulty(9)
itm_one_handed_battle_axe_c.set_hit_points(37888)
itm_one_handed_battle_axe_c.set_speed_rating(98)
itm_one_handed_battle_axe_c.set_weapon_length(76)
itm_one_handed_battle_axe_c.set_thrust_damage(0, 1)
itm_one_handed_battle_axe_c.set_swing_damage(37, 0)


itm_two_handed_axe = Item("itm_two_handed_axe", "Two_Handed_Axe")
itm_two_handed_axe.add_mesh(ItemMesh("two_handed_battle_axe_a"))
itm_two_handed_axe.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_two_handed_axe.add_flag(ItemFlag.IS_MERCHANDISE)
itm_two_handed_axe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_two_handed_axe.add_flag(ItemFlag.IS_TWO_HANDED)
itm_two_handed_axe.add_flag(ItemFlag.IS_PRIMARY)
itm_two_handed_axe.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_two_handed_axe.add_flag(ItemFlag.IS_UNBALANCED)
itm_two_handed_axe.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_two_handed_axe.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_two_handed_axe.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_two_handed_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_two_handed_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_two_handed_axe.add_capability(ItemCapability.CARRY_AXE_BACK)
itm_two_handed_axe.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_two_handed_axe.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_two_handed_axe.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_two_handed_axe.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_two_handed_axe.add_capability(ItemCapability.FORCE_64_BITS)
itm_two_handed_axe.set_price(90)
itm_two_handed_axe.add_modifier(IModBit.RUSTY)
itm_two_handed_axe.add_modifier(IModBit.CHIPPED)
itm_two_handed_axe.add_modifier(IModBit.HEAVY)
itm_two_handed_axe.set_weight(4.5)
itm_two_handed_axe.set_abundance(100)
itm_two_handed_axe.set_difficulty(10)
itm_two_handed_axe.set_hit_points(38912)
itm_two_handed_axe.set_speed_rating(96)
itm_two_handed_axe.set_weapon_length(90)
itm_two_handed_axe.set_thrust_damage(0, 1)
itm_two_handed_axe.set_swing_damage(38, 0)


itm_two_handed_battle_axe_2 = Item("itm_two_handed_battle_axe_2", "Two_Handed_War_Axe")
itm_two_handed_battle_axe_2.add_mesh(ItemMesh("two_handed_battle_axe_b"))
itm_two_handed_battle_axe_2.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_two_handed_battle_axe_2.add_flag(ItemFlag.IS_MERCHANDISE)
itm_two_handed_battle_axe_2.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_two_handed_battle_axe_2.add_flag(ItemFlag.IS_TWO_HANDED)
itm_two_handed_battle_axe_2.add_flag(ItemFlag.IS_PRIMARY)
itm_two_handed_battle_axe_2.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_two_handed_battle_axe_2.add_flag(ItemFlag.IS_UNBALANCED)
itm_two_handed_battle_axe_2.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_two_handed_battle_axe_2.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_two_handed_battle_axe_2.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_two_handed_battle_axe_2.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_two_handed_battle_axe_2.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_two_handed_battle_axe_2.add_capability(ItemCapability.CARRY_AXE_BACK)
itm_two_handed_battle_axe_2.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_two_handed_battle_axe_2.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_two_handed_battle_axe_2.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_two_handed_battle_axe_2.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_two_handed_battle_axe_2.add_capability(ItemCapability.FORCE_64_BITS)
itm_two_handed_battle_axe_2.set_price(152)
itm_two_handed_battle_axe_2.add_modifier(IModBit.RUSTY)
itm_two_handed_battle_axe_2.add_modifier(IModBit.CHIPPED)
itm_two_handed_battle_axe_2.add_modifier(IModBit.HEAVY)
itm_two_handed_battle_axe_2.set_weight(4.5)
itm_two_handed_battle_axe_2.set_abundance(100)
itm_two_handed_battle_axe_2.set_difficulty(10)
itm_two_handed_battle_axe_2.set_hit_points(45056)
itm_two_handed_battle_axe_2.set_speed_rating(96)
itm_two_handed_battle_axe_2.set_weapon_length(92)
itm_two_handed_battle_axe_2.set_thrust_damage(0, 1)
itm_two_handed_battle_axe_2.set_swing_damage(44, 0)


itm_shortened_voulge = Item("itm_shortened_voulge", "Shortened_Voulge")
itm_shortened_voulge.add_mesh(ItemMesh("two_handed_battle_axe_c"))
itm_shortened_voulge.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_shortened_voulge.add_flag(ItemFlag.IS_MERCHANDISE)
itm_shortened_voulge.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_shortened_voulge.add_flag(ItemFlag.IS_TWO_HANDED)
itm_shortened_voulge.add_flag(ItemFlag.IS_PRIMARY)
itm_shortened_voulge.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_shortened_voulge.add_flag(ItemFlag.IS_UNBALANCED)
itm_shortened_voulge.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_shortened_voulge.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_shortened_voulge.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_shortened_voulge.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_shortened_voulge.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_shortened_voulge.add_capability(ItemCapability.CARRY_AXE_BACK)
itm_shortened_voulge.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_shortened_voulge.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_shortened_voulge.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_shortened_voulge.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_shortened_voulge.add_capability(ItemCapability.FORCE_64_BITS)
itm_shortened_voulge.set_price(228)
itm_shortened_voulge.add_modifier(IModBit.RUSTY)
itm_shortened_voulge.add_modifier(IModBit.CHIPPED)
itm_shortened_voulge.add_modifier(IModBit.HEAVY)
itm_shortened_voulge.set_weight(4.5)
itm_shortened_voulge.set_abundance(100)
itm_shortened_voulge.set_difficulty(10)
itm_shortened_voulge.set_hit_points(46080)
itm_shortened_voulge.set_speed_rating(92)
itm_shortened_voulge.set_weapon_length(100)
itm_shortened_voulge.set_thrust_damage(0, 1)
itm_shortened_voulge.set_swing_damage(45, 0)


itm_great_axe = Item("itm_great_axe", "Great_Axe")
itm_great_axe.add_mesh(ItemMesh("two_handed_battle_axe_e"))
itm_great_axe.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_great_axe.add_flag(ItemFlag.IS_MERCHANDISE)
itm_great_axe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_great_axe.add_flag(ItemFlag.IS_TWO_HANDED)
itm_great_axe.add_flag(ItemFlag.IS_PRIMARY)
itm_great_axe.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_great_axe.add_flag(ItemFlag.IS_UNBALANCED)
itm_great_axe.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_great_axe.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_great_axe.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_great_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_great_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_great_axe.add_capability(ItemCapability.CARRY_AXE_BACK)
itm_great_axe.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_great_axe.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_great_axe.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_great_axe.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_great_axe.add_capability(ItemCapability.FORCE_64_BITS)
itm_great_axe.set_price(316)
itm_great_axe.add_modifier(IModBit.RUSTY)
itm_great_axe.add_modifier(IModBit.CHIPPED)
itm_great_axe.add_modifier(IModBit.HEAVY)
itm_great_axe.set_weight(4.5)
itm_great_axe.set_abundance(100)
itm_great_axe.set_difficulty(10)
itm_great_axe.set_hit_points(48128)
itm_great_axe.set_speed_rating(94)
itm_great_axe.set_weapon_length(96)
itm_great_axe.set_thrust_damage(0, 1)
itm_great_axe.set_swing_damage(47, 0)


itm_long_axe = Item("itm_long_axe", "Long_Axe")
itm_long_axe.add_mesh(ItemMesh("long_axe_a"))
itm_long_axe.add_flag(ItemType.POLEARM)
itm_long_axe.add_flag(ItemFlag.IS_MERCHANDISE)
itm_long_axe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_long_axe.add_flag(ItemFlag.IS_TWO_HANDED)
itm_long_axe.add_flag(ItemFlag.IS_PRIMARY)
itm_long_axe.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_long_axe.add_flag(ItemFlag.IS_CIVILIAN)
itm_long_axe.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_long_axe.add_flag(ItemFlag.IS_UNBALANCED)
itm_long_axe.add_capability(ItemCapability.POLEARM_THRUST)
itm_long_axe.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_long_axe.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_long_axe.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_long_axe.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_long_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_long_axe.add_capability(ItemCapability.CARRY_AXE_BACK)
itm_long_axe.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_long_axe.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_long_axe.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_long_axe.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_long_axe.set_price(390)
itm_long_axe.add_modifier(IModBit.RUSTY)
itm_long_axe.add_modifier(IModBit.CHIPPED)
itm_long_axe.add_modifier(IModBit.HEAVY)
itm_long_axe.set_weight(4.75)
itm_long_axe.set_abundance(100)
itm_long_axe.set_difficulty(10)
itm_long_axe.set_hit_points(47104)
itm_long_axe.set_speed_rating(93)
itm_long_axe.set_weapon_length(120)
itm_long_axe.set_thrust_damage(19, 2)
itm_long_axe.set_swing_damage(46, 0)


itm_long_axe_alt = Item("itm_long_axe_alt", "Long_Axe")
itm_long_axe_alt.add_mesh(ItemMesh("long_axe_a"))
itm_long_axe_alt.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_long_axe_alt.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_long_axe_alt.add_flag(ItemFlag.IS_TWO_HANDED)
itm_long_axe_alt.add_flag(ItemFlag.IS_PRIMARY)
itm_long_axe_alt.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_long_axe_alt.add_flag(ItemFlag.IS_UNBALANCED)
itm_long_axe_alt.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_long_axe_alt.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_long_axe_alt.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_long_axe_alt.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_long_axe_alt.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_long_axe_alt.add_capability(ItemCapability.CARRY_AXE_BACK)
itm_long_axe_alt.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_long_axe_alt.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_long_axe_alt.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_long_axe_alt.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_long_axe_alt.add_capability(ItemCapability.FORCE_64_BITS)
itm_long_axe_alt.set_price(390)
itm_long_axe_alt.add_modifier(IModBit.RUSTY)
itm_long_axe_alt.add_modifier(IModBit.CHIPPED)
itm_long_axe_alt.add_modifier(IModBit.HEAVY)
itm_long_axe_alt.set_weight(4.75)
itm_long_axe_alt.set_abundance(100)
itm_long_axe_alt.set_difficulty(10)
itm_long_axe_alt.set_hit_points(47104)
itm_long_axe_alt.set_speed_rating(88)
itm_long_axe_alt.set_weapon_length(120)
itm_long_axe_alt.set_thrust_damage(0, 1)
itm_long_axe_alt.set_swing_damage(46, 0)


itm_long_axe_b = Item("itm_long_axe_b", "Long_War_Axe")
itm_long_axe_b.add_mesh(ItemMesh("long_axe_b"))
itm_long_axe_b.add_flag(ItemType.POLEARM)
itm_long_axe_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_long_axe_b.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_long_axe_b.add_flag(ItemFlag.IS_TWO_HANDED)
itm_long_axe_b.add_flag(ItemFlag.IS_PRIMARY)
itm_long_axe_b.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_long_axe_b.add_flag(ItemFlag.IS_CIVILIAN)
itm_long_axe_b.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_long_axe_b.add_flag(ItemFlag.IS_UNBALANCED)
itm_long_axe_b.add_capability(ItemCapability.POLEARM_THRUST)
itm_long_axe_b.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_long_axe_b.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_long_axe_b.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_long_axe_b.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_long_axe_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_long_axe_b.add_capability(ItemCapability.CARRY_AXE_BACK)
itm_long_axe_b.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_long_axe_b.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_long_axe_b.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_long_axe_b.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_long_axe_b.set_price(510)
itm_long_axe_b.add_modifier(IModBit.RUSTY)
itm_long_axe_b.add_modifier(IModBit.CHIPPED)
itm_long_axe_b.add_modifier(IModBit.HEAVY)
itm_long_axe_b.set_weight(5.0)
itm_long_axe_b.set_abundance(100)
itm_long_axe_b.set_difficulty(10)
itm_long_axe_b.set_hit_points(51200)
itm_long_axe_b.set_speed_rating(92)
itm_long_axe_b.set_weapon_length(125)
itm_long_axe_b.set_thrust_damage(18, 2)
itm_long_axe_b.set_swing_damage(50, 0)


itm_long_axe_b_alt = Item("itm_long_axe_b_alt", "Long_War_Axe")
itm_long_axe_b_alt.add_mesh(ItemMesh("long_axe_b"))
itm_long_axe_b_alt.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_long_axe_b_alt.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_long_axe_b_alt.add_flag(ItemFlag.IS_TWO_HANDED)
itm_long_axe_b_alt.add_flag(ItemFlag.IS_PRIMARY)
itm_long_axe_b_alt.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_long_axe_b_alt.add_flag(ItemFlag.IS_UNBALANCED)
itm_long_axe_b_alt.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_long_axe_b_alt.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_long_axe_b_alt.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_long_axe_b_alt.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_long_axe_b_alt.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_long_axe_b_alt.add_capability(ItemCapability.CARRY_AXE_BACK)
itm_long_axe_b_alt.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_long_axe_b_alt.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_long_axe_b_alt.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_long_axe_b_alt.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_long_axe_b_alt.add_capability(ItemCapability.FORCE_64_BITS)
itm_long_axe_b_alt.set_price(510)
itm_long_axe_b_alt.add_modifier(IModBit.RUSTY)
itm_long_axe_b_alt.add_modifier(IModBit.CHIPPED)
itm_long_axe_b_alt.add_modifier(IModBit.HEAVY)
itm_long_axe_b_alt.set_weight(5.0)
itm_long_axe_b_alt.set_abundance(100)
itm_long_axe_b_alt.set_difficulty(10)
itm_long_axe_b_alt.set_hit_points(51200)
itm_long_axe_b_alt.set_speed_rating(87)
itm_long_axe_b_alt.set_weapon_length(125)
itm_long_axe_b_alt.set_thrust_damage(0, 1)
itm_long_axe_b_alt.set_swing_damage(50, 0)


itm_long_axe_c = Item("itm_long_axe_c", "Great_Long_Axe")
itm_long_axe_c.add_mesh(ItemMesh("long_axe_c"))
itm_long_axe_c.add_flag(ItemType.POLEARM)
itm_long_axe_c.add_flag(ItemFlag.IS_MERCHANDISE)
itm_long_axe_c.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_long_axe_c.add_flag(ItemFlag.IS_TWO_HANDED)
itm_long_axe_c.add_flag(ItemFlag.IS_PRIMARY)
itm_long_axe_c.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_long_axe_c.add_flag(ItemFlag.IS_CIVILIAN)
itm_long_axe_c.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_long_axe_c.add_flag(ItemFlag.IS_UNBALANCED)
itm_long_axe_c.add_capability(ItemCapability.POLEARM_THRUST)
itm_long_axe_c.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_long_axe_c.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_long_axe_c.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_long_axe_c.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_long_axe_c.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_long_axe_c.add_capability(ItemCapability.CARRY_AXE_BACK)
itm_long_axe_c.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_long_axe_c.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_long_axe_c.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_long_axe_c.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_long_axe_c.set_price(660)
itm_long_axe_c.add_modifier(IModBit.RUSTY)
itm_long_axe_c.add_modifier(IModBit.CHIPPED)
itm_long_axe_c.add_modifier(IModBit.HEAVY)
itm_long_axe_c.set_weight(5.5)
itm_long_axe_c.set_abundance(100)
itm_long_axe_c.set_difficulty(10)
itm_long_axe_c.set_hit_points(55296)
itm_long_axe_c.set_speed_rating(91)
itm_long_axe_c.set_weapon_length(127)
itm_long_axe_c.set_thrust_damage(19, 2)
itm_long_axe_c.set_swing_damage(54, 0)


itm_long_axe_c_alt = Item("itm_long_axe_c_alt", "Great_Long_Axe")
itm_long_axe_c_alt.add_mesh(ItemMesh("long_axe_c"))
itm_long_axe_c_alt.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_long_axe_c_alt.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_long_axe_c_alt.add_flag(ItemFlag.IS_TWO_HANDED)
itm_long_axe_c_alt.add_flag(ItemFlag.IS_PRIMARY)
itm_long_axe_c_alt.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_long_axe_c_alt.add_flag(ItemFlag.IS_UNBALANCED)
itm_long_axe_c_alt.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_long_axe_c_alt.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_long_axe_c_alt.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_long_axe_c_alt.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_long_axe_c_alt.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_long_axe_c_alt.add_capability(ItemCapability.CARRY_AXE_BACK)
itm_long_axe_c_alt.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_long_axe_c_alt.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_long_axe_c_alt.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_long_axe_c_alt.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_long_axe_c_alt.add_capability(ItemCapability.FORCE_64_BITS)
itm_long_axe_c_alt.set_price(660)
itm_long_axe_c_alt.add_modifier(IModBit.RUSTY)
itm_long_axe_c_alt.add_modifier(IModBit.CHIPPED)
itm_long_axe_c_alt.add_modifier(IModBit.HEAVY)
itm_long_axe_c_alt.set_weight(5.5)
itm_long_axe_c_alt.set_abundance(100)
itm_long_axe_c_alt.set_difficulty(10)
itm_long_axe_c_alt.set_hit_points(55296)
itm_long_axe_c_alt.set_speed_rating(85)
itm_long_axe_c_alt.set_weapon_length(127)
itm_long_axe_c_alt.set_thrust_damage(0, 1)
itm_long_axe_c_alt.set_swing_damage(54, 0)


itm_bardiche = Item("itm_bardiche", "Bardiche")
itm_bardiche.add_mesh(ItemMesh("two_handed_battle_axe_d"))
itm_bardiche.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_bardiche.add_flag(ItemFlag.IS_MERCHANDISE)
itm_bardiche.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_bardiche.add_flag(ItemFlag.IS_TWO_HANDED)
itm_bardiche.add_flag(ItemFlag.IS_PRIMARY)
itm_bardiche.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_bardiche.add_flag(ItemFlag.IS_UNBALANCED)
itm_bardiche.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_bardiche.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_bardiche.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_bardiche.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_bardiche.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_bardiche.add_capability(ItemCapability.CARRY_AXE_BACK)
itm_bardiche.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_bardiche.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_bardiche.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_bardiche.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_bardiche.add_capability(ItemCapability.FORCE_64_BITS)
itm_bardiche.set_price(291)
itm_bardiche.add_modifier(IModBit.RUSTY)
itm_bardiche.add_modifier(IModBit.CHIPPED)
itm_bardiche.add_modifier(IModBit.HEAVY)
itm_bardiche.set_weight(4.75)
itm_bardiche.set_abundance(100)
itm_bardiche.set_difficulty(10)
itm_bardiche.set_hit_points(48128)
itm_bardiche.set_speed_rating(91)
itm_bardiche.set_weapon_length(102)
itm_bardiche.set_thrust_damage(0, 1)
itm_bardiche.set_swing_damage(47, 0)


itm_great_bardiche = Item("itm_great_bardiche", "Great_Bardiche")
itm_great_bardiche.add_mesh(ItemMesh("two_handed_battle_axe_f"))
itm_great_bardiche.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_great_bardiche.add_flag(ItemFlag.IS_MERCHANDISE)
itm_great_bardiche.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_great_bardiche.add_flag(ItemFlag.IS_TWO_HANDED)
itm_great_bardiche.add_flag(ItemFlag.IS_PRIMARY)
itm_great_bardiche.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_great_bardiche.add_flag(ItemFlag.IS_UNBALANCED)
itm_great_bardiche.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_great_bardiche.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_great_bardiche.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_great_bardiche.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_great_bardiche.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_great_bardiche.add_capability(ItemCapability.CARRY_AXE_BACK)
itm_great_bardiche.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_great_bardiche.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_great_bardiche.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_great_bardiche.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_great_bardiche.add_capability(ItemCapability.FORCE_64_BITS)
itm_great_bardiche.set_price(617)
itm_great_bardiche.add_modifier(IModBit.RUSTY)
itm_great_bardiche.add_modifier(IModBit.CHIPPED)
itm_great_bardiche.add_modifier(IModBit.HEAVY)
itm_great_bardiche.set_weight(5.0)
itm_great_bardiche.set_abundance(100)
itm_great_bardiche.set_difficulty(10)
itm_great_bardiche.set_hit_points(51200)
itm_great_bardiche.set_speed_rating(89)
itm_great_bardiche.set_weapon_length(116)
itm_great_bardiche.set_thrust_damage(0, 1)
itm_great_bardiche.set_swing_damage(50, 0)


itm_long_bardiche = Item("itm_long_bardiche", "Long_Bardiche")
itm_long_bardiche.add_mesh(ItemMesh("two_handed_battle_long_axe_b"))
itm_long_bardiche.add_flag(ItemType.POLEARM)
itm_long_bardiche.add_flag(ItemFlag.IS_MERCHANDISE)
itm_long_bardiche.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_long_bardiche.add_flag(ItemFlag.IS_TWO_HANDED)
itm_long_bardiche.add_flag(ItemFlag.IS_PRIMARY)
itm_long_bardiche.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_long_bardiche.add_flag(ItemFlag.IS_UNBALANCED)
itm_long_bardiche.add_capability(ItemCapability.POLEARM_THRUST)
itm_long_bardiche.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_long_bardiche.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_long_bardiche.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_long_bardiche.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_long_bardiche.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_long_bardiche.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_long_bardiche.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_long_bardiche.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_long_bardiche.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_long_bardiche.set_price(390)
itm_long_bardiche.add_modifier(IModBit.RUSTY)
itm_long_bardiche.add_modifier(IModBit.CHIPPED)
itm_long_bardiche.add_modifier(IModBit.HEAVY)
itm_long_bardiche.set_weight(4.75)
itm_long_bardiche.set_abundance(100)
itm_long_bardiche.set_difficulty(11)
itm_long_bardiche.set_hit_points(49152)
itm_long_bardiche.set_speed_rating(89)
itm_long_bardiche.set_weapon_length(140)
itm_long_bardiche.set_thrust_damage(17, 1)
itm_long_bardiche.set_swing_damage(48, 0)


itm_great_long_bardiche = Item("itm_great_long_bardiche", "Great_Long_Bardiche")
itm_great_long_bardiche.add_mesh(ItemMesh("two_handed_battle_long_axe_c"))
itm_great_long_bardiche.add_flag(ItemType.POLEARM)
itm_great_long_bardiche.add_flag(ItemFlag.IS_MERCHANDISE)
itm_great_long_bardiche.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_great_long_bardiche.add_flag(ItemFlag.IS_TWO_HANDED)
itm_great_long_bardiche.add_flag(ItemFlag.IS_PRIMARY)
itm_great_long_bardiche.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_great_long_bardiche.add_flag(ItemFlag.IS_UNBALANCED)
itm_great_long_bardiche.add_capability(ItemCapability.POLEARM_THRUST)
itm_great_long_bardiche.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_great_long_bardiche.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_great_long_bardiche.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_great_long_bardiche.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_great_long_bardiche.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_great_long_bardiche.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_great_long_bardiche.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_great_long_bardiche.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_great_long_bardiche.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_great_long_bardiche.set_price(660)
itm_great_long_bardiche.add_modifier(IModBit.RUSTY)
itm_great_long_bardiche.add_modifier(IModBit.CHIPPED)
itm_great_long_bardiche.add_modifier(IModBit.HEAVY)
itm_great_long_bardiche.set_weight(5.0)
itm_great_long_bardiche.set_abundance(100)
itm_great_long_bardiche.set_difficulty(12)
itm_great_long_bardiche.set_hit_points(51200)
itm_great_long_bardiche.set_speed_rating(88)
itm_great_long_bardiche.set_weapon_length(155)
itm_great_long_bardiche.set_thrust_damage(17, 1)
itm_great_long_bardiche.set_swing_damage(50, 0)


itm_hafted_blade_b = Item("itm_hafted_blade_b", "Hafted_Blade")
itm_hafted_blade_b.add_mesh(ItemMesh("khergit_pike_b"))
itm_hafted_blade_b.add_flag(ItemType.POLEARM)
itm_hafted_blade_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_hafted_blade_b.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_hafted_blade_b.add_flag(ItemFlag.IS_TWO_HANDED)
itm_hafted_blade_b.add_flag(ItemFlag.IS_PRIMARY)
itm_hafted_blade_b.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
itm_hafted_blade_b.add_capability(ItemCapability.POLEARM_THRUST)
itm_hafted_blade_b.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_hafted_blade_b.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_hafted_blade_b.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_hafted_blade_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_hafted_blade_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_hafted_blade_b.add_capability(ItemCapability.CARRY_SPEAR)
itm_hafted_blade_b.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_hafted_blade_b.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_hafted_blade_b.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_hafted_blade_b.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_hafted_blade_b.add_capability(ItemCapability.HORSEBACK_POLEARM_SLASH)
itm_hafted_blade_b.set_price(185)
itm_hafted_blade_b.add_modifier(IModBit.CRACKED)
itm_hafted_blade_b.add_modifier(IModBit.BENT)
itm_hafted_blade_b.add_modifier(IModBit.BALANCED)
itm_hafted_blade_b.set_weight(2.75)
itm_hafted_blade_b.set_abundance(100)
itm_hafted_blade_b.set_hit_points(37888)
itm_hafted_blade_b.set_speed_rating(95)
itm_hafted_blade_b.set_weapon_length(135)
itm_hafted_blade_b.set_thrust_damage(20, 1)
itm_hafted_blade_b.set_swing_damage(37, 0)


itm_hafted_blade_a = Item("itm_hafted_blade_a", "Hafted_Blade")
itm_hafted_blade_a.add_mesh(ItemMesh("khergit_pike_a"))
itm_hafted_blade_a.add_flag(ItemType.POLEARM)
itm_hafted_blade_a.add_flag(ItemFlag.IS_MERCHANDISE)
itm_hafted_blade_a.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_hafted_blade_a.add_flag(ItemFlag.IS_TWO_HANDED)
itm_hafted_blade_a.add_flag(ItemFlag.IS_PRIMARY)
itm_hafted_blade_a.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
itm_hafted_blade_a.add_capability(ItemCapability.POLEARM_THRUST)
itm_hafted_blade_a.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_hafted_blade_a.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_hafted_blade_a.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_hafted_blade_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_hafted_blade_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_hafted_blade_a.add_capability(ItemCapability.CARRY_SPEAR)
itm_hafted_blade_a.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_hafted_blade_a.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_hafted_blade_a.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_hafted_blade_a.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_hafted_blade_a.add_capability(ItemCapability.HORSEBACK_POLEARM_SLASH)
itm_hafted_blade_a.set_price(350)
itm_hafted_blade_a.add_modifier(IModBit.CRACKED)
itm_hafted_blade_a.add_modifier(IModBit.BENT)
itm_hafted_blade_a.add_modifier(IModBit.BALANCED)
itm_hafted_blade_a.set_weight(3.25)
itm_hafted_blade_a.set_abundance(100)
itm_hafted_blade_a.set_hit_points(39936)
itm_hafted_blade_a.set_speed_rating(93)
itm_hafted_blade_a.set_weapon_length(153)
itm_hafted_blade_a.set_thrust_damage(19, 1)
itm_hafted_blade_a.set_swing_damage(39, 0)


itm_shortened_military_scythe = Item("itm_shortened_military_scythe", "Shortened_Military_Scythe")
itm_shortened_military_scythe.add_mesh(ItemMesh("two_handed_battle_scythe_a"))
itm_shortened_military_scythe.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_shortened_military_scythe.add_flag(ItemFlag.IS_MERCHANDISE)
itm_shortened_military_scythe.add_flag(ItemFlag.IS_TWO_HANDED)
itm_shortened_military_scythe.add_flag(ItemFlag.IS_PRIMARY)
itm_shortened_military_scythe.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_shortened_military_scythe.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_shortened_military_scythe.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_shortened_military_scythe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_shortened_military_scythe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_shortened_military_scythe.add_capability(ItemCapability.CARRY_SWORD_BACK)
itm_shortened_military_scythe.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_shortened_military_scythe.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_shortened_military_scythe.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_shortened_military_scythe.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_shortened_military_scythe.add_capability(ItemCapability.FORCE_64_BITS)
itm_shortened_military_scythe.set_price(264)
itm_shortened_military_scythe.add_modifier(IModBit.RUSTY)
itm_shortened_military_scythe.add_modifier(IModBit.CHIPPED)
itm_shortened_military_scythe.add_modifier(IModBit.BALANCED)
itm_shortened_military_scythe.add_modifier(IModBit.TEMPERED)
itm_shortened_military_scythe.add_modifier(IModBit.MASTERWORK)
itm_shortened_military_scythe.set_weight(3.0)
itm_shortened_military_scythe.set_abundance(100)
itm_shortened_military_scythe.set_difficulty(10)
itm_shortened_military_scythe.set_hit_points(46080)
itm_shortened_military_scythe.set_speed_rating(90)
itm_shortened_military_scythe.set_weapon_length(112)
itm_shortened_military_scythe.set_thrust_damage(0, 1)
itm_shortened_military_scythe.set_swing_damage(45, 0)


itm_sword_medieval_a = Item("itm_sword_medieval_a", "Sword")
itm_sword_medieval_a.add_mesh(ItemMesh("sword_medieval_a"))
itm_sword_medieval_a.add_mesh(ItemMesh("sword_medieval_a_scabbard", ItemMesh.ixmesh_carry))
itm_sword_medieval_a.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_sword_medieval_a.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sword_medieval_a.add_flag(ItemFlag.IS_PRIMARY)
itm_sword_medieval_a.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_sword_medieval_a.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_sword_medieval_a.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_sword_medieval_a.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_sword_medieval_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sword_medieval_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sword_medieval_a.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_sword_medieval_a.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_sword_medieval_a.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_sword_medieval_a.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_sword_medieval_a.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_sword_medieval_a.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_sword_medieval_a.add_capability(ItemCapability.FORCE_64_BITS)
itm_sword_medieval_a.set_price(163)
itm_sword_medieval_a.add_modifier(IModBit.RUSTY)
itm_sword_medieval_a.add_modifier(IModBit.CHIPPED)
itm_sword_medieval_a.add_modifier(IModBit.BALANCED)
itm_sword_medieval_a.add_modifier(IModBit.TEMPERED)
itm_sword_medieval_a.add_modifier(IModBit.MASTERWORK)
itm_sword_medieval_a.set_weight(1.5)
itm_sword_medieval_a.set_abundance(100)
itm_sword_medieval_a.set_hit_points(27648)
itm_sword_medieval_a.set_speed_rating(99)
itm_sword_medieval_a.set_weapon_length(95)
itm_sword_medieval_a.set_thrust_damage(22, 1)
itm_sword_medieval_a.set_swing_damage(27, 0)


itm_sword_medieval_b = Item("itm_sword_medieval_b", "Sword")
itm_sword_medieval_b.add_mesh(ItemMesh("sword_medieval_b"))
itm_sword_medieval_b.add_mesh(ItemMesh("sword_medieval_b_scabbard", ItemMesh.ixmesh_carry))
meshx = ItemMesh("sword_rusty_a")
meshx.add_modifier(IModBit.RUSTY)
itm_sword_medieval_b.add_mesh(meshx)
meshx = ItemMesh("sword_rusty_a_scabbard", ItemMesh.ixmesh_carry)
meshx.add_modifier(IModBit.RUSTY)
itm_sword_medieval_b.add_mesh(meshx)
itm_sword_medieval_b.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_sword_medieval_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sword_medieval_b.add_flag(ItemFlag.IS_PRIMARY)
itm_sword_medieval_b.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_sword_medieval_b.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_sword_medieval_b.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_sword_medieval_b.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_sword_medieval_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sword_medieval_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sword_medieval_b.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_sword_medieval_b.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_sword_medieval_b.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_sword_medieval_b.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_sword_medieval_b.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_sword_medieval_b.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_sword_medieval_b.add_capability(ItemCapability.FORCE_64_BITS)
itm_sword_medieval_b.set_price(243)
itm_sword_medieval_b.add_modifier(IModBit.RUSTY)
itm_sword_medieval_b.add_modifier(IModBit.CHIPPED)
itm_sword_medieval_b.add_modifier(IModBit.BALANCED)
itm_sword_medieval_b.add_modifier(IModBit.TEMPERED)
itm_sword_medieval_b.add_modifier(IModBit.MASTERWORK)
itm_sword_medieval_b.set_weight(1.5)
itm_sword_medieval_b.set_abundance(100)
itm_sword_medieval_b.set_hit_points(28672)
itm_sword_medieval_b.set_speed_rating(99)
itm_sword_medieval_b.set_weapon_length(95)
itm_sword_medieval_b.set_thrust_damage(23, 1)
itm_sword_medieval_b.set_swing_damage(28, 0)


itm_sword_medieval_b_small = Item("itm_sword_medieval_b_small", "Short_Sword")
itm_sword_medieval_b_small.add_mesh(ItemMesh("sword_medieval_b_small"))
itm_sword_medieval_b_small.add_mesh(ItemMesh("sword_medieval_b_small_scabbard", ItemMesh.ixmesh_carry))
itm_sword_medieval_b_small.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_sword_medieval_b_small.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sword_medieval_b_small.add_flag(ItemFlag.IS_PRIMARY)
itm_sword_medieval_b_small.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_sword_medieval_b_small.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_sword_medieval_b_small.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_sword_medieval_b_small.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_sword_medieval_b_small.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sword_medieval_b_small.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sword_medieval_b_small.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_sword_medieval_b_small.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_sword_medieval_b_small.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_sword_medieval_b_small.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_sword_medieval_b_small.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_sword_medieval_b_small.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_sword_medieval_b_small.add_capability(ItemCapability.FORCE_64_BITS)
itm_sword_medieval_b_small.set_price(152)
itm_sword_medieval_b_small.add_modifier(IModBit.RUSTY)
itm_sword_medieval_b_small.add_modifier(IModBit.CHIPPED)
itm_sword_medieval_b_small.add_modifier(IModBit.BALANCED)
itm_sword_medieval_b_small.add_modifier(IModBit.TEMPERED)
itm_sword_medieval_b_small.add_modifier(IModBit.MASTERWORK)
itm_sword_medieval_b_small.set_weight(1.0)
itm_sword_medieval_b_small.set_abundance(100)
itm_sword_medieval_b_small.set_hit_points(26624)
itm_sword_medieval_b_small.set_speed_rating(102)
itm_sword_medieval_b_small.set_weapon_length(85)
itm_sword_medieval_b_small.set_thrust_damage(24, 1)
itm_sword_medieval_b_small.set_swing_damage(26, 0)


itm_sword_medieval_c = Item("itm_sword_medieval_c", "Arming_Sword")
itm_sword_medieval_c.add_mesh(ItemMesh("sword_medieval_c"))
itm_sword_medieval_c.add_mesh(ItemMesh("sword_medieval_c_scabbard", ItemMesh.ixmesh_carry))
itm_sword_medieval_c.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_sword_medieval_c.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sword_medieval_c.add_flag(ItemFlag.IS_PRIMARY)
itm_sword_medieval_c.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_sword_medieval_c.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_sword_medieval_c.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_sword_medieval_c.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_sword_medieval_c.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sword_medieval_c.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sword_medieval_c.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_sword_medieval_c.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_sword_medieval_c.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_sword_medieval_c.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_sword_medieval_c.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_sword_medieval_c.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_sword_medieval_c.add_capability(ItemCapability.FORCE_64_BITS)
itm_sword_medieval_c.set_price(410)
itm_sword_medieval_c.add_modifier(IModBit.RUSTY)
itm_sword_medieval_c.add_modifier(IModBit.CHIPPED)
itm_sword_medieval_c.add_modifier(IModBit.BALANCED)
itm_sword_medieval_c.add_modifier(IModBit.TEMPERED)
itm_sword_medieval_c.add_modifier(IModBit.MASTERWORK)
itm_sword_medieval_c.set_weight(1.5)
itm_sword_medieval_c.set_abundance(100)
itm_sword_medieval_c.set_hit_points(29696)
itm_sword_medieval_c.set_speed_rating(99)
itm_sword_medieval_c.set_weapon_length(95)
itm_sword_medieval_c.set_thrust_damage(24, 1)
itm_sword_medieval_c.set_swing_damage(29, 0)


itm_sword_medieval_c_small = Item("itm_sword_medieval_c_small", "Short_Arming_Sword")
itm_sword_medieval_c_small.add_mesh(ItemMesh("sword_medieval_c_small"))
itm_sword_medieval_c_small.add_mesh(ItemMesh("sword_medieval_c_small_scabbard", ItemMesh.ixmesh_carry))
itm_sword_medieval_c_small.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_sword_medieval_c_small.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sword_medieval_c_small.add_flag(ItemFlag.IS_PRIMARY)
itm_sword_medieval_c_small.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_sword_medieval_c_small.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_sword_medieval_c_small.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_sword_medieval_c_small.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_sword_medieval_c_small.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sword_medieval_c_small.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sword_medieval_c_small.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_sword_medieval_c_small.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_sword_medieval_c_small.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_sword_medieval_c_small.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_sword_medieval_c_small.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_sword_medieval_c_small.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_sword_medieval_c_small.add_capability(ItemCapability.FORCE_64_BITS)
itm_sword_medieval_c_small.set_price(243)
itm_sword_medieval_c_small.add_modifier(IModBit.RUSTY)
itm_sword_medieval_c_small.add_modifier(IModBit.CHIPPED)
itm_sword_medieval_c_small.add_modifier(IModBit.BALANCED)
itm_sword_medieval_c_small.add_modifier(IModBit.TEMPERED)
itm_sword_medieval_c_small.add_modifier(IModBit.MASTERWORK)
itm_sword_medieval_c_small.set_weight(1.0)
itm_sword_medieval_c_small.set_abundance(100)
itm_sword_medieval_c_small.set_hit_points(26624)
itm_sword_medieval_c_small.set_speed_rating(103)
itm_sword_medieval_c_small.set_weapon_length(86)
itm_sword_medieval_c_small.set_thrust_damage(24, 1)
itm_sword_medieval_c_small.set_swing_damage(26, 0)


itm_sword_medieval_c_long = Item("itm_sword_medieval_c_long", "Arming_Sword")
itm_sword_medieval_c_long.add_mesh(ItemMesh("sword_medieval_c_long"))
itm_sword_medieval_c_long.add_mesh(ItemMesh("sword_medieval_c_long_scabbard", ItemMesh.ixmesh_carry))
itm_sword_medieval_c_long.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_sword_medieval_c_long.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sword_medieval_c_long.add_flag(ItemFlag.IS_PRIMARY)
itm_sword_medieval_c_long.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_sword_medieval_c_long.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_sword_medieval_c_long.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_sword_medieval_c_long.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_sword_medieval_c_long.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sword_medieval_c_long.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sword_medieval_c_long.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_sword_medieval_c_long.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_sword_medieval_c_long.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_sword_medieval_c_long.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_sword_medieval_c_long.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_sword_medieval_c_long.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_sword_medieval_c_long.add_capability(ItemCapability.FORCE_64_BITS)
itm_sword_medieval_c_long.set_price(480)
itm_sword_medieval_c_long.add_modifier(IModBit.RUSTY)
itm_sword_medieval_c_long.add_modifier(IModBit.CHIPPED)
itm_sword_medieval_c_long.add_modifier(IModBit.BALANCED)
itm_sword_medieval_c_long.add_modifier(IModBit.TEMPERED)
itm_sword_medieval_c_long.add_modifier(IModBit.MASTERWORK)
itm_sword_medieval_c_long.set_weight(1.5)
itm_sword_medieval_c_long.set_abundance(100)
itm_sword_medieval_c_long.set_hit_points(29696)
itm_sword_medieval_c_long.set_speed_rating(99)
itm_sword_medieval_c_long.set_weapon_length(100)
itm_sword_medieval_c_long.set_thrust_damage(28, 1)
itm_sword_medieval_c_long.set_swing_damage(29, 0)


itm_sword_medieval_d_long = Item("itm_sword_medieval_d_long", "Long_Arming_Sword")
itm_sword_medieval_d_long.add_mesh(ItemMesh("sword_medieval_d_long"))
itm_sword_medieval_d_long.add_mesh(ItemMesh("sword_medieval_d_long_scabbard", ItemMesh.ixmesh_carry))
itm_sword_medieval_d_long.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_sword_medieval_d_long.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sword_medieval_d_long.add_flag(ItemFlag.IS_PRIMARY)
itm_sword_medieval_d_long.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_sword_medieval_d_long.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_sword_medieval_d_long.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_sword_medieval_d_long.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_sword_medieval_d_long.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sword_medieval_d_long.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sword_medieval_d_long.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_sword_medieval_d_long.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_sword_medieval_d_long.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_sword_medieval_d_long.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_sword_medieval_d_long.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_sword_medieval_d_long.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_sword_medieval_d_long.add_capability(ItemCapability.FORCE_64_BITS)
itm_sword_medieval_d_long.set_price(550)
itm_sword_medieval_d_long.add_modifier(IModBit.RUSTY)
itm_sword_medieval_d_long.add_modifier(IModBit.CHIPPED)
itm_sword_medieval_d_long.add_modifier(IModBit.BALANCED)
itm_sword_medieval_d_long.add_modifier(IModBit.TEMPERED)
itm_sword_medieval_d_long.set_weight(1.75)
itm_sword_medieval_d_long.set_abundance(100)
itm_sword_medieval_d_long.set_hit_points(33792)
itm_sword_medieval_d_long.set_speed_rating(96)
itm_sword_medieval_d_long.set_weapon_length(105)
itm_sword_medieval_d_long.set_thrust_damage(28, 1)
itm_sword_medieval_d_long.set_swing_damage(33, 0)


itm_sword_viking_1 = Item("itm_sword_viking_1", "Nordic_Sword")
itm_sword_viking_1.add_mesh(ItemMesh("sword_viking_c"))
itm_sword_viking_1.add_mesh(ItemMesh("sword_viking_c_scabbard", ItemMesh.ixmesh_carry))
itm_sword_viking_1.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_sword_viking_1.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sword_viking_1.add_flag(ItemFlag.IS_PRIMARY)
itm_sword_viking_1.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_sword_viking_1.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_sword_viking_1.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_sword_viking_1.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_sword_viking_1.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sword_viking_1.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sword_viking_1.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_sword_viking_1.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_sword_viking_1.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_sword_viking_1.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_sword_viking_1.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_sword_viking_1.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_sword_viking_1.add_capability(ItemCapability.FORCE_64_BITS)
itm_sword_viking_1.set_price(147)
itm_sword_viking_1.add_modifier(IModBit.RUSTY)
itm_sword_viking_1.add_modifier(IModBit.CHIPPED)
itm_sword_viking_1.add_modifier(IModBit.BALANCED)
itm_sword_viking_1.add_modifier(IModBit.TEMPERED)
itm_sword_viking_1.add_modifier(IModBit.MASTERWORK)
itm_sword_viking_1.set_weight(1.5)
itm_sword_viking_1.set_abundance(100)
itm_sword_viking_1.set_hit_points(28672)
itm_sword_viking_1.set_speed_rating(99)
itm_sword_viking_1.set_weapon_length(94)
itm_sword_viking_1.set_thrust_damage(20, 1)
itm_sword_viking_1.set_swing_damage(28, 0)


itm_sword_viking_2 = Item("itm_sword_viking_2", "Nordic_Sword")
itm_sword_viking_2.add_mesh(ItemMesh("sword_viking_b"))
itm_sword_viking_2.add_mesh(ItemMesh("sword_viking_b_scabbard", ItemMesh.ixmesh_carry))
itm_sword_viking_2.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_sword_viking_2.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sword_viking_2.add_flag(ItemFlag.IS_PRIMARY)
itm_sword_viking_2.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_sword_viking_2.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_sword_viking_2.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_sword_viking_2.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_sword_viking_2.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sword_viking_2.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sword_viking_2.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_sword_viking_2.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_sword_viking_2.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_sword_viking_2.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_sword_viking_2.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_sword_viking_2.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_sword_viking_2.add_capability(ItemCapability.FORCE_64_BITS)
itm_sword_viking_2.set_price(276)
itm_sword_viking_2.add_modifier(IModBit.RUSTY)
itm_sword_viking_2.add_modifier(IModBit.CHIPPED)
itm_sword_viking_2.add_modifier(IModBit.BALANCED)
itm_sword_viking_2.add_modifier(IModBit.TEMPERED)
itm_sword_viking_2.add_modifier(IModBit.MASTERWORK)
itm_sword_viking_2.set_weight(1.5)
itm_sword_viking_2.set_abundance(100)
itm_sword_viking_2.set_hit_points(29696)
itm_sword_viking_2.set_speed_rating(99)
itm_sword_viking_2.set_weapon_length(95)
itm_sword_viking_2.set_thrust_damage(21, 1)
itm_sword_viking_2.set_swing_damage(29, 0)


itm_sword_viking_2_small = Item("itm_sword_viking_2_small", "Nordic_Short_Sword")
itm_sword_viking_2_small.add_mesh(ItemMesh("sword_viking_b_small"))
itm_sword_viking_2_small.add_mesh(ItemMesh("sword_viking_b_small_scabbard", ItemMesh.ixmesh_carry))
itm_sword_viking_2_small.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_sword_viking_2_small.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sword_viking_2_small.add_flag(ItemFlag.IS_PRIMARY)
itm_sword_viking_2_small.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_sword_viking_2_small.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_sword_viking_2_small.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_sword_viking_2_small.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_sword_viking_2_small.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sword_viking_2_small.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sword_viking_2_small.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_sword_viking_2_small.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_sword_viking_2_small.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_sword_viking_2_small.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_sword_viking_2_small.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_sword_viking_2_small.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_sword_viking_2_small.add_capability(ItemCapability.FORCE_64_BITS)
itm_sword_viking_2_small.set_price(162)
itm_sword_viking_2_small.add_modifier(IModBit.RUSTY)
itm_sword_viking_2_small.add_modifier(IModBit.CHIPPED)
itm_sword_viking_2_small.add_modifier(IModBit.BALANCED)
itm_sword_viking_2_small.add_modifier(IModBit.TEMPERED)
itm_sword_viking_2_small.add_modifier(IModBit.MASTERWORK)
itm_sword_viking_2_small.set_weight(1.25)
itm_sword_viking_2_small.set_abundance(100)
itm_sword_viking_2_small.set_hit_points(28672)
itm_sword_viking_2_small.set_speed_rating(103)
itm_sword_viking_2_small.set_weapon_length(85)
itm_sword_viking_2_small.set_thrust_damage(21, 1)
itm_sword_viking_2_small.set_swing_damage(28, 0)


itm_sword_viking_3 = Item("itm_sword_viking_3", "Nordic_War_Sword")
itm_sword_viking_3.add_mesh(ItemMesh("sword_viking_a"))
itm_sword_viking_3.add_mesh(ItemMesh("sword_viking_a_scabbard", ItemMesh.ixmesh_carry))
itm_sword_viking_3.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_sword_viking_3.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sword_viking_3.add_flag(ItemFlag.IS_PRIMARY)
itm_sword_viking_3.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_sword_viking_3.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_sword_viking_3.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_sword_viking_3.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_sword_viking_3.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sword_viking_3.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sword_viking_3.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_sword_viking_3.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_sword_viking_3.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_sword_viking_3.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_sword_viking_3.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_sword_viking_3.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_sword_viking_3.add_capability(ItemCapability.FORCE_64_BITS)
itm_sword_viking_3.set_price(394)
itm_sword_viking_3.add_modifier(IModBit.RUSTY)
itm_sword_viking_3.add_modifier(IModBit.CHIPPED)
itm_sword_viking_3.add_modifier(IModBit.BALANCED)
itm_sword_viking_3.add_modifier(IModBit.TEMPERED)
itm_sword_viking_3.add_modifier(IModBit.MASTERWORK)
itm_sword_viking_3.set_weight(1.5)
itm_sword_viking_3.set_abundance(100)
itm_sword_viking_3.set_hit_points(30720)
itm_sword_viking_3.set_speed_rating(99)
itm_sword_viking_3.set_weapon_length(95)
itm_sword_viking_3.set_thrust_damage(21, 1)
itm_sword_viking_3.set_swing_damage(30, 0)


itm_sword_viking_3_small = Item("itm_sword_viking_3_small", "Nordic_Short_War_Sword")
itm_sword_viking_3_small.add_mesh(ItemMesh("sword_viking_a_small"))
itm_sword_viking_3_small.add_mesh(ItemMesh("sword_viking_a_small_scabbard", ItemMesh.ixmesh_carry))
itm_sword_viking_3_small.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_sword_viking_3_small.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sword_viking_3_small.add_flag(ItemFlag.IS_PRIMARY)
itm_sword_viking_3_small.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_sword_viking_3_small.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_sword_viking_3_small.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_sword_viking_3_small.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_sword_viking_3_small.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sword_viking_3_small.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sword_viking_3_small.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_sword_viking_3_small.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_sword_viking_3_small.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_sword_viking_3_small.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_sword_viking_3_small.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_sword_viking_3_small.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_sword_viking_3_small.add_capability(ItemCapability.FORCE_64_BITS)
itm_sword_viking_3_small.set_price(280)
itm_sword_viking_3_small.add_modifier(IModBit.RUSTY)
itm_sword_viking_3_small.add_modifier(IModBit.CHIPPED)
itm_sword_viking_3_small.add_modifier(IModBit.BALANCED)
itm_sword_viking_3_small.add_modifier(IModBit.TEMPERED)
itm_sword_viking_3_small.add_modifier(IModBit.MASTERWORK)
itm_sword_viking_3_small.set_weight(1.25)
itm_sword_viking_3_small.set_abundance(100)
itm_sword_viking_3_small.set_hit_points(29696)
itm_sword_viking_3_small.set_speed_rating(103)
itm_sword_viking_3_small.set_weapon_length(86)
itm_sword_viking_3_small.set_thrust_damage(21, 1)
itm_sword_viking_3_small.set_swing_damage(29, 0)


itm_sword_khergit_1 = Item("itm_sword_khergit_1", "Nomad_Sabre")
itm_sword_khergit_1.add_mesh(ItemMesh("khergit_sword_b"))
itm_sword_khergit_1.add_mesh(ItemMesh("khergit_sword_b_scabbard", ItemMesh.ixmesh_carry))
itm_sword_khergit_1.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_sword_khergit_1.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sword_khergit_1.add_flag(ItemFlag.IS_PRIMARY)
itm_sword_khergit_1.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_sword_khergit_1.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_sword_khergit_1.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_sword_khergit_1.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sword_khergit_1.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sword_khergit_1.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_sword_khergit_1.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_sword_khergit_1.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_sword_khergit_1.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_sword_khergit_1.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_sword_khergit_1.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_sword_khergit_1.add_capability(ItemCapability.FORCE_64_BITS)
itm_sword_khergit_1.set_price(105)
itm_sword_khergit_1.add_modifier(IModBit.RUSTY)
itm_sword_khergit_1.add_modifier(IModBit.CHIPPED)
itm_sword_khergit_1.add_modifier(IModBit.BALANCED)
itm_sword_khergit_1.add_modifier(IModBit.TEMPERED)
itm_sword_khergit_1.add_modifier(IModBit.MASTERWORK)
itm_sword_khergit_1.set_weight(1.25)
itm_sword_khergit_1.set_abundance(100)
itm_sword_khergit_1.set_hit_points(29696)
itm_sword_khergit_1.set_speed_rating(100)
itm_sword_khergit_1.set_weapon_length(97)
itm_sword_khergit_1.set_swing_damage(29, 0)


itm_sword_khergit_2 = Item("itm_sword_khergit_2", "Sabre")
itm_sword_khergit_2.add_mesh(ItemMesh("khergit_sword_c"))
itm_sword_khergit_2.add_mesh(ItemMesh("khergit_sword_c_scabbard", ItemMesh.ixmesh_carry))
itm_sword_khergit_2.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_sword_khergit_2.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sword_khergit_2.add_flag(ItemFlag.IS_PRIMARY)
itm_sword_khergit_2.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_sword_khergit_2.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_sword_khergit_2.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_sword_khergit_2.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sword_khergit_2.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sword_khergit_2.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_sword_khergit_2.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_sword_khergit_2.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_sword_khergit_2.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_sword_khergit_2.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_sword_khergit_2.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_sword_khergit_2.add_capability(ItemCapability.FORCE_64_BITS)
itm_sword_khergit_2.set_price(191)
itm_sword_khergit_2.add_modifier(IModBit.RUSTY)
itm_sword_khergit_2.add_modifier(IModBit.CHIPPED)
itm_sword_khergit_2.add_modifier(IModBit.BALANCED)
itm_sword_khergit_2.add_modifier(IModBit.TEMPERED)
itm_sword_khergit_2.add_modifier(IModBit.MASTERWORK)
itm_sword_khergit_2.set_weight(1.5)
itm_sword_khergit_2.set_abundance(100)
itm_sword_khergit_2.set_hit_points(30720)
itm_sword_khergit_2.set_speed_rating(99)
itm_sword_khergit_2.set_weapon_length(97)
itm_sword_khergit_2.set_swing_damage(30, 0)


itm_sword_khergit_3 = Item("itm_sword_khergit_3", "Sabre")
itm_sword_khergit_3.add_mesh(ItemMesh("khergit_sword_a"))
itm_sword_khergit_3.add_mesh(ItemMesh("khergit_sword_a_scabbard", ItemMesh.ixmesh_carry))
itm_sword_khergit_3.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_sword_khergit_3.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sword_khergit_3.add_flag(ItemFlag.IS_PRIMARY)
itm_sword_khergit_3.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_sword_khergit_3.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_sword_khergit_3.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_sword_khergit_3.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sword_khergit_3.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sword_khergit_3.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_sword_khergit_3.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_sword_khergit_3.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_sword_khergit_3.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_sword_khergit_3.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_sword_khergit_3.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_sword_khergit_3.add_capability(ItemCapability.FORCE_64_BITS)
itm_sword_khergit_3.set_price(294)
itm_sword_khergit_3.add_modifier(IModBit.RUSTY)
itm_sword_khergit_3.add_modifier(IModBit.CHIPPED)
itm_sword_khergit_3.add_modifier(IModBit.BALANCED)
itm_sword_khergit_3.add_modifier(IModBit.TEMPERED)
itm_sword_khergit_3.add_modifier(IModBit.MASTERWORK)
itm_sword_khergit_3.set_weight(1.5)
itm_sword_khergit_3.set_abundance(100)
itm_sword_khergit_3.set_hit_points(31744)
itm_sword_khergit_3.set_speed_rating(99)
itm_sword_khergit_3.set_weapon_length(98)
itm_sword_khergit_3.set_swing_damage(31, 0)


itm_sword_khergit_4 = Item("itm_sword_khergit_4", "Heavy_Sabre")
itm_sword_khergit_4.add_mesh(ItemMesh("khergit_sword_d"))
itm_sword_khergit_4.add_mesh(ItemMesh("khergit_sword_d_scabbard", ItemMesh.ixmesh_carry))
itm_sword_khergit_4.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_sword_khergit_4.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sword_khergit_4.add_flag(ItemFlag.IS_PRIMARY)
itm_sword_khergit_4.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_sword_khergit_4.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_sword_khergit_4.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_sword_khergit_4.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sword_khergit_4.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sword_khergit_4.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_sword_khergit_4.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_sword_khergit_4.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_sword_khergit_4.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_sword_khergit_4.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_sword_khergit_4.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_sword_khergit_4.add_capability(ItemCapability.FORCE_64_BITS)
itm_sword_khergit_4.set_price(384)
itm_sword_khergit_4.add_modifier(IModBit.RUSTY)
itm_sword_khergit_4.add_modifier(IModBit.CHIPPED)
itm_sword_khergit_4.add_modifier(IModBit.BALANCED)
itm_sword_khergit_4.add_modifier(IModBit.TEMPERED)
itm_sword_khergit_4.add_modifier(IModBit.MASTERWORK)
itm_sword_khergit_4.set_weight(1.75)
itm_sword_khergit_4.set_abundance(100)
itm_sword_khergit_4.set_hit_points(33792)
itm_sword_khergit_4.set_speed_rating(98)
itm_sword_khergit_4.set_weapon_length(96)
itm_sword_khergit_4.set_swing_damage(33, 0)


itm_mace_1 = Item("itm_mace_1", "Spiked_Club")
itm_mace_1.add_mesh(ItemMesh("mace_d"))
itm_mace_1.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_mace_1.add_flag(ItemFlag.IS_MERCHANDISE)
itm_mace_1.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_mace_1.add_flag(ItemFlag.IS_PRIMARY)
itm_mace_1.add_flag(ItemFlag.CAN_KNOCK_DOWN)
itm_mace_1.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_mace_1.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_mace_1.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_mace_1.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_mace_1.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_mace_1.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
itm_mace_1.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_mace_1.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_mace_1.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_mace_1.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_mace_1.add_capability(ItemCapability.FORCE_64_BITS)
itm_mace_1.set_price(45)
itm_mace_1.add_modifier(IModBit.RUSTY)
itm_mace_1.add_modifier(IModBit.CHIPPED)
itm_mace_1.add_modifier(IModBit.HEAVY)
itm_mace_1.set_weight(1.5)
itm_mace_1.set_abundance(100)
itm_mace_1.set_hit_points(19456)
itm_mace_1.set_speed_rating(99)
itm_mace_1.set_weapon_length(70)
itm_mace_1.set_thrust_damage(0, 1)
itm_mace_1.set_swing_damage(19, 1)


itm_mace_2 = Item("itm_mace_2", "Knobbed_Mace")
itm_mace_2.add_mesh(ItemMesh("mace_a"))
itm_mace_2.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_mace_2.add_flag(ItemFlag.IS_MERCHANDISE)
itm_mace_2.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_mace_2.add_flag(ItemFlag.IS_PRIMARY)
itm_mace_2.add_flag(ItemFlag.CAN_KNOCK_DOWN)
itm_mace_2.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_mace_2.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_mace_2.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_mace_2.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_mace_2.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_mace_2.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
itm_mace_2.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_mace_2.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_mace_2.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_mace_2.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_mace_2.add_capability(ItemCapability.FORCE_64_BITS)
itm_mace_2.set_price(98)
itm_mace_2.add_modifier(IModBit.RUSTY)
itm_mace_2.add_modifier(IModBit.CHIPPED)
itm_mace_2.add_modifier(IModBit.HEAVY)
itm_mace_2.set_weight(2.5)
itm_mace_2.set_abundance(100)
itm_mace_2.set_hit_points(21504)
itm_mace_2.set_speed_rating(98)
itm_mace_2.set_weapon_length(70)
itm_mace_2.set_thrust_damage(0, 1)
itm_mace_2.set_swing_damage(21, 2)


itm_mace_3 = Item("itm_mace_3", "Spiked_Mace")
itm_mace_3.add_mesh(ItemMesh("mace_c"))
itm_mace_3.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_mace_3.add_flag(ItemFlag.IS_MERCHANDISE)
itm_mace_3.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_mace_3.add_flag(ItemFlag.IS_PRIMARY)
itm_mace_3.add_flag(ItemFlag.CAN_KNOCK_DOWN)
itm_mace_3.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_mace_3.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_mace_3.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_mace_3.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_mace_3.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_mace_3.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
itm_mace_3.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_mace_3.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_mace_3.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_mace_3.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_mace_3.add_capability(ItemCapability.FORCE_64_BITS)
itm_mace_3.set_price(152)
itm_mace_3.add_modifier(IModBit.RUSTY)
itm_mace_3.add_modifier(IModBit.CHIPPED)
itm_mace_3.add_modifier(IModBit.HEAVY)
itm_mace_3.set_weight(2.75)
itm_mace_3.set_abundance(100)
itm_mace_3.set_hit_points(23552)
itm_mace_3.set_speed_rating(98)
itm_mace_3.set_weapon_length(70)
itm_mace_3.set_thrust_damage(0, 1)
itm_mace_3.set_swing_damage(23, 2)


itm_mace_4 = Item("itm_mace_4", "Winged_Mace")
itm_mace_4.add_mesh(ItemMesh("mace_b"))
itm_mace_4.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_mace_4.add_flag(ItemFlag.IS_MERCHANDISE)
itm_mace_4.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_mace_4.add_flag(ItemFlag.IS_PRIMARY)
itm_mace_4.add_flag(ItemFlag.CAN_KNOCK_DOWN)
itm_mace_4.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_mace_4.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_mace_4.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_mace_4.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_mace_4.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_mace_4.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
itm_mace_4.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_mace_4.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_mace_4.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_mace_4.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_mace_4.add_capability(ItemCapability.FORCE_64_BITS)
itm_mace_4.set_price(212)
itm_mace_4.add_modifier(IModBit.RUSTY)
itm_mace_4.add_modifier(IModBit.CHIPPED)
itm_mace_4.add_modifier(IModBit.HEAVY)
itm_mace_4.set_weight(2.75)
itm_mace_4.set_abundance(100)
itm_mace_4.set_hit_points(24576)
itm_mace_4.set_speed_rating(98)
itm_mace_4.set_weapon_length(70)
itm_mace_4.set_thrust_damage(0, 1)
itm_mace_4.set_swing_damage(24, 2)


itm_club_with_spike_head = Item("itm_club_with_spike_head", "Spiked_Staff")
itm_club_with_spike_head.add_mesh(ItemMesh("mace_e"))
itm_club_with_spike_head.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_club_with_spike_head.add_flag(ItemFlag.IS_MERCHANDISE)
itm_club_with_spike_head.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_club_with_spike_head.add_flag(ItemFlag.IS_PRIMARY)
itm_club_with_spike_head.add_flag(ItemFlag.CAN_KNOCK_DOWN)
itm_club_with_spike_head.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_club_with_spike_head.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_club_with_spike_head.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_club_with_spike_head.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_club_with_spike_head.add_capability(ItemCapability.TWOHANDED_THRUST)
itm_club_with_spike_head.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_club_with_spike_head.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_club_with_spike_head.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_club_with_spike_head.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_club_with_spike_head.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_club_with_spike_head.add_capability(ItemCapability.CARRY_AXE_BACK)
itm_club_with_spike_head.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_club_with_spike_head.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_club_with_spike_head.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_club_with_spike_head.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_club_with_spike_head.add_capability(ItemCapability.FORCE_64_BITS)
itm_club_with_spike_head.set_price(200)
itm_club_with_spike_head.add_modifier(IModBit.RUSTY)
itm_club_with_spike_head.add_modifier(IModBit.CHIPPED)
itm_club_with_spike_head.add_modifier(IModBit.HEAVY)
itm_club_with_spike_head.set_weight(2.75)
itm_club_with_spike_head.set_abundance(100)
itm_club_with_spike_head.set_difficulty(9)
itm_club_with_spike_head.set_hit_points(24576)
itm_club_with_spike_head.set_speed_rating(95)
itm_club_with_spike_head.set_weapon_length(117)
itm_club_with_spike_head.set_thrust_damage(20, 1)
itm_club_with_spike_head.set_swing_damage(24, 2)


itm_long_spiked_club = Item("itm_long_spiked_club", "Long_Spiked_Club")
itm_long_spiked_club.add_mesh(ItemMesh("mace_long_c"))
itm_long_spiked_club.add_flag(ItemType.POLEARM)
itm_long_spiked_club.add_flag(ItemFlag.IS_MERCHANDISE)
itm_long_spiked_club.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_long_spiked_club.add_flag(ItemFlag.IS_PRIMARY)
itm_long_spiked_club.add_flag(ItemFlag.CAN_KNOCK_DOWN)
itm_long_spiked_club.add_capability(ItemCapability.POLEARM_THRUST)
itm_long_spiked_club.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_long_spiked_club.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_long_spiked_club.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_long_spiked_club.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_long_spiked_club.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_long_spiked_club.add_capability(ItemCapability.CARRY_AXE_BACK)
itm_long_spiked_club.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_long_spiked_club.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_long_spiked_club.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_long_spiked_club.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_long_spiked_club.set_price(264)
itm_long_spiked_club.add_modifier(IModBit.RUSTY)
itm_long_spiked_club.add_modifier(IModBit.CHIPPED)
itm_long_spiked_club.add_modifier(IModBit.HEAVY)
itm_long_spiked_club.set_weight(3.0)
itm_long_spiked_club.set_abundance(100)
itm_long_spiked_club.set_hit_points(23552)
itm_long_spiked_club.set_speed_rating(96)
itm_long_spiked_club.set_weapon_length(126)
itm_long_spiked_club.set_thrust_damage(20, 2)
itm_long_spiked_club.set_swing_damage(23, 1)


itm_long_hafted_knobbed_mace = Item("itm_long_hafted_knobbed_mace", "Long_Hafted_Knobbed_Mace")
itm_long_hafted_knobbed_mace.add_mesh(ItemMesh("mace_long_a"))
itm_long_hafted_knobbed_mace.add_flag(ItemType.POLEARM)
itm_long_hafted_knobbed_mace.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_long_hafted_knobbed_mace.add_flag(ItemFlag.IS_PRIMARY)
itm_long_hafted_knobbed_mace.add_flag(ItemFlag.CAN_KNOCK_DOWN)
itm_long_hafted_knobbed_mace.add_capability(ItemCapability.POLEARM_THRUST)
itm_long_hafted_knobbed_mace.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_long_hafted_knobbed_mace.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_long_hafted_knobbed_mace.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_long_hafted_knobbed_mace.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_long_hafted_knobbed_mace.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_long_hafted_knobbed_mace.add_capability(ItemCapability.CARRY_AXE_BACK)
itm_long_hafted_knobbed_mace.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_long_hafted_knobbed_mace.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_long_hafted_knobbed_mace.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_long_hafted_knobbed_mace.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_long_hafted_knobbed_mace.set_price(324)
itm_long_hafted_knobbed_mace.add_modifier(IModBit.RUSTY)
itm_long_hafted_knobbed_mace.add_modifier(IModBit.CHIPPED)
itm_long_hafted_knobbed_mace.add_modifier(IModBit.HEAVY)
itm_long_hafted_knobbed_mace.set_weight(3.0)
itm_long_hafted_knobbed_mace.set_abundance(100)
itm_long_hafted_knobbed_mace.set_hit_points(26624)
itm_long_hafted_knobbed_mace.set_speed_rating(95)
itm_long_hafted_knobbed_mace.set_weapon_length(133)
itm_long_hafted_knobbed_mace.set_thrust_damage(23, 2)
itm_long_hafted_knobbed_mace.set_swing_damage(26, 2)


itm_long_hafted_spiked_mace = Item("itm_long_hafted_spiked_mace", "Long_Hafted_Spiked_Mace")
itm_long_hafted_spiked_mace.add_mesh(ItemMesh("mace_long_b"))
itm_long_hafted_spiked_mace.add_flag(ItemType.POLEARM)
itm_long_hafted_spiked_mace.add_flag(ItemFlag.IS_MERCHANDISE)
itm_long_hafted_spiked_mace.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_long_hafted_spiked_mace.add_flag(ItemFlag.IS_PRIMARY)
itm_long_hafted_spiked_mace.add_flag(ItemFlag.CAN_KNOCK_DOWN)
itm_long_hafted_spiked_mace.add_capability(ItemCapability.POLEARM_THRUST)
itm_long_hafted_spiked_mace.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_long_hafted_spiked_mace.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_long_hafted_spiked_mace.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_long_hafted_spiked_mace.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_long_hafted_spiked_mace.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_long_hafted_spiked_mace.add_capability(ItemCapability.CARRY_AXE_BACK)
itm_long_hafted_spiked_mace.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_long_hafted_spiked_mace.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_long_hafted_spiked_mace.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_long_hafted_spiked_mace.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_long_hafted_spiked_mace.set_price(310)
itm_long_hafted_spiked_mace.add_modifier(IModBit.RUSTY)
itm_long_hafted_spiked_mace.add_modifier(IModBit.CHIPPED)
itm_long_hafted_spiked_mace.add_modifier(IModBit.HEAVY)
itm_long_hafted_spiked_mace.set_weight(3.0)
itm_long_hafted_spiked_mace.set_abundance(100)
itm_long_hafted_spiked_mace.set_hit_points(28672)
itm_long_hafted_spiked_mace.set_speed_rating(94)
itm_long_hafted_spiked_mace.set_weapon_length(140)
itm_long_hafted_spiked_mace.set_thrust_damage(26, 2)
itm_long_hafted_spiked_mace.set_swing_damage(28, 2)


itm_sarranid_two_handed_mace_1 = Item("itm_sarranid_two_handed_mace_1", "Iron_Mace")
itm_sarranid_two_handed_mace_1.add_mesh(ItemMesh("mace_long_d"))
itm_sarranid_two_handed_mace_1.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_sarranid_two_handed_mace_1.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sarranid_two_handed_mace_1.add_flag(ItemFlag.IS_TWO_HANDED)
itm_sarranid_two_handed_mace_1.add_flag(ItemFlag.IS_PRIMARY)
itm_sarranid_two_handed_mace_1.add_flag(ItemFlag.HAS_CRUSH_THROUGH)
itm_sarranid_two_handed_mace_1.add_flag(ItemFlag.IS_UNBALANCED)
itm_sarranid_two_handed_mace_1.add_flag(ItemFlag.CAN_KNOCK_DOWN)
itm_sarranid_two_handed_mace_1.add_capability(ItemCapability.TWOHANDED_THRUST)
itm_sarranid_two_handed_mace_1.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_sarranid_two_handed_mace_1.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_sarranid_two_handed_mace_1.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_sarranid_two_handed_mace_1.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sarranid_two_handed_mace_1.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sarranid_two_handed_mace_1.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_sarranid_two_handed_mace_1.add_capability(ItemCapability.CARRY_AXE_BACK)
itm_sarranid_two_handed_mace_1.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_sarranid_two_handed_mace_1.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_sarranid_two_handed_mace_1.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_sarranid_two_handed_mace_1.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_sarranid_two_handed_mace_1.add_capability(ItemCapability.FORCE_64_BITS)
itm_sarranid_two_handed_mace_1.set_price(470)
itm_sarranid_two_handed_mace_1.add_modifier(IModBit.RUSTY)
itm_sarranid_two_handed_mace_1.add_modifier(IModBit.CHIPPED)
itm_sarranid_two_handed_mace_1.add_modifier(IModBit.HEAVY)
itm_sarranid_two_handed_mace_1.set_weight(4.5)
itm_sarranid_two_handed_mace_1.set_abundance(100)
itm_sarranid_two_handed_mace_1.set_hit_points(35840)
itm_sarranid_two_handed_mace_1.set_speed_rating(90)
itm_sarranid_two_handed_mace_1.set_weapon_length(95)
itm_sarranid_two_handed_mace_1.set_thrust_damage(22, 2)
itm_sarranid_two_handed_mace_1.set_swing_damage(35, 2)


itm_sarranid_mace_1 = Item("itm_sarranid_mace_1", "Iron_Mace")
itm_sarranid_mace_1.add_mesh(ItemMesh("mace_small_d"))
itm_sarranid_mace_1.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_sarranid_mace_1.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sarranid_mace_1.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_sarranid_mace_1.add_flag(ItemFlag.IS_PRIMARY)
itm_sarranid_mace_1.add_flag(ItemFlag.CAN_KNOCK_DOWN)
itm_sarranid_mace_1.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_sarranid_mace_1.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_sarranid_mace_1.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_sarranid_mace_1.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sarranid_mace_1.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sarranid_mace_1.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
itm_sarranid_mace_1.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_sarranid_mace_1.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_sarranid_mace_1.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_sarranid_mace_1.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_sarranid_mace_1.add_capability(ItemCapability.FORCE_64_BITS)
itm_sarranid_mace_1.set_price(45)
itm_sarranid_mace_1.add_modifier(IModBit.RUSTY)
itm_sarranid_mace_1.add_modifier(IModBit.CHIPPED)
itm_sarranid_mace_1.add_modifier(IModBit.HEAVY)
itm_sarranid_mace_1.set_weight(2.0)
itm_sarranid_mace_1.set_abundance(100)
itm_sarranid_mace_1.set_hit_points(22528)
itm_sarranid_mace_1.set_speed_rating(99)
itm_sarranid_mace_1.set_weapon_length(73)
itm_sarranid_mace_1.set_thrust_damage(0, 1)
itm_sarranid_mace_1.set_swing_damage(22, 2)


itm_sarranid_axe_a = Item("itm_sarranid_axe_a", "Iron_Battle_Axe")
itm_sarranid_axe_a.add_mesh(ItemMesh("one_handed_battle_axe_g"))
itm_sarranid_axe_a.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_sarranid_axe_a.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sarranid_axe_a.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_sarranid_axe_a.add_flag(ItemFlag.IS_PRIMARY)
itm_sarranid_axe_a.add_flag(ItemFlag.IS_SECONDARY)
itm_sarranid_axe_a.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_sarranid_axe_a.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_sarranid_axe_a.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_sarranid_axe_a.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_sarranid_axe_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sarranid_axe_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sarranid_axe_a.add_capability(ItemCapability.CARRY_AXE_LEFT_HIP)
itm_sarranid_axe_a.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_sarranid_axe_a.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_sarranid_axe_a.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_sarranid_axe_a.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_sarranid_axe_a.add_capability(ItemCapability.FORCE_64_BITS)
itm_sarranid_axe_a.set_price(250)
itm_sarranid_axe_a.add_modifier(IModBit.RUSTY)
itm_sarranid_axe_a.add_modifier(IModBit.CHIPPED)
itm_sarranid_axe_a.add_modifier(IModBit.HEAVY)
itm_sarranid_axe_a.set_weight(1.5)
itm_sarranid_axe_a.set_abundance(100)
itm_sarranid_axe_a.set_difficulty(9)
itm_sarranid_axe_a.set_hit_points(35840)
itm_sarranid_axe_a.set_speed_rating(97)
itm_sarranid_axe_a.set_weapon_length(71)
itm_sarranid_axe_a.set_thrust_damage(0, 1)
itm_sarranid_axe_a.set_swing_damage(35, 0)


itm_sarranid_axe_b = Item("itm_sarranid_axe_b", "Iron_War_Axe")
itm_sarranid_axe_b.add_mesh(ItemMesh("one_handed_battle_axe_h"))
itm_sarranid_axe_b.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_sarranid_axe_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sarranid_axe_b.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_sarranid_axe_b.add_flag(ItemFlag.IS_PRIMARY)
itm_sarranid_axe_b.add_flag(ItemFlag.IS_SECONDARY)
itm_sarranid_axe_b.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_sarranid_axe_b.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_sarranid_axe_b.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_sarranid_axe_b.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_sarranid_axe_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sarranid_axe_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sarranid_axe_b.add_capability(ItemCapability.CARRY_AXE_LEFT_HIP)
itm_sarranid_axe_b.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_sarranid_axe_b.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_sarranid_axe_b.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_sarranid_axe_b.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_sarranid_axe_b.add_capability(ItemCapability.FORCE_64_BITS)
itm_sarranid_axe_b.set_price(360)
itm_sarranid_axe_b.add_modifier(IModBit.RUSTY)
itm_sarranid_axe_b.add_modifier(IModBit.CHIPPED)
itm_sarranid_axe_b.add_modifier(IModBit.HEAVY)
itm_sarranid_axe_b.set_weight(1.75)
itm_sarranid_axe_b.set_abundance(100)
itm_sarranid_axe_b.set_difficulty(9)
itm_sarranid_axe_b.set_hit_points(38912)
itm_sarranid_axe_b.set_speed_rating(97)
itm_sarranid_axe_b.set_weapon_length(71)
itm_sarranid_axe_b.set_thrust_damage(0, 1)
itm_sarranid_axe_b.set_swing_damage(38, 0)


itm_sarranid_two_handed_axe_a = Item("itm_sarranid_two_handed_axe_a", "Sarranid_Battle_Axe")
itm_sarranid_two_handed_axe_a.add_mesh(ItemMesh("two_handed_battle_axe_g"))
itm_sarranid_two_handed_axe_a.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_sarranid_two_handed_axe_a.add_flag(ItemFlag.IS_TWO_HANDED)
itm_sarranid_two_handed_axe_a.add_flag(ItemFlag.IS_PRIMARY)
itm_sarranid_two_handed_axe_a.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_sarranid_two_handed_axe_a.add_flag(ItemFlag.IS_UNBALANCED)
itm_sarranid_two_handed_axe_a.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_sarranid_two_handed_axe_a.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_sarranid_two_handed_axe_a.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_sarranid_two_handed_axe_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sarranid_two_handed_axe_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sarranid_two_handed_axe_a.add_capability(ItemCapability.CARRY_AXE_BACK)
itm_sarranid_two_handed_axe_a.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_sarranid_two_handed_axe_a.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_sarranid_two_handed_axe_a.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_sarranid_two_handed_axe_a.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_sarranid_two_handed_axe_a.add_capability(ItemCapability.FORCE_64_BITS)
itm_sarranid_two_handed_axe_a.set_price(350)
itm_sarranid_two_handed_axe_a.add_modifier(IModBit.RUSTY)
itm_sarranid_two_handed_axe_a.add_modifier(IModBit.CHIPPED)
itm_sarranid_two_handed_axe_a.add_modifier(IModBit.HEAVY)
itm_sarranid_two_handed_axe_a.set_weight(3.0)
itm_sarranid_two_handed_axe_a.set_abundance(100)
itm_sarranid_two_handed_axe_a.set_difficulty(10)
itm_sarranid_two_handed_axe_a.set_hit_points(50176)
itm_sarranid_two_handed_axe_a.set_speed_rating(89)
itm_sarranid_two_handed_axe_a.set_weapon_length(95)
itm_sarranid_two_handed_axe_a.set_thrust_damage(0, 1)
itm_sarranid_two_handed_axe_a.set_swing_damage(49, 0)


itm_sarranid_two_handed_axe_b = Item("itm_sarranid_two_handed_axe_b", "Sarranid_War_Axe")
itm_sarranid_two_handed_axe_b.add_mesh(ItemMesh("two_handed_battle_axe_h"))
itm_sarranid_two_handed_axe_b.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_sarranid_two_handed_axe_b.add_flag(ItemFlag.IS_TWO_HANDED)
itm_sarranid_two_handed_axe_b.add_flag(ItemFlag.IS_PRIMARY)
itm_sarranid_two_handed_axe_b.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_sarranid_two_handed_axe_b.add_flag(ItemFlag.IS_UNBALANCED)
itm_sarranid_two_handed_axe_b.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_sarranid_two_handed_axe_b.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_sarranid_two_handed_axe_b.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_sarranid_two_handed_axe_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_sarranid_two_handed_axe_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_sarranid_two_handed_axe_b.add_capability(ItemCapability.CARRY_AXE_BACK)
itm_sarranid_two_handed_axe_b.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_sarranid_two_handed_axe_b.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_sarranid_two_handed_axe_b.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_sarranid_two_handed_axe_b.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_sarranid_two_handed_axe_b.add_capability(ItemCapability.FORCE_64_BITS)
itm_sarranid_two_handed_axe_b.set_price(280)
itm_sarranid_two_handed_axe_b.add_modifier(IModBit.RUSTY)
itm_sarranid_two_handed_axe_b.add_modifier(IModBit.CHIPPED)
itm_sarranid_two_handed_axe_b.add_modifier(IModBit.HEAVY)
itm_sarranid_two_handed_axe_b.set_weight(2.5)
itm_sarranid_two_handed_axe_b.set_abundance(100)
itm_sarranid_two_handed_axe_b.set_difficulty(10)
itm_sarranid_two_handed_axe_b.set_hit_points(47104)
itm_sarranid_two_handed_axe_b.set_speed_rating(90)
itm_sarranid_two_handed_axe_b.set_weapon_length(90)
itm_sarranid_two_handed_axe_b.set_thrust_damage(0, 1)
itm_sarranid_two_handed_axe_b.set_swing_damage(46, 0)


itm_scythe = Item("itm_scythe", "Scythe")
itm_scythe.add_mesh(ItemMesh("scythe"))
itm_scythe.add_flag(ItemType.POLEARM)
itm_scythe.add_flag(ItemFlag.IS_MERCHANDISE)
itm_scythe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_scythe.add_flag(ItemFlag.IS_PRIMARY)
itm_scythe.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
itm_scythe.add_flag(ItemFlag.FITS_TO_HEAD)
itm_scythe.add_flag(ItemFlag.OFFSET_LANCE)
itm_scythe.add_capability(ItemCapability.POLEARM_THRUST)
itm_scythe.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_scythe.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_scythe.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_scythe.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_scythe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_scythe.add_capability(ItemCapability.CARRY_SPEAR)
itm_scythe.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_scythe.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_scythe.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_scythe.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_scythe.set_price(43)
itm_scythe.add_modifier(IModBit.CRACKED)
itm_scythe.add_modifier(IModBit.BENT)
itm_scythe.add_modifier(IModBit.BALANCED)
itm_scythe.set_weight(2.0)
itm_scythe.set_abundance(100)
itm_scythe.set_hit_points(30720)
itm_scythe.set_speed_rating(97)
itm_scythe.set_weapon_length(182)
itm_scythe.set_thrust_damage(14, 1)
itm_scythe.set_swing_damage(30, 0)


itm_pitch_fork = Item("itm_pitch_fork", "Pitch_Fork")
itm_pitch_fork.add_mesh(ItemMesh("pitch_fork"))
itm_pitch_fork.add_flag(ItemType.POLEARM)
itm_pitch_fork.add_flag(ItemFlag.IS_MERCHANDISE)
itm_pitch_fork.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_pitch_fork.add_flag(ItemFlag.IS_PRIMARY)
itm_pitch_fork.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
itm_pitch_fork.add_flag(ItemFlag.FITS_TO_HEAD)
itm_pitch_fork.add_flag(ItemFlag.OFFSET_LANCE)
itm_pitch_fork.add_capability(ItemCapability.POLEARM_THRUST)
itm_pitch_fork.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_pitch_fork.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_pitch_fork.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_pitch_fork.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_pitch_fork.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_pitch_fork.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_pitch_fork.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_pitch_fork.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_pitch_fork.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_pitch_fork.set_price(19)
itm_pitch_fork.add_modifier(IModBit.CRACKED)
itm_pitch_fork.add_modifier(IModBit.BENT)
itm_pitch_fork.add_modifier(IModBit.BALANCED)
itm_pitch_fork.set_weight(1.5)
itm_pitch_fork.set_abundance(100)
itm_pitch_fork.set_hit_points(16384)
itm_pitch_fork.set_speed_rating(87)
itm_pitch_fork.set_weapon_length(154)
itm_pitch_fork.set_thrust_damage(22, 1)
itm_pitch_fork.set_swing_damage(16, 2)


itm_military_fork = Item("itm_military_fork", "Military_Fork")
itm_military_fork.add_mesh(ItemMesh("military_fork"))
itm_military_fork.add_flag(ItemType.POLEARM)
itm_military_fork.add_flag(ItemFlag.IS_MERCHANDISE)
itm_military_fork.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_military_fork.add_flag(ItemFlag.IS_PRIMARY)
itm_military_fork.add_flag(ItemFlag.FITS_TO_HEAD)
itm_military_fork.add_flag(ItemFlag.OFFSET_LANCE)
itm_military_fork.add_capability(ItemCapability.POLEARM_THRUST)
itm_military_fork.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_military_fork.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_military_fork.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_military_fork.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_military_fork.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_military_fork.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_military_fork.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_military_fork.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_military_fork.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_military_fork.set_price(153)
itm_military_fork.add_modifier(IModBit.CRACKED)
itm_military_fork.add_modifier(IModBit.BENT)
itm_military_fork.add_modifier(IModBit.BALANCED)
itm_military_fork.set_weight(2.0)
itm_military_fork.set_abundance(100)
itm_military_fork.set_hit_points(15360)
itm_military_fork.set_speed_rating(95)
itm_military_fork.set_weapon_length(135)
itm_military_fork.set_thrust_damage(30, 1)
itm_military_fork.set_swing_damage(15, 2)


itm_battle_fork = Item("itm_battle_fork", "Battle_Fork")
itm_battle_fork.add_mesh(ItemMesh("battle_fork"))
itm_battle_fork.add_flag(ItemType.POLEARM)
itm_battle_fork.add_flag(ItemFlag.IS_MERCHANDISE)
itm_battle_fork.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_battle_fork.add_flag(ItemFlag.IS_PRIMARY)
itm_battle_fork.add_flag(ItemFlag.FITS_TO_HEAD)
itm_battle_fork.add_flag(ItemFlag.OFFSET_LANCE)
itm_battle_fork.add_capability(ItemCapability.POLEARM_THRUST)
itm_battle_fork.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_battle_fork.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_battle_fork.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_battle_fork.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_battle_fork.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_battle_fork.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_battle_fork.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_battle_fork.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_battle_fork.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_battle_fork.set_price(282)
itm_battle_fork.add_modifier(IModBit.CRACKED)
itm_battle_fork.add_modifier(IModBit.BENT)
itm_battle_fork.add_modifier(IModBit.BALANCED)
itm_battle_fork.set_weight(2.0)
itm_battle_fork.set_abundance(100)
itm_battle_fork.set_hit_points(15360)
itm_battle_fork.set_speed_rating(90)
itm_battle_fork.set_weapon_length(144)
itm_battle_fork.set_thrust_damage(35, 1)
itm_battle_fork.set_swing_damage(15, 2)


itm_boar_spear = Item("itm_boar_spear", "Boar_Spear")
itm_boar_spear.add_mesh(ItemMesh("spear"))
itm_boar_spear.add_flag(ItemType.POLEARM)
itm_boar_spear.add_flag(ItemFlag.IS_MERCHANDISE)
itm_boar_spear.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_boar_spear.add_flag(ItemFlag.IS_PRIMARY)
itm_boar_spear.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
itm_boar_spear.add_capability(ItemCapability.POLEARM_THRUST)
itm_boar_spear.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_boar_spear.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_boar_spear.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_boar_spear.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_boar_spear.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_boar_spear.add_capability(ItemCapability.CARRY_SPEAR)
itm_boar_spear.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_boar_spear.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_boar_spear.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_boar_spear.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_boar_spear.set_price(76)
itm_boar_spear.add_modifier(IModBit.CRACKED)
itm_boar_spear.add_modifier(IModBit.BENT)
itm_boar_spear.add_modifier(IModBit.BALANCED)
itm_boar_spear.set_weight(1.5)
itm_boar_spear.set_abundance(100)
itm_boar_spear.set_hit_points(26624)
itm_boar_spear.set_speed_rating(90)
itm_boar_spear.set_weapon_length(157)
itm_boar_spear.set_thrust_damage(23, 1)
itm_boar_spear.set_swing_damage(26, 0)


itm_jousting_lance = Item("itm_jousting_lance", "Jousting_Lance")
itm_jousting_lance.add_mesh(ItemMesh("joust_of_peace"))
itm_jousting_lance.add_flag(ItemType.POLEARM)
itm_jousting_lance.add_flag(ItemFlag.IS_MERCHANDISE)
itm_jousting_lance.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_jousting_lance.add_flag(ItemFlag.IS_PRIMARY)
itm_jousting_lance.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
itm_jousting_lance.add_flag(ItemFlag.COVERS_HEAD)
itm_jousting_lance.add_flag(ItemFlag.IS_COUCHABLE)
itm_jousting_lance.add_capability(ItemCapability.POLEARM_THRUST)
itm_jousting_lance.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_jousting_lance.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_jousting_lance.set_price(158)
itm_jousting_lance.add_modifier(IModBit.CRACKED)
itm_jousting_lance.add_modifier(IModBit.BENT)
itm_jousting_lance.add_modifier(IModBit.BALANCED)
itm_jousting_lance.set_weight(5.0)
itm_jousting_lance.set_abundance(100)
itm_jousting_lance.set_speed_rating(61)
itm_jousting_lance.set_weapon_length(240)
itm_jousting_lance.set_thrust_damage(17, 2)


itm_double_sided_lance = Item("itm_double_sided_lance", "Double_Sided_Lance")
itm_double_sided_lance.add_mesh(ItemMesh("lance_dblhead"))
itm_double_sided_lance.add_flag(ItemType.POLEARM)
itm_double_sided_lance.add_flag(ItemFlag.IS_MERCHANDISE)
itm_double_sided_lance.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_double_sided_lance.add_flag(ItemFlag.IS_PRIMARY)
itm_double_sided_lance.add_flag(ItemFlag.FITS_TO_HEAD)
itm_double_sided_lance.add_flag(ItemFlag.OFFSET_LANCE)
itm_double_sided_lance.add_flag(ItemFlag.COVERS_HEAD)
itm_double_sided_lance.add_flag(ItemFlag.IS_COUCHABLE)
itm_double_sided_lance.add_capability(ItemCapability.POLEARM_THRUST)
itm_double_sided_lance.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_double_sided_lance.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_double_sided_lance.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_double_sided_lance.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_double_sided_lance.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_double_sided_lance.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_double_sided_lance.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_double_sided_lance.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_double_sided_lance.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_double_sided_lance.set_price(261)
itm_double_sided_lance.add_modifier(IModBit.CRACKED)
itm_double_sided_lance.add_modifier(IModBit.BENT)
itm_double_sided_lance.add_modifier(IModBit.BALANCED)
itm_double_sided_lance.set_weight(4.0)
itm_double_sided_lance.set_abundance(100)
itm_double_sided_lance.set_hit_points(25600)
itm_double_sided_lance.set_speed_rating(95)
itm_double_sided_lance.set_weapon_length(128)
itm_double_sided_lance.set_thrust_damage(27, 1)
itm_double_sided_lance.set_swing_damage(25, 0)


itm_glaive = Item("itm_glaive", "Glaive")
itm_glaive.add_mesh(ItemMesh("glaive_b"))
itm_glaive.add_flag(ItemType.POLEARM)
itm_glaive.add_flag(ItemFlag.IS_MERCHANDISE)
itm_glaive.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_glaive.add_flag(ItemFlag.IS_TWO_HANDED)
itm_glaive.add_flag(ItemFlag.IS_PRIMARY)
itm_glaive.add_flag(ItemFlag.FITS_TO_HEAD)
itm_glaive.add_flag(ItemFlag.OFFSET_LANCE)
itm_glaive.add_capability(ItemCapability.POLEARM_THRUST)
itm_glaive.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_glaive.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_glaive.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_glaive.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_glaive.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_glaive.add_capability(ItemCapability.CARRY_SPEAR)
itm_glaive.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_glaive.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_glaive.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_glaive.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_glaive.set_price(352)
itm_glaive.add_modifier(IModBit.CRACKED)
itm_glaive.add_modifier(IModBit.BENT)
itm_glaive.add_modifier(IModBit.BALANCED)
itm_glaive.set_weight(4.5)
itm_glaive.set_abundance(100)
itm_glaive.set_hit_points(39936)
itm_glaive.set_speed_rating(90)
itm_glaive.set_weapon_length(157)
itm_glaive.set_thrust_damage(21, 1)
itm_glaive.set_swing_damage(39, 0)


itm_poleaxe = Item("itm_poleaxe", "Poleaxe")
itm_poleaxe.add_mesh(ItemMesh("pole_ax"))
itm_poleaxe.add_flag(ItemType.POLEARM)
itm_poleaxe.add_flag(ItemFlag.IS_MERCHANDISE)
itm_poleaxe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_poleaxe.add_flag(ItemFlag.IS_TWO_HANDED)
itm_poleaxe.add_flag(ItemFlag.IS_PRIMARY)
itm_poleaxe.add_flag(ItemFlag.FITS_TO_HEAD)
itm_poleaxe.add_flag(ItemFlag.OFFSET_LANCE)
itm_poleaxe.add_capability(ItemCapability.POLEARM_THRUST)
itm_poleaxe.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_poleaxe.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_poleaxe.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_poleaxe.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_poleaxe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_poleaxe.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_poleaxe.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_poleaxe.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_poleaxe.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_poleaxe.set_price(384)
itm_poleaxe.add_modifier(IModBit.CRACKED)
itm_poleaxe.add_modifier(IModBit.BENT)
itm_poleaxe.add_modifier(IModBit.BALANCED)
itm_poleaxe.set_weight(4.5)
itm_poleaxe.set_abundance(100)
itm_poleaxe.set_difficulty(13)
itm_poleaxe.set_hit_points(51200)
itm_poleaxe.set_speed_rating(77)
itm_poleaxe.set_weapon_length(180)
itm_poleaxe.set_thrust_damage(15, 2)
itm_poleaxe.set_swing_damage(50, 0)


itm_polehammer = Item("itm_polehammer", "Polehammer")
itm_polehammer.add_mesh(ItemMesh("pole_hammer"))
itm_polehammer.add_flag(ItemType.POLEARM)
itm_polehammer.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_polehammer.add_flag(ItemFlag.IS_TWO_HANDED)
itm_polehammer.add_flag(ItemFlag.IS_PRIMARY)
itm_polehammer.add_flag(ItemFlag.FITS_TO_HEAD)
itm_polehammer.add_flag(ItemFlag.OFFSET_LANCE)
itm_polehammer.add_capability(ItemCapability.POLEARM_THRUST)
itm_polehammer.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_polehammer.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_polehammer.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_polehammer.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_polehammer.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_polehammer.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_polehammer.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_polehammer.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_polehammer.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_polehammer.set_price(169)
itm_polehammer.add_modifier(IModBit.CRACKED)
itm_polehammer.add_modifier(IModBit.BENT)
itm_polehammer.add_modifier(IModBit.BALANCED)
itm_polehammer.set_weight(7.0)
itm_polehammer.set_abundance(100)
itm_polehammer.set_difficulty(18)
itm_polehammer.set_hit_points(51200)
itm_polehammer.set_speed_rating(50)
itm_polehammer.set_weapon_length(126)
itm_polehammer.set_thrust_damage(35, 2)
itm_polehammer.set_swing_damage(50, 2)


itm_staff = Item("itm_staff", "Staff")
itm_staff.add_mesh(ItemMesh("wooden_staff"))
itm_staff.add_flag(ItemType.POLEARM)
itm_staff.add_flag(ItemFlag.IS_MERCHANDISE)
itm_staff.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
itm_staff.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_staff.add_flag(ItemFlag.IS_PRIMARY)
itm_staff.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
itm_staff.add_flag(ItemFlag.FITS_TO_HEAD)
itm_staff.add_flag(ItemFlag.OFFSET_LANCE)
itm_staff.add_capability(ItemCapability.POLEARM_THRUST)
itm_staff.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_staff.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_staff.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_staff.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_staff.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_staff.add_capability(ItemCapability.CARRY_SWORD_BACK)
itm_staff.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_staff.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_staff.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_staff.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_staff.set_price(36)
itm_staff.add_modifier(IModBit.CRACKED)
itm_staff.add_modifier(IModBit.BENT)
itm_staff.add_modifier(IModBit.BALANCED)
itm_staff.set_weight(1.5)
itm_staff.set_abundance(100)
itm_staff.set_hit_points(18432)
itm_staff.set_speed_rating(100)
itm_staff.set_weapon_length(130)
itm_staff.set_thrust_damage(19, 2)
itm_staff.set_swing_damage(18, 2)


itm_quarter_staff = Item("itm_quarter_staff", "Quarter_Staff")
itm_quarter_staff.add_mesh(ItemMesh("quarter_staff"))
itm_quarter_staff.add_flag(ItemType.POLEARM)
itm_quarter_staff.add_flag(ItemFlag.IS_MERCHANDISE)
itm_quarter_staff.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
itm_quarter_staff.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_quarter_staff.add_flag(ItemFlag.IS_PRIMARY)
itm_quarter_staff.add_flag(ItemFlag.FITS_TO_HEAD)
itm_quarter_staff.add_flag(ItemFlag.OFFSET_LANCE)
itm_quarter_staff.add_capability(ItemCapability.POLEARM_THRUST)
itm_quarter_staff.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_quarter_staff.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_quarter_staff.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_quarter_staff.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_quarter_staff.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_quarter_staff.add_capability(ItemCapability.CARRY_SWORD_BACK)
itm_quarter_staff.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_quarter_staff.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_quarter_staff.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_quarter_staff.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_quarter_staff.set_price(60)
itm_quarter_staff.add_modifier(IModBit.CRACKED)
itm_quarter_staff.add_modifier(IModBit.BENT)
itm_quarter_staff.add_modifier(IModBit.BALANCED)
itm_quarter_staff.set_weight(2.0)
itm_quarter_staff.set_abundance(100)
itm_quarter_staff.set_hit_points(20480)
itm_quarter_staff.set_speed_rating(104)
itm_quarter_staff.set_weapon_length(140)
itm_quarter_staff.set_thrust_damage(20, 2)
itm_quarter_staff.set_swing_damage(20, 2)


itm_iron_staff = Item("itm_iron_staff", "Iron_Staff")
itm_iron_staff.add_mesh(ItemMesh("iron_staff"))
itm_iron_staff.add_flag(ItemType.POLEARM)
itm_iron_staff.add_flag(ItemFlag.IS_MERCHANDISE)
itm_iron_staff.add_flag(ItemFlag.IS_PRIMARY)
itm_iron_staff.add_flag(ItemFlag.FITS_TO_HEAD)
itm_iron_staff.add_flag(ItemFlag.OFFSET_LANCE)
itm_iron_staff.add_capability(ItemCapability.POLEARM_THRUST)
itm_iron_staff.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_iron_staff.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_iron_staff.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_iron_staff.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_iron_staff.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_iron_staff.add_capability(ItemCapability.CARRY_SWORD_BACK)
itm_iron_staff.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_iron_staff.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_iron_staff.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_iron_staff.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_iron_staff.set_price(202)
itm_iron_staff.add_modifier(IModBit.CRACKED)
itm_iron_staff.add_modifier(IModBit.BENT)
itm_iron_staff.add_modifier(IModBit.BALANCED)
itm_iron_staff.set_weight(2.0)
itm_iron_staff.set_abundance(100)
itm_iron_staff.set_hit_points(25600)
itm_iron_staff.set_speed_rating(97)
itm_iron_staff.set_weapon_length(140)
itm_iron_staff.set_thrust_damage(26, 2)
itm_iron_staff.set_swing_damage(25, 2)


itm_shortened_spear = Item("itm_shortened_spear", "Shortened_Spear")
itm_shortened_spear.add_mesh(ItemMesh("spear_g_1-9m"))
itm_shortened_spear.add_flag(ItemType.POLEARM)
itm_shortened_spear.add_flag(ItemFlag.IS_MERCHANDISE)
itm_shortened_spear.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_shortened_spear.add_flag(ItemFlag.IS_PRIMARY)
itm_shortened_spear.add_flag(ItemFlag.FITS_TO_HEAD)
itm_shortened_spear.add_flag(ItemFlag.OFFSET_LANCE)
itm_shortened_spear.add_capability(ItemCapability.POLEARM_THRUST)
itm_shortened_spear.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_shortened_spear.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_shortened_spear.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_shortened_spear.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_shortened_spear.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_shortened_spear.add_capability(ItemCapability.CARRY_SPEAR)
itm_shortened_spear.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_shortened_spear.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_shortened_spear.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_shortened_spear.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_shortened_spear.set_price(53)
itm_shortened_spear.add_modifier(IModBit.CRACKED)
itm_shortened_spear.add_modifier(IModBit.BENT)
itm_shortened_spear.add_modifier(IModBit.BALANCED)
itm_shortened_spear.set_weight(2.0)
itm_shortened_spear.set_abundance(100)
itm_shortened_spear.set_hit_points(19456)
itm_shortened_spear.set_speed_rating(102)
itm_shortened_spear.set_weapon_length(120)
itm_shortened_spear.set_thrust_damage(25, 1)
itm_shortened_spear.set_swing_damage(19, 2)


itm_spear = Item("itm_spear", "Spear")
itm_spear.add_mesh(ItemMesh("spear_h_2-15m"))
itm_spear.add_flag(ItemType.POLEARM)
itm_spear.add_flag(ItemFlag.IS_MERCHANDISE)
itm_spear.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_spear.add_flag(ItemFlag.IS_PRIMARY)
itm_spear.add_flag(ItemFlag.FITS_TO_HEAD)
itm_spear.add_flag(ItemFlag.OFFSET_LANCE)
itm_spear.add_capability(ItemCapability.POLEARM_THRUST)
itm_spear.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_spear.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_spear.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_spear.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_spear.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_spear.add_capability(ItemCapability.CARRY_SPEAR)
itm_spear.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_spear.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_spear.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_spear.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_spear.set_price(85)
itm_spear.add_modifier(IModBit.CRACKED)
itm_spear.add_modifier(IModBit.BENT)
itm_spear.add_modifier(IModBit.BALANCED)
itm_spear.set_weight(2.25)
itm_spear.set_abundance(100)
itm_spear.set_hit_points(20480)
itm_spear.set_speed_rating(98)
itm_spear.set_weapon_length(135)
itm_spear.set_thrust_damage(26, 1)
itm_spear.set_swing_damage(20, 2)


itm_bamboo_spear = Item("itm_bamboo_spear", "Bamboo_Spear")
itm_bamboo_spear.add_mesh(ItemMesh("arabian_spear_a_3m"))
itm_bamboo_spear.add_flag(ItemType.POLEARM)
itm_bamboo_spear.add_flag(ItemFlag.IS_MERCHANDISE)
itm_bamboo_spear.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_bamboo_spear.add_flag(ItemFlag.IS_PRIMARY)
itm_bamboo_spear.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
itm_bamboo_spear.add_flag(ItemFlag.FITS_TO_HEAD)
itm_bamboo_spear.add_flag(ItemFlag.OFFSET_LANCE)
itm_bamboo_spear.add_capability(ItemCapability.POLEARM_THRUST)
itm_bamboo_spear.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_bamboo_spear.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_bamboo_spear.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_bamboo_spear.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_bamboo_spear.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_bamboo_spear.add_capability(ItemCapability.CARRY_SPEAR)
itm_bamboo_spear.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_bamboo_spear.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_bamboo_spear.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_bamboo_spear.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_bamboo_spear.set_price(80)
itm_bamboo_spear.add_modifier(IModBit.CRACKED)
itm_bamboo_spear.add_modifier(IModBit.BENT)
itm_bamboo_spear.add_modifier(IModBit.BALANCED)
itm_bamboo_spear.set_weight(2.0)
itm_bamboo_spear.set_abundance(100)
itm_bamboo_spear.set_hit_points(15360)
itm_bamboo_spear.set_speed_rating(88)
itm_bamboo_spear.set_weapon_length(200)
itm_bamboo_spear.set_thrust_damage(20, 1)
itm_bamboo_spear.set_swing_damage(15, 2)


itm_war_spear = Item("itm_war_spear", "War_Spear")
itm_war_spear.add_mesh(ItemMesh("spear_i_2-3m"))
itm_war_spear.add_flag(ItemType.POLEARM)
itm_war_spear.add_flag(ItemFlag.IS_MERCHANDISE)
itm_war_spear.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_war_spear.add_flag(ItemFlag.IS_PRIMARY)
itm_war_spear.add_flag(ItemFlag.FITS_TO_HEAD)
itm_war_spear.add_flag(ItemFlag.OFFSET_LANCE)
itm_war_spear.add_capability(ItemCapability.POLEARM_THRUST)
itm_war_spear.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_war_spear.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_war_spear.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_war_spear.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_war_spear.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_war_spear.add_capability(ItemCapability.CARRY_SPEAR)
itm_war_spear.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_war_spear.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_war_spear.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_war_spear.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_war_spear.set_price(140)
itm_war_spear.add_modifier(IModBit.CRACKED)
itm_war_spear.add_modifier(IModBit.BENT)
itm_war_spear.add_modifier(IModBit.BALANCED)
itm_war_spear.set_weight(2.5)
itm_war_spear.set_abundance(100)
itm_war_spear.set_hit_points(20480)
itm_war_spear.set_speed_rating(95)
itm_war_spear.set_weapon_length(150)
itm_war_spear.set_thrust_damage(27, 1)
itm_war_spear.set_swing_damage(20, 2)


itm_military_scythe = Item("itm_military_scythe", "Military_Scythe")
itm_military_scythe.add_mesh(ItemMesh("spear_e_2-5m"))
meshx = ItemMesh("spear_c_2-5m")
meshx.add_modifier(IModBit.CRACKED)
meshx.add_modifier(IModBit.RUSTY)
meshx.add_modifier(IModBit.BENT)
meshx.add_modifier(IModBit.CHIPPED)
meshx.add_modifier(IModBit.TETTERED)
meshx.add_modifier(IModBit.RAGGED)
itm_military_scythe.add_mesh(meshx)
itm_military_scythe.add_flag(ItemType.POLEARM)
itm_military_scythe.add_flag(ItemFlag.IS_MERCHANDISE)
itm_military_scythe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_military_scythe.add_flag(ItemFlag.IS_PRIMARY)
itm_military_scythe.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
itm_military_scythe.add_flag(ItemFlag.FITS_TO_HEAD)
itm_military_scythe.add_flag(ItemFlag.OFFSET_LANCE)
itm_military_scythe.add_capability(ItemCapability.POLEARM_THRUST)
itm_military_scythe.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_military_scythe.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_military_scythe.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_military_scythe.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_military_scythe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_military_scythe.add_capability(ItemCapability.CARRY_SPEAR)
itm_military_scythe.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_military_scythe.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_military_scythe.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_military_scythe.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_military_scythe.set_price(155)
itm_military_scythe.add_modifier(IModBit.CRACKED)
itm_military_scythe.add_modifier(IModBit.BENT)
itm_military_scythe.add_modifier(IModBit.BALANCED)
itm_military_scythe.set_weight(2.5)
itm_military_scythe.set_abundance(100)
itm_military_scythe.set_hit_points(36864)
itm_military_scythe.set_speed_rating(90)
itm_military_scythe.set_weapon_length(155)
itm_military_scythe.set_thrust_damage(25, 1)
itm_military_scythe.set_swing_damage(36, 0)


itm_light_lance = Item("itm_light_lance", "Light_Lance")
itm_light_lance.add_mesh(ItemMesh("spear_b_2-75m"))
itm_light_lance.add_flag(ItemType.POLEARM)
itm_light_lance.add_flag(ItemFlag.IS_MERCHANDISE)
itm_light_lance.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_light_lance.add_flag(ItemFlag.IS_PRIMARY)
itm_light_lance.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
itm_light_lance.add_flag(ItemFlag.FITS_TO_HEAD)
itm_light_lance.add_flag(ItemFlag.OFFSET_LANCE)
itm_light_lance.add_flag(ItemFlag.COVERS_HEAD)
itm_light_lance.add_flag(ItemFlag.IS_COUCHABLE)
itm_light_lance.add_capability(ItemCapability.POLEARM_THRUST)
itm_light_lance.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_light_lance.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_light_lance.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_light_lance.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_light_lance.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_light_lance.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_light_lance.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_light_lance.set_price(180)
itm_light_lance.add_modifier(IModBit.CRACKED)
itm_light_lance.add_modifier(IModBit.BENT)
itm_light_lance.add_modifier(IModBit.BALANCED)
itm_light_lance.set_weight(2.5)
itm_light_lance.set_abundance(100)
itm_light_lance.set_hit_points(16384)
itm_light_lance.set_speed_rating(85)
itm_light_lance.set_weapon_length(175)
itm_light_lance.set_thrust_damage(27, 1)
itm_light_lance.set_swing_damage(16, 2)


itm_lance = Item("itm_lance", "Lance")
itm_lance.add_mesh(ItemMesh("spear_d_2-8m"))
itm_lance.add_flag(ItemType.POLEARM)
itm_lance.add_flag(ItemFlag.IS_MERCHANDISE)
itm_lance.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_lance.add_flag(ItemFlag.IS_PRIMARY)
itm_lance.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
itm_lance.add_flag(ItemFlag.FITS_TO_HEAD)
itm_lance.add_flag(ItemFlag.OFFSET_LANCE)
itm_lance.add_flag(ItemFlag.COVERS_HEAD)
itm_lance.add_flag(ItemFlag.IS_COUCHABLE)
itm_lance.add_capability(ItemCapability.POLEARM_THRUST)
itm_lance.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_lance.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_lance.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_lance.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_lance.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_lance.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_lance.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_lance.set_price(270)
itm_lance.add_modifier(IModBit.CRACKED)
itm_lance.add_modifier(IModBit.BENT)
itm_lance.add_modifier(IModBit.BALANCED)
itm_lance.set_weight(2.5)
itm_lance.set_abundance(100)
itm_lance.set_hit_points(16384)
itm_lance.set_speed_rating(80)
itm_lance.set_weapon_length(180)
itm_lance.set_thrust_damage(26, 1)
itm_lance.set_swing_damage(16, 2)


itm_heavy_lance = Item("itm_heavy_lance", "Heavy_Lance")
itm_heavy_lance.add_mesh(ItemMesh("spear_f_2-9m"))
itm_heavy_lance.add_flag(ItemType.POLEARM)
itm_heavy_lance.add_flag(ItemFlag.IS_MERCHANDISE)
itm_heavy_lance.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_heavy_lance.add_flag(ItemFlag.IS_PRIMARY)
itm_heavy_lance.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
itm_heavy_lance.add_flag(ItemFlag.FITS_TO_HEAD)
itm_heavy_lance.add_flag(ItemFlag.OFFSET_LANCE)
itm_heavy_lance.add_flag(ItemFlag.COVERS_HEAD)
itm_heavy_lance.add_flag(ItemFlag.IS_COUCHABLE)
itm_heavy_lance.add_capability(ItemCapability.POLEARM_THRUST)
itm_heavy_lance.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_heavy_lance.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_heavy_lance.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_heavy_lance.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_heavy_lance.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_heavy_lance.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_heavy_lance.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_heavy_lance.set_price(360)
itm_heavy_lance.add_modifier(IModBit.CRACKED)
itm_heavy_lance.add_modifier(IModBit.BENT)
itm_heavy_lance.add_modifier(IModBit.BALANCED)
itm_heavy_lance.set_weight(2.75)
itm_heavy_lance.set_abundance(100)
itm_heavy_lance.set_difficulty(10)
itm_heavy_lance.set_hit_points(16384)
itm_heavy_lance.set_speed_rating(75)
itm_heavy_lance.set_weapon_length(190)
itm_heavy_lance.set_thrust_damage(26, 1)
itm_heavy_lance.set_swing_damage(16, 2)


itm_great_lance = Item("itm_great_lance", "Great_Lance")
itm_great_lance.add_mesh(ItemMesh("heavy_lance"))
itm_great_lance.add_flag(ItemType.POLEARM)
itm_great_lance.add_flag(ItemFlag.IS_MERCHANDISE)
itm_great_lance.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_great_lance.add_flag(ItemFlag.IS_PRIMARY)
itm_great_lance.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
itm_great_lance.add_flag(ItemFlag.COVERS_HEAD)
itm_great_lance.add_flag(ItemFlag.IS_COUCHABLE)
itm_great_lance.add_capability(ItemCapability.POLEARM_THRUST)
itm_great_lance.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_great_lance.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_great_lance.set_price(410)
itm_great_lance.add_modifier(IModBit.CRACKED)
itm_great_lance.add_modifier(IModBit.BENT)
itm_great_lance.add_modifier(IModBit.BALANCED)
itm_great_lance.set_weight(5.0)
itm_great_lance.set_abundance(100)
itm_great_lance.set_difficulty(11)
itm_great_lance.set_speed_rating(55)
itm_great_lance.set_weapon_length(240)
itm_great_lance.set_thrust_damage(21, 1)


itm_pike = Item("itm_pike", "Pike")
itm_pike.add_mesh(ItemMesh("spear_a_3m"))
itm_pike.add_flag(ItemType.POLEARM)
itm_pike.add_flag(ItemFlag.IS_MERCHANDISE)
itm_pike.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_pike.add_flag(ItemFlag.IS_TWO_HANDED)
itm_pike.add_flag(ItemFlag.IS_PRIMARY)
itm_pike.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
itm_pike.add_flag(ItemFlag.CANT_USE_ON_HORSEBACK)
itm_pike.add_capability(ItemCapability.POLEARM_THRUST)
itm_pike.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_pike.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_pike.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_pike.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_pike.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_pike.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_pike.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_pike.set_price(125)
itm_pike.add_modifier(IModBit.CRACKED)
itm_pike.add_modifier(IModBit.BENT)
itm_pike.add_modifier(IModBit.BALANCED)
itm_pike.set_weight(3.0)
itm_pike.set_abundance(100)
itm_pike.set_hit_points(16384)
itm_pike.set_speed_rating(81)
itm_pike.set_weapon_length(245)
itm_pike.set_thrust_damage(26, 1)
itm_pike.set_swing_damage(16, 2)


itm_ashwood_pike = Item("itm_ashwood_pike", "Ashwood_Pike")
itm_ashwood_pike.add_mesh(ItemMesh("pike"))
itm_ashwood_pike.add_flag(ItemType.POLEARM)
itm_ashwood_pike.add_flag(ItemFlag.IS_MERCHANDISE)
itm_ashwood_pike.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_ashwood_pike.add_flag(ItemFlag.IS_TWO_HANDED)
itm_ashwood_pike.add_flag(ItemFlag.IS_PRIMARY)
itm_ashwood_pike.add_flag(ItemFlag.FITS_TO_HEAD)
itm_ashwood_pike.add_flag(ItemFlag.OFFSET_LANCE)
itm_ashwood_pike.add_capability(ItemCapability.POLEARM_THRUST)
itm_ashwood_pike.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_ashwood_pike.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_ashwood_pike.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_ashwood_pike.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_ashwood_pike.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_ashwood_pike.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_ashwood_pike.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_ashwood_pike.set_price(205)
itm_ashwood_pike.add_modifier(IModBit.CRACKED)
itm_ashwood_pike.add_modifier(IModBit.BENT)
itm_ashwood_pike.add_modifier(IModBit.BALANCED)
itm_ashwood_pike.set_weight(3.5)
itm_ashwood_pike.set_abundance(100)
itm_ashwood_pike.set_difficulty(9)
itm_ashwood_pike.set_hit_points(19456)
itm_ashwood_pike.set_speed_rating(90)
itm_ashwood_pike.set_weapon_length(170)
itm_ashwood_pike.set_thrust_damage(29, 1)
itm_ashwood_pike.set_swing_damage(19, 2)


itm_awlpike = Item("itm_awlpike", "Awlpike")
itm_awlpike.add_mesh(ItemMesh("awl_pike_b"))
itm_awlpike.add_flag(ItemType.POLEARM)
itm_awlpike.add_flag(ItemFlag.IS_MERCHANDISE)
itm_awlpike.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_awlpike.add_flag(ItemFlag.IS_PRIMARY)
itm_awlpike.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
itm_awlpike.add_flag(ItemFlag.FITS_TO_HEAD)
itm_awlpike.add_flag(ItemFlag.OFFSET_LANCE)
itm_awlpike.add_capability(ItemCapability.POLEARM_THRUST)
itm_awlpike.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_awlpike.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_awlpike.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_awlpike.add_capability(ItemCapability.CARRY_SPEAR)
itm_awlpike.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_awlpike.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_awlpike.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_awlpike.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_awlpike.set_price(345)
itm_awlpike.add_modifier(IModBit.CRACKED)
itm_awlpike.add_modifier(IModBit.BENT)
itm_awlpike.add_modifier(IModBit.BALANCED)
itm_awlpike.set_weight(2.25)
itm_awlpike.set_abundance(100)
itm_awlpike.set_hit_points(20480)
itm_awlpike.set_speed_rating(92)
itm_awlpike.set_weapon_length(165)
itm_awlpike.set_thrust_damage(33, 1)
itm_awlpike.set_swing_damage(20, 2)


itm_awlpike_long = Item("itm_awlpike_long", "Long_Awlpike")
itm_awlpike_long.add_mesh(ItemMesh("awl_pike_a"))
itm_awlpike_long.add_flag(ItemType.POLEARM)
itm_awlpike_long.add_flag(ItemFlag.IS_MERCHANDISE)
itm_awlpike_long.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_awlpike_long.add_flag(ItemFlag.IS_PRIMARY)
itm_awlpike_long.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
itm_awlpike_long.add_flag(ItemFlag.FITS_TO_HEAD)
itm_awlpike_long.add_flag(ItemFlag.OFFSET_LANCE)
itm_awlpike_long.add_capability(ItemCapability.POLEARM_THRUST)
itm_awlpike_long.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_awlpike_long.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_awlpike_long.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_awlpike_long.add_capability(ItemCapability.CARRY_SPEAR)
itm_awlpike_long.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_awlpike_long.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_awlpike_long.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_awlpike_long.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_awlpike_long.set_price(385)
itm_awlpike_long.add_modifier(IModBit.CRACKED)
itm_awlpike_long.add_modifier(IModBit.BENT)
itm_awlpike_long.add_modifier(IModBit.BALANCED)
itm_awlpike_long.set_weight(2.25)
itm_awlpike_long.set_abundance(100)
itm_awlpike_long.set_hit_points(20480)
itm_awlpike_long.set_speed_rating(89)
itm_awlpike_long.set_weapon_length(185)
itm_awlpike_long.set_thrust_damage(32, 1)
itm_awlpike_long.set_swing_damage(20, 2)


itm_bec_de_corbin_a = Item("itm_bec_de_corbin_a", "War_Hammer")
itm_bec_de_corbin_a.add_mesh(ItemMesh("bec_de_corbin_a"))
itm_bec_de_corbin_a.add_flag(ItemType.POLEARM)
itm_bec_de_corbin_a.add_flag(ItemFlag.IS_MERCHANDISE)
itm_bec_de_corbin_a.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_bec_de_corbin_a.add_flag(ItemFlag.IS_TWO_HANDED)
itm_bec_de_corbin_a.add_flag(ItemFlag.IS_PRIMARY)
itm_bec_de_corbin_a.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
itm_bec_de_corbin_a.add_flag(ItemFlag.CANT_USE_ON_HORSEBACK)
itm_bec_de_corbin_a.add_capability(ItemCapability.POLEARM_THRUST)
itm_bec_de_corbin_a.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_bec_de_corbin_a.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_bec_de_corbin_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_bec_de_corbin_a.add_capability(ItemCapability.CARRY_SPEAR)
itm_bec_de_corbin_a.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_bec_de_corbin_a.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_bec_de_corbin_a.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_bec_de_corbin_a.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_bec_de_corbin_a.set_price(125)
itm_bec_de_corbin_a.add_modifier(IModBit.CRACKED)
itm_bec_de_corbin_a.add_modifier(IModBit.BENT)
itm_bec_de_corbin_a.add_modifier(IModBit.BALANCED)
itm_bec_de_corbin_a.set_weight(3.0)
itm_bec_de_corbin_a.set_abundance(100)
itm_bec_de_corbin_a.set_hit_points(38912)
itm_bec_de_corbin_a.set_speed_rating(81)
itm_bec_de_corbin_a.set_weapon_length(120)
itm_bec_de_corbin_a.set_thrust_damage(38, 1)
itm_bec_de_corbin_a.set_swing_damage(38, 2)


itm_wooden_shield = Item("itm_wooden_shield", "Wooden_Shield")
itm_wooden_shield.add_mesh(ItemMesh("shield_round_a"))
itm_wooden_shield.add_flag(ItemType.SHIELD)
itm_wooden_shield.add_flag(ItemFlag.IS_MERCHANDISE)
itm_wooden_shield.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_wooden_shield.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
itm_wooden_shield.set_price(42)
itm_wooden_shield.add_modifier(IModBit.CRACKED)
itm_wooden_shield.add_modifier(IModBit.BATTERED)
itm_wooden_shield.add_modifier(IModBit.THICK)
itm_wooden_shield.add_modifier(IModBit.REINFORCED)
itm_wooden_shield.set_weight(2.0)
itm_wooden_shield.set_abundance(100)
itm_wooden_shield.set_body_armor(1)
itm_wooden_shield.set_hit_points(360)
itm_wooden_shield.set_speed_rating(100)
itm_wooden_shield.set_weapon_length(50)


itm_nordic_shield = Item("itm_nordic_shield", "Nordic_Shield")
itm_nordic_shield.add_mesh(ItemMesh("shield_round_b"))
itm_nordic_shield.add_flag(ItemType.SHIELD)
itm_nordic_shield.add_flag(ItemFlag.IS_MERCHANDISE)
itm_nordic_shield.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_nordic_shield.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
itm_nordic_shield.set_price(95)
itm_nordic_shield.add_modifier(IModBit.CRACKED)
itm_nordic_shield.add_modifier(IModBit.BATTERED)
itm_nordic_shield.add_modifier(IModBit.THICK)
itm_nordic_shield.add_modifier(IModBit.REINFORCED)
itm_nordic_shield.set_weight(2.0)
itm_nordic_shield.set_abundance(100)
itm_nordic_shield.set_body_armor(1)
itm_nordic_shield.set_hit_points(440)
itm_nordic_shield.set_speed_rating(100)
itm_nordic_shield.set_weapon_length(50)


itm_fur_covered_shield = Item("itm_fur_covered_shield", "Fur_Covered_Shield")
itm_fur_covered_shield.add_mesh(ItemMesh("shield_kite_m"))
itm_fur_covered_shield.add_flag(ItemType.SHIELD)
itm_fur_covered_shield.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_fur_covered_shield.add_capability(ItemCapability.CARRY_KITE_SHIELD)
itm_fur_covered_shield.set_price(227)
itm_fur_covered_shield.add_modifier(IModBit.CRACKED)
itm_fur_covered_shield.add_modifier(IModBit.BATTERED)
itm_fur_covered_shield.add_modifier(IModBit.THICK)
itm_fur_covered_shield.add_modifier(IModBit.REINFORCED)
itm_fur_covered_shield.set_weight(3.5)
itm_fur_covered_shield.set_abundance(100)
itm_fur_covered_shield.set_body_armor(1)
itm_fur_covered_shield.set_hit_points(600)
itm_fur_covered_shield.set_speed_rating(76)
itm_fur_covered_shield.set_weapon_length(81)


itm_steel_shield = Item("itm_steel_shield", "Steel_Shield")
itm_steel_shield.add_mesh(ItemMesh("shield_dragon"))
itm_steel_shield.add_flag(ItemType.SHIELD)
itm_steel_shield.add_flag(ItemFlag.IS_MERCHANDISE)
itm_steel_shield.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
itm_steel_shield.set_price(697)
itm_steel_shield.add_modifier(IModBit.CRACKED)
itm_steel_shield.add_modifier(IModBit.BATTERED)
itm_steel_shield.add_modifier(IModBit.THICK)
itm_steel_shield.add_modifier(IModBit.REINFORCED)
itm_steel_shield.set_weight(4.0)
itm_steel_shield.set_abundance(100)
itm_steel_shield.set_body_armor(17)
itm_steel_shield.set_hit_points(700)
itm_steel_shield.set_speed_rating(61)
itm_steel_shield.set_weapon_length(40)


itm_plate_covered_round_shield = Item("itm_plate_covered_round_shield", "Plate_Covered_Round_Shield")
itm_plate_covered_round_shield.add_mesh(ItemMesh("shield_round_e"))
itm_plate_covered_round_shield.add_flag(ItemType.SHIELD)
itm_plate_covered_round_shield.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
itm_plate_covered_round_shield.set_price(140)
itm_plate_covered_round_shield.add_modifier(IModBit.CRACKED)
itm_plate_covered_round_shield.add_modifier(IModBit.BATTERED)
itm_plate_covered_round_shield.add_modifier(IModBit.THICK)
itm_plate_covered_round_shield.add_modifier(IModBit.REINFORCED)
itm_plate_covered_round_shield.set_weight(4.0)
itm_plate_covered_round_shield.set_abundance(100)
itm_plate_covered_round_shield.set_body_armor(16)
itm_plate_covered_round_shield.set_hit_points(330)
itm_plate_covered_round_shield.set_speed_rating(90)
itm_plate_covered_round_shield.set_weapon_length(40)


itm_leather_covered_round_shield = Item("itm_leather_covered_round_shield", "Leather_Covered_Round_Shield")
itm_leather_covered_round_shield.add_mesh(ItemMesh("shield_round_d"))
itm_leather_covered_round_shield.add_flag(ItemType.SHIELD)
itm_leather_covered_round_shield.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_leather_covered_round_shield.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
itm_leather_covered_round_shield.set_price(80)
itm_leather_covered_round_shield.add_modifier(IModBit.CRACKED)
itm_leather_covered_round_shield.add_modifier(IModBit.BATTERED)
itm_leather_covered_round_shield.add_modifier(IModBit.THICK)
itm_leather_covered_round_shield.add_modifier(IModBit.REINFORCED)
itm_leather_covered_round_shield.set_weight(2.5)
itm_leather_covered_round_shield.set_abundance(100)
itm_leather_covered_round_shield.set_body_armor(8)
itm_leather_covered_round_shield.set_hit_points(310)
itm_leather_covered_round_shield.set_speed_rating(96)
itm_leather_covered_round_shield.set_weapon_length(40)


itm_hide_covered_round_shield = Item("itm_hide_covered_round_shield", "Hide_Covered_Round_Shield")
itm_hide_covered_round_shield.add_mesh(ItemMesh("shield_round_f"))
itm_hide_covered_round_shield.add_flag(ItemType.SHIELD)
itm_hide_covered_round_shield.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_hide_covered_round_shield.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
itm_hide_covered_round_shield.set_price(40)
itm_hide_covered_round_shield.add_modifier(IModBit.CRACKED)
itm_hide_covered_round_shield.add_modifier(IModBit.BATTERED)
itm_hide_covered_round_shield.add_modifier(IModBit.THICK)
itm_hide_covered_round_shield.add_modifier(IModBit.REINFORCED)
itm_hide_covered_round_shield.set_weight(2.0)
itm_hide_covered_round_shield.set_abundance(100)
itm_hide_covered_round_shield.set_body_armor(3)
itm_hide_covered_round_shield.set_hit_points(260)
itm_hide_covered_round_shield.set_speed_rating(100)
itm_hide_covered_round_shield.set_weapon_length(40)


itm_shield_heater_c = Item("itm_shield_heater_c", "Heater_Shield")
itm_shield_heater_c.add_mesh(ItemMesh("shield_heater_c"))
itm_shield_heater_c.add_flag(ItemType.SHIELD)
itm_shield_heater_c.add_flag(ItemFlag.IS_MERCHANDISE)
itm_shield_heater_c.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_shield_heater_c.add_capability(ItemCapability.CARRY_KITE_SHIELD)
itm_shield_heater_c.set_price(277)
itm_shield_heater_c.add_modifier(IModBit.CRACKED)
itm_shield_heater_c.add_modifier(IModBit.BATTERED)
itm_shield_heater_c.add_modifier(IModBit.THICK)
itm_shield_heater_c.add_modifier(IModBit.REINFORCED)
itm_shield_heater_c.set_weight(3.5)
itm_shield_heater_c.set_abundance(100)
itm_shield_heater_c.set_body_armor(2)
itm_shield_heater_c.set_hit_points(410)
itm_shield_heater_c.set_speed_rating(80)
itm_shield_heater_c.set_weapon_length(50)


itm_norman_shield_1 = Item("itm_norman_shield_1", "Kite_Shield")
itm_norman_shield_1.add_mesh(ItemMesh("norman_shield_1"))
itm_norman_shield_1.add_flag(ItemType.SHIELD)
itm_norman_shield_1.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_norman_shield_1.add_capability(ItemCapability.CARRY_KITE_SHIELD)
itm_norman_shield_1.set_price(118)
itm_norman_shield_1.add_modifier(IModBit.CRACKED)
itm_norman_shield_1.add_modifier(IModBit.BATTERED)
itm_norman_shield_1.add_modifier(IModBit.THICK)
itm_norman_shield_1.add_modifier(IModBit.REINFORCED)
itm_norman_shield_1.set_weight(2.5)
itm_norman_shield_1.set_abundance(100)
itm_norman_shield_1.set_body_armor(1)
itm_norman_shield_1.set_hit_points(480)
itm_norman_shield_1.set_speed_rating(82)
itm_norman_shield_1.set_weapon_length(90)


itm_norman_shield_2 = Item("itm_norman_shield_2", "Kite_Shield")
itm_norman_shield_2.add_mesh(ItemMesh("norman_shield_2"))
itm_norman_shield_2.add_flag(ItemType.SHIELD)
itm_norman_shield_2.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_norman_shield_2.add_capability(ItemCapability.CARRY_KITE_SHIELD)
itm_norman_shield_2.set_price(118)
itm_norman_shield_2.add_modifier(IModBit.CRACKED)
itm_norman_shield_2.add_modifier(IModBit.BATTERED)
itm_norman_shield_2.add_modifier(IModBit.THICK)
itm_norman_shield_2.add_modifier(IModBit.REINFORCED)
itm_norman_shield_2.set_weight(2.5)
itm_norman_shield_2.set_abundance(100)
itm_norman_shield_2.set_body_armor(1)
itm_norman_shield_2.set_hit_points(480)
itm_norman_shield_2.set_speed_rating(82)
itm_norman_shield_2.set_weapon_length(90)


itm_norman_shield_3 = Item("itm_norman_shield_3", "Kite_Shield")
itm_norman_shield_3.add_mesh(ItemMesh("norman_shield_3"))
itm_norman_shield_3.add_flag(ItemType.SHIELD)
itm_norman_shield_3.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_norman_shield_3.add_capability(ItemCapability.CARRY_KITE_SHIELD)
itm_norman_shield_3.set_price(118)
itm_norman_shield_3.add_modifier(IModBit.CRACKED)
itm_norman_shield_3.add_modifier(IModBit.BATTERED)
itm_norman_shield_3.add_modifier(IModBit.THICK)
itm_norman_shield_3.add_modifier(IModBit.REINFORCED)
itm_norman_shield_3.set_weight(2.5)
itm_norman_shield_3.set_abundance(100)
itm_norman_shield_3.set_body_armor(1)
itm_norman_shield_3.set_hit_points(480)
itm_norman_shield_3.set_speed_rating(82)
itm_norman_shield_3.set_weapon_length(90)


itm_norman_shield_4 = Item("itm_norman_shield_4", "Kite_Shield")
itm_norman_shield_4.add_mesh(ItemMesh("norman_shield_4"))
itm_norman_shield_4.add_flag(ItemType.SHIELD)
itm_norman_shield_4.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_norman_shield_4.add_capability(ItemCapability.CARRY_KITE_SHIELD)
itm_norman_shield_4.set_price(118)
itm_norman_shield_4.add_modifier(IModBit.CRACKED)
itm_norman_shield_4.add_modifier(IModBit.BATTERED)
itm_norman_shield_4.add_modifier(IModBit.THICK)
itm_norman_shield_4.add_modifier(IModBit.REINFORCED)
itm_norman_shield_4.set_weight(2.5)
itm_norman_shield_4.set_abundance(100)
itm_norman_shield_4.set_body_armor(1)
itm_norman_shield_4.set_hit_points(480)
itm_norman_shield_4.set_speed_rating(82)
itm_norman_shield_4.set_weapon_length(90)


itm_norman_shield_5 = Item("itm_norman_shield_5", "Kite_Shield")
itm_norman_shield_5.add_mesh(ItemMesh("norman_shield_5"))
itm_norman_shield_5.add_flag(ItemType.SHIELD)
itm_norman_shield_5.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_norman_shield_5.add_capability(ItemCapability.CARRY_KITE_SHIELD)
itm_norman_shield_5.set_price(118)
itm_norman_shield_5.add_modifier(IModBit.CRACKED)
itm_norman_shield_5.add_modifier(IModBit.BATTERED)
itm_norman_shield_5.add_modifier(IModBit.THICK)
itm_norman_shield_5.add_modifier(IModBit.REINFORCED)
itm_norman_shield_5.set_weight(2.5)
itm_norman_shield_5.set_abundance(100)
itm_norman_shield_5.set_body_armor(1)
itm_norman_shield_5.set_hit_points(480)
itm_norman_shield_5.set_speed_rating(82)
itm_norman_shield_5.set_weapon_length(90)


itm_norman_shield_6 = Item("itm_norman_shield_6", "Kite_Shield")
itm_norman_shield_6.add_mesh(ItemMesh("norman_shield_6"))
itm_norman_shield_6.add_flag(ItemType.SHIELD)
itm_norman_shield_6.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_norman_shield_6.add_capability(ItemCapability.CARRY_KITE_SHIELD)
itm_norman_shield_6.set_price(118)
itm_norman_shield_6.add_modifier(IModBit.CRACKED)
itm_norman_shield_6.add_modifier(IModBit.BATTERED)
itm_norman_shield_6.add_modifier(IModBit.THICK)
itm_norman_shield_6.add_modifier(IModBit.REINFORCED)
itm_norman_shield_6.set_weight(2.5)
itm_norman_shield_6.set_abundance(100)
itm_norman_shield_6.set_body_armor(1)
itm_norman_shield_6.set_hit_points(480)
itm_norman_shield_6.set_speed_rating(82)
itm_norman_shield_6.set_weapon_length(90)


itm_norman_shield_7 = Item("itm_norman_shield_7", "Kite_Shield")
itm_norman_shield_7.add_mesh(ItemMesh("norman_shield_7"))
itm_norman_shield_7.add_flag(ItemType.SHIELD)
itm_norman_shield_7.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_norman_shield_7.add_capability(ItemCapability.CARRY_KITE_SHIELD)
itm_norman_shield_7.set_price(118)
itm_norman_shield_7.add_modifier(IModBit.CRACKED)
itm_norman_shield_7.add_modifier(IModBit.BATTERED)
itm_norman_shield_7.add_modifier(IModBit.THICK)
itm_norman_shield_7.add_modifier(IModBit.REINFORCED)
itm_norman_shield_7.set_weight(2.5)
itm_norman_shield_7.set_abundance(100)
itm_norman_shield_7.set_body_armor(1)
itm_norman_shield_7.set_hit_points(480)
itm_norman_shield_7.set_speed_rating(82)
itm_norman_shield_7.set_weapon_length(90)


itm_norman_shield_8 = Item("itm_norman_shield_8", "Kite_Shield")
itm_norman_shield_8.add_mesh(ItemMesh("norman_shield_8"))
itm_norman_shield_8.add_flag(ItemType.SHIELD)
itm_norman_shield_8.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_norman_shield_8.add_capability(ItemCapability.CARRY_KITE_SHIELD)
itm_norman_shield_8.set_price(118)
itm_norman_shield_8.add_modifier(IModBit.CRACKED)
itm_norman_shield_8.add_modifier(IModBit.BATTERED)
itm_norman_shield_8.add_modifier(IModBit.THICK)
itm_norman_shield_8.add_modifier(IModBit.REINFORCED)
itm_norman_shield_8.set_weight(2.5)
itm_norman_shield_8.set_abundance(100)
itm_norman_shield_8.set_body_armor(1)
itm_norman_shield_8.set_hit_points(480)
itm_norman_shield_8.set_speed_rating(82)
itm_norman_shield_8.set_weapon_length(90)


itm_tab_shield_round_a = Item("itm_tab_shield_round_a", "Old_Round_Shield")
itm_tab_shield_round_a.add_mesh(ItemMesh("tableau_shield_round_5"))
itm_tab_shield_round_a.add_flag(ItemType.SHIELD)
itm_tab_shield_round_a.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tab_shield_round_a.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tab_shield_round_a.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
itm_tab_shield_round_a.set_price(26)
itm_tab_shield_round_a.add_modifier(IModBit.CRACKED)
itm_tab_shield_round_a.add_modifier(IModBit.BATTERED)
itm_tab_shield_round_a.add_modifier(IModBit.THICK)
itm_tab_shield_round_a.add_modifier(IModBit.REINFORCED)
itm_tab_shield_round_a.set_weight(2.5)
itm_tab_shield_round_a.set_abundance(100)
itm_tab_shield_round_a.set_body_armor(4)
itm_tab_shield_round_a.set_hit_points(195)
itm_tab_shield_round_a.set_speed_rating(93)
itm_tab_shield_round_a.set_weapon_length(50)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270473 1224979098644774912 1224979098644774913


itm_tab_shield_round_b = Item("itm_tab_shield_round_b", "Plain_Round_Shield")
itm_tab_shield_round_b.add_mesh(ItemMesh("tableau_shield_round_3"))
itm_tab_shield_round_b.add_flag(ItemType.SHIELD)
itm_tab_shield_round_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tab_shield_round_b.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tab_shield_round_b.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
itm_tab_shield_round_b.set_price(65)
itm_tab_shield_round_b.add_modifier(IModBit.CRACKED)
itm_tab_shield_round_b.add_modifier(IModBit.BATTERED)
itm_tab_shield_round_b.add_modifier(IModBit.THICK)
itm_tab_shield_round_b.add_modifier(IModBit.REINFORCED)
itm_tab_shield_round_b.set_weight(3.0)
itm_tab_shield_round_b.set_abundance(100)
itm_tab_shield_round_b.set_body_armor(8)
itm_tab_shield_round_b.set_hit_points(260)
itm_tab_shield_round_b.set_speed_rating(90)
itm_tab_shield_round_b.set_weapon_length(50)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270471 1224979098644774912 1224979098644774913


itm_tab_shield_round_c = Item("itm_tab_shield_round_c", "Round_Shield")
itm_tab_shield_round_c.add_mesh(ItemMesh("tableau_shield_round_2"))
itm_tab_shield_round_c.add_flag(ItemType.SHIELD)
itm_tab_shield_round_c.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tab_shield_round_c.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tab_shield_round_c.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
itm_tab_shield_round_c.set_price(105)
itm_tab_shield_round_c.add_modifier(IModBit.CRACKED)
itm_tab_shield_round_c.add_modifier(IModBit.BATTERED)
itm_tab_shield_round_c.add_modifier(IModBit.THICK)
itm_tab_shield_round_c.add_modifier(IModBit.REINFORCED)
itm_tab_shield_round_c.set_weight(3.5)
itm_tab_shield_round_c.set_abundance(100)
itm_tab_shield_round_c.set_body_armor(12)
itm_tab_shield_round_c.set_hit_points(310)
itm_tab_shield_round_c.set_speed_rating(87)
itm_tab_shield_round_c.set_weapon_length(50)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270470 1224979098644774912 1224979098644774913


itm_tab_shield_round_d = Item("itm_tab_shield_round_d", "Heavy_Round_Shield")
itm_tab_shield_round_d.add_mesh(ItemMesh("tableau_shield_round_1"))
itm_tab_shield_round_d.add_flag(ItemType.SHIELD)
itm_tab_shield_round_d.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tab_shield_round_d.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tab_shield_round_d.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
itm_tab_shield_round_d.set_price(210)
itm_tab_shield_round_d.add_modifier(IModBit.CRACKED)
itm_tab_shield_round_d.add_modifier(IModBit.BATTERED)
itm_tab_shield_round_d.add_modifier(IModBit.THICK)
itm_tab_shield_round_d.add_modifier(IModBit.REINFORCED)
itm_tab_shield_round_d.set_weight(4.0)
itm_tab_shield_round_d.set_abundance(100)
itm_tab_shield_round_d.set_body_armor(15)
itm_tab_shield_round_d.set_hit_points(350)
itm_tab_shield_round_d.set_speed_rating(84)
itm_tab_shield_round_d.set_weapon_length(50)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270469 1224979098644774912 1224979098644774913


itm_tab_shield_round_e = Item("itm_tab_shield_round_e", "Huscarl's_Round_Shield")
itm_tab_shield_round_e.add_mesh(ItemMesh("tableau_shield_round_4"))
itm_tab_shield_round_e.add_flag(ItemType.SHIELD)
itm_tab_shield_round_e.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tab_shield_round_e.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
itm_tab_shield_round_e.set_price(430)
itm_tab_shield_round_e.add_modifier(IModBit.CRACKED)
itm_tab_shield_round_e.add_modifier(IModBit.BATTERED)
itm_tab_shield_round_e.add_modifier(IModBit.THICK)
itm_tab_shield_round_e.add_modifier(IModBit.REINFORCED)
itm_tab_shield_round_e.set_weight(4.5)
itm_tab_shield_round_e.set_abundance(100)
itm_tab_shield_round_e.set_body_armor(19)
itm_tab_shield_round_e.set_hit_points(410)
itm_tab_shield_round_e.set_speed_rating(81)
itm_tab_shield_round_e.set_weapon_length(50)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270472 1224979098644774912 1224979098644774913


itm_tab_shield_kite_a = Item("itm_tab_shield_kite_a", "Old_Kite_Shield")
itm_tab_shield_kite_a.add_mesh(ItemMesh("tableau_shield_kite_1"))
itm_tab_shield_kite_a.add_flag(ItemType.SHIELD)
itm_tab_shield_kite_a.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tab_shield_kite_a.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tab_shield_kite_a.add_capability(ItemCapability.CARRY_KITE_SHIELD)
itm_tab_shield_kite_a.set_price(33)
itm_tab_shield_kite_a.add_modifier(IModBit.CRACKED)
itm_tab_shield_kite_a.add_modifier(IModBit.BATTERED)
itm_tab_shield_kite_a.add_modifier(IModBit.THICK)
itm_tab_shield_kite_a.add_modifier(IModBit.REINFORCED)
itm_tab_shield_kite_a.set_weight(2.0)
itm_tab_shield_kite_a.set_abundance(100)
itm_tab_shield_kite_a.set_body_armor(5)
itm_tab_shield_kite_a.set_hit_points(165)
itm_tab_shield_kite_a.set_speed_rating(96)
itm_tab_shield_kite_a.set_missile_speed(70)
itm_tab_shield_kite_a.set_weapon_length(36)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270477 1224979098644774912 1224979098644774913


itm_tab_shield_kite_b = Item("itm_tab_shield_kite_b", "Plain_Kite_Shield")
itm_tab_shield_kite_b.add_mesh(ItemMesh("tableau_shield_kite_3"))
itm_tab_shield_kite_b.add_flag(ItemType.SHIELD)
itm_tab_shield_kite_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tab_shield_kite_b.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tab_shield_kite_b.add_capability(ItemCapability.CARRY_KITE_SHIELD)
itm_tab_shield_kite_b.set_price(70)
itm_tab_shield_kite_b.add_modifier(IModBit.CRACKED)
itm_tab_shield_kite_b.add_modifier(IModBit.BATTERED)
itm_tab_shield_kite_b.add_modifier(IModBit.THICK)
itm_tab_shield_kite_b.add_modifier(IModBit.REINFORCED)
itm_tab_shield_kite_b.set_weight(2.5)
itm_tab_shield_kite_b.set_abundance(100)
itm_tab_shield_kite_b.set_body_armor(10)
itm_tab_shield_kite_b.set_hit_points(215)
itm_tab_shield_kite_b.set_speed_rating(93)
itm_tab_shield_kite_b.set_missile_speed(70)
itm_tab_shield_kite_b.set_weapon_length(36)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270479 1224979098644774912 1224979098644774913


itm_tab_shield_kite_c = Item("itm_tab_shield_kite_c", "Kite_Shield")
itm_tab_shield_kite_c.add_mesh(ItemMesh("tableau_shield_kite_2"))
itm_tab_shield_kite_c.add_flag(ItemType.SHIELD)
itm_tab_shield_kite_c.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tab_shield_kite_c.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tab_shield_kite_c.add_capability(ItemCapability.CARRY_KITE_SHIELD)
itm_tab_shield_kite_c.set_price(156)
itm_tab_shield_kite_c.add_modifier(IModBit.CRACKED)
itm_tab_shield_kite_c.add_modifier(IModBit.BATTERED)
itm_tab_shield_kite_c.add_modifier(IModBit.THICK)
itm_tab_shield_kite_c.add_modifier(IModBit.REINFORCED)
itm_tab_shield_kite_c.set_weight(3.0)
itm_tab_shield_kite_c.set_abundance(100)
itm_tab_shield_kite_c.set_body_armor(13)
itm_tab_shield_kite_c.set_hit_points(265)
itm_tab_shield_kite_c.set_speed_rating(90)
itm_tab_shield_kite_c.set_missile_speed(70)
itm_tab_shield_kite_c.set_weapon_length(36)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270478 1224979098644774912 1224979098644774913


itm_tab_shield_kite_d = Item("itm_tab_shield_kite_d", "Heavy_Kite_Shield")
itm_tab_shield_kite_d.add_mesh(ItemMesh("tableau_shield_kite_2"))
itm_tab_shield_kite_d.add_flag(ItemType.SHIELD)
itm_tab_shield_kite_d.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tab_shield_kite_d.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tab_shield_kite_d.add_capability(ItemCapability.CARRY_KITE_SHIELD)
itm_tab_shield_kite_d.set_price(320)
itm_tab_shield_kite_d.add_modifier(IModBit.CRACKED)
itm_tab_shield_kite_d.add_modifier(IModBit.BATTERED)
itm_tab_shield_kite_d.add_modifier(IModBit.THICK)
itm_tab_shield_kite_d.add_modifier(IModBit.REINFORCED)
itm_tab_shield_kite_d.set_weight(3.5)
itm_tab_shield_kite_d.set_abundance(100)
itm_tab_shield_kite_d.set_body_armor(18)
itm_tab_shield_kite_d.set_hit_points(310)
itm_tab_shield_kite_d.set_speed_rating(87)
itm_tab_shield_kite_d.set_missile_speed(70)
itm_tab_shield_kite_d.set_weapon_length(36)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270478 1224979098644774912 1224979098644774913


itm_tab_shield_kite_cav_a = Item("itm_tab_shield_kite_cav_a", "Horseman's_Kite_Shield")
itm_tab_shield_kite_cav_a.add_mesh(ItemMesh("tableau_shield_kite_4"))
itm_tab_shield_kite_cav_a.add_flag(ItemType.SHIELD)
itm_tab_shield_kite_cav_a.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tab_shield_kite_cav_a.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tab_shield_kite_cav_a.add_capability(ItemCapability.CARRY_KITE_SHIELD)
itm_tab_shield_kite_cav_a.set_price(205)
itm_tab_shield_kite_cav_a.add_modifier(IModBit.CRACKED)
itm_tab_shield_kite_cav_a.add_modifier(IModBit.BATTERED)
itm_tab_shield_kite_cav_a.add_modifier(IModBit.THICK)
itm_tab_shield_kite_cav_a.add_modifier(IModBit.REINFORCED)
itm_tab_shield_kite_cav_a.set_weight(2.0)
itm_tab_shield_kite_cav_a.set_abundance(100)
itm_tab_shield_kite_cav_a.set_body_armor(14)
itm_tab_shield_kite_cav_a.set_hit_points(165)
itm_tab_shield_kite_cav_a.set_speed_rating(103)
itm_tab_shield_kite_cav_a.set_missile_speed(50)
itm_tab_shield_kite_cav_a.set_weapon_length(30)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270480 1224979098644774912 1224979098644774913


itm_tab_shield_kite_cav_b = Item("itm_tab_shield_kite_cav_b", "Knightly_Kite_Shield")
itm_tab_shield_kite_cav_b.add_mesh(ItemMesh("tableau_shield_kite_4"))
itm_tab_shield_kite_cav_b.add_flag(ItemType.SHIELD)
itm_tab_shield_kite_cav_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tab_shield_kite_cav_b.add_capability(ItemCapability.CARRY_KITE_SHIELD)
itm_tab_shield_kite_cav_b.set_price(360)
itm_tab_shield_kite_cav_b.add_modifier(IModBit.CRACKED)
itm_tab_shield_kite_cav_b.add_modifier(IModBit.BATTERED)
itm_tab_shield_kite_cav_b.add_modifier(IModBit.THICK)
itm_tab_shield_kite_cav_b.add_modifier(IModBit.REINFORCED)
itm_tab_shield_kite_cav_b.set_weight(2.5)
itm_tab_shield_kite_cav_b.set_abundance(100)
itm_tab_shield_kite_cav_b.set_body_armor(23)
itm_tab_shield_kite_cav_b.set_hit_points(225)
itm_tab_shield_kite_cav_b.set_speed_rating(100)
itm_tab_shield_kite_cav_b.set_missile_speed(50)
itm_tab_shield_kite_cav_b.set_weapon_length(30)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270480 1224979098644774912 1224979098644774913


itm_tab_shield_heater_a = Item("itm_tab_shield_heater_a", "Old_Heater_Shield")
itm_tab_shield_heater_a.add_mesh(ItemMesh("tableau_shield_heater_1"))
itm_tab_shield_heater_a.add_flag(ItemType.SHIELD)
itm_tab_shield_heater_a.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tab_shield_heater_a.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tab_shield_heater_a.add_capability(ItemCapability.CARRY_KITE_SHIELD)
itm_tab_shield_heater_a.set_price(36)
itm_tab_shield_heater_a.add_modifier(IModBit.CRACKED)
itm_tab_shield_heater_a.add_modifier(IModBit.BATTERED)
itm_tab_shield_heater_a.add_modifier(IModBit.THICK)
itm_tab_shield_heater_a.add_modifier(IModBit.REINFORCED)
itm_tab_shield_heater_a.set_weight(2.0)
itm_tab_shield_heater_a.set_abundance(100)
itm_tab_shield_heater_a.set_body_armor(6)
itm_tab_shield_heater_a.set_hit_points(160)
itm_tab_shield_heater_a.set_speed_rating(96)
itm_tab_shield_heater_a.set_missile_speed(70)
itm_tab_shield_heater_a.set_weapon_length(36)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270481 1224979098644774912 1224979098644774913


itm_tab_shield_heater_b = Item("itm_tab_shield_heater_b", "Plain_Heater_Shield")
itm_tab_shield_heater_b.add_mesh(ItemMesh("tableau_shield_heater_1"))
itm_tab_shield_heater_b.add_flag(ItemType.SHIELD)
itm_tab_shield_heater_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tab_shield_heater_b.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tab_shield_heater_b.add_capability(ItemCapability.CARRY_KITE_SHIELD)
itm_tab_shield_heater_b.set_price(74)
itm_tab_shield_heater_b.add_modifier(IModBit.CRACKED)
itm_tab_shield_heater_b.add_modifier(IModBit.BATTERED)
itm_tab_shield_heater_b.add_modifier(IModBit.THICK)
itm_tab_shield_heater_b.add_modifier(IModBit.REINFORCED)
itm_tab_shield_heater_b.set_weight(2.5)
itm_tab_shield_heater_b.set_abundance(100)
itm_tab_shield_heater_b.set_body_armor(11)
itm_tab_shield_heater_b.set_hit_points(210)
itm_tab_shield_heater_b.set_speed_rating(93)
itm_tab_shield_heater_b.set_missile_speed(70)
itm_tab_shield_heater_b.set_weapon_length(36)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270481 1224979098644774912 1224979098644774913


itm_tab_shield_heater_c = Item("itm_tab_shield_heater_c", "Heater_Shield")
itm_tab_shield_heater_c.add_mesh(ItemMesh("tableau_shield_heater_1"))
itm_tab_shield_heater_c.add_flag(ItemType.SHIELD)
itm_tab_shield_heater_c.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tab_shield_heater_c.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tab_shield_heater_c.add_capability(ItemCapability.CARRY_KITE_SHIELD)
itm_tab_shield_heater_c.set_price(160)
itm_tab_shield_heater_c.add_modifier(IModBit.CRACKED)
itm_tab_shield_heater_c.add_modifier(IModBit.BATTERED)
itm_tab_shield_heater_c.add_modifier(IModBit.THICK)
itm_tab_shield_heater_c.add_modifier(IModBit.REINFORCED)
itm_tab_shield_heater_c.set_weight(3.0)
itm_tab_shield_heater_c.set_abundance(100)
itm_tab_shield_heater_c.set_body_armor(14)
itm_tab_shield_heater_c.set_hit_points(260)
itm_tab_shield_heater_c.set_speed_rating(90)
itm_tab_shield_heater_c.set_missile_speed(70)
itm_tab_shield_heater_c.set_weapon_length(36)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270481 1224979098644774912 1224979098644774913


itm_tab_shield_heater_d = Item("itm_tab_shield_heater_d", "Heavy_Heater_Shield")
itm_tab_shield_heater_d.add_mesh(ItemMesh("tableau_shield_heater_1"))
itm_tab_shield_heater_d.add_flag(ItemType.SHIELD)
itm_tab_shield_heater_d.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tab_shield_heater_d.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tab_shield_heater_d.add_capability(ItemCapability.CARRY_KITE_SHIELD)
itm_tab_shield_heater_d.set_price(332)
itm_tab_shield_heater_d.add_modifier(IModBit.CRACKED)
itm_tab_shield_heater_d.add_modifier(IModBit.BATTERED)
itm_tab_shield_heater_d.add_modifier(IModBit.THICK)
itm_tab_shield_heater_d.add_modifier(IModBit.REINFORCED)
itm_tab_shield_heater_d.set_weight(3.5)
itm_tab_shield_heater_d.set_abundance(100)
itm_tab_shield_heater_d.set_body_armor(19)
itm_tab_shield_heater_d.set_hit_points(305)
itm_tab_shield_heater_d.set_speed_rating(87)
itm_tab_shield_heater_d.set_missile_speed(70)
itm_tab_shield_heater_d.set_weapon_length(36)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270481 1224979098644774912 1224979098644774913


itm_tab_shield_heater_cav_a = Item("itm_tab_shield_heater_cav_a", "Horseman's_Heater_Shield")
itm_tab_shield_heater_cav_a.add_mesh(ItemMesh("tableau_shield_heater_2"))
itm_tab_shield_heater_cav_a.add_flag(ItemType.SHIELD)
itm_tab_shield_heater_cav_a.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tab_shield_heater_cav_a.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tab_shield_heater_cav_a.add_capability(ItemCapability.CARRY_KITE_SHIELD)
itm_tab_shield_heater_cav_a.set_price(229)
itm_tab_shield_heater_cav_a.add_modifier(IModBit.CRACKED)
itm_tab_shield_heater_cav_a.add_modifier(IModBit.BATTERED)
itm_tab_shield_heater_cav_a.add_modifier(IModBit.THICK)
itm_tab_shield_heater_cav_a.add_modifier(IModBit.REINFORCED)
itm_tab_shield_heater_cav_a.set_weight(2.0)
itm_tab_shield_heater_cav_a.set_abundance(100)
itm_tab_shield_heater_cav_a.set_body_armor(16)
itm_tab_shield_heater_cav_a.set_hit_points(160)
itm_tab_shield_heater_cav_a.set_speed_rating(103)
itm_tab_shield_heater_cav_a.set_missile_speed(50)
itm_tab_shield_heater_cav_a.set_weapon_length(30)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270482 1224979098644774912 1224979098644774913


itm_tab_shield_heater_cav_b = Item("itm_tab_shield_heater_cav_b", "Knightly_Heater_Shield")
itm_tab_shield_heater_cav_b.add_mesh(ItemMesh("tableau_shield_heater_2"))
itm_tab_shield_heater_cav_b.add_flag(ItemType.SHIELD)
itm_tab_shield_heater_cav_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tab_shield_heater_cav_b.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tab_shield_heater_cav_b.add_capability(ItemCapability.CARRY_KITE_SHIELD)
itm_tab_shield_heater_cav_b.set_price(390)
itm_tab_shield_heater_cav_b.add_modifier(IModBit.CRACKED)
itm_tab_shield_heater_cav_b.add_modifier(IModBit.BATTERED)
itm_tab_shield_heater_cav_b.add_modifier(IModBit.THICK)
itm_tab_shield_heater_cav_b.add_modifier(IModBit.REINFORCED)
itm_tab_shield_heater_cav_b.set_weight(2.5)
itm_tab_shield_heater_cav_b.set_abundance(100)
itm_tab_shield_heater_cav_b.set_body_armor(23)
itm_tab_shield_heater_cav_b.set_hit_points(220)
itm_tab_shield_heater_cav_b.set_speed_rating(100)
itm_tab_shield_heater_cav_b.set_missile_speed(50)
itm_tab_shield_heater_cav_b.set_weapon_length(30)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270482 1224979098644774912 1224979098644774913


itm_tab_shield_pavise_a = Item("itm_tab_shield_pavise_a", "Old_Board_Shield")
itm_tab_shield_pavise_a.add_mesh(ItemMesh("tableau_shield_pavise_2"))
itm_tab_shield_pavise_a.add_flag(ItemType.SHIELD)
itm_tab_shield_pavise_a.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tab_shield_pavise_a.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tab_shield_pavise_a.add_flag(ItemFlag.CANT_USE_ON_HORSEBACK)
itm_tab_shield_pavise_a.add_capability(ItemCapability.CARRY_BOARD_SHIELD)
itm_tab_shield_pavise_a.set_price(60)
itm_tab_shield_pavise_a.add_modifier(IModBit.CRACKED)
itm_tab_shield_pavise_a.add_modifier(IModBit.BATTERED)
itm_tab_shield_pavise_a.add_modifier(IModBit.THICK)
itm_tab_shield_pavise_a.add_modifier(IModBit.REINFORCED)
itm_tab_shield_pavise_a.set_weight(3.5)
itm_tab_shield_pavise_a.set_abundance(100)
itm_tab_shield_pavise_a.set_body_armor(4)
itm_tab_shield_pavise_a.set_hit_points(280)
itm_tab_shield_pavise_a.set_speed_rating(89)
itm_tab_shield_pavise_a.set_missile_speed(100)
itm_tab_shield_pavise_a.set_weapon_length(43)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270484 1224979098644774912 1224979098644774913


itm_tab_shield_pavise_b = Item("itm_tab_shield_pavise_b", "Plain_Board_Shield")
itm_tab_shield_pavise_b.add_mesh(ItemMesh("tableau_shield_pavise_2"))
itm_tab_shield_pavise_b.add_flag(ItemType.SHIELD)
itm_tab_shield_pavise_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tab_shield_pavise_b.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tab_shield_pavise_b.add_flag(ItemFlag.CANT_USE_ON_HORSEBACK)
itm_tab_shield_pavise_b.add_capability(ItemCapability.CARRY_BOARD_SHIELD)
itm_tab_shield_pavise_b.set_price(114)
itm_tab_shield_pavise_b.add_modifier(IModBit.CRACKED)
itm_tab_shield_pavise_b.add_modifier(IModBit.BATTERED)
itm_tab_shield_pavise_b.add_modifier(IModBit.THICK)
itm_tab_shield_pavise_b.add_modifier(IModBit.REINFORCED)
itm_tab_shield_pavise_b.set_weight(4.0)
itm_tab_shield_pavise_b.set_abundance(100)
itm_tab_shield_pavise_b.set_body_armor(8)
itm_tab_shield_pavise_b.set_hit_points(360)
itm_tab_shield_pavise_b.set_speed_rating(85)
itm_tab_shield_pavise_b.set_missile_speed(100)
itm_tab_shield_pavise_b.set_weapon_length(43)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270484 1224979098644774912 1224979098644774913


itm_tab_shield_pavise_c = Item("itm_tab_shield_pavise_c", "Board_Shield")
itm_tab_shield_pavise_c.add_mesh(ItemMesh("tableau_shield_pavise_1"))
itm_tab_shield_pavise_c.add_flag(ItemType.SHIELD)
itm_tab_shield_pavise_c.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tab_shield_pavise_c.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tab_shield_pavise_c.add_flag(ItemFlag.CANT_USE_ON_HORSEBACK)
itm_tab_shield_pavise_c.add_capability(ItemCapability.CARRY_BOARD_SHIELD)
itm_tab_shield_pavise_c.set_price(210)
itm_tab_shield_pavise_c.add_modifier(IModBit.CRACKED)
itm_tab_shield_pavise_c.add_modifier(IModBit.BATTERED)
itm_tab_shield_pavise_c.add_modifier(IModBit.THICK)
itm_tab_shield_pavise_c.add_modifier(IModBit.REINFORCED)
itm_tab_shield_pavise_c.set_weight(4.5)
itm_tab_shield_pavise_c.set_abundance(100)
itm_tab_shield_pavise_c.set_body_armor(10)
itm_tab_shield_pavise_c.set_hit_points(430)
itm_tab_shield_pavise_c.set_speed_rating(81)
itm_tab_shield_pavise_c.set_missile_speed(100)
itm_tab_shield_pavise_c.set_weapon_length(43)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270483 1224979098644774912 1224979098644774913


itm_tab_shield_pavise_d = Item("itm_tab_shield_pavise_d", "Heavy_Board_Shield")
itm_tab_shield_pavise_d.add_mesh(ItemMesh("tableau_shield_pavise_1"))
itm_tab_shield_pavise_d.add_flag(ItemType.SHIELD)
itm_tab_shield_pavise_d.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tab_shield_pavise_d.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tab_shield_pavise_d.add_flag(ItemFlag.CANT_USE_ON_HORSEBACK)
itm_tab_shield_pavise_d.add_capability(ItemCapability.CARRY_BOARD_SHIELD)
itm_tab_shield_pavise_d.set_price(370)
itm_tab_shield_pavise_d.add_modifier(IModBit.CRACKED)
itm_tab_shield_pavise_d.add_modifier(IModBit.BATTERED)
itm_tab_shield_pavise_d.add_modifier(IModBit.THICK)
itm_tab_shield_pavise_d.add_modifier(IModBit.REINFORCED)
itm_tab_shield_pavise_d.set_weight(5.0)
itm_tab_shield_pavise_d.set_abundance(100)
itm_tab_shield_pavise_d.set_body_armor(14)
itm_tab_shield_pavise_d.set_hit_points(550)
itm_tab_shield_pavise_d.set_speed_rating(78)
itm_tab_shield_pavise_d.set_missile_speed(100)
itm_tab_shield_pavise_d.set_weapon_length(43)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270483 1224979098644774912 1224979098644774913


itm_tab_shield_small_round_a = Item("itm_tab_shield_small_round_a", "Plain_Cavalry_Shield")
itm_tab_shield_small_round_a.add_mesh(ItemMesh("tableau_shield_small_round_3"))
itm_tab_shield_small_round_a.add_flag(ItemType.SHIELD)
itm_tab_shield_small_round_a.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tab_shield_small_round_a.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tab_shield_small_round_a.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
itm_tab_shield_small_round_a.set_price(96)
itm_tab_shield_small_round_a.add_modifier(IModBit.CRACKED)
itm_tab_shield_small_round_a.add_modifier(IModBit.BATTERED)
itm_tab_shield_small_round_a.add_modifier(IModBit.THICK)
itm_tab_shield_small_round_a.add_modifier(IModBit.REINFORCED)
itm_tab_shield_small_round_a.set_weight(2.0)
itm_tab_shield_small_round_a.set_abundance(100)
itm_tab_shield_small_round_a.set_body_armor(8)
itm_tab_shield_small_round_a.set_hit_points(160)
itm_tab_shield_small_round_a.set_speed_rating(105)
itm_tab_shield_small_round_a.set_weapon_length(40)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270476 1224979098644774912 1224979098644774913


itm_tab_shield_small_round_b = Item("itm_tab_shield_small_round_b", "Round_Cavalry_Shield")
itm_tab_shield_small_round_b.add_mesh(ItemMesh("tableau_shield_small_round_1"))
itm_tab_shield_small_round_b.add_flag(ItemType.SHIELD)
itm_tab_shield_small_round_b.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tab_shield_small_round_b.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_tab_shield_small_round_b.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
itm_tab_shield_small_round_b.set_price(195)
itm_tab_shield_small_round_b.add_modifier(IModBit.CRACKED)
itm_tab_shield_small_round_b.add_modifier(IModBit.BATTERED)
itm_tab_shield_small_round_b.add_modifier(IModBit.THICK)
itm_tab_shield_small_round_b.add_modifier(IModBit.REINFORCED)
itm_tab_shield_small_round_b.set_weight(2.5)
itm_tab_shield_small_round_b.set_abundance(100)
itm_tab_shield_small_round_b.set_body_armor(14)
itm_tab_shield_small_round_b.set_hit_points(200)
itm_tab_shield_small_round_b.set_speed_rating(103)
itm_tab_shield_small_round_b.set_weapon_length(40)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270474 1224979098644774912 1224979098644774913


itm_tab_shield_small_round_c = Item("itm_tab_shield_small_round_c", "Elite_Cavalry_Shield")
itm_tab_shield_small_round_c.add_mesh(ItemMesh("tableau_shield_small_round_2"))
itm_tab_shield_small_round_c.add_flag(ItemType.SHIELD)
itm_tab_shield_small_round_c.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tab_shield_small_round_c.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
itm_tab_shield_small_round_c.set_price(370)
itm_tab_shield_small_round_c.add_modifier(IModBit.CRACKED)
itm_tab_shield_small_round_c.add_modifier(IModBit.BATTERED)
itm_tab_shield_small_round_c.add_modifier(IModBit.THICK)
itm_tab_shield_small_round_c.add_modifier(IModBit.REINFORCED)
itm_tab_shield_small_round_c.set_weight(3.0)
itm_tab_shield_small_round_c.set_abundance(100)
itm_tab_shield_small_round_c.set_body_armor(22)
itm_tab_shield_small_round_c.set_hit_points(250)
itm_tab_shield_small_round_c.set_speed_rating(100)
itm_tab_shield_small_round_c.set_weapon_length(40)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270475 1224979098644774912 1224979098644774913


itm_darts = Item("itm_darts", "Darts")
itm_darts.add_mesh(ItemMesh("dart_b"))
itm_darts.add_mesh(ItemMesh("dart_b_bag", ItemMesh.ixmesh_carry))
itm_darts.add_flag(ItemType.THROWN)
itm_darts.add_flag(ItemFlag.IS_MERCHANDISE)
itm_darts.add_flag(ItemFlag.IS_PRIMARY)
itm_darts.add_capability(ItemCapability.THROW_JAVELIN)
itm_darts.add_capability(ItemCapability.CARRY_QUIVER_RIGHT_VERTICAL)
itm_darts.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_darts.set_price(155)
itm_darts.add_modifier(IModBit.BENT)
itm_darts.add_modifier(IModBit.BALANCED)
itm_darts.add_modifier(IModBit.HEAVY)
itm_darts.add_modifier(IModBit.LARGE_BAG)
itm_darts.set_weight(4.0)
itm_darts.set_abundance(100)
itm_darts.set_difficulty(1)
itm_darts.set_speed_rating(95)
itm_darts.set_missile_speed(28)
itm_darts.set_weapon_length(32)
itm_darts.set_max_ammo(7)
itm_darts.set_thrust_damage(22, 1)


itm_war_darts = Item("itm_war_darts", "War_Darts")
itm_war_darts.add_mesh(ItemMesh("dart_a"))
itm_war_darts.add_mesh(ItemMesh("dart_a_bag", ItemMesh.ixmesh_carry))
itm_war_darts.add_flag(ItemType.THROWN)
itm_war_darts.add_flag(ItemFlag.IS_MERCHANDISE)
itm_war_darts.add_flag(ItemFlag.IS_PRIMARY)
itm_war_darts.add_capability(ItemCapability.THROW_JAVELIN)
itm_war_darts.add_capability(ItemCapability.CARRY_QUIVER_BACK)
itm_war_darts.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_war_darts.set_price(285)
itm_war_darts.add_modifier(IModBit.BENT)
itm_war_darts.add_modifier(IModBit.BALANCED)
itm_war_darts.add_modifier(IModBit.HEAVY)
itm_war_darts.add_modifier(IModBit.LARGE_BAG)
itm_war_darts.set_weight(5.0)
itm_war_darts.set_abundance(100)
itm_war_darts.set_difficulty(1)
itm_war_darts.set_speed_rating(93)
itm_war_darts.set_missile_speed(27)
itm_war_darts.set_weapon_length(45)
itm_war_darts.set_max_ammo(7)
itm_war_darts.set_thrust_damage(25, 1)


itm_javelin = Item("itm_javelin", "Javelins")
itm_javelin.add_mesh(ItemMesh("javelin"))
itm_javelin.add_mesh(ItemMesh("javelins_quiver_new", ItemMesh.ixmesh_carry))
itm_javelin.add_flag(ItemType.THROWN)
itm_javelin.add_flag(ItemFlag.IS_MERCHANDISE)
itm_javelin.add_flag(ItemFlag.IS_PRIMARY)
itm_javelin.add_flag(ItemFlag.IS_CIVILIAN)
itm_javelin.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_javelin.add_capability(ItemCapability.THROW_JAVELIN)
itm_javelin.add_capability(ItemCapability.CARRY_QUIVER_BACK)
itm_javelin.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_javelin.set_price(300)
itm_javelin.add_modifier(IModBit.BENT)
itm_javelin.add_modifier(IModBit.BALANCED)
itm_javelin.add_modifier(IModBit.HEAVY)
itm_javelin.add_modifier(IModBit.LARGE_BAG)
itm_javelin.set_weight(4.0)
itm_javelin.set_abundance(100)
itm_javelin.set_difficulty(1)
itm_javelin.set_speed_rating(91)
itm_javelin.set_missile_speed(25)
itm_javelin.set_weapon_length(75)
itm_javelin.set_max_ammo(5)
itm_javelin.set_thrust_damage(34, 1)


itm_javelin_melee = Item("itm_javelin_melee", "Javelin")
itm_javelin_melee.add_mesh(ItemMesh("javelin"))
itm_javelin_melee.add_flag(ItemType.POLEARM)
itm_javelin_melee.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_javelin_melee.add_flag(ItemFlag.IS_PRIMARY)
itm_javelin_melee.add_capability(ItemCapability.POLEARM_THRUST)
itm_javelin_melee.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_javelin_melee.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_javelin_melee.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_javelin_melee.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_javelin_melee.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_javelin_melee.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_javelin_melee.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_javelin_melee.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_javelin_melee.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_javelin_melee.set_price(300)
itm_javelin_melee.add_modifier(IModBit.CRACKED)
itm_javelin_melee.add_modifier(IModBit.BENT)
itm_javelin_melee.add_modifier(IModBit.BALANCED)
itm_javelin_melee.set_weight(1.0)
itm_javelin_melee.set_abundance(100)
itm_javelin_melee.set_hit_points(12288)
itm_javelin_melee.set_speed_rating(95)
itm_javelin_melee.set_weapon_length(75)
itm_javelin_melee.set_thrust_damage(14, 1)
itm_javelin_melee.set_swing_damage(12, 0)


itm_throwing_spears = Item("itm_throwing_spears", "Throwing_Spears")
itm_throwing_spears.add_mesh(ItemMesh("jarid_new_b"))
itm_throwing_spears.add_mesh(ItemMesh("jarid_new_b_bag", ItemMesh.ixmesh_carry))
itm_throwing_spears.add_flag(ItemType.THROWN)
itm_throwing_spears.add_flag(ItemFlag.IS_MERCHANDISE)
itm_throwing_spears.add_flag(ItemFlag.IS_PRIMARY)
itm_throwing_spears.add_flag(ItemFlag.IS_CIVILIAN)
itm_throwing_spears.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_throwing_spears.add_capability(ItemCapability.THROW_JAVELIN)
itm_throwing_spears.add_capability(ItemCapability.CARRY_QUIVER_BACK)
itm_throwing_spears.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_throwing_spears.set_price(525)
itm_throwing_spears.add_modifier(IModBit.BENT)
itm_throwing_spears.add_modifier(IModBit.BALANCED)
itm_throwing_spears.add_modifier(IModBit.HEAVY)
itm_throwing_spears.add_modifier(IModBit.LARGE_BAG)
itm_throwing_spears.set_weight(3.0)
itm_throwing_spears.set_abundance(100)
itm_throwing_spears.set_difficulty(2)
itm_throwing_spears.set_speed_rating(87)
itm_throwing_spears.set_missile_speed(22)
itm_throwing_spears.set_weapon_length(65)
itm_throwing_spears.set_max_ammo(4)
itm_throwing_spears.set_thrust_damage(44, 1)


itm_throwing_spear_melee = Item("itm_throwing_spear_melee", "Throwing_Spear")
itm_throwing_spear_melee.add_mesh(ItemMesh("jarid_new_b"))
itm_throwing_spear_melee.add_mesh(ItemMesh("javelins_quiver", ItemMesh.ixmesh_carry))
itm_throwing_spear_melee.add_flag(ItemType.POLEARM)
itm_throwing_spear_melee.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_throwing_spear_melee.add_flag(ItemFlag.IS_PRIMARY)
itm_throwing_spear_melee.add_capability(ItemCapability.POLEARM_THRUST)
itm_throwing_spear_melee.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_throwing_spear_melee.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_throwing_spear_melee.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_throwing_spear_melee.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_throwing_spear_melee.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_throwing_spear_melee.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_throwing_spear_melee.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_throwing_spear_melee.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_throwing_spear_melee.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_throwing_spear_melee.set_price(525)
itm_throwing_spear_melee.add_modifier(IModBit.BENT)
itm_throwing_spear_melee.add_modifier(IModBit.BALANCED)
itm_throwing_spear_melee.add_modifier(IModBit.HEAVY)
itm_throwing_spear_melee.add_modifier(IModBit.LARGE_BAG)
itm_throwing_spear_melee.set_weight(1.0)
itm_throwing_spear_melee.set_abundance(100)
itm_throwing_spear_melee.set_difficulty(1)
itm_throwing_spear_melee.set_hit_points(18432)
itm_throwing_spear_melee.set_speed_rating(91)
itm_throwing_spear_melee.set_weapon_length(75)
itm_throwing_spear_melee.set_thrust_damage(23, 1)
itm_throwing_spear_melee.set_swing_damage(18, 0)


itm_jarid = Item("itm_jarid", "Jarids")
itm_jarid.add_mesh(ItemMesh("jarid_new"))
itm_jarid.add_mesh(ItemMesh("jarid_quiver", ItemMesh.ixmesh_carry))
itm_jarid.add_flag(ItemType.THROWN)
itm_jarid.add_flag(ItemFlag.IS_MERCHANDISE)
itm_jarid.add_flag(ItemFlag.IS_PRIMARY)
itm_jarid.add_flag(ItemFlag.IS_CIVILIAN)
itm_jarid.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_jarid.add_capability(ItemCapability.THROW_JAVELIN)
itm_jarid.add_capability(ItemCapability.CARRY_QUIVER_BACK)
itm_jarid.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_jarid.set_price(560)
itm_jarid.add_modifier(IModBit.BENT)
itm_jarid.add_modifier(IModBit.BALANCED)
itm_jarid.add_modifier(IModBit.HEAVY)
itm_jarid.add_modifier(IModBit.LARGE_BAG)
itm_jarid.set_weight(2.75)
itm_jarid.set_abundance(100)
itm_jarid.set_difficulty(2)
itm_jarid.set_speed_rating(89)
itm_jarid.set_missile_speed(24)
itm_jarid.set_weapon_length(65)
itm_jarid.set_max_ammo(4)
itm_jarid.set_thrust_damage(45, 1)


itm_jarid_melee = Item("itm_jarid_melee", "Jarid")
itm_jarid_melee.add_mesh(ItemMesh("jarid_new"))
itm_jarid_melee.add_mesh(ItemMesh("jarid_quiver", ItemMesh.ixmesh_carry))
itm_jarid_melee.add_flag(ItemType.POLEARM)
itm_jarid_melee.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_jarid_melee.add_flag(ItemFlag.IS_PRIMARY)
itm_jarid_melee.add_capability(ItemCapability.POLEARM_THRUST)
itm_jarid_melee.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_jarid_melee.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_jarid_melee.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_jarid_melee.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_jarid_melee.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_jarid_melee.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_jarid_melee.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_jarid_melee.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_jarid_melee.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_jarid_melee.set_price(560)
itm_jarid_melee.add_modifier(IModBit.BENT)
itm_jarid_melee.add_modifier(IModBit.BALANCED)
itm_jarid_melee.add_modifier(IModBit.HEAVY)
itm_jarid_melee.add_modifier(IModBit.LARGE_BAG)
itm_jarid_melee.set_weight(1.0)
itm_jarid_melee.set_abundance(100)
itm_jarid_melee.set_difficulty(2)
itm_jarid_melee.set_hit_points(16384)
itm_jarid_melee.set_speed_rating(93)
itm_jarid_melee.set_weapon_length(65)
itm_jarid_melee.set_thrust_damage(20, 1)
itm_jarid_melee.set_swing_damage(16, 0)


itm_stones = Item("itm_stones", "Stones")
itm_stones.add_mesh(ItemMesh("throwing_stone"))
itm_stones.add_flag(ItemType.THROWN)
itm_stones.add_flag(ItemFlag.IS_MERCHANDISE)
itm_stones.add_flag(ItemFlag.IS_PRIMARY)
itm_stones.add_capability(ItemCapability.THROW_STONE)
itm_stones.set_price(1)
itm_stones.add_modifier(IModBit.LARGE_BAG)
itm_stones.set_weight(4.0)
itm_stones.set_abundance(100)
itm_stones.set_speed_rating(97)
itm_stones.set_missile_speed(30)
itm_stones.set_weapon_length(8)
itm_stones.set_max_ammo(18)
itm_stones.set_thrust_damage(11, 2)


itm_throwing_knives = Item("itm_throwing_knives", "Throwing_Knives")
itm_throwing_knives.add_mesh(ItemMesh("throwing_knife"))
itm_throwing_knives.add_flag(ItemType.THROWN)
itm_throwing_knives.add_flag(ItemFlag.IS_MERCHANDISE)
itm_throwing_knives.add_flag(ItemFlag.IS_PRIMARY)
itm_throwing_knives.add_capability(ItemCapability.THROW_KNIFE)
itm_throwing_knives.set_price(76)
itm_throwing_knives.add_modifier(IModBit.BENT)
itm_throwing_knives.add_modifier(IModBit.BALANCED)
itm_throwing_knives.add_modifier(IModBit.HEAVY)
itm_throwing_knives.add_modifier(IModBit.LARGE_BAG)
itm_throwing_knives.set_weight(2.5)
itm_throwing_knives.set_abundance(100)
itm_throwing_knives.set_speed_rating(121)
itm_throwing_knives.set_missile_speed(25)
itm_throwing_knives.set_max_ammo(14)
itm_throwing_knives.set_thrust_damage(19, 0)


itm_throwing_daggers = Item("itm_throwing_daggers", "Throwing_Daggers")
itm_throwing_daggers.add_mesh(ItemMesh("throwing_dagger"))
itm_throwing_daggers.add_flag(ItemType.THROWN)
itm_throwing_daggers.add_flag(ItemFlag.IS_MERCHANDISE)
itm_throwing_daggers.add_flag(ItemFlag.IS_PRIMARY)
itm_throwing_daggers.add_capability(ItemCapability.THROW_KNIFE)
itm_throwing_daggers.set_price(193)
itm_throwing_daggers.add_modifier(IModBit.BENT)
itm_throwing_daggers.add_modifier(IModBit.BALANCED)
itm_throwing_daggers.add_modifier(IModBit.HEAVY)
itm_throwing_daggers.add_modifier(IModBit.LARGE_BAG)
itm_throwing_daggers.set_weight(2.5)
itm_throwing_daggers.set_abundance(100)
itm_throwing_daggers.set_speed_rating(110)
itm_throwing_daggers.set_missile_speed(24)
itm_throwing_daggers.set_max_ammo(13)
itm_throwing_daggers.set_thrust_damage(25, 0)


itm_light_throwing_axes = Item("itm_light_throwing_axes", "Light_Throwing_Axes")
itm_light_throwing_axes.add_mesh(ItemMesh("francisca"))
itm_light_throwing_axes.add_flag(ItemType.THROWN)
itm_light_throwing_axes.add_flag(ItemFlag.IS_MERCHANDISE)
itm_light_throwing_axes.add_flag(ItemFlag.IS_PRIMARY)
itm_light_throwing_axes.add_flag(ItemFlag.IS_CIVILIAN)
itm_light_throwing_axes.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_light_throwing_axes.add_capability(ItemCapability.THROW_STONE)
itm_light_throwing_axes.add_capability(ItemCapability.THROW_KNIFE)
itm_light_throwing_axes.add_capability(ItemCapability.THROW_AXE)
itm_light_throwing_axes.set_price(360)
itm_light_throwing_axes.add_modifier(IModBit.BENT)
itm_light_throwing_axes.add_modifier(IModBit.BALANCED)
itm_light_throwing_axes.add_modifier(IModBit.LARGE_BAG)
itm_light_throwing_axes.set_weight(5.0)
itm_light_throwing_axes.set_abundance(100)
itm_light_throwing_axes.set_difficulty(2)
itm_light_throwing_axes.set_speed_rating(99)
itm_light_throwing_axes.set_missile_speed(18)
itm_light_throwing_axes.set_weapon_length(53)
itm_light_throwing_axes.set_max_ammo(4)
itm_light_throwing_axes.set_thrust_damage(35, 0)


itm_light_throwing_axes_melee = Item("itm_light_throwing_axes_melee", "Light_Throwing_Axe")
itm_light_throwing_axes_melee.add_mesh(ItemMesh("francisca"))
itm_light_throwing_axes_melee.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_light_throwing_axes_melee.add_flag(ItemFlag.IS_PRIMARY)
itm_light_throwing_axes_melee.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_light_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_light_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_light_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_light_throwing_axes_melee.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_light_throwing_axes_melee.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_light_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_light_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_light_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_light_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_light_throwing_axes_melee.add_capability(ItemCapability.FORCE_64_BITS)
itm_light_throwing_axes_melee.set_price(360)
itm_light_throwing_axes_melee.add_modifier(IModBit.BENT)
itm_light_throwing_axes_melee.add_modifier(IModBit.BALANCED)
itm_light_throwing_axes_melee.add_modifier(IModBit.LARGE_BAG)
itm_light_throwing_axes_melee.set_weight(1.0)
itm_light_throwing_axes_melee.set_abundance(100)
itm_light_throwing_axes_melee.set_difficulty(2)
itm_light_throwing_axes_melee.set_hit_points(26624)
itm_light_throwing_axes_melee.set_speed_rating(99)
itm_light_throwing_axes_melee.set_weapon_length(53)
itm_light_throwing_axes_melee.set_swing_damage(26, 0)


itm_throwing_axes = Item("itm_throwing_axes", "Throwing_Axes")
itm_throwing_axes.add_mesh(ItemMesh("throwing_axe_a"))
itm_throwing_axes.add_flag(ItemType.THROWN)
itm_throwing_axes.add_flag(ItemFlag.IS_MERCHANDISE)
itm_throwing_axes.add_flag(ItemFlag.IS_PRIMARY)
itm_throwing_axes.add_flag(ItemFlag.IS_CIVILIAN)
itm_throwing_axes.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_throwing_axes.add_capability(ItemCapability.THROW_STONE)
itm_throwing_axes.add_capability(ItemCapability.THROW_KNIFE)
itm_throwing_axes.add_capability(ItemCapability.THROW_AXE)
itm_throwing_axes.set_price(490)
itm_throwing_axes.add_modifier(IModBit.BENT)
itm_throwing_axes.add_modifier(IModBit.BALANCED)
itm_throwing_axes.add_modifier(IModBit.LARGE_BAG)
itm_throwing_axes.set_weight(5.0)
itm_throwing_axes.set_abundance(100)
itm_throwing_axes.set_difficulty(3)
itm_throwing_axes.set_speed_rating(98)
itm_throwing_axes.set_missile_speed(18)
itm_throwing_axes.set_weapon_length(53)
itm_throwing_axes.set_max_ammo(4)
itm_throwing_axes.set_thrust_damage(39, 0)


itm_throwing_axes_melee = Item("itm_throwing_axes_melee", "Throwing_Axe")
itm_throwing_axes_melee.add_mesh(ItemMesh("throwing_axe_a"))
itm_throwing_axes_melee.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_throwing_axes_melee.add_flag(ItemFlag.IS_PRIMARY)
itm_throwing_axes_melee.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_throwing_axes_melee.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_throwing_axes_melee.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_throwing_axes_melee.add_capability(ItemCapability.FORCE_64_BITS)
itm_throwing_axes_melee.set_price(490)
itm_throwing_axes_melee.add_modifier(IModBit.BENT)
itm_throwing_axes_melee.add_modifier(IModBit.BALANCED)
itm_throwing_axes_melee.add_modifier(IModBit.LARGE_BAG)
itm_throwing_axes_melee.set_weight(1.0)
itm_throwing_axes_melee.set_abundance(100)
itm_throwing_axes_melee.set_difficulty(3)
itm_throwing_axes_melee.set_hit_points(29696)
itm_throwing_axes_melee.set_speed_rating(98)
itm_throwing_axes_melee.set_weapon_length(53)
itm_throwing_axes_melee.set_swing_damage(29, 0)


itm_heavy_throwing_axes = Item("itm_heavy_throwing_axes", "Heavy_Throwing_Axes")
itm_heavy_throwing_axes.add_mesh(ItemMesh("throwing_axe_b"))
itm_heavy_throwing_axes.add_flag(ItemType.THROWN)
itm_heavy_throwing_axes.add_flag(ItemFlag.IS_MERCHANDISE)
itm_heavy_throwing_axes.add_flag(ItemFlag.IS_PRIMARY)
itm_heavy_throwing_axes.add_flag(ItemFlag.IS_CIVILIAN)
itm_heavy_throwing_axes.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_heavy_throwing_axes.add_capability(ItemCapability.THROW_STONE)
itm_heavy_throwing_axes.add_capability(ItemCapability.THROW_KNIFE)
itm_heavy_throwing_axes.add_capability(ItemCapability.THROW_AXE)
itm_heavy_throwing_axes.set_price(620)
itm_heavy_throwing_axes.add_modifier(IModBit.BENT)
itm_heavy_throwing_axes.add_modifier(IModBit.BALANCED)
itm_heavy_throwing_axes.add_modifier(IModBit.LARGE_BAG)
itm_heavy_throwing_axes.set_weight(5.0)
itm_heavy_throwing_axes.set_abundance(100)
itm_heavy_throwing_axes.set_difficulty(4)
itm_heavy_throwing_axes.set_speed_rating(97)
itm_heavy_throwing_axes.set_missile_speed(18)
itm_heavy_throwing_axes.set_weapon_length(53)
itm_heavy_throwing_axes.set_max_ammo(4)
itm_heavy_throwing_axes.set_thrust_damage(44, 0)


itm_heavy_throwing_axes_melee = Item("itm_heavy_throwing_axes_melee", "Heavy_Throwing_Axe")
itm_heavy_throwing_axes_melee.add_mesh(ItemMesh("throwing_axe_b"))
itm_heavy_throwing_axes_melee.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_heavy_throwing_axes_melee.add_flag(ItemFlag.IS_PRIMARY)
itm_heavy_throwing_axes_melee.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_heavy_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_heavy_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_heavy_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_heavy_throwing_axes_melee.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_heavy_throwing_axes_melee.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_heavy_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_heavy_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_heavy_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_heavy_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_heavy_throwing_axes_melee.add_capability(ItemCapability.FORCE_64_BITS)
itm_heavy_throwing_axes_melee.set_price(620)
itm_heavy_throwing_axes_melee.add_modifier(IModBit.BENT)
itm_heavy_throwing_axes_melee.add_modifier(IModBit.BALANCED)
itm_heavy_throwing_axes_melee.add_modifier(IModBit.LARGE_BAG)
itm_heavy_throwing_axes_melee.set_weight(1.0)
itm_heavy_throwing_axes_melee.set_abundance(100)
itm_heavy_throwing_axes_melee.set_difficulty(4)
itm_heavy_throwing_axes_melee.set_hit_points(32768)
itm_heavy_throwing_axes_melee.set_speed_rating(97)
itm_heavy_throwing_axes_melee.set_weapon_length(53)
itm_heavy_throwing_axes_melee.set_swing_damage(32, 0)


itm_hunting_bow = Item("itm_hunting_bow", "Hunting_Bow")
itm_hunting_bow.add_mesh(ItemMesh("hunting_bow"))
itm_hunting_bow.add_mesh(ItemMesh("hunting_bow_carry", ItemMesh.ixmesh_carry))
itm_hunting_bow.add_flag(ItemType.BOW)
itm_hunting_bow.add_flag(ItemFlag.IS_MERCHANDISE)
itm_hunting_bow.add_flag(ItemFlag.IS_TWO_HANDED)
itm_hunting_bow.add_flag(ItemFlag.IS_PRIMARY)
itm_hunting_bow.add_capability(ItemCapability.SHOOT_BOW)
itm_hunting_bow.add_capability(ItemCapability.CARRY_BOW_BACK)
itm_hunting_bow.set_price(17)
itm_hunting_bow.add_modifier(IModBit.CRACKED)
itm_hunting_bow.add_modifier(IModBit.BENT)
itm_hunting_bow.add_modifier(IModBit.MASTERWORK)
itm_hunting_bow.add_modifier(IModBit.STRONG)
itm_hunting_bow.set_weight(1.0)
itm_hunting_bow.set_abundance(100)
itm_hunting_bow.set_speed_rating(100)
itm_hunting_bow.set_missile_speed(52)
itm_hunting_bow.set_thrust_damage(15, 1)


itm_short_bow = Item("itm_short_bow", "Short_Bow")
itm_short_bow.add_mesh(ItemMesh("short_bow"))
itm_short_bow.add_mesh(ItemMesh("short_bow_carry", ItemMesh.ixmesh_carry))
itm_short_bow.add_flag(ItemType.BOW)
itm_short_bow.add_flag(ItemFlag.IS_MERCHANDISE)
itm_short_bow.add_flag(ItemFlag.IS_TWO_HANDED)
itm_short_bow.add_flag(ItemFlag.IS_PRIMARY)
itm_short_bow.add_capability(ItemCapability.SHOOT_BOW)
itm_short_bow.add_capability(ItemCapability.CARRY_BOW_BACK)
itm_short_bow.set_price(58)
itm_short_bow.add_modifier(IModBit.CRACKED)
itm_short_bow.add_modifier(IModBit.BENT)
itm_short_bow.add_modifier(IModBit.MASTERWORK)
itm_short_bow.add_modifier(IModBit.STRONG)
itm_short_bow.set_weight(1.0)
itm_short_bow.set_abundance(100)
itm_short_bow.set_difficulty(1)
itm_short_bow.set_speed_rating(97)
itm_short_bow.set_missile_speed(55)
itm_short_bow.set_thrust_damage(18, 1)


itm_nomad_bow = Item("itm_nomad_bow", "Nomad_Bow")
itm_nomad_bow.add_mesh(ItemMesh("nomad_bow"))
itm_nomad_bow.add_mesh(ItemMesh("nomad_bow_case", ItemMesh.ixmesh_carry))
itm_nomad_bow.add_flag(ItemType.BOW)
itm_nomad_bow.add_flag(ItemFlag.IS_MERCHANDISE)
itm_nomad_bow.add_flag(ItemFlag.IS_TWO_HANDED)
itm_nomad_bow.add_flag(ItemFlag.IS_PRIMARY)
itm_nomad_bow.add_capability(ItemCapability.SHOOT_BOW)
itm_nomad_bow.add_capability(ItemCapability.CARRY_BOWCASE_LEFT)
itm_nomad_bow.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_nomad_bow.set_price(164)
itm_nomad_bow.add_modifier(IModBit.CRACKED)
itm_nomad_bow.add_modifier(IModBit.BENT)
itm_nomad_bow.add_modifier(IModBit.MASTERWORK)
itm_nomad_bow.add_modifier(IModBit.STRONG)
itm_nomad_bow.set_weight(1.25)
itm_nomad_bow.set_abundance(100)
itm_nomad_bow.set_difficulty(2)
itm_nomad_bow.set_speed_rating(94)
itm_nomad_bow.set_missile_speed(56)
itm_nomad_bow.set_thrust_damage(20, 1)


itm_long_bow = Item("itm_long_bow", "Long_Bow")
itm_long_bow.add_mesh(ItemMesh("long_bow"))
itm_long_bow.add_mesh(ItemMesh("long_bow_carry", ItemMesh.ixmesh_carry))
itm_long_bow.add_flag(ItemType.BOW)
itm_long_bow.add_flag(ItemFlag.IS_MERCHANDISE)
itm_long_bow.add_flag(ItemFlag.IS_TWO_HANDED)
itm_long_bow.add_flag(ItemFlag.IS_PRIMARY)
itm_long_bow.add_capability(ItemCapability.SHOOT_BOW)
itm_long_bow.add_capability(ItemCapability.CARRY_BOW_BACK)
itm_long_bow.set_price(145)
itm_long_bow.add_modifier(IModBit.CRACKED)
itm_long_bow.add_modifier(IModBit.BENT)
itm_long_bow.add_modifier(IModBit.MASTERWORK)
itm_long_bow.add_modifier(IModBit.STRONG)
itm_long_bow.set_weight(1.75)
itm_long_bow.set_abundance(100)
itm_long_bow.set_difficulty(3)
itm_long_bow.set_speed_rating(79)
itm_long_bow.set_missile_speed(56)
itm_long_bow.set_thrust_damage(22, 1)


itm_khergit_bow = Item("itm_khergit_bow", "Khergit_Bow")
itm_khergit_bow.add_mesh(ItemMesh("khergit_bow"))
itm_khergit_bow.add_mesh(ItemMesh("khergit_bow_case", ItemMesh.ixmesh_carry))
itm_khergit_bow.add_flag(ItemType.BOW)
itm_khergit_bow.add_flag(ItemFlag.IS_MERCHANDISE)
itm_khergit_bow.add_flag(ItemFlag.IS_TWO_HANDED)
itm_khergit_bow.add_flag(ItemFlag.IS_PRIMARY)
itm_khergit_bow.add_capability(ItemCapability.SHOOT_BOW)
itm_khergit_bow.add_capability(ItemCapability.CARRY_BOWCASE_LEFT)
itm_khergit_bow.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_khergit_bow.set_price(269)
itm_khergit_bow.add_modifier(IModBit.CRACKED)
itm_khergit_bow.add_modifier(IModBit.BENT)
itm_khergit_bow.add_modifier(IModBit.MASTERWORK)
itm_khergit_bow.add_modifier(IModBit.STRONG)
itm_khergit_bow.set_weight(1.25)
itm_khergit_bow.set_abundance(100)
itm_khergit_bow.set_difficulty(3)
itm_khergit_bow.set_speed_rating(90)
itm_khergit_bow.set_missile_speed(57)
itm_khergit_bow.set_thrust_damage(21, 1)


itm_strong_bow = Item("itm_strong_bow", "Strong_Bow")
itm_strong_bow.add_mesh(ItemMesh("strong_bow"))
itm_strong_bow.add_mesh(ItemMesh("strong_bow_case", ItemMesh.ixmesh_carry))
itm_strong_bow.add_flag(ItemType.BOW)
itm_strong_bow.add_flag(ItemFlag.IS_MERCHANDISE)
itm_strong_bow.add_flag(ItemFlag.IS_TWO_HANDED)
itm_strong_bow.add_flag(ItemFlag.IS_PRIMARY)
itm_strong_bow.add_capability(ItemCapability.SHOOT_BOW)
itm_strong_bow.add_capability(ItemCapability.CARRY_BOWCASE_LEFT)
itm_strong_bow.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_strong_bow.set_price(437)
itm_strong_bow.add_modifier(IModBit.CRACKED)
itm_strong_bow.add_modifier(IModBit.BENT)
itm_strong_bow.add_modifier(IModBit.MASTERWORK)
itm_strong_bow.set_weight(1.25)
itm_strong_bow.set_abundance(100)
itm_strong_bow.set_difficulty(3)
itm_strong_bow.set_speed_rating(88)
itm_strong_bow.set_missile_speed(58)
itm_strong_bow.set_thrust_damage(23, 1)


itm_war_bow = Item("itm_war_bow", "War_Bow")
itm_war_bow.add_mesh(ItemMesh("war_bow"))
itm_war_bow.add_mesh(ItemMesh("war_bow_carry", ItemMesh.ixmesh_carry))
itm_war_bow.add_flag(ItemType.BOW)
itm_war_bow.add_flag(ItemFlag.IS_MERCHANDISE)
itm_war_bow.add_flag(ItemFlag.IS_TWO_HANDED)
itm_war_bow.add_flag(ItemFlag.IS_PRIMARY)
itm_war_bow.add_capability(ItemCapability.SHOOT_BOW)
itm_war_bow.add_capability(ItemCapability.CARRY_BOW_BACK)
itm_war_bow.set_price(728)
itm_war_bow.add_modifier(IModBit.CRACKED)
itm_war_bow.add_modifier(IModBit.BENT)
itm_war_bow.add_modifier(IModBit.MASTERWORK)
itm_war_bow.add_modifier(IModBit.STRONG)
itm_war_bow.set_weight(1.5)
itm_war_bow.set_abundance(100)
itm_war_bow.set_difficulty(4)
itm_war_bow.set_speed_rating(84)
itm_war_bow.set_missile_speed(59)
itm_war_bow.set_thrust_damage(25, 1)


itm_hunting_crossbow = Item("itm_hunting_crossbow", "Hunting_Crossbow")
itm_hunting_crossbow.add_mesh(ItemMesh("crossbow_a"))
itm_hunting_crossbow.add_flag(ItemType.CROSSBOW)
itm_hunting_crossbow.add_flag(ItemFlag.IS_MERCHANDISE)
itm_hunting_crossbow.add_flag(ItemFlag.IS_TWO_HANDED)
itm_hunting_crossbow.add_flag(ItemFlag.IS_PRIMARY)
itm_hunting_crossbow.add_capability(ItemCapability.SHOOT_CROSSBOW)
itm_hunting_crossbow.add_capability(ItemCapability.CARRY_CROSSBOW_BACK)
itm_hunting_crossbow.set_price(22)
itm_hunting_crossbow.add_modifier(IModBit.CRACKED)
itm_hunting_crossbow.add_modifier(IModBit.BENT)
itm_hunting_crossbow.add_modifier(IModBit.MASTERWORK)
itm_hunting_crossbow.set_weight(2.25)
itm_hunting_crossbow.set_abundance(100)
itm_hunting_crossbow.set_speed_rating(47)
itm_hunting_crossbow.set_missile_speed(50)
itm_hunting_crossbow.set_max_ammo(1)
itm_hunting_crossbow.set_thrust_damage(37, 1)


itm_light_crossbow = Item("itm_light_crossbow", "Light_Crossbow")
itm_light_crossbow.add_mesh(ItemMesh("crossbow_b"))
itm_light_crossbow.add_flag(ItemType.CROSSBOW)
itm_light_crossbow.add_flag(ItemFlag.IS_MERCHANDISE)
itm_light_crossbow.add_flag(ItemFlag.IS_TWO_HANDED)
itm_light_crossbow.add_flag(ItemFlag.IS_PRIMARY)
itm_light_crossbow.add_capability(ItemCapability.SHOOT_CROSSBOW)
itm_light_crossbow.add_capability(ItemCapability.CARRY_CROSSBOW_BACK)
itm_light_crossbow.set_price(67)
itm_light_crossbow.add_modifier(IModBit.CRACKED)
itm_light_crossbow.add_modifier(IModBit.BENT)
itm_light_crossbow.add_modifier(IModBit.MASTERWORK)
itm_light_crossbow.set_weight(2.5)
itm_light_crossbow.set_abundance(100)
itm_light_crossbow.set_difficulty(8)
itm_light_crossbow.set_speed_rating(45)
itm_light_crossbow.set_missile_speed(59)
itm_light_crossbow.set_max_ammo(1)
itm_light_crossbow.set_thrust_damage(44, 1)


itm_crossbow = Item("itm_crossbow", "Crossbow")
itm_crossbow.add_mesh(ItemMesh("crossbow_a"))
itm_crossbow.add_flag(ItemType.CROSSBOW)
itm_crossbow.add_flag(ItemFlag.IS_MERCHANDISE)
itm_crossbow.add_flag(ItemFlag.CANT_RELOAD_ON_HORSEBACK)
itm_crossbow.add_flag(ItemFlag.IS_TWO_HANDED)
itm_crossbow.add_flag(ItemFlag.IS_PRIMARY)
itm_crossbow.add_capability(ItemCapability.SHOOT_CROSSBOW)
itm_crossbow.add_capability(ItemCapability.CARRY_CROSSBOW_BACK)
itm_crossbow.set_price(182)
itm_crossbow.add_modifier(IModBit.CRACKED)
itm_crossbow.add_modifier(IModBit.BENT)
itm_crossbow.add_modifier(IModBit.MASTERWORK)
itm_crossbow.set_weight(3.0)
itm_crossbow.set_abundance(100)
itm_crossbow.set_difficulty(8)
itm_crossbow.set_speed_rating(43)
itm_crossbow.set_missile_speed(66)
itm_crossbow.set_max_ammo(1)
itm_crossbow.set_thrust_damage(49, 1)


itm_heavy_crossbow = Item("itm_heavy_crossbow", "Heavy_Crossbow")
itm_heavy_crossbow.add_mesh(ItemMesh("crossbow_c"))
itm_heavy_crossbow.add_flag(ItemType.CROSSBOW)
itm_heavy_crossbow.add_flag(ItemFlag.IS_MERCHANDISE)
itm_heavy_crossbow.add_flag(ItemFlag.CANT_RELOAD_ON_HORSEBACK)
itm_heavy_crossbow.add_flag(ItemFlag.IS_TWO_HANDED)
itm_heavy_crossbow.add_flag(ItemFlag.IS_PRIMARY)
itm_heavy_crossbow.add_capability(ItemCapability.SHOOT_CROSSBOW)
itm_heavy_crossbow.add_capability(ItemCapability.CARRY_CROSSBOW_BACK)
itm_heavy_crossbow.set_price(349)
itm_heavy_crossbow.add_modifier(IModBit.CRACKED)
itm_heavy_crossbow.add_modifier(IModBit.BENT)
itm_heavy_crossbow.add_modifier(IModBit.MASTERWORK)
itm_heavy_crossbow.set_weight(3.5)
itm_heavy_crossbow.set_abundance(100)
itm_heavy_crossbow.set_difficulty(9)
itm_heavy_crossbow.set_speed_rating(41)
itm_heavy_crossbow.set_missile_speed(68)
itm_heavy_crossbow.set_max_ammo(1)
itm_heavy_crossbow.set_thrust_damage(58, 1)


itm_sniper_crossbow = Item("itm_sniper_crossbow", "Siege_Crossbow")
itm_sniper_crossbow.add_mesh(ItemMesh("crossbow_c"))
itm_sniper_crossbow.add_flag(ItemType.CROSSBOW)
itm_sniper_crossbow.add_flag(ItemFlag.IS_MERCHANDISE)
itm_sniper_crossbow.add_flag(ItemFlag.CANT_RELOAD_ON_HORSEBACK)
itm_sniper_crossbow.add_flag(ItemFlag.IS_TWO_HANDED)
itm_sniper_crossbow.add_flag(ItemFlag.IS_PRIMARY)
itm_sniper_crossbow.add_capability(ItemCapability.SHOOT_CROSSBOW)
itm_sniper_crossbow.add_capability(ItemCapability.CARRY_CROSSBOW_BACK)
itm_sniper_crossbow.set_price(683)
itm_sniper_crossbow.add_modifier(IModBit.CRACKED)
itm_sniper_crossbow.add_modifier(IModBit.BENT)
itm_sniper_crossbow.add_modifier(IModBit.MASTERWORK)
itm_sniper_crossbow.set_weight(3.75)
itm_sniper_crossbow.set_abundance(100)
itm_sniper_crossbow.set_difficulty(10)
itm_sniper_crossbow.set_speed_rating(37)
itm_sniper_crossbow.set_missile_speed(70)
itm_sniper_crossbow.set_max_ammo(1)
itm_sniper_crossbow.set_thrust_damage(63, 1)


itm_flintlock_pistol = Item("itm_flintlock_pistol", "Flintlock_Pistol")
itm_flintlock_pistol.add_mesh(ItemMesh("flintlock_pistol"))
itm_flintlock_pistol.add_flag(ItemType.PISTOL)
itm_flintlock_pistol.add_flag(ItemFlag.IS_MERCHANDISE)
itm_flintlock_pistol.add_flag(ItemFlag.IS_PRIMARY)
itm_flintlock_pistol.add_capability(ItemCapability.THROW_STONE)
itm_flintlock_pistol.add_capability(ItemCapability.THROW_KNIFE)
itm_flintlock_pistol.add_capability(ItemCapability.THROW_AXE)
itm_flintlock_pistol.add_capability(ItemCapability.THROW_JAVELIN)
itm_flintlock_pistol.add_capability(ItemCapability.SHOOT_PISTOL)
itm_flintlock_pistol.add_capability(ItemCapability.RELOAD_PISTOL)
itm_flintlock_pistol.set_price(230)
itm_flintlock_pistol.set_weight(1.5)
itm_flintlock_pistol.set_abundance(100)
itm_flintlock_pistol.set_leg_armor(65)
itm_flintlock_pistol.set_speed_rating(38)
itm_flintlock_pistol.set_missile_speed(160)
itm_flintlock_pistol.set_max_ammo(1)
itm_flintlock_pistol.set_thrust_damage(45, 1)
# -51.000000  4 600 1 1152921504606847102 720 2 1 27 721 2 1 36 1969 3 1008806316530991133 1 15


itm_torch = Item("itm_torch", "Torch")
itm_torch.add_mesh(ItemMesh("club"))
itm_torch.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_torch.add_flag(ItemFlag.IS_PRIMARY)
itm_torch.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_torch.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_torch.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_torch.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_torch.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_torch.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_torch.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_torch.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_torch.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_torch.add_capability(ItemCapability.FORCE_64_BITS)
itm_torch.set_price(11)
itm_torch.set_weight(2.5)
itm_torch.set_abundance(100)
itm_torch.set_hit_points(11264)
itm_torch.set_speed_rating(95)
itm_torch.set_weapon_length(95)
itm_torch.set_thrust_damage(0, 1)
itm_torch.set_swing_damage(11, 2)
# -50.000000  5 1955 3 0 60 0 1965 1 1008806316530991114 1965 1 1008806316530991117 1950 3 150 130 70 1960 2 10 30


itm_lyre = Item("itm_lyre", "Lyre")
itm_lyre.add_mesh(ItemMesh("lyre"))
itm_lyre.add_flag(ItemType.SHIELD)
itm_lyre.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_lyre.add_flag(ItemFlag.IS_CIVILIAN)
itm_lyre.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_lyre.add_capability(ItemCapability.CARRY_BOW_BACK)
itm_lyre.set_price(118)
itm_lyre.set_weight(2.5)
itm_lyre.set_abundance(100)
itm_lyre.set_body_armor(1)
itm_lyre.set_hit_points(480)
itm_lyre.set_speed_rating(82)
itm_lyre.set_weapon_length(90)


itm_lute = Item("itm_lute", "Lute")
itm_lute.add_mesh(ItemMesh("lute"))
itm_lute.add_flag(ItemType.SHIELD)
itm_lute.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_lute.add_flag(ItemFlag.IS_CIVILIAN)
itm_lute.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_lute.add_capability(ItemCapability.CARRY_BOW_BACK)
itm_lute.set_price(118)
itm_lute.set_weight(2.5)
itm_lute.set_abundance(100)
itm_lute.set_body_armor(1)
itm_lute.set_hit_points(480)
itm_lute.set_speed_rating(82)
itm_lute.set_weapon_length(90)


itm_strange_armor = Item("itm_strange_armor", "Strange_Armor")
itm_strange_armor.add_mesh(ItemMesh("samurai_armor"))
itm_strange_armor.add_flag(ItemType.BODY_ARMOR)
itm_strange_armor.add_flag(ItemFlag.COVERS_LEGS)
itm_strange_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_strange_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_strange_armor.set_price(1259)
itm_strange_armor.add_modifier(IModBit.RUSTY)
itm_strange_armor.add_modifier(IModBit.BATTERED)
itm_strange_armor.add_modifier(IModBit.CRUDE)
itm_strange_armor.add_modifier(IModBit.THICK)
itm_strange_armor.add_modifier(IModBit.REINFORCED)
itm_strange_armor.add_modifier(IModBit.LORDLY)
itm_strange_armor.set_weight(18.0)
itm_strange_armor.set_abundance(100)
itm_strange_armor.set_body_armor(38)
itm_strange_armor.set_leg_armor(19)
itm_strange_armor.set_difficulty(7)


itm_strange_boots = Item("itm_strange_boots", "Strange_Boots")
itm_strange_boots.add_mesh(ItemMesh("samurai_boots"))
itm_strange_boots.add_flag(ItemType.FOOT_ARMOR)
itm_strange_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_strange_boots.set_price(465)
itm_strange_boots.add_modifier(IModBit.TETTERED)
itm_strange_boots.add_modifier(IModBit.RAGGED)
itm_strange_boots.add_modifier(IModBit.STURDY)
itm_strange_boots.add_modifier(IModBit.THICK)
itm_strange_boots.add_modifier(IModBit.HARDENED)
itm_strange_boots.set_weight(1.0)
itm_strange_boots.set_abundance(100)
itm_strange_boots.set_leg_armor(21)


itm_strange_helmet = Item("itm_strange_helmet", "Strange_Helmet")
itm_strange_helmet.add_mesh(ItemMesh("samurai_helmet"))
itm_strange_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_strange_helmet.set_price(824)
itm_strange_helmet.add_modifier(IModBit.CRACKED)
itm_strange_helmet.add_modifier(IModBit.RUSTY)
itm_strange_helmet.add_modifier(IModBit.BATTERED)
itm_strange_helmet.add_modifier(IModBit.CRUDE)
itm_strange_helmet.add_modifier(IModBit.THICK)
itm_strange_helmet.add_modifier(IModBit.REINFORCED)
itm_strange_helmet.add_modifier(IModBit.LORDLY)
itm_strange_helmet.set_weight(2.0)
itm_strange_helmet.set_abundance(100)
itm_strange_helmet.set_head_armor(44)
itm_strange_helmet.set_difficulty(7)


itm_strange_sword = Item("itm_strange_sword", "Strange_Sword")
itm_strange_sword.add_mesh(ItemMesh("katana"))
itm_strange_sword.add_mesh(ItemMesh("katana_scabbard", ItemMesh.ixmesh_carry))
itm_strange_sword.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_strange_sword.add_flag(ItemFlag.IS_PRIMARY)
itm_strange_sword.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_strange_sword.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_strange_sword.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_strange_sword.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_strange_sword.add_capability(ItemCapability.TWOHANDED_THRUST)
itm_strange_sword.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_strange_sword.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_strange_sword.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_strange_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_strange_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_strange_sword.add_capability(ItemCapability.CARRY_KATANA)
itm_strange_sword.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_strange_sword.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_strange_sword.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_strange_sword.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_strange_sword.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_strange_sword.add_capability(ItemCapability.FORCE_64_BITS)
itm_strange_sword.set_price(679)
itm_strange_sword.add_modifier(IModBit.RUSTY)
itm_strange_sword.add_modifier(IModBit.CHIPPED)
itm_strange_sword.add_modifier(IModBit.BALANCED)
itm_strange_sword.add_modifier(IModBit.TEMPERED)
itm_strange_sword.set_weight(2.0)
itm_strange_sword.set_abundance(100)
itm_strange_sword.set_difficulty(9)
itm_strange_sword.set_hit_points(32768)
itm_strange_sword.set_speed_rating(108)
itm_strange_sword.set_weapon_length(95)
itm_strange_sword.set_thrust_damage(18, 1)
itm_strange_sword.set_swing_damage(32, 0)


itm_strange_great_sword = Item("itm_strange_great_sword", "Strange_Great_Sword")
itm_strange_great_sword.add_mesh(ItemMesh("no_dachi"))
itm_strange_great_sword.add_mesh(ItemMesh("no_dachi_scabbard", ItemMesh.ixmesh_carry))
itm_strange_great_sword.add_flag(ItemType.TWO_HANDED_WEAPON)
itm_strange_great_sword.add_flag(ItemFlag.IS_TWO_HANDED)
itm_strange_great_sword.add_flag(ItemFlag.IS_PRIMARY)
itm_strange_great_sword.add_capability(ItemCapability.TWOHANDED_OVERSWING)
itm_strange_great_sword.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
itm_strange_great_sword.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
itm_strange_great_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_strange_great_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_strange_great_sword.add_capability(ItemCapability.CARRY_SWORD_BACK)
itm_strange_great_sword.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_strange_great_sword.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
itm_strange_great_sword.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
itm_strange_great_sword.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
itm_strange_great_sword.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
itm_strange_great_sword.add_capability(ItemCapability.FORCE_64_BITS)
itm_strange_great_sword.set_price(920)
itm_strange_great_sword.add_modifier(IModBit.RUSTY)
itm_strange_great_sword.add_modifier(IModBit.CHIPPED)
itm_strange_great_sword.add_modifier(IModBit.HEAVY)
itm_strange_great_sword.set_weight(3.5)
itm_strange_great_sword.set_abundance(100)
itm_strange_great_sword.set_difficulty(11)
itm_strange_great_sword.set_hit_points(38912)
itm_strange_great_sword.set_speed_rating(92)
itm_strange_great_sword.set_weapon_length(125)
itm_strange_great_sword.set_thrust_damage(0, 1)
itm_strange_great_sword.set_swing_damage(38, 0)


itm_strange_short_sword = Item("itm_strange_short_sword", "Strange_Short_Sword")
itm_strange_short_sword.add_mesh(ItemMesh("wakizashi"))
itm_strange_short_sword.add_mesh(ItemMesh("wakizashi_scabbard", ItemMesh.ixmesh_carry))
itm_strange_short_sword.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_strange_short_sword.add_flag(ItemFlag.IS_PRIMARY)
itm_strange_short_sword.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_strange_short_sword.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_strange_short_sword.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_strange_short_sword.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_strange_short_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_strange_short_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_strange_short_sword.add_capability(ItemCapability.CARRY_WAKIZASHI)
itm_strange_short_sword.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_strange_short_sword.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_strange_short_sword.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_strange_short_sword.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_strange_short_sword.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_strange_short_sword.add_capability(ItemCapability.FORCE_64_BITS)
itm_strange_short_sword.set_price(321)
itm_strange_short_sword.add_modifier(IModBit.RUSTY)
itm_strange_short_sword.add_modifier(IModBit.CHIPPED)
itm_strange_short_sword.add_modifier(IModBit.BALANCED)
itm_strange_short_sword.add_modifier(IModBit.TEMPERED)
itm_strange_short_sword.set_weight(1.25)
itm_strange_short_sword.set_abundance(100)
itm_strange_short_sword.set_hit_points(25600)
itm_strange_short_sword.set_speed_rating(108)
itm_strange_short_sword.set_weapon_length(65)
itm_strange_short_sword.set_thrust_damage(19, 1)
itm_strange_short_sword.set_swing_damage(25, 0)


itm_court_dress = Item("itm_court_dress", "Court_Dress")
itm_court_dress.add_mesh(ItemMesh("court_dress"))
itm_court_dress.add_flag(ItemType.BODY_ARMOR)
itm_court_dress.add_flag(ItemFlag.COVERS_LEGS)
itm_court_dress.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_court_dress.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_court_dress.add_flag(ItemFlag.IS_CIVILIAN)
itm_court_dress.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_court_dress.set_price(348)
itm_court_dress.add_modifier(IModBit.TETTERED)
itm_court_dress.add_modifier(IModBit.RAGGED)
itm_court_dress.add_modifier(IModBit.STURDY)
itm_court_dress.add_modifier(IModBit.THICK)
itm_court_dress.add_modifier(IModBit.HARDENED)
itm_court_dress.set_weight(4.0)
itm_court_dress.set_abundance(100)
itm_court_dress.set_body_armor(14)
itm_court_dress.set_leg_armor(4)


itm_rich_outfit = Item("itm_rich_outfit", "Rich_Outfit")
itm_rich_outfit.add_mesh(ItemMesh("merchant_outf"))
itm_rich_outfit.add_flag(ItemType.BODY_ARMOR)
itm_rich_outfit.add_flag(ItemFlag.COVERS_LEGS)
itm_rich_outfit.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_rich_outfit.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_rich_outfit.add_flag(ItemFlag.IS_CIVILIAN)
itm_rich_outfit.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_rich_outfit.set_price(348)
itm_rich_outfit.add_modifier(IModBit.TETTERED)
itm_rich_outfit.add_modifier(IModBit.RAGGED)
itm_rich_outfit.add_modifier(IModBit.STURDY)
itm_rich_outfit.add_modifier(IModBit.THICK)
itm_rich_outfit.add_modifier(IModBit.HARDENED)
itm_rich_outfit.set_weight(4.0)
itm_rich_outfit.set_abundance(100)
itm_rich_outfit.set_body_armor(16)
itm_rich_outfit.set_leg_armor(4)


itm_khergit_guard_armor = Item("itm_khergit_guard_armor", "Khergit_Guard_Armor")
itm_khergit_guard_armor.add_mesh(ItemMesh("lamellar_armor_a"))
itm_khergit_guard_armor.add_flag(ItemType.BODY_ARMOR)
itm_khergit_guard_armor.add_flag(ItemFlag.COVERS_LEGS)
itm_khergit_guard_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_khergit_guard_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_khergit_guard_armor.set_price(3048)
itm_khergit_guard_armor.add_modifier(IModBit.RUSTY)
itm_khergit_guard_armor.add_modifier(IModBit.BATTERED)
itm_khergit_guard_armor.add_modifier(IModBit.CRUDE)
itm_khergit_guard_armor.add_modifier(IModBit.THICK)
itm_khergit_guard_armor.add_modifier(IModBit.REINFORCED)
itm_khergit_guard_armor.add_modifier(IModBit.LORDLY)
itm_khergit_guard_armor.set_weight(25.0)
itm_khergit_guard_armor.set_abundance(100)
itm_khergit_guard_armor.set_body_armor(50)
itm_khergit_guard_armor.set_leg_armor(18)


itm_felt_steppe_cap = Item("itm_felt_steppe_cap", "Felt_Steppe_Cap")
itm_felt_steppe_cap.add_mesh(ItemMesh("felt_steppe_cap"))
itm_felt_steppe_cap.add_flag(ItemType.HEAD_ARMOR)
itm_felt_steppe_cap.set_price(237)
itm_felt_steppe_cap.add_modifier(IModBit.TETTERED)
itm_felt_steppe_cap.add_modifier(IModBit.RAGGED)
itm_felt_steppe_cap.add_modifier(IModBit.STURDY)
itm_felt_steppe_cap.add_modifier(IModBit.THICK)
itm_felt_steppe_cap.add_modifier(IModBit.HARDENED)
itm_felt_steppe_cap.set_weight(2.0)
itm_felt_steppe_cap.set_abundance(100)
itm_felt_steppe_cap.set_head_armor(16)


itm_khergit_war_helmet = Item("itm_khergit_war_helmet", "Khergit_War_Helmet")
itm_khergit_war_helmet.add_mesh(ItemMesh("tattered_steppe_cap_a_new"))
itm_khergit_war_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_khergit_war_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_khergit_war_helmet.set_price(200)
itm_khergit_war_helmet.add_modifier(IModBit.TETTERED)
itm_khergit_war_helmet.add_modifier(IModBit.RAGGED)
itm_khergit_war_helmet.add_modifier(IModBit.STURDY)
itm_khergit_war_helmet.add_modifier(IModBit.THICK)
itm_khergit_war_helmet.add_modifier(IModBit.HARDENED)
itm_khergit_war_helmet.set_weight(2.0)
itm_khergit_war_helmet.set_abundance(100)
itm_khergit_war_helmet.set_head_armor(31)


itm_khergit_helmet = Item("itm_khergit_helmet", "Khergit_Helmet")
itm_khergit_helmet.add_mesh(ItemMesh("khergit_guard_helmet"))
itm_khergit_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_khergit_helmet.set_price(361)
itm_khergit_helmet.add_modifier(IModBit.TETTERED)
itm_khergit_helmet.add_modifier(IModBit.RAGGED)
itm_khergit_helmet.add_modifier(IModBit.STURDY)
itm_khergit_helmet.add_modifier(IModBit.THICK)
itm_khergit_helmet.add_modifier(IModBit.HARDENED)
itm_khergit_helmet.set_weight(2.0)
itm_khergit_helmet.set_abundance(100)
itm_khergit_helmet.set_head_armor(33)


itm_khergit_guard_boots = Item("itm_khergit_guard_boots", "Khergit_Guard_Boots")
itm_khergit_guard_boots.add_mesh(ItemMesh("lamellar_boots_a"))
itm_khergit_guard_boots.add_flag(ItemType.FOOT_ARMOR)
itm_khergit_guard_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_khergit_guard_boots.set_price(254)
itm_khergit_guard_boots.add_modifier(IModBit.TETTERED)
itm_khergit_guard_boots.add_modifier(IModBit.RAGGED)
itm_khergit_guard_boots.add_modifier(IModBit.STURDY)
itm_khergit_guard_boots.add_modifier(IModBit.THICK)
itm_khergit_guard_boots.add_modifier(IModBit.HARDENED)
itm_khergit_guard_boots.set_weight(1.0)
itm_khergit_guard_boots.set_abundance(100)
itm_khergit_guard_boots.set_leg_armor(20)


itm_khergit_guard_helmet = Item("itm_khergit_guard_helmet", "Khergit_Guard_Helmet")
itm_khergit_guard_helmet.add_mesh(ItemMesh("lamellar_helmet_a"))
itm_khergit_guard_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_khergit_guard_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_khergit_guard_helmet.set_price(433)
itm_khergit_guard_helmet.add_modifier(IModBit.TETTERED)
itm_khergit_guard_helmet.add_modifier(IModBit.RAGGED)
itm_khergit_guard_helmet.add_modifier(IModBit.STURDY)
itm_khergit_guard_helmet.add_modifier(IModBit.THICK)
itm_khergit_guard_helmet.add_modifier(IModBit.HARDENED)
itm_khergit_guard_helmet.set_weight(2.0)
itm_khergit_guard_helmet.set_abundance(100)
itm_khergit_guard_helmet.set_head_armor(40)


itm_khergit_cavalry_helmet = Item("itm_khergit_cavalry_helmet", "Khergit_Cavalry_Helmet")
itm_khergit_cavalry_helmet.add_mesh(ItemMesh("lamellar_helmet_b"))
itm_khergit_cavalry_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_khergit_cavalry_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
itm_khergit_cavalry_helmet.set_price(333)
itm_khergit_cavalry_helmet.add_modifier(IModBit.TETTERED)
itm_khergit_cavalry_helmet.add_modifier(IModBit.RAGGED)
itm_khergit_cavalry_helmet.add_modifier(IModBit.STURDY)
itm_khergit_cavalry_helmet.add_modifier(IModBit.THICK)
itm_khergit_cavalry_helmet.add_modifier(IModBit.HARDENED)
itm_khergit_cavalry_helmet.set_weight(2.0)
itm_khergit_cavalry_helmet.set_abundance(100)
itm_khergit_cavalry_helmet.set_head_armor(36)


itm_black_hood = Item("itm_black_hood", "Black_Hood")
itm_black_hood.add_mesh(ItemMesh("hood_black"))
itm_black_hood.add_flag(ItemType.HEAD_ARMOR)
itm_black_hood.add_flag(ItemFlag.IS_MERCHANDISE)
itm_black_hood.set_price(193)
itm_black_hood.add_modifier(IModBit.TETTERED)
itm_black_hood.add_modifier(IModBit.RAGGED)
itm_black_hood.add_modifier(IModBit.STURDY)
itm_black_hood.add_modifier(IModBit.THICK)
itm_black_hood.add_modifier(IModBit.HARDENED)
itm_black_hood.set_weight(2.0)
itm_black_hood.set_abundance(100)
itm_black_hood.set_head_armor(18)


itm_light_leather = Item("itm_light_leather", "Light_Leather")
itm_light_leather.add_mesh(ItemMesh("light_leather"))
itm_light_leather.add_flag(ItemType.BODY_ARMOR)
itm_light_leather.add_flag(ItemFlag.IS_MERCHANDISE)
itm_light_leather.add_flag(ItemFlag.COVERS_LEGS)
itm_light_leather.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_light_leather.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_light_leather.set_price(352)
itm_light_leather.add_modifier(IModBit.RUSTY)
itm_light_leather.add_modifier(IModBit.BATTERED)
itm_light_leather.add_modifier(IModBit.CRUDE)
itm_light_leather.add_modifier(IModBit.THICK)
itm_light_leather.add_modifier(IModBit.REINFORCED)
itm_light_leather.add_modifier(IModBit.LORDLY)
itm_light_leather.set_weight(5.0)
itm_light_leather.set_abundance(100)
itm_light_leather.set_body_armor(26)
itm_light_leather.set_leg_armor(7)


itm_light_leather_boots = Item("itm_light_leather_boots", "Light_Leather_Boots")
itm_light_leather_boots.add_mesh(ItemMesh("light_leather_boots"))
itm_light_leather_boots.add_flag(ItemType.FOOT_ARMOR)
itm_light_leather_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_light_leather_boots.add_flag(ItemFlag.IS_MERCHANDISE)
itm_light_leather_boots.set_price(91)
itm_light_leather_boots.add_modifier(IModBit.TETTERED)
itm_light_leather_boots.add_modifier(IModBit.RAGGED)
itm_light_leather_boots.add_modifier(IModBit.STURDY)
itm_light_leather_boots.add_modifier(IModBit.THICK)
itm_light_leather_boots.add_modifier(IModBit.HARDENED)
itm_light_leather_boots.set_weight(1.0)
itm_light_leather_boots.set_abundance(100)
itm_light_leather_boots.set_leg_armor(15)


itm_mail_and_plate = Item("itm_mail_and_plate", "Mail_and_Plate")
itm_mail_and_plate.add_mesh(ItemMesh("mail_and_plate"))
itm_mail_and_plate.add_flag(ItemType.BODY_ARMOR)
itm_mail_and_plate.add_flag(ItemFlag.COVERS_LEGS)
itm_mail_and_plate.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_mail_and_plate.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_mail_and_plate.set_price(593)
itm_mail_and_plate.add_modifier(IModBit.RUSTY)
itm_mail_and_plate.add_modifier(IModBit.BATTERED)
itm_mail_and_plate.add_modifier(IModBit.CRUDE)
itm_mail_and_plate.add_modifier(IModBit.THICK)
itm_mail_and_plate.add_modifier(IModBit.REINFORCED)
itm_mail_and_plate.add_modifier(IModBit.LORDLY)
itm_mail_and_plate.set_weight(16.0)
itm_mail_and_plate.set_abundance(100)
itm_mail_and_plate.set_body_armor(34)
itm_mail_and_plate.set_leg_armor(12)


itm_light_mail_and_plate = Item("itm_light_mail_and_plate", "Light_Mail_and_Plate")
itm_light_mail_and_plate.add_mesh(ItemMesh("light_mail_and_plate"))
itm_light_mail_and_plate.add_flag(ItemType.BODY_ARMOR)
itm_light_mail_and_plate.add_flag(ItemFlag.COVERS_LEGS)
itm_light_mail_and_plate.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_light_mail_and_plate.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_light_mail_and_plate.set_price(532)
itm_light_mail_and_plate.add_modifier(IModBit.RUSTY)
itm_light_mail_and_plate.add_modifier(IModBit.BATTERED)
itm_light_mail_and_plate.add_modifier(IModBit.CRUDE)
itm_light_mail_and_plate.add_modifier(IModBit.THICK)
itm_light_mail_and_plate.add_modifier(IModBit.REINFORCED)
itm_light_mail_and_plate.add_modifier(IModBit.LORDLY)
itm_light_mail_and_plate.set_weight(10.0)
itm_light_mail_and_plate.set_abundance(100)
itm_light_mail_and_plate.set_body_armor(32)
itm_light_mail_and_plate.set_leg_armor(12)


itm_byzantion_helmet_a = Item("itm_byzantion_helmet_a", "Byzantion_Helmet")
itm_byzantion_helmet_a.add_mesh(ItemMesh("byzantion_helmet_a"))
itm_byzantion_helmet_a.add_flag(ItemType.HEAD_ARMOR)
itm_byzantion_helmet_a.set_price(278)
itm_byzantion_helmet_a.add_modifier(IModBit.TETTERED)
itm_byzantion_helmet_a.add_modifier(IModBit.RAGGED)
itm_byzantion_helmet_a.add_modifier(IModBit.STURDY)
itm_byzantion_helmet_a.add_modifier(IModBit.THICK)
itm_byzantion_helmet_a.add_modifier(IModBit.HARDENED)
itm_byzantion_helmet_a.set_weight(2.0)
itm_byzantion_helmet_a.set_abundance(100)
itm_byzantion_helmet_a.set_head_armor(20)


itm_magyar_helmet_a = Item("itm_magyar_helmet_a", "Magyar_Helmet")
itm_magyar_helmet_a.add_mesh(ItemMesh("magyar_helmet_a"))
itm_magyar_helmet_a.add_flag(ItemType.HEAD_ARMOR)
itm_magyar_helmet_a.set_price(278)
itm_magyar_helmet_a.add_modifier(IModBit.TETTERED)
itm_magyar_helmet_a.add_modifier(IModBit.RAGGED)
itm_magyar_helmet_a.add_modifier(IModBit.STURDY)
itm_magyar_helmet_a.add_modifier(IModBit.THICK)
itm_magyar_helmet_a.add_modifier(IModBit.HARDENED)
itm_magyar_helmet_a.set_weight(2.0)
itm_magyar_helmet_a.set_abundance(100)
itm_magyar_helmet_a.set_head_armor(20)


itm_rus_helmet_a = Item("itm_rus_helmet_a", "Rus_Helmet")
itm_rus_helmet_a.add_mesh(ItemMesh("rus_helmet_a"))
itm_rus_helmet_a.add_flag(ItemType.HEAD_ARMOR)
itm_rus_helmet_a.set_price(278)
itm_rus_helmet_a.add_modifier(IModBit.TETTERED)
itm_rus_helmet_a.add_modifier(IModBit.RAGGED)
itm_rus_helmet_a.add_modifier(IModBit.STURDY)
itm_rus_helmet_a.add_modifier(IModBit.THICK)
itm_rus_helmet_a.add_modifier(IModBit.HARDENED)
itm_rus_helmet_a.set_weight(2.0)
itm_rus_helmet_a.set_abundance(100)
itm_rus_helmet_a.set_head_armor(20)


itm_sipahi_helmet_a = Item("itm_sipahi_helmet_a", "Sipahi_Helmet")
itm_sipahi_helmet_a.add_mesh(ItemMesh("sipahi_helmet_a"))
itm_sipahi_helmet_a.add_flag(ItemType.HEAD_ARMOR)
itm_sipahi_helmet_a.set_price(278)
itm_sipahi_helmet_a.add_modifier(IModBit.TETTERED)
itm_sipahi_helmet_a.add_modifier(IModBit.RAGGED)
itm_sipahi_helmet_a.add_modifier(IModBit.STURDY)
itm_sipahi_helmet_a.add_modifier(IModBit.THICK)
itm_sipahi_helmet_a.add_modifier(IModBit.HARDENED)
itm_sipahi_helmet_a.set_weight(2.0)
itm_sipahi_helmet_a.set_abundance(100)
itm_sipahi_helmet_a.set_head_armor(20)


itm_shahi = Item("itm_shahi", "Shahi")
itm_shahi.add_mesh(ItemMesh("shahi"))
itm_shahi.add_flag(ItemType.HEAD_ARMOR)
itm_shahi.set_price(278)
itm_shahi.add_modifier(IModBit.TETTERED)
itm_shahi.add_modifier(IModBit.RAGGED)
itm_shahi.add_modifier(IModBit.STURDY)
itm_shahi.add_modifier(IModBit.THICK)
itm_shahi.add_modifier(IModBit.HARDENED)
itm_shahi.set_weight(2.0)
itm_shahi.set_abundance(100)
itm_shahi.set_head_armor(20)


itm_rabati = Item("itm_rabati", "Rabati")
itm_rabati.add_mesh(ItemMesh("rabati"))
itm_rabati.add_flag(ItemType.HEAD_ARMOR)
itm_rabati.set_price(278)
itm_rabati.add_modifier(IModBit.TETTERED)
itm_rabati.add_modifier(IModBit.RAGGED)
itm_rabati.add_modifier(IModBit.STURDY)
itm_rabati.add_modifier(IModBit.THICK)
itm_rabati.add_modifier(IModBit.HARDENED)
itm_rabati.set_weight(2.0)
itm_rabati.set_abundance(100)
itm_rabati.set_head_armor(20)


itm_tunic_with_green_cape = Item("itm_tunic_with_green_cape", "Tunic_with_Green_Cape")
itm_tunic_with_green_cape.add_mesh(ItemMesh("peasant_man_a"))
itm_tunic_with_green_cape.add_flag(ItemType.BODY_ARMOR)
itm_tunic_with_green_cape.add_flag(ItemFlag.IS_MERCHANDISE)
itm_tunic_with_green_cape.add_flag(ItemFlag.COVERS_LEGS)
itm_tunic_with_green_cape.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_tunic_with_green_cape.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_tunic_with_green_cape.add_flag(ItemFlag.IS_CIVILIAN)
itm_tunic_with_green_cape.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_tunic_with_green_cape.set_price(6)
itm_tunic_with_green_cape.add_modifier(IModBit.TETTERED)
itm_tunic_with_green_cape.add_modifier(IModBit.RAGGED)
itm_tunic_with_green_cape.add_modifier(IModBit.STURDY)
itm_tunic_with_green_cape.add_modifier(IModBit.THICK)
itm_tunic_with_green_cape.add_modifier(IModBit.HARDENED)
itm_tunic_with_green_cape.set_weight(1.0)
itm_tunic_with_green_cape.set_abundance(100)
itm_tunic_with_green_cape.set_body_armor(6)
itm_tunic_with_green_cape.set_leg_armor(2)


itm_keys = Item("itm_keys", "Ring_of_Keys")
itm_keys.add_mesh(ItemMesh("throwing_axe_a"))
itm_keys.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_keys.add_flag(ItemFlag.IS_PRIMARY)
itm_keys.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
itm_keys.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_keys.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_keys.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_keys.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_keys.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_keys.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_keys.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_keys.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_keys.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_keys.add_capability(ItemCapability.FORCE_64_BITS)
itm_keys.set_price(240)
itm_keys.add_modifier(IModBit.BENT)
itm_keys.add_modifier(IModBit.BALANCED)
itm_keys.add_modifier(IModBit.HEAVY)
itm_keys.add_modifier(IModBit.LARGE_BAG)
itm_keys.set_weight(5.0)
itm_keys.set_abundance(100)
itm_keys.set_hit_points(29696)
itm_keys.set_speed_rating(98)
itm_keys.set_weapon_length(53)
itm_keys.set_max_ammo(5)
itm_keys.set_swing_damage(29, 0)


itm_bride_dress = Item("itm_bride_dress", "Bride_Dress")
itm_bride_dress.add_mesh(ItemMesh("bride_dress"))
itm_bride_dress.add_flag(ItemType.BODY_ARMOR)
itm_bride_dress.add_flag(ItemFlag.COVERS_LEGS)
itm_bride_dress.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_bride_dress.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_bride_dress.add_flag(ItemFlag.IS_CIVILIAN)
itm_bride_dress.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_bride_dress.set_price(500)
itm_bride_dress.add_modifier(IModBit.TETTERED)
itm_bride_dress.add_modifier(IModBit.RAGGED)
itm_bride_dress.add_modifier(IModBit.STURDY)
itm_bride_dress.add_modifier(IModBit.THICK)
itm_bride_dress.add_modifier(IModBit.HARDENED)
itm_bride_dress.set_weight(3.0)
itm_bride_dress.set_abundance(100)
itm_bride_dress.set_body_armor(10)
itm_bride_dress.set_leg_armor(10)


itm_bride_crown = Item("itm_bride_crown", "Crown_of_Flowers")
itm_bride_crown.add_mesh(ItemMesh("bride_crown"))
itm_bride_crown.add_flag(ItemType.HEAD_ARMOR)
itm_bride_crown.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_bride_crown.add_flag(ItemFlag.COVERS_LEGS)
itm_bride_crown.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_bride_crown.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_bride_crown.add_flag(ItemFlag.IS_CIVILIAN)
itm_bride_crown.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_bride_crown.set_price(1)
itm_bride_crown.add_modifier(IModBit.TETTERED)
itm_bride_crown.add_modifier(IModBit.RAGGED)
itm_bride_crown.add_modifier(IModBit.STURDY)
itm_bride_crown.add_modifier(IModBit.THICK)
itm_bride_crown.add_modifier(IModBit.HARDENED)
itm_bride_crown.set_weight(0.5)
itm_bride_crown.set_abundance(100)
itm_bride_crown.set_head_armor(4)


itm_bride_shoes = Item("itm_bride_shoes", "Bride_Shoes")
itm_bride_shoes.add_mesh(ItemMesh("bride_shoes"))
itm_bride_shoes.add_flag(ItemType.FOOT_ARMOR)
itm_bride_shoes.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_bride_shoes.add_flag(ItemFlag.IS_CIVILIAN)
itm_bride_shoes.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_bride_shoes.set_price(30)
itm_bride_shoes.add_modifier(IModBit.TETTERED)
itm_bride_shoes.add_modifier(IModBit.RAGGED)
itm_bride_shoes.add_modifier(IModBit.STURDY)
itm_bride_shoes.add_modifier(IModBit.THICK)
itm_bride_shoes.add_modifier(IModBit.HARDENED)
itm_bride_shoes.set_weight(1.0)
itm_bride_shoes.set_abundance(100)
itm_bride_shoes.set_leg_armor(8)


itm_practice_bow_2 = Item("itm_practice_bow_2", "Practice_Bow")
itm_practice_bow_2.add_mesh(ItemMesh("hunting_bow"))
itm_practice_bow_2.add_mesh(ItemMesh("hunting_bow_carry", ItemMesh.ixmesh_carry))
itm_practice_bow_2.add_flag(ItemType.BOW)
itm_practice_bow_2.add_flag(ItemFlag.IS_TWO_HANDED)
itm_practice_bow_2.add_flag(ItemFlag.IS_PRIMARY)
itm_practice_bow_2.add_capability(ItemCapability.SHOOT_BOW)
itm_practice_bow_2.add_capability(ItemCapability.CARRY_BOW_BACK)
itm_practice_bow_2.add_modifier(IModBit.CRACKED)
itm_practice_bow_2.add_modifier(IModBit.BENT)
itm_practice_bow_2.add_modifier(IModBit.MASTERWORK)
itm_practice_bow_2.add_modifier(IModBit.STRONG)
itm_practice_bow_2.set_weight(1.5)
itm_practice_bow_2.set_abundance(100)
itm_practice_bow_2.set_speed_rating(90)
itm_practice_bow_2.set_missile_speed(40)
itm_practice_bow_2.set_thrust_damage(21, 2)


itm_practice_arrows_2 = Item("itm_practice_arrows_2", "Practice_Arrows")
itm_practice_arrows_2.add_mesh(ItemMesh("arena_arrow"))
itm_practice_arrows_2.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
itm_practice_arrows_2.add_mesh(ItemMesh("quiver", ItemMesh.ixmesh_carry))
itm_practice_arrows_2.add_flag(ItemType.ARROWS)
itm_practice_arrows_2.add_capability(ItemCapability.CARRY_QUIVER_BACK)
itm_practice_arrows_2.add_modifier(IModBit.BENT)
itm_practice_arrows_2.add_modifier(IModBit.LARGE_BAG)
itm_practice_arrows_2.set_weight(1.5)
itm_practice_arrows_2.set_abundance(100)
itm_practice_arrows_2.set_weapon_length(95)
itm_practice_arrows_2.set_max_ammo(80)


itm_plate_boots = Item("itm_plate_boots", "Plate_Boots")
itm_plate_boots.add_mesh(ItemMesh("plate_boots"))
itm_plate_boots.add_flag(ItemType.FOOT_ARMOR)
itm_plate_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_plate_boots.add_flag(ItemFlag.IS_MERCHANDISE)
itm_plate_boots.set_price(1770)
itm_plate_boots.add_modifier(IModBit.CRACKED)
itm_plate_boots.add_modifier(IModBit.RUSTY)
itm_plate_boots.add_modifier(IModBit.BATTERED)
itm_plate_boots.add_modifier(IModBit.CRUDE)
itm_plate_boots.add_modifier(IModBit.THICK)
itm_plate_boots.add_modifier(IModBit.REINFORCED)
itm_plate_boots.add_modifier(IModBit.LORDLY)
itm_plate_boots.set_weight(3.5)
itm_plate_boots.set_abundance(100)
itm_plate_boots.set_leg_armor(33)
itm_plate_boots.set_difficulty(9)


itm_heraldic_mail_with_surcoat_for_tableau = Item("itm_heraldic_mail_with_surcoat_for_tableau", "{!}Heraldic_Mail_with_Surcoat")
itm_heraldic_mail_with_surcoat_for_tableau.add_mesh(ItemMesh("heraldic_armor_new_a"))
itm_heraldic_mail_with_surcoat_for_tableau.add_flag(ItemType.BODY_ARMOR)
itm_heraldic_mail_with_surcoat_for_tableau.add_flag(ItemFlag.COVERS_LEGS)
itm_heraldic_mail_with_surcoat_for_tableau.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_heraldic_mail_with_surcoat_for_tableau.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_heraldic_mail_with_surcoat_for_tableau.set_price(1)
itm_heraldic_mail_with_surcoat_for_tableau.add_modifier(IModBit.RUSTY)
itm_heraldic_mail_with_surcoat_for_tableau.add_modifier(IModBit.BATTERED)
itm_heraldic_mail_with_surcoat_for_tableau.add_modifier(IModBit.CRUDE)
itm_heraldic_mail_with_surcoat_for_tableau.add_modifier(IModBit.THICK)
itm_heraldic_mail_with_surcoat_for_tableau.add_modifier(IModBit.REINFORCED)
itm_heraldic_mail_with_surcoat_for_tableau.add_modifier(IModBit.LORDLY)
itm_heraldic_mail_with_surcoat_for_tableau.set_weight(22.0)
itm_heraldic_mail_with_surcoat_for_tableau.set_abundance(100)
itm_heraldic_mail_with_surcoat_for_tableau.set_body_armor(1)
itm_heraldic_mail_with_surcoat_for_tableau.set_leg_armor(1)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270485 1224979098644774912 1224979098644774913


itm_mail_boots_for_tableau = Item("itm_mail_boots_for_tableau", "Mail_Boots")
itm_mail_boots_for_tableau.add_mesh(ItemMesh("mail_boots_a"))
itm_mail_boots_for_tableau.add_flag(ItemType.FOOT_ARMOR)
itm_mail_boots_for_tableau.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_mail_boots_for_tableau.set_price(1)
itm_mail_boots_for_tableau.add_modifier(IModBit.RUSTY)
itm_mail_boots_for_tableau.add_modifier(IModBit.BATTERED)
itm_mail_boots_for_tableau.add_modifier(IModBit.CRUDE)
itm_mail_boots_for_tableau.add_modifier(IModBit.THICK)
itm_mail_boots_for_tableau.add_modifier(IModBit.REINFORCED)
itm_mail_boots_for_tableau.add_modifier(IModBit.LORDLY)
itm_mail_boots_for_tableau.set_weight(3.0)
itm_mail_boots_for_tableau.set_abundance(100)
itm_mail_boots_for_tableau.set_leg_armor(1)


itm_warhorse_sarranid = Item("itm_warhorse_sarranid", "Sarranian_War_Horse")
itm_warhorse_sarranid.add_mesh(ItemMesh("warhorse_sarranid"))
itm_warhorse_sarranid.add_flag(ItemType.HORSE)
itm_warhorse_sarranid.add_flag(ItemFlag.IS_MERCHANDISE)
itm_warhorse_sarranid.set_price(1811)
itm_warhorse_sarranid.add_modifier(IModBit.HEAVY)
itm_warhorse_sarranid.add_modifier(IModBit.LAME)
itm_warhorse_sarranid.add_modifier(IModBit.SWAYBACKED)
itm_warhorse_sarranid.add_modifier(IModBit.STUBBORN)
itm_warhorse_sarranid.add_modifier(IModBit.SPIRITED)
itm_warhorse_sarranid.add_modifier(IModBit.CHAMPION)
itm_warhorse_sarranid.set_abundance(40)
itm_warhorse_sarranid.set_body_armor(58)
itm_warhorse_sarranid.set_difficulty(4)
itm_warhorse_sarranid.set_hit_points(165)
itm_warhorse_sarranid.set_speed_rating(44)
itm_warhorse_sarranid.set_missile_speed(40)
itm_warhorse_sarranid.set_weapon_length(112)
itm_warhorse_sarranid.set_thrust_damage(32, 0)
itm_warhorse_sarranid.allow_in_faction(fac.kingdom_6)


itm_warhorse_steppe = Item("itm_warhorse_steppe", "Steppe_Charger")
itm_warhorse_steppe.add_mesh(ItemMesh("warhorse_steppe"))
itm_warhorse_steppe.add_flag(ItemType.HORSE)
itm_warhorse_steppe.add_flag(ItemFlag.IS_MERCHANDISE)
itm_warhorse_steppe.set_price(1400)
itm_warhorse_steppe.add_modifier(IModBit.HEAVY)
itm_warhorse_steppe.add_modifier(IModBit.LAME)
itm_warhorse_steppe.add_modifier(IModBit.SWAYBACKED)
itm_warhorse_steppe.add_modifier(IModBit.STUBBORN)
itm_warhorse_steppe.add_modifier(IModBit.SPIRITED)
itm_warhorse_steppe.add_modifier(IModBit.CHAMPION)
itm_warhorse_steppe.set_abundance(45)
itm_warhorse_steppe.set_body_armor(40)
itm_warhorse_steppe.set_difficulty(4)
itm_warhorse_steppe.set_hit_points(150)
itm_warhorse_steppe.set_speed_rating(50)
itm_warhorse_steppe.set_missile_speed(40)
itm_warhorse_steppe.set_weapon_length(112)
itm_warhorse_steppe.set_thrust_damage(28, 0)
itm_warhorse_steppe.allow_in_faction(fac.kingdom_3)
itm_warhorse_steppe.allow_in_faction(fac.kingdom_2)


itm_items_end = Item("itm_items_end", "Items_End")
itm_items_end.add_mesh(ItemMesh("shield_round_a"))
itm_items_end.set_price(1)
itm_items_end.set_abundance(100)


itm_javelin_bow = Item("itm_javelin_bow", "Javelin_Bow")
itm_javelin_bow.add_mesh(ItemMesh("war_bow"))
itm_javelin_bow.add_mesh(ItemMesh("war_bow_carry", ItemMesh.ixmesh_carry))
itm_javelin_bow.add_flag(ItemType.BOW)
itm_javelin_bow.add_flag(ItemFlag.IS_TWO_HANDED)
itm_javelin_bow.add_flag(ItemFlag.IS_PRIMARY)
itm_javelin_bow.add_capability(ItemCapability.SHOOT_BOW)
itm_javelin_bow.add_capability(ItemCapability.CARRY_BOW_BACK)
itm_javelin_bow.set_weight(1.5)
itm_javelin_bow.set_abundance(100)
itm_javelin_bow.set_speed_rating(84)
itm_javelin_bow.set_missile_speed(59)
itm_javelin_bow.set_thrust_damage(25, 1)
# -51.000000  1 600 1 1152921504606847017


itm_knockdown_mace = Item("itm_knockdown_mace", "Knockdown_Mace")
itm_knockdown_mace.add_mesh(ItemMesh("flanged_mace"))
itm_knockdown_mace.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_knockdown_mace.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_knockdown_mace.add_flag(ItemFlag.IS_PRIMARY)
itm_knockdown_mace.add_flag(ItemFlag.CAN_KNOCK_DOWN)
itm_knockdown_mace.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_knockdown_mace.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_knockdown_mace.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_knockdown_mace.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_knockdown_mace.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_knockdown_mace.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
itm_knockdown_mace.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_knockdown_mace.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_knockdown_mace.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_knockdown_mace.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_knockdown_mace.add_capability(ItemCapability.FORCE_64_BITS)
itm_knockdown_mace.add_modifier(IModBit.RUSTY)
itm_knockdown_mace.add_modifier(IModBit.CHIPPED)
itm_knockdown_mace.add_modifier(IModBit.HEAVY)
itm_knockdown_mace.set_weight(3.5)
itm_knockdown_mace.set_abundance(100)
itm_knockdown_mace.set_hit_points(24576)
itm_knockdown_mace.set_speed_rating(103)
itm_knockdown_mace.set_weapon_length(70)
itm_knockdown_mace.set_thrust_damage(0, 1)
itm_knockdown_mace.set_swing_damage(24, 2)


itm_blood_drain_throwing_knives = Item("itm_blood_drain_throwing_knives", "Blood_Drain_Throwing_Knives")
itm_blood_drain_throwing_knives.add_mesh(ItemMesh("throwing_knife"))
itm_blood_drain_throwing_knives.add_flag(ItemType.THROWN)
itm_blood_drain_throwing_knives.add_flag(ItemFlag.IS_PRIMARY)
itm_blood_drain_throwing_knives.add_capability(ItemCapability.THROW_KNIFE)
itm_blood_drain_throwing_knives.add_modifier(IModBit.BENT)
itm_blood_drain_throwing_knives.add_modifier(IModBit.BALANCED)
itm_blood_drain_throwing_knives.add_modifier(IModBit.HEAVY)
itm_blood_drain_throwing_knives.add_modifier(IModBit.LARGE_BAG)
itm_blood_drain_throwing_knives.set_weight(2.5)
itm_blood_drain_throwing_knives.set_abundance(100)
itm_blood_drain_throwing_knives.set_speed_rating(121)
itm_blood_drain_throwing_knives.set_missile_speed(25)
itm_blood_drain_throwing_knives.set_max_ammo(5)
itm_blood_drain_throwing_knives.set_thrust_damage(25, 1)


itm_doom_javelins = Item("itm_doom_javelins", "Doom_Javelins")
itm_doom_javelins.add_mesh(ItemMesh("jarid_new_b"))
itm_doom_javelins.add_mesh(ItemMesh("jarid_new_b_bag", ItemMesh.ixmesh_carry))
itm_doom_javelins.add_flag(ItemType.THROWN)
itm_doom_javelins.add_flag(ItemFlag.IS_PRIMARY)
itm_doom_javelins.add_capability(ItemCapability.THROW_JAVELIN)
itm_doom_javelins.add_capability(ItemCapability.CARRY_QUIVER_BACK)
itm_doom_javelins.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_doom_javelins.add_modifier(IModBit.BENT)
itm_doom_javelins.add_modifier(IModBit.BALANCED)
itm_doom_javelins.add_modifier(IModBit.HEAVY)
itm_doom_javelins.add_modifier(IModBit.LARGE_BAG)
itm_doom_javelins.set_weight(3.0)
itm_doom_javelins.set_abundance(100)
itm_doom_javelins.set_speed_rating(87)
itm_doom_javelins.set_missile_speed(22)
itm_doom_javelins.set_weapon_length(65)
itm_doom_javelins.set_max_ammo(2)
itm_doom_javelins.set_thrust_damage(44, 1)


itm_disarming_throwing_axe = Item("itm_disarming_throwing_axe", "Disarming_Throwing_Axe")
itm_disarming_throwing_axe.add_mesh(ItemMesh("throwing_axe_a"))
itm_disarming_throwing_axe.add_flag(ItemType.THROWN)
itm_disarming_throwing_axe.add_flag(ItemFlag.IS_PRIMARY)
itm_disarming_throwing_axe.add_capability(ItemCapability.THROW_STONE)
itm_disarming_throwing_axe.add_capability(ItemCapability.THROW_KNIFE)
itm_disarming_throwing_axe.add_capability(ItemCapability.THROW_AXE)
itm_disarming_throwing_axe.add_modifier(IModBit.BENT)
itm_disarming_throwing_axe.add_modifier(IModBit.BALANCED)
itm_disarming_throwing_axe.add_modifier(IModBit.LARGE_BAG)
itm_disarming_throwing_axe.set_weight(1.0)
itm_disarming_throwing_axe.set_abundance(100)
itm_disarming_throwing_axe.set_speed_rating(98)
itm_disarming_throwing_axe.set_missile_speed(18)
itm_disarming_throwing_axe.set_weapon_length(53)
itm_disarming_throwing_axe.set_max_ammo(1)
itm_disarming_throwing_axe.set_thrust_damage(10, 0)


itm_instakill_knife = Item("itm_instakill_knife", "Instakill_Knife")
itm_instakill_knife.add_mesh(ItemMesh("peasant_knife_new"))
itm_instakill_knife.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_instakill_knife.add_flag(ItemFlag.NO_PARRY)
itm_instakill_knife.add_flag(ItemFlag.IS_TWO_HANDED)
itm_instakill_knife.add_flag(ItemFlag.IS_PRIMARY)
itm_instakill_knife.add_flag(ItemFlag.IS_SECONDARY)
itm_instakill_knife.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_instakill_knife.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_instakill_knife.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_instakill_knife.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_instakill_knife.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_instakill_knife.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_instakill_knife.add_capability(ItemCapability.CARRY_DAGGER_FRONT_LEFT)
itm_instakill_knife.add_capability(ItemCapability.FORCE_64_BITS)
itm_instakill_knife.add_modifier(IModBit.RUSTY)
itm_instakill_knife.add_modifier(IModBit.CHIPPED)
itm_instakill_knife.add_modifier(IModBit.BALANCED)
itm_instakill_knife.add_modifier(IModBit.TEMPERED)
itm_instakill_knife.set_weight(0.5)
itm_instakill_knife.set_abundance(100)
itm_instakill_knife.set_hit_points(21504)
itm_instakill_knife.set_speed_rating(101)
itm_instakill_knife.set_weapon_length(40)
itm_instakill_knife.set_thrust_damage(13, 1)
itm_instakill_knife.set_swing_damage(21, 0)


itm_backstabber = Item("itm_backstabber", "Backstabber")
itm_backstabber.add_mesh(ItemMesh("sword_viking_a_small"))
itm_backstabber.add_mesh(ItemMesh("sword_viking_a_small_scabbard", ItemMesh.ixmesh_carry))
itm_backstabber.add_flag(ItemType.ONE_HANDED_WEAPON)
itm_backstabber.add_flag(ItemFlag.IS_PRIMARY)
itm_backstabber.add_capability(ItemCapability.ONEHANDED_TRUST)
itm_backstabber.add_capability(ItemCapability.ONEHANDED_OVERSWING)
itm_backstabber.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
itm_backstabber.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
itm_backstabber.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
itm_backstabber.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
itm_backstabber.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
itm_backstabber.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_backstabber.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
itm_backstabber.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
itm_backstabber.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
itm_backstabber.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
itm_backstabber.add_capability(ItemCapability.FORCE_64_BITS)
itm_backstabber.add_modifier(IModBit.RUSTY)
itm_backstabber.add_modifier(IModBit.CHIPPED)
itm_backstabber.add_modifier(IModBit.BALANCED)
itm_backstabber.add_modifier(IModBit.TEMPERED)
itm_backstabber.add_modifier(IModBit.MASTERWORK)
itm_backstabber.set_weight(1.25)
itm_backstabber.set_abundance(100)
itm_backstabber.set_hit_points(20480)
itm_backstabber.set_speed_rating(103)
itm_backstabber.set_weapon_length(86)
itm_backstabber.set_thrust_damage(13, 1)
itm_backstabber.set_swing_damage(20, 0)


itm_weak_beserker_dart = Item("itm_weak_beserker_dart", "Weak_Beserker_Dart")
itm_weak_beserker_dart.add_mesh(ItemMesh("dart_b"))
itm_weak_beserker_dart.add_mesh(ItemMesh("dart_b_bag", ItemMesh.ixmesh_carry))
itm_weak_beserker_dart.add_flag(ItemType.THROWN)
itm_weak_beserker_dart.add_flag(ItemFlag.IS_PRIMARY)
itm_weak_beserker_dart.add_capability(ItemCapability.THROW_JAVELIN)
itm_weak_beserker_dart.add_capability(ItemCapability.CARRY_QUIVER_RIGHT_VERTICAL)
itm_weak_beserker_dart.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_weak_beserker_dart.add_modifier(IModBit.BENT)
itm_weak_beserker_dart.add_modifier(IModBit.BALANCED)
itm_weak_beserker_dart.add_modifier(IModBit.HEAVY)
itm_weak_beserker_dart.add_modifier(IModBit.LARGE_BAG)
itm_weak_beserker_dart.set_weight(4.0)
itm_weak_beserker_dart.set_abundance(100)
itm_weak_beserker_dart.set_speed_rating(95)
itm_weak_beserker_dart.set_missile_speed(28)
itm_weak_beserker_dart.set_weapon_length(32)
itm_weak_beserker_dart.set_max_ammo(1)
itm_weak_beserker_dart.set_thrust_damage(5, 1)


itm_team_change_dart = Item("itm_team_change_dart", "Team_Change_Dart")
itm_team_change_dart.add_mesh(ItemMesh("dart_a"))
itm_team_change_dart.add_mesh(ItemMesh("dart_a_bag", ItemMesh.ixmesh_carry))
itm_team_change_dart.add_flag(ItemType.THROWN)
itm_team_change_dart.add_flag(ItemFlag.IS_PRIMARY)
itm_team_change_dart.add_capability(ItemCapability.THROW_JAVELIN)
itm_team_change_dart.add_capability(ItemCapability.CARRY_QUIVER_BACK)
itm_team_change_dart.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
itm_team_change_dart.add_modifier(IModBit.BENT)
itm_team_change_dart.add_modifier(IModBit.BALANCED)
itm_team_change_dart.add_modifier(IModBit.HEAVY)
itm_team_change_dart.add_modifier(IModBit.LARGE_BAG)
itm_team_change_dart.set_weight(5.0)
itm_team_change_dart.set_abundance(100)
itm_team_change_dart.set_speed_rating(93)
itm_team_change_dart.set_missile_speed(27)
itm_team_change_dart.set_weapon_length(45)
itm_team_change_dart.set_max_ammo(1)
itm_team_change_dart.set_thrust_damage(5, 1)


itm_awesome_spear = Item("itm_awesome_spear", "Awesome_Spear")
itm_awesome_spear.add_mesh(ItemMesh("spear"))
itm_awesome_spear.add_flag(ItemType.POLEARM)
itm_awesome_spear.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
itm_awesome_spear.add_flag(ItemFlag.IS_PRIMARY)
itm_awesome_spear.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
itm_awesome_spear.add_capability(ItemCapability.POLEARM_THRUST)
itm_awesome_spear.add_capability(ItemCapability.POLEARM_OVERSWING)
itm_awesome_spear.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
itm_awesome_spear.add_capability(ItemCapability.POLEARM_SLASHLEFT)
itm_awesome_spear.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
itm_awesome_spear.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
itm_awesome_spear.add_capability(ItemCapability.CARRY_SPEAR)
itm_awesome_spear.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
itm_awesome_spear.add_capability(ItemCapability.POLEARM_PARRY_UP)
itm_awesome_spear.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
itm_awesome_spear.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
itm_awesome_spear.add_modifier(IModBit.CRACKED)
itm_awesome_spear.add_modifier(IModBit.BENT)
itm_awesome_spear.add_modifier(IModBit.BALANCED)
itm_awesome_spear.set_weight(1.5)
itm_awesome_spear.set_abundance(100)
itm_awesome_spear.set_hit_points(41984)
itm_awesome_spear.set_speed_rating(110)
itm_awesome_spear.set_weapon_length(157)
itm_awesome_spear.set_thrust_damage(33, 1)
itm_awesome_spear.set_swing_damage(41, 0)


itm_running_boots = Item("itm_running_boots", "Running_Boots")
itm_running_boots.add_mesh(ItemMesh("samurai_boots"))
itm_running_boots.add_flag(ItemType.FOOT_ARMOR)
itm_running_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_running_boots.add_modifier(IModBit.TETTERED)
itm_running_boots.add_modifier(IModBit.RAGGED)
itm_running_boots.add_modifier(IModBit.STURDY)
itm_running_boots.add_modifier(IModBit.THICK)
itm_running_boots.add_modifier(IModBit.HARDENED)
itm_running_boots.set_weight(1.0)
itm_running_boots.set_abundance(100)
itm_running_boots.set_leg_armor(21)


itm_power_gloves = Item("itm_power_gloves", "Power_Gloves")
itm_power_gloves.add_mesh(ItemMesh("scale_gauntlets_a_L"))
itm_power_gloves.add_flag(ItemType.HAND_ARMOR)
itm_power_gloves.add_modifier(IModBit.RUSTY)
itm_power_gloves.add_modifier(IModBit.BATTERED)
itm_power_gloves.add_modifier(IModBit.CRUDE)
itm_power_gloves.add_modifier(IModBit.THICK)
itm_power_gloves.add_modifier(IModBit.REINFORCED)
itm_power_gloves.add_modifier(IModBit.LORDLY)
itm_power_gloves.set_weight(0.75)
itm_power_gloves.set_abundance(100)
itm_power_gloves.set_body_armor(6)


itm_invulnerable_helmet = Item("itm_invulnerable_helmet", "Invulnerable_Helmet")
itm_invulnerable_helmet.add_mesh(ItemMesh("maciejowski_helmet_new"))
itm_invulnerable_helmet.add_flag(ItemType.HEAD_ARMOR)
itm_invulnerable_helmet.add_flag(ItemFlag.COVERS_HEAD)
itm_invulnerable_helmet.add_flag(ItemFlag.IS_COUCHABLE)
itm_invulnerable_helmet.set_price(1240)
itm_invulnerable_helmet.add_modifier(IModBit.CRACKED)
itm_invulnerable_helmet.add_modifier(IModBit.RUSTY)
itm_invulnerable_helmet.add_modifier(IModBit.BATTERED)
itm_invulnerable_helmet.add_modifier(IModBit.CRUDE)
itm_invulnerable_helmet.add_modifier(IModBit.THICK)
itm_invulnerable_helmet.add_modifier(IModBit.REINFORCED)
itm_invulnerable_helmet.add_modifier(IModBit.LORDLY)
itm_invulnerable_helmet.set_weight(2.75)
itm_invulnerable_helmet.set_abundance(100)
itm_invulnerable_helmet.set_head_armor(63)


itm_kicking_boots = Item("itm_kicking_boots", "Kicking_Boots")
itm_kicking_boots.add_mesh(ItemMesh("sarranid_camel_boots"))
itm_kicking_boots.add_flag(ItemType.FOOT_ARMOR)
itm_kicking_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
itm_kicking_boots.add_flag(ItemFlag.IS_CIVILIAN)
itm_kicking_boots.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
itm_kicking_boots.add_modifier(IModBit.CRACKED)
itm_kicking_boots.add_modifier(IModBit.RUSTY)
itm_kicking_boots.add_modifier(IModBit.BATTERED)
itm_kicking_boots.add_modifier(IModBit.CRUDE)
itm_kicking_boots.add_modifier(IModBit.THICK)
itm_kicking_boots.add_modifier(IModBit.REINFORCED)
itm_kicking_boots.add_modifier(IModBit.LORDLY)
itm_kicking_boots.set_weight(3.0)
itm_kicking_boots.set_abundance(100)
itm_kicking_boots.set_leg_armor(20)


itm_restore_health_armour = Item("itm_restore_health_armour", "Restore_Health_Armour")
itm_restore_health_armour.add_mesh(ItemMesh("samurai_armor"))
itm_restore_health_armour.add_flag(ItemType.BODY_ARMOR)
itm_restore_health_armour.add_flag(ItemFlag.COVERS_LEGS)
itm_restore_health_armour.add_flag(ItemFlag.DOESNT_COVER_HAIR)
itm_restore_health_armour.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
itm_restore_health_armour.add_modifier(IModBit.RUSTY)
itm_restore_health_armour.add_modifier(IModBit.BATTERED)
itm_restore_health_armour.add_modifier(IModBit.CRUDE)
itm_restore_health_armour.add_modifier(IModBit.THICK)
itm_restore_health_armour.add_modifier(IModBit.REINFORCED)
itm_restore_health_armour.add_modifier(IModBit.LORDLY)
itm_restore_health_armour.set_weight(12.0)
itm_restore_health_armour.set_abundance(100)
itm_restore_health_armour.set_body_armor(27)
itm_restore_health_armour.set_leg_armor(11)


itm_javelin_bow_ammo = Item("itm_javelin_bow_ammo", "Shooting_Javelins")
itm_javelin_bow_ammo.add_mesh(ItemMesh("javelin_bow_ammo"))
itm_javelin_bow_ammo.add_mesh(ItemMesh("javelins_quiver_new", ItemMesh.ixmesh_carry))
itm_javelin_bow_ammo.add_flag(ItemType.ARROWS)
itm_javelin_bow_ammo.add_flag(ItemFlag.IS_DEFAULT_AMMO)
itm_javelin_bow_ammo.add_capability(ItemCapability.CARRY_QUIVER_BACK)
itm_javelin_bow_ammo.set_weight(4.0)
itm_javelin_bow_ammo.set_abundance(100)
itm_javelin_bow_ammo.set_weapon_length(75)
itm_javelin_bow_ammo.set_max_ammo(15)
itm_javelin_bow_ammo.set_thrust_damage(34, 1)


itm_ccoop_new_items_end = Item("itm_ccoop_new_items_end", "Items_End")
itm_ccoop_new_items_end.add_mesh(ItemMesh("shield_round_a"))
itm_ccoop_new_items_end.set_price(1)
itm_ccoop_new_items_end.set_abundance(100)




# This Python file uses the following encoding: utf-8

import sys
sys.path.append("../data_objects/")

from item import Item, ItemMesh, ItemType, ItemFlag, ItemCapability, IModBit, DamageType
from simple_trigger import SimpleTrigger
import factions as fac



no_item = Item("no_item", "INVALID_ITEM")
no_item.add_mesh(ItemMesh("invalid_item"))
no_item.add_flag(ItemType.ONE_HANDED_WEAPON)
no_item.add_flag(ItemFlag.IS_PRIMARY)
no_item.add_flag(ItemFlag.IS_SECONDARY)
no_item.add_capability(ItemCapability.ONEHANDED_TRUST)
no_item.add_capability(ItemCapability.ONEHANDED_OVERSWING)
no_item.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
no_item.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
no_item.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
no_item.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
no_item.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
no_item.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
no_item.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
no_item.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
no_item.add_capability(ItemCapability.FORCE_64_BITS)
no_item.set_price(3)
no_item.set_weight(1.5)
no_item.set_abundance(100)
no_item.set_hit_points(16384)
no_item.set_speed_rating(103)
no_item.set_weapon_length(90)
no_item.set_thrust_damage(10, 2)
no_item.set_swing_damage(16, 2)


tutorial_spear = Item("tutorial_spear", "Spear")
tutorial_spear.add_mesh(ItemMesh("spear"))
tutorial_spear.add_flag(ItemType.POLEARM)
tutorial_spear.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tutorial_spear.add_flag(ItemFlag.IS_PRIMARY)
tutorial_spear.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
tutorial_spear.add_capability(ItemCapability.POLEARM_THRUST)
tutorial_spear.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
tutorial_spear.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
tutorial_spear.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
tutorial_spear.add_capability(ItemCapability.POLEARM_PARRY_UP)
tutorial_spear.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
tutorial_spear.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
tutorial_spear.add_modifier(IModBit.CRACKED)
tutorial_spear.add_modifier(IModBit.BENT)
tutorial_spear.add_modifier(IModBit.BALANCED)
tutorial_spear.set_weight(4.5)
tutorial_spear.set_abundance(100)
tutorial_spear.set_speed_rating(80)
tutorial_spear.set_weapon_length(158)
tutorial_spear.set_thrust_damage(19, 1)


tutorial_club = Item("tutorial_club", "Club")
tutorial_club.add_mesh(ItemMesh("club"))
tutorial_club.add_flag(ItemType.ONE_HANDED_WEAPON)
tutorial_club.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
tutorial_club.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tutorial_club.add_flag(ItemFlag.IS_PRIMARY)
tutorial_club.add_capability(ItemCapability.ONEHANDED_OVERSWING)
tutorial_club.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
tutorial_club.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
tutorial_club.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
tutorial_club.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
tutorial_club.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
tutorial_club.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
tutorial_club.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
tutorial_club.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
tutorial_club.add_capability(ItemCapability.FORCE_64_BITS)
tutorial_club.set_weight(2.5)
tutorial_club.set_abundance(100)
tutorial_club.set_hit_points(11264)
tutorial_club.set_speed_rating(95)
tutorial_club.set_weapon_length(95)
tutorial_club.set_thrust_damage(0, 1)
tutorial_club.set_swing_damage(11, 2)


tutorial_battle_axe = Item("tutorial_battle_axe", "Battle_Axe")
tutorial_battle_axe.add_mesh(ItemMesh("battle_ax"))
tutorial_battle_axe.add_flag(ItemType.TWO_HANDED_WEAPON)
tutorial_battle_axe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tutorial_battle_axe.add_flag(ItemFlag.IS_TWO_HANDED)
tutorial_battle_axe.add_flag(ItemFlag.IS_PRIMARY)
tutorial_battle_axe.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
tutorial_battle_axe.add_capability(ItemCapability.TWOHANDED_OVERSWING)
tutorial_battle_axe.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
tutorial_battle_axe.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
tutorial_battle_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
tutorial_battle_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
tutorial_battle_axe.add_capability(ItemCapability.CARRY_AXE_BACK)
tutorial_battle_axe.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
tutorial_battle_axe.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
tutorial_battle_axe.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
tutorial_battle_axe.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
tutorial_battle_axe.add_capability(ItemCapability.FORCE_64_BITS)
tutorial_battle_axe.add_modifier(IModBit.RUSTY)
tutorial_battle_axe.add_modifier(IModBit.CHIPPED)
tutorial_battle_axe.add_modifier(IModBit.HEAVY)
tutorial_battle_axe.set_weight(5.0)
tutorial_battle_axe.set_abundance(100)
tutorial_battle_axe.set_hit_points(27648)
tutorial_battle_axe.set_speed_rating(88)
tutorial_battle_axe.set_weapon_length(108)
tutorial_battle_axe.set_thrust_damage(0, 1)
tutorial_battle_axe.set_swing_damage(27, 0)


tutorial_arrows = Item("tutorial_arrows", "Arrows")
tutorial_arrows.add_mesh(ItemMesh("arrow"))
tutorial_arrows.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
tutorial_arrows.add_mesh(ItemMesh("quiver", ItemMesh.ixmesh_carry))
tutorial_arrows.add_flag(ItemType.ARROWS)
tutorial_arrows.add_capability(ItemCapability.CARRY_QUIVER_BACK)
tutorial_arrows.add_modifier(IModBit.BENT)
tutorial_arrows.add_modifier(IModBit.LARGE_BAG)
tutorial_arrows.set_weight(3.0)
tutorial_arrows.set_abundance(160)
tutorial_arrows.set_weapon_length(95)
tutorial_arrows.set_max_ammo(20)
tutorial_arrows.set_thrust_damage(0, 1)


tutorial_bolts = Item("tutorial_bolts", "Bolts")
tutorial_bolts.add_mesh(ItemMesh("bolt"))
tutorial_bolts.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
tutorial_bolts.add_mesh(ItemMesh("bolt_bag", ItemMesh.ixmesh_carry))
meshx = ItemMesh("bolt_bag_b", ItemMesh.ixmesh_carry)
meshx.add_modifier(IModBit.LARGE_BAG)
tutorial_bolts.add_mesh(meshx)
tutorial_bolts.add_flag(ItemType.BOLTS)
tutorial_bolts.add_capability(ItemCapability.CARRY_QUIVER_RIGHT_VERTICAL)
tutorial_bolts.add_modifier(IModBit.BENT)
tutorial_bolts.add_modifier(IModBit.LARGE_BAG)
tutorial_bolts.set_weight(2.25)
tutorial_bolts.set_abundance(90)
tutorial_bolts.set_weapon_length(63)
tutorial_bolts.set_max_ammo(18)
tutorial_bolts.set_thrust_damage(0, 1)


tutorial_short_bow = Item("tutorial_short_bow", "Short_Bow")
tutorial_short_bow.add_mesh(ItemMesh("short_bow"))
tutorial_short_bow.add_mesh(ItemMesh("short_bow_carry", ItemMesh.ixmesh_carry))
tutorial_short_bow.add_flag(ItemType.BOW)
tutorial_short_bow.add_flag(ItemFlag.IS_TWO_HANDED)
tutorial_short_bow.add_flag(ItemFlag.IS_PRIMARY)
tutorial_short_bow.add_capability(ItemCapability.SHOOT_BOW)
tutorial_short_bow.add_capability(ItemCapability.CARRY_BOW_BACK)
tutorial_short_bow.add_modifier(IModBit.CRACKED)
tutorial_short_bow.add_modifier(IModBit.BENT)
tutorial_short_bow.add_modifier(IModBit.MASTERWORK)
tutorial_short_bow.add_modifier(IModBit.STRONG)
tutorial_short_bow.set_weight(1.0)
tutorial_short_bow.set_abundance(100)
tutorial_short_bow.set_speed_rating(98)
tutorial_short_bow.set_missile_speed(49)
tutorial_short_bow.set_thrust_damage(12, 1)


tutorial_crossbow = Item("tutorial_crossbow", "Crossbow")
tutorial_crossbow.add_mesh(ItemMesh("crossbow_a"))
tutorial_crossbow.add_flag(ItemType.CROSSBOW)
tutorial_crossbow.add_flag(ItemFlag.CANT_RELOAD_ON_HORSEBACK)
tutorial_crossbow.add_flag(ItemFlag.IS_TWO_HANDED)
tutorial_crossbow.add_flag(ItemFlag.IS_PRIMARY)
tutorial_crossbow.add_capability(ItemCapability.SHOOT_CROSSBOW)
tutorial_crossbow.add_capability(ItemCapability.CARRY_CROSSBOW_BACK)
tutorial_crossbow.add_modifier(IModBit.CRACKED)
tutorial_crossbow.add_modifier(IModBit.BENT)
tutorial_crossbow.add_modifier(IModBit.MASTERWORK)
tutorial_crossbow.set_weight(3.0)
tutorial_crossbow.set_abundance(100)
tutorial_crossbow.set_speed_rating(42)
tutorial_crossbow.set_missile_speed(68)
tutorial_crossbow.set_max_ammo(1)
tutorial_crossbow.set_thrust_damage(32, 1)


tutorial_throwing_daggers = Item("tutorial_throwing_daggers", "Throwing_Daggers")
tutorial_throwing_daggers.add_mesh(ItemMesh("throwing_dagger"))
tutorial_throwing_daggers.add_flag(ItemType.THROWN)
tutorial_throwing_daggers.add_flag(ItemFlag.IS_PRIMARY)
tutorial_throwing_daggers.add_capability(ItemCapability.THROW_KNIFE)
tutorial_throwing_daggers.add_modifier(IModBit.BENT)
tutorial_throwing_daggers.add_modifier(IModBit.LARGE_BAG)
tutorial_throwing_daggers.set_weight(3.5)
tutorial_throwing_daggers.set_abundance(100)
tutorial_throwing_daggers.set_speed_rating(102)
tutorial_throwing_daggers.set_missile_speed(25)
tutorial_throwing_daggers.set_max_ammo(14)
tutorial_throwing_daggers.set_thrust_damage(16, 0)


tutorial_saddle_horse = Item("tutorial_saddle_horse", "Saddle_Horse")
tutorial_saddle_horse.add_mesh(ItemMesh("saddle_horse"))
tutorial_saddle_horse.add_flag(ItemType.HORSE)
tutorial_saddle_horse.add_modifier(IModBit.HEAVY)
tutorial_saddle_horse.add_modifier(IModBit.LAME)
tutorial_saddle_horse.add_modifier(IModBit.SWAYBACKED)
tutorial_saddle_horse.add_modifier(IModBit.STUBBORN)
tutorial_saddle_horse.add_modifier(IModBit.SPIRITED)
tutorial_saddle_horse.set_abundance(90)
tutorial_saddle_horse.set_body_armor(3)
tutorial_saddle_horse.set_speed_rating(38)
tutorial_saddle_horse.set_missile_speed(40)
tutorial_saddle_horse.set_thrust_damage(8, 0)


tutorial_shield = Item("tutorial_shield", "Kite_Shield")
tutorial_shield.add_mesh(ItemMesh("shield_kite_a"))
tutorial_shield.add_flag(ItemType.SHIELD)
tutorial_shield.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tutorial_shield.add_capability(ItemCapability.CARRY_KITE_SHIELD)
tutorial_shield.set_price(118)
tutorial_shield.add_modifier(IModBit.CRACKED)
tutorial_shield.add_modifier(IModBit.BATTERED)
tutorial_shield.add_modifier(IModBit.THICK)
tutorial_shield.add_modifier(IModBit.REINFORCED)
tutorial_shield.set_weight(2.5)
tutorial_shield.set_abundance(100)
tutorial_shield.set_body_armor(1)
tutorial_shield.set_hit_points(480)
tutorial_shield.set_speed_rating(82)
tutorial_shield.set_weapon_length(150)


tutorial_staff_no_attack = Item("tutorial_staff_no_attack", "Staff")
tutorial_staff_no_attack.add_mesh(ItemMesh("wooden_staff"))
tutorial_staff_no_attack.add_flag(ItemType.POLEARM)
tutorial_staff_no_attack.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
tutorial_staff_no_attack.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tutorial_staff_no_attack.add_flag(ItemFlag.IS_PRIMARY)
tutorial_staff_no_attack.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
tutorial_staff_no_attack.add_flag(ItemFlag.FITS_TO_HEAD)
tutorial_staff_no_attack.add_flag(ItemFlag.OFFSET_LANCE)
tutorial_staff_no_attack.add_capability(ItemCapability.CARRY_SWORD_BACK)
tutorial_staff_no_attack.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
tutorial_staff_no_attack.add_capability(ItemCapability.POLEARM_PARRY_UP)
tutorial_staff_no_attack.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
tutorial_staff_no_attack.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
tutorial_staff_no_attack.set_price(9)
tutorial_staff_no_attack.set_weight(3.5)
tutorial_staff_no_attack.set_abundance(100)
tutorial_staff_no_attack.set_speed_rating(120)
tutorial_staff_no_attack.set_weapon_length(115)
tutorial_staff_no_attack.set_thrust_damage(0, 2)
tutorial_staff_no_attack.set_swing_damage(0, 2)


tutorial_staff = Item("tutorial_staff", "Staff")
tutorial_staff.add_mesh(ItemMesh("wooden_staff"))
tutorial_staff.add_flag(ItemType.POLEARM)
tutorial_staff.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
tutorial_staff.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tutorial_staff.add_flag(ItemFlag.IS_PRIMARY)
tutorial_staff.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
tutorial_staff.add_flag(ItemFlag.FITS_TO_HEAD)
tutorial_staff.add_flag(ItemFlag.OFFSET_LANCE)
tutorial_staff.add_capability(ItemCapability.POLEARM_THRUST)
tutorial_staff.add_capability(ItemCapability.POLEARM_OVERSWING)
tutorial_staff.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
tutorial_staff.add_capability(ItemCapability.POLEARM_SLASHLEFT)
tutorial_staff.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
tutorial_staff.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
tutorial_staff.add_capability(ItemCapability.CARRY_SWORD_BACK)
tutorial_staff.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
tutorial_staff.add_capability(ItemCapability.POLEARM_PARRY_UP)
tutorial_staff.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
tutorial_staff.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
tutorial_staff.set_price(9)
tutorial_staff.set_weight(3.5)
tutorial_staff.set_abundance(100)
tutorial_staff.set_hit_points(16384)
tutorial_staff.set_speed_rating(120)
tutorial_staff.set_weapon_length(115)
tutorial_staff.set_thrust_damage(16, 2)
tutorial_staff.set_swing_damage(16, 2)


tutorial_sword = Item("tutorial_sword", "Sword")
tutorial_sword.add_mesh(ItemMesh("long_sword"))
tutorial_sword.add_mesh(ItemMesh("scab_longsw_a", ItemMesh.ixmesh_carry))
tutorial_sword.add_flag(ItemType.ONE_HANDED_WEAPON)
tutorial_sword.add_flag(ItemFlag.IS_PRIMARY)
tutorial_sword.add_capability(ItemCapability.ONEHANDED_TRUST)
tutorial_sword.add_capability(ItemCapability.ONEHANDED_OVERSWING)
tutorial_sword.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
tutorial_sword.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
tutorial_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
tutorial_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
tutorial_sword.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
tutorial_sword.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
tutorial_sword.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
tutorial_sword.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
tutorial_sword.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
tutorial_sword.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
tutorial_sword.add_capability(ItemCapability.FORCE_64_BITS)
tutorial_sword.add_modifier(IModBit.RUSTY)
tutorial_sword.add_modifier(IModBit.CHIPPED)
tutorial_sword.add_modifier(IModBit.BALANCED)
tutorial_sword.add_modifier(IModBit.TEMPERED)
tutorial_sword.set_weight(1.5)
tutorial_sword.set_abundance(100)
tutorial_sword.set_hit_points(18432)
tutorial_sword.set_speed_rating(100)
tutorial_sword.set_weapon_length(102)
tutorial_sword.set_thrust_damage(15, 1)
tutorial_sword.set_swing_damage(18, 0)


tutorial_axe = Item("tutorial_axe", "Axe")
tutorial_axe.add_mesh(ItemMesh("iron_ax"))
tutorial_axe.add_flag(ItemType.TWO_HANDED_WEAPON)
tutorial_axe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tutorial_axe.add_flag(ItemFlag.IS_TWO_HANDED)
tutorial_axe.add_flag(ItemFlag.IS_PRIMARY)
tutorial_axe.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
tutorial_axe.add_capability(ItemCapability.TWOHANDED_OVERSWING)
tutorial_axe.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
tutorial_axe.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
tutorial_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
tutorial_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
tutorial_axe.add_capability(ItemCapability.CARRY_AXE_BACK)
tutorial_axe.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
tutorial_axe.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
tutorial_axe.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
tutorial_axe.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
tutorial_axe.add_capability(ItemCapability.FORCE_64_BITS)
tutorial_axe.add_modifier(IModBit.RUSTY)
tutorial_axe.add_modifier(IModBit.CHIPPED)
tutorial_axe.add_modifier(IModBit.HEAVY)
tutorial_axe.set_weight(4.0)
tutorial_axe.set_abundance(100)
tutorial_axe.set_hit_points(19456)
tutorial_axe.set_speed_rating(91)
tutorial_axe.set_weapon_length(108)
tutorial_axe.set_thrust_damage(0, 1)
tutorial_axe.set_swing_damage(19, 0)


tutorial_dagger = Item("tutorial_dagger", "Dagger")
tutorial_dagger.add_mesh(ItemMesh("practice_dagger"))
tutorial_dagger.add_flag(ItemType.ONE_HANDED_WEAPON)
tutorial_dagger.add_flag(ItemFlag.IS_PRIMARY)
tutorial_dagger.add_flag(ItemFlag.IS_SECONDARY)
tutorial_dagger.add_capability(ItemCapability.ONEHANDED_TRUST)
tutorial_dagger.add_capability(ItemCapability.ONEHANDED_OVERSWING)
tutorial_dagger.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
tutorial_dagger.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
tutorial_dagger.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
tutorial_dagger.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
tutorial_dagger.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
tutorial_dagger.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
tutorial_dagger.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
tutorial_dagger.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
tutorial_dagger.add_capability(ItemCapability.FORCE_64_BITS)
tutorial_dagger.set_price(3)
tutorial_dagger.set_weight(1.5)
tutorial_dagger.set_abundance(100)
tutorial_dagger.set_hit_points(16384)
tutorial_dagger.set_speed_rating(103)
tutorial_dagger.set_weapon_length(40)
tutorial_dagger.set_thrust_damage(10, 2)
tutorial_dagger.set_swing_damage(16, 2)


horse_meat = Item("horse_meat", "Horse_Meat")
horse_meat.add_mesh(ItemMesh("raw_meat"))
horse_meat.add_flag(ItemType.GOODS)
horse_meat.add_flag(ItemFlag.IS_FOOD)
horse_meat.add_flag(ItemFlag.IS_CONSUMABLE)
horse_meat.set_price(12)
horse_meat.set_weight(40.0)
horse_meat.set_abundance(100)
horse_meat.set_head_armor(30)
horse_meat.set_max_ammo(40)


practice_sword = Item("practice_sword", "Practice_Sword")
practice_sword.add_mesh(ItemMesh("practice_sword"))
practice_sword.add_flag(ItemType.ONE_HANDED_WEAPON)
practice_sword.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
practice_sword.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
practice_sword.add_flag(ItemFlag.IS_PRIMARY)
practice_sword.add_flag(ItemFlag.IS_SECONDARY)
practice_sword.add_capability(ItemCapability.ONEHANDED_TRUST)
practice_sword.add_capability(ItemCapability.ONEHANDED_OVERSWING)
practice_sword.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
practice_sword.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
practice_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
practice_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
practice_sword.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
practice_sword.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
practice_sword.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
practice_sword.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
practice_sword.add_capability(ItemCapability.FORCE_64_BITS)
practice_sword.set_price(3)
practice_sword.set_weight(1.5)
practice_sword.set_abundance(100)
practice_sword.set_hit_points(22528)
practice_sword.set_speed_rating(103)
practice_sword.set_weapon_length(90)
practice_sword.set_thrust_damage(20, 2)
practice_sword.set_swing_damage(22, 2)


heavy_practice_sword = Item("heavy_practice_sword", "Heavy_Practice_Sword")
heavy_practice_sword.add_mesh(ItemMesh("heavy_practicesword"))
heavy_practice_sword.add_flag(ItemType.TWO_HANDED_WEAPON)
heavy_practice_sword.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
heavy_practice_sword.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
heavy_practice_sword.add_flag(ItemFlag.IS_TWO_HANDED)
heavy_practice_sword.add_flag(ItemFlag.IS_PRIMARY)
heavy_practice_sword.add_capability(ItemCapability.TWOHANDED_THRUST)
heavy_practice_sword.add_capability(ItemCapability.TWOHANDED_OVERSWING)
heavy_practice_sword.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
heavy_practice_sword.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
heavy_practice_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
heavy_practice_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
heavy_practice_sword.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
heavy_practice_sword.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
heavy_practice_sword.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
heavy_practice_sword.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
heavy_practice_sword.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
heavy_practice_sword.add_capability(ItemCapability.FORCE_64_BITS)
heavy_practice_sword.set_price(21)
heavy_practice_sword.set_weight(6.25)
heavy_practice_sword.set_abundance(100)
heavy_practice_sword.set_hit_points(30720)
heavy_practice_sword.set_speed_rating(94)
heavy_practice_sword.set_weapon_length(128)
heavy_practice_sword.set_thrust_damage(24, 2)
heavy_practice_sword.set_swing_damage(30, 2)


practice_dagger = Item("practice_dagger", "Practice_Dagger")
practice_dagger.add_mesh(ItemMesh("practice_dagger"))
practice_dagger.add_flag(ItemType.ONE_HANDED_WEAPON)
practice_dagger.add_flag(ItemFlag.NO_PARRY)
practice_dagger.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
practice_dagger.add_flag(ItemFlag.IS_PRIMARY)
practice_dagger.add_flag(ItemFlag.IS_SECONDARY)
practice_dagger.add_capability(ItemCapability.ONEHANDED_TRUST)
practice_dagger.add_capability(ItemCapability.ONEHANDED_OVERSWING)
practice_dagger.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
practice_dagger.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
practice_dagger.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
practice_dagger.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
practice_dagger.add_capability(ItemCapability.CARRY_DAGGER_FRONT_LEFT)
practice_dagger.add_capability(ItemCapability.FORCE_64_BITS)
practice_dagger.set_price(2)
practice_dagger.set_weight(0.5)
practice_dagger.set_abundance(100)
practice_dagger.set_hit_points(16384)
practice_dagger.set_speed_rating(110)
practice_dagger.set_weapon_length(47)
practice_dagger.set_thrust_damage(14, 2)
practice_dagger.set_swing_damage(16, 2)


practice_axe = Item("practice_axe", "Practice_Axe")
practice_axe.add_mesh(ItemMesh("hatchet"))
practice_axe.add_flag(ItemType.ONE_HANDED_WEAPON)
practice_axe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
practice_axe.add_flag(ItemFlag.IS_PRIMARY)
practice_axe.add_flag(ItemFlag.IS_SECONDARY)
practice_axe.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
practice_axe.add_capability(ItemCapability.ONEHANDED_OVERSWING)
practice_axe.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
practice_axe.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
practice_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
practice_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
practice_axe.add_capability(ItemCapability.CARRY_AXE_LEFT_HIP)
practice_axe.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
practice_axe.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
practice_axe.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
practice_axe.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
practice_axe.add_capability(ItemCapability.FORCE_64_BITS)
practice_axe.set_price(24)
practice_axe.add_modifier(IModBit.RUSTY)
practice_axe.add_modifier(IModBit.CHIPPED)
practice_axe.add_modifier(IModBit.HEAVY)
practice_axe.set_weight(2.0)
practice_axe.set_abundance(100)
practice_axe.set_hit_points(24576)
practice_axe.set_speed_rating(95)
practice_axe.set_weapon_length(75)
practice_axe.set_thrust_damage(0, 1)
practice_axe.set_swing_damage(24, 2)


arena_axe = Item("arena_axe", "Axe")
arena_axe.add_mesh(ItemMesh("arena_axe"))
arena_axe.add_flag(ItemType.ONE_HANDED_WEAPON)
arena_axe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
arena_axe.add_flag(ItemFlag.IS_PRIMARY)
arena_axe.add_flag(ItemFlag.IS_SECONDARY)
arena_axe.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
arena_axe.add_capability(ItemCapability.ONEHANDED_OVERSWING)
arena_axe.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
arena_axe.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
arena_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
arena_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
arena_axe.add_capability(ItemCapability.CARRY_AXE_LEFT_HIP)
arena_axe.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
arena_axe.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
arena_axe.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
arena_axe.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
arena_axe.add_capability(ItemCapability.FORCE_64_BITS)
arena_axe.set_price(137)
arena_axe.add_modifier(IModBit.RUSTY)
arena_axe.add_modifier(IModBit.CHIPPED)
arena_axe.add_modifier(IModBit.HEAVY)
arena_axe.set_weight(1.5)
arena_axe.set_abundance(100)
arena_axe.set_hit_points(24576)
arena_axe.set_speed_rating(100)
arena_axe.set_weapon_length(69)
arena_axe.set_thrust_damage(0, 1)
arena_axe.set_swing_damage(24, 2)


arena_sword = Item("arena_sword", "Sword")
arena_sword.add_mesh(ItemMesh("arena_sword_one_handed"))
arena_sword.add_mesh(ItemMesh("sword_medieval_b_scabbard", ItemMesh.ixmesh_carry))
arena_sword.add_flag(ItemType.ONE_HANDED_WEAPON)
arena_sword.add_flag(ItemFlag.IS_PRIMARY)
arena_sword.add_capability(ItemCapability.ONEHANDED_TRUST)
arena_sword.add_capability(ItemCapability.ONEHANDED_OVERSWING)
arena_sword.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
arena_sword.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
arena_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
arena_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
arena_sword.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
arena_sword.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
arena_sword.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
arena_sword.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
arena_sword.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
arena_sword.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
arena_sword.add_capability(ItemCapability.FORCE_64_BITS)
arena_sword.set_price(243)
arena_sword.add_modifier(IModBit.RUSTY)
arena_sword.add_modifier(IModBit.CHIPPED)
arena_sword.add_modifier(IModBit.BALANCED)
arena_sword.add_modifier(IModBit.TEMPERED)
arena_sword.add_modifier(IModBit.MASTERWORK)
arena_sword.set_weight(1.5)
arena_sword.set_abundance(100)
arena_sword.set_hit_points(22528)
arena_sword.set_speed_rating(99)
arena_sword.set_weapon_length(95)
arena_sword.set_thrust_damage(20, 2)
arena_sword.set_swing_damage(22, 2)


arena_sword_two_handed = Item("arena_sword_two_handed", "Two_Handed_Sword")
arena_sword_two_handed.add_mesh(ItemMesh("arena_sword_two_handed"))
arena_sword_two_handed.add_flag(ItemType.TWO_HANDED_WEAPON)
arena_sword_two_handed.add_flag(ItemFlag.IS_TWO_HANDED)
arena_sword_two_handed.add_flag(ItemFlag.IS_PRIMARY)
arena_sword_two_handed.add_capability(ItemCapability.TWOHANDED_THRUST)
arena_sword_two_handed.add_capability(ItemCapability.TWOHANDED_OVERSWING)
arena_sword_two_handed.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
arena_sword_two_handed.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
arena_sword_two_handed.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
arena_sword_two_handed.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
arena_sword_two_handed.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
arena_sword_two_handed.add_capability(ItemCapability.CARRY_SWORD_BACK)
arena_sword_two_handed.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
arena_sword_two_handed.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
arena_sword_two_handed.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
arena_sword_two_handed.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
arena_sword_two_handed.add_capability(ItemCapability.FORCE_64_BITS)
arena_sword_two_handed.set_price(670)
arena_sword_two_handed.add_modifier(IModBit.RUSTY)
arena_sword_two_handed.add_modifier(IModBit.CHIPPED)
arena_sword_two_handed.add_modifier(IModBit.BALANCED)
arena_sword_two_handed.add_modifier(IModBit.TEMPERED)
arena_sword_two_handed.add_modifier(IModBit.MASTERWORK)
arena_sword_two_handed.set_weight(2.75)
arena_sword_two_handed.set_abundance(100)
arena_sword_two_handed.set_hit_points(30720)
arena_sword_two_handed.set_speed_rating(93)
arena_sword_two_handed.set_weapon_length(110)
arena_sword_two_handed.set_thrust_damage(24, 2)
arena_sword_two_handed.set_swing_damage(30, 2)


arena_lance = Item("arena_lance", "Lance")
arena_lance.add_mesh(ItemMesh("arena_lance"))
arena_lance.add_flag(ItemType.POLEARM)
arena_lance.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
arena_lance.add_flag(ItemFlag.IS_PRIMARY)
arena_lance.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
arena_lance.add_flag(ItemFlag.FITS_TO_HEAD)
arena_lance.add_flag(ItemFlag.OFFSET_LANCE)
arena_lance.add_flag(ItemFlag.COVERS_HEAD)
arena_lance.add_flag(ItemFlag.IS_COUCHABLE)
arena_lance.add_capability(ItemCapability.POLEARM_THRUST)
arena_lance.add_capability(ItemCapability.POLEARM_OVERSWING)
arena_lance.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
arena_lance.add_capability(ItemCapability.POLEARM_SLASHLEFT)
arena_lance.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
arena_lance.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
arena_lance.add_capability(ItemCapability.CARRY_SPEAR)
arena_lance.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
arena_lance.add_capability(ItemCapability.POLEARM_PARRY_UP)
arena_lance.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
arena_lance.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
arena_lance.set_price(90)
arena_lance.add_modifier(IModBit.CRACKED)
arena_lance.add_modifier(IModBit.BENT)
arena_lance.add_modifier(IModBit.BALANCED)
arena_lance.set_weight(2.5)
arena_lance.set_abundance(100)
arena_lance.set_hit_points(20480)
arena_lance.set_speed_rating(96)
arena_lance.set_weapon_length(150)
arena_lance.set_thrust_damage(25, 2)
arena_lance.set_swing_damage(20, 2)


practice_staff = Item("practice_staff", "Practice_Staff")
practice_staff.add_mesh(ItemMesh("wooden_staff"))
practice_staff.add_flag(ItemType.POLEARM)
practice_staff.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
practice_staff.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
practice_staff.add_flag(ItemFlag.IS_PRIMARY)
practice_staff.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
practice_staff.add_flag(ItemFlag.FITS_TO_HEAD)
practice_staff.add_flag(ItemFlag.OFFSET_LANCE)
practice_staff.add_capability(ItemCapability.POLEARM_THRUST)
practice_staff.add_capability(ItemCapability.POLEARM_OVERSWING)
practice_staff.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
practice_staff.add_capability(ItemCapability.POLEARM_SLASHLEFT)
practice_staff.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
practice_staff.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
practice_staff.add_capability(ItemCapability.CARRY_SWORD_BACK)
practice_staff.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
practice_staff.add_capability(ItemCapability.POLEARM_PARRY_UP)
practice_staff.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
practice_staff.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
practice_staff.set_price(9)
practice_staff.set_weight(2.5)
practice_staff.set_abundance(100)
practice_staff.set_hit_points(18432)
practice_staff.set_speed_rating(103)
practice_staff.set_weapon_length(118)
practice_staff.set_thrust_damage(18, 2)
practice_staff.set_swing_damage(18, 2)


practice_lance = Item("practice_lance", "Practice_Lance")
practice_lance.add_mesh(ItemMesh("joust_of_peace"))
practice_lance.add_flag(ItemType.POLEARM)
practice_lance.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
practice_lance.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
practice_lance.add_flag(ItemFlag.IS_PRIMARY)
practice_lance.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
practice_lance.add_flag(ItemFlag.COVERS_HEAD)
practice_lance.add_flag(ItemFlag.IS_COUCHABLE)
practice_lance.add_capability(ItemCapability.POLEARM_THRUST)
practice_lance.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
practice_lance.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
practice_lance.set_price(18)
practice_lance.set_weight(4.25)
practice_lance.set_abundance(100)
practice_lance.set_speed_rating(58)
practice_lance.set_weapon_length(240)
practice_lance.set_thrust_damage(15, 2)
practice_lance.set_swing_damage(0, 2)


practice_shield = Item("practice_shield", "Practice_Shield")
practice_shield.add_mesh(ItemMesh("shield_round_a"))
practice_shield.add_flag(ItemType.SHIELD)
practice_shield.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
practice_shield.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
practice_shield.set_price(20)
practice_shield.set_weight(3.5)
practice_shield.set_abundance(100)
practice_shield.set_body_armor(1)
practice_shield.set_hit_points(200)
practice_shield.set_speed_rating(100)
practice_shield.set_weapon_length(50)


practice_bow = Item("practice_bow", "Practice_Bow")
practice_bow.add_mesh(ItemMesh("hunting_bow"))
practice_bow.add_mesh(ItemMesh("hunting_bow_carry", ItemMesh.ixmesh_carry))
practice_bow.add_flag(ItemType.BOW)
practice_bow.add_flag(ItemFlag.IS_TWO_HANDED)
practice_bow.add_flag(ItemFlag.IS_PRIMARY)
practice_bow.add_capability(ItemCapability.SHOOT_BOW)
practice_bow.add_capability(ItemCapability.CARRY_BOW_BACK)
practice_bow.add_modifier(IModBit.CRACKED)
practice_bow.add_modifier(IModBit.BENT)
practice_bow.add_modifier(IModBit.MASTERWORK)
practice_bow.add_modifier(IModBit.STRONG)
practice_bow.set_weight(1.5)
practice_bow.set_abundance(100)
practice_bow.set_speed_rating(90)
practice_bow.set_missile_speed(40)
practice_bow.set_thrust_damage(21, 2)


practice_crossbow = Item("practice_crossbow", "Practice_Crossbow")
practice_crossbow.add_mesh(ItemMesh("crossbow_a"))
practice_crossbow.add_flag(ItemType.CROSSBOW)
practice_crossbow.add_flag(ItemFlag.IS_TWO_HANDED)
practice_crossbow.add_flag(ItemFlag.IS_PRIMARY)
practice_crossbow.add_capability(ItemCapability.SHOOT_CROSSBOW)
practice_crossbow.add_capability(ItemCapability.CARRY_CROSSBOW_BACK)
practice_crossbow.add_modifier(IModBit.CRACKED)
practice_crossbow.add_modifier(IModBit.BENT)
practice_crossbow.add_modifier(IModBit.MASTERWORK)
practice_crossbow.set_weight(3.0)
practice_crossbow.set_abundance(100)
practice_crossbow.set_speed_rating(42)
practice_crossbow.set_missile_speed(68)
practice_crossbow.set_max_ammo(1)
practice_crossbow.set_thrust_damage(32, 2)


practice_javelin = Item("practice_javelin", "Practice_Javelins")
practice_javelin.add_mesh(ItemMesh("javelin"))
practice_javelin.add_mesh(ItemMesh("javelins_quiver_new", ItemMesh.ixmesh_carry))
practice_javelin.add_flag(ItemType.THROWN)
practice_javelin.add_flag(ItemFlag.IS_PRIMARY)
practice_javelin.add_flag(ItemFlag.IS_CIVILIAN)
practice_javelin.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
practice_javelin.add_capability(ItemCapability.THROW_JAVELIN)
practice_javelin.add_capability(ItemCapability.CARRY_QUIVER_BACK)
practice_javelin.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
practice_javelin.add_modifier(IModBit.BENT)
practice_javelin.add_modifier(IModBit.BALANCED)
practice_javelin.add_modifier(IModBit.HEAVY)
practice_javelin.add_modifier(IModBit.LARGE_BAG)
practice_javelin.set_weight(5.0)
practice_javelin.set_abundance(100)
practice_javelin.set_speed_rating(91)
practice_javelin.set_missile_speed(28)
practice_javelin.set_weapon_length(75)
practice_javelin.set_max_ammo(50)
practice_javelin.set_thrust_damage(27, 2)


practice_javelin_melee = Item("practice_javelin_melee", "practice_javelin_melee")
practice_javelin_melee.add_mesh(ItemMesh("javelin"))
practice_javelin_melee.add_flag(ItemType.POLEARM)
practice_javelin_melee.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
practice_javelin_melee.add_flag(ItemFlag.IS_PRIMARY)
practice_javelin_melee.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
practice_javelin_melee.add_capability(ItemCapability.POLEARM_THRUST)
practice_javelin_melee.add_capability(ItemCapability.POLEARM_OVERSWING)
practice_javelin_melee.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
practice_javelin_melee.add_capability(ItemCapability.POLEARM_SLASHLEFT)
practice_javelin_melee.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
practice_javelin_melee.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
practice_javelin_melee.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
practice_javelin_melee.add_capability(ItemCapability.POLEARM_PARRY_UP)
practice_javelin_melee.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
practice_javelin_melee.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
practice_javelin_melee.add_modifier(IModBit.CRACKED)
practice_javelin_melee.add_modifier(IModBit.BENT)
practice_javelin_melee.add_modifier(IModBit.BALANCED)
practice_javelin_melee.set_weight(1.0)
practice_javelin_melee.set_abundance(100)
practice_javelin_melee.set_hit_points(12288)
practice_javelin_melee.set_speed_rating(91)
practice_javelin_melee.set_weapon_length(75)
practice_javelin_melee.set_thrust_damage(14, 2)
practice_javelin_melee.set_swing_damage(12, 2)


practice_throwing_daggers = Item("practice_throwing_daggers", "Throwing_Daggers")
practice_throwing_daggers.add_mesh(ItemMesh("throwing_dagger"))
practice_throwing_daggers.add_flag(ItemType.THROWN)
practice_throwing_daggers.add_flag(ItemFlag.IS_PRIMARY)
practice_throwing_daggers.add_capability(ItemCapability.THROW_KNIFE)
practice_throwing_daggers.add_modifier(IModBit.BENT)
practice_throwing_daggers.add_modifier(IModBit.BALANCED)
practice_throwing_daggers.add_modifier(IModBit.HEAVY)
practice_throwing_daggers.add_modifier(IModBit.LARGE_BAG)
practice_throwing_daggers.set_weight(3.5)
practice_throwing_daggers.set_abundance(100)
practice_throwing_daggers.set_speed_rating(102)
practice_throwing_daggers.set_missile_speed(25)
practice_throwing_daggers.set_max_ammo(10)
practice_throwing_daggers.set_thrust_damage(16, 2)


practice_throwing_daggers_100_amount = Item("practice_throwing_daggers_100_amount", "Throwing_Daggers")
practice_throwing_daggers_100_amount.add_mesh(ItemMesh("throwing_dagger"))
practice_throwing_daggers_100_amount.add_flag(ItemType.THROWN)
practice_throwing_daggers_100_amount.add_flag(ItemFlag.IS_PRIMARY)
practice_throwing_daggers_100_amount.add_capability(ItemCapability.THROW_KNIFE)
practice_throwing_daggers_100_amount.add_modifier(IModBit.BENT)
practice_throwing_daggers_100_amount.add_modifier(IModBit.BALANCED)
practice_throwing_daggers_100_amount.add_modifier(IModBit.HEAVY)
practice_throwing_daggers_100_amount.add_modifier(IModBit.LARGE_BAG)
practice_throwing_daggers_100_amount.set_weight(3.5)
practice_throwing_daggers_100_amount.set_abundance(100)
practice_throwing_daggers_100_amount.set_speed_rating(102)
practice_throwing_daggers_100_amount.set_missile_speed(25)
practice_throwing_daggers_100_amount.set_max_ammo(100)
practice_throwing_daggers_100_amount.set_thrust_damage(16, 2)


practice_horse = Item("practice_horse", "Practice_Horse")
practice_horse.add_mesh(ItemMesh("saddle_horse"))
practice_horse.add_flag(ItemType.HORSE)
practice_horse.set_price(37)
practice_horse.set_abundance(100)
practice_horse.set_body_armor(10)
practice_horse.set_speed_rating(37)
practice_horse.set_missile_speed(40)
practice_horse.set_thrust_damage(14, 0)


practice_arrows = Item("practice_arrows", "Practice_Arrows")
practice_arrows.add_mesh(ItemMesh("arena_arrow"))
practice_arrows.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
practice_arrows.add_mesh(ItemMesh("quiver", ItemMesh.ixmesh_carry))
practice_arrows.add_flag(ItemType.ARROWS)
practice_arrows.add_capability(ItemCapability.CARRY_QUIVER_BACK)
practice_arrows.add_modifier(IModBit.BENT)
practice_arrows.add_modifier(IModBit.LARGE_BAG)
practice_arrows.set_weight(1.5)
practice_arrows.set_abundance(100)
practice_arrows.set_weapon_length(95)
practice_arrows.set_max_ammo(80)


practice_bolts = Item("practice_bolts", "Practice_Bolts")
practice_bolts.add_mesh(ItemMesh("bolt"))
practice_bolts.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
practice_bolts.add_mesh(ItemMesh("bolt_bag", ItemMesh.ixmesh_carry))
meshx = ItemMesh("bolt_bag_b", ItemMesh.ixmesh_carry)
meshx.add_modifier(IModBit.LARGE_BAG)
practice_bolts.add_mesh(meshx)
practice_bolts.add_flag(ItemType.BOLTS)
practice_bolts.add_capability(ItemCapability.CARRY_QUIVER_RIGHT_VERTICAL)
practice_bolts.add_modifier(IModBit.BENT)
practice_bolts.add_modifier(IModBit.LARGE_BAG)
practice_bolts.set_weight(2.25)
practice_bolts.set_abundance(100)
practice_bolts.set_weapon_length(55)
practice_bolts.set_max_ammo(49)


practice_arrows_10_amount = Item("practice_arrows_10_amount", "Practice_Arrows")
practice_arrows_10_amount.add_mesh(ItemMesh("arrow"))
practice_arrows_10_amount.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
practice_arrows_10_amount.add_mesh(ItemMesh("quiver", ItemMesh.ixmesh_carry))
practice_arrows_10_amount.add_flag(ItemType.ARROWS)
practice_arrows_10_amount.add_capability(ItemCapability.CARRY_QUIVER_BACK)
practice_arrows_10_amount.add_modifier(IModBit.BENT)
practice_arrows_10_amount.add_modifier(IModBit.LARGE_BAG)
practice_arrows_10_amount.set_weight(1.5)
practice_arrows_10_amount.set_abundance(100)
practice_arrows_10_amount.set_weapon_length(95)
practice_arrows_10_amount.set_max_ammo(10)


practice_arrows_100_amount = Item("practice_arrows_100_amount", "Practice_Arrows")
practice_arrows_100_amount.add_mesh(ItemMesh("arrow"))
practice_arrows_100_amount.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
practice_arrows_100_amount.add_mesh(ItemMesh("quiver", ItemMesh.ixmesh_carry))
practice_arrows_100_amount.add_flag(ItemType.ARROWS)
practice_arrows_100_amount.add_capability(ItemCapability.CARRY_QUIVER_BACK)
practice_arrows_100_amount.add_modifier(IModBit.BENT)
practice_arrows_100_amount.add_modifier(IModBit.LARGE_BAG)
practice_arrows_100_amount.set_weight(1.5)
practice_arrows_100_amount.set_abundance(100)
practice_arrows_100_amount.set_weapon_length(95)
practice_arrows_100_amount.set_max_ammo(100)


practice_bolts_9_amount = Item("practice_bolts_9_amount", "Practice_Bolts")
practice_bolts_9_amount.add_mesh(ItemMesh("bolt"))
practice_bolts_9_amount.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
practice_bolts_9_amount.add_mesh(ItemMesh("bolt_bag", ItemMesh.ixmesh_carry))
meshx = ItemMesh("bolt_bag_b", ItemMesh.ixmesh_carry)
meshx.add_modifier(IModBit.LARGE_BAG)
practice_bolts_9_amount.add_mesh(meshx)
practice_bolts_9_amount.add_flag(ItemType.BOLTS)
practice_bolts_9_amount.add_capability(ItemCapability.CARRY_QUIVER_RIGHT_VERTICAL)
practice_bolts_9_amount.add_modifier(IModBit.BENT)
practice_bolts_9_amount.add_modifier(IModBit.LARGE_BAG)
practice_bolts_9_amount.set_weight(2.25)
practice_bolts_9_amount.set_abundance(100)
practice_bolts_9_amount.set_weapon_length(55)
practice_bolts_9_amount.set_max_ammo(9)


practice_boots = Item("practice_boots", "Practice_Boots")
practice_boots.add_mesh(ItemMesh("boot_nomad_a"))
practice_boots.add_flag(ItemType.FOOT_ARMOR)
practice_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
practice_boots.add_flag(ItemFlag.IS_CIVILIAN)
practice_boots.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
practice_boots.set_price(11)
practice_boots.add_modifier(IModBit.TETTERED)
practice_boots.add_modifier(IModBit.RAGGED)
practice_boots.add_modifier(IModBit.STURDY)
practice_boots.add_modifier(IModBit.THICK)
practice_boots.add_modifier(IModBit.HARDENED)
practice_boots.set_weight(1.0)
practice_boots.set_abundance(100)
practice_boots.set_leg_armor(10)


red_tourney_armor = Item("red_tourney_armor", "Red_Tourney_Armor")
red_tourney_armor.add_mesh(ItemMesh("tourn_armor_a"))
red_tourney_armor.add_flag(ItemType.BODY_ARMOR)
red_tourney_armor.add_flag(ItemFlag.COVERS_LEGS)
red_tourney_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
red_tourney_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
red_tourney_armor.set_price(152)
red_tourney_armor.set_weight(15.0)
red_tourney_armor.set_abundance(100)
red_tourney_armor.set_body_armor(20)
red_tourney_armor.set_leg_armor(6)


blue_tourney_armor = Item("blue_tourney_armor", "Blue_Tourney_Armor")
blue_tourney_armor.add_mesh(ItemMesh("mail_shirt"))
blue_tourney_armor.add_flag(ItemType.BODY_ARMOR)
blue_tourney_armor.add_flag(ItemFlag.COVERS_LEGS)
blue_tourney_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
blue_tourney_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
blue_tourney_armor.set_price(152)
blue_tourney_armor.set_weight(15.0)
blue_tourney_armor.set_abundance(100)
blue_tourney_armor.set_body_armor(20)
blue_tourney_armor.set_leg_armor(6)


green_tourney_armor = Item("green_tourney_armor", "Green_Tourney_Armor")
green_tourney_armor.add_mesh(ItemMesh("leather_vest"))
green_tourney_armor.add_flag(ItemType.BODY_ARMOR)
green_tourney_armor.add_flag(ItemFlag.COVERS_LEGS)
green_tourney_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
green_tourney_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
green_tourney_armor.set_price(152)
green_tourney_armor.set_weight(15.0)
green_tourney_armor.set_abundance(100)
green_tourney_armor.set_body_armor(20)
green_tourney_armor.set_leg_armor(6)


gold_tourney_armor = Item("gold_tourney_armor", "Gold_Tourney_Armor")
gold_tourney_armor.add_mesh(ItemMesh("padded_armor"))
gold_tourney_armor.add_flag(ItemType.BODY_ARMOR)
gold_tourney_armor.add_flag(ItemFlag.COVERS_LEGS)
gold_tourney_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
gold_tourney_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
gold_tourney_armor.set_price(152)
gold_tourney_armor.set_weight(15.0)
gold_tourney_armor.set_abundance(100)
gold_tourney_armor.set_body_armor(20)
gold_tourney_armor.set_leg_armor(6)


red_tourney_helmet = Item("red_tourney_helmet", "Red_Tourney_Helmet")
red_tourney_helmet.add_mesh(ItemMesh("flattop_helmet"))
red_tourney_helmet.add_flag(ItemType.HEAD_ARMOR)
red_tourney_helmet.set_price(126)
red_tourney_helmet.set_weight(2.0)
red_tourney_helmet.set_abundance(100)
red_tourney_helmet.set_head_armor(16)


blue_tourney_helmet = Item("blue_tourney_helmet", "Blue_Tourney_Helmet")
blue_tourney_helmet.add_mesh(ItemMesh("segmented_helm"))
blue_tourney_helmet.add_flag(ItemType.HEAD_ARMOR)
blue_tourney_helmet.set_price(126)
blue_tourney_helmet.set_weight(2.0)
blue_tourney_helmet.set_abundance(100)
blue_tourney_helmet.set_head_armor(16)


green_tourney_helmet = Item("green_tourney_helmet", "Green_Tourney_Helmet")
green_tourney_helmet.add_mesh(ItemMesh("hood_c"))
green_tourney_helmet.add_flag(ItemType.HEAD_ARMOR)
green_tourney_helmet.set_price(126)
green_tourney_helmet.set_weight(2.0)
green_tourney_helmet.set_abundance(100)
green_tourney_helmet.set_head_armor(16)


gold_tourney_helmet = Item("gold_tourney_helmet", "Gold_Tourney_Helmet")
gold_tourney_helmet.add_mesh(ItemMesh("hood_a"))
gold_tourney_helmet.add_flag(ItemType.HEAD_ARMOR)
gold_tourney_helmet.set_price(126)
gold_tourney_helmet.set_weight(2.0)
gold_tourney_helmet.set_abundance(100)
gold_tourney_helmet.set_head_armor(16)


arena_shield_red = Item("arena_shield_red", "Shield")
arena_shield_red.add_mesh(ItemMesh("arena_shield_red"))
arena_shield_red.add_flag(ItemType.SHIELD)
arena_shield_red.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
arena_shield_red.add_capability(ItemCapability.CARRY_KITE_SHIELD)
arena_shield_red.set_price(42)
arena_shield_red.add_modifier(IModBit.CRACKED)
arena_shield_red.add_modifier(IModBit.BATTERED)
arena_shield_red.add_modifier(IModBit.THICK)
arena_shield_red.add_modifier(IModBit.REINFORCED)
arena_shield_red.set_weight(2.0)
arena_shield_red.set_abundance(100)
arena_shield_red.set_body_armor(1)
arena_shield_red.set_hit_points(360)
arena_shield_red.set_speed_rating(100)
arena_shield_red.set_weapon_length(60)


arena_shield_blue = Item("arena_shield_blue", "Shield")
arena_shield_blue.add_mesh(ItemMesh("arena_shield_blue"))
arena_shield_blue.add_flag(ItemType.SHIELD)
arena_shield_blue.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
arena_shield_blue.add_capability(ItemCapability.CARRY_KITE_SHIELD)
arena_shield_blue.set_price(42)
arena_shield_blue.add_modifier(IModBit.CRACKED)
arena_shield_blue.add_modifier(IModBit.BATTERED)
arena_shield_blue.add_modifier(IModBit.THICK)
arena_shield_blue.add_modifier(IModBit.REINFORCED)
arena_shield_blue.set_weight(2.0)
arena_shield_blue.set_abundance(100)
arena_shield_blue.set_body_armor(1)
arena_shield_blue.set_hit_points(360)
arena_shield_blue.set_speed_rating(100)
arena_shield_blue.set_weapon_length(60)


arena_shield_green = Item("arena_shield_green", "Shield")
arena_shield_green.add_mesh(ItemMesh("arena_shield_green"))
arena_shield_green.add_flag(ItemType.SHIELD)
arena_shield_green.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
arena_shield_green.add_capability(ItemCapability.CARRY_KITE_SHIELD)
arena_shield_green.set_price(42)
arena_shield_green.add_modifier(IModBit.CRACKED)
arena_shield_green.add_modifier(IModBit.BATTERED)
arena_shield_green.add_modifier(IModBit.THICK)
arena_shield_green.add_modifier(IModBit.REINFORCED)
arena_shield_green.set_weight(2.0)
arena_shield_green.set_abundance(100)
arena_shield_green.set_body_armor(1)
arena_shield_green.set_hit_points(360)
arena_shield_green.set_speed_rating(100)
arena_shield_green.set_weapon_length(60)


arena_shield_yellow = Item("arena_shield_yellow", "Shield")
arena_shield_yellow.add_mesh(ItemMesh("arena_shield_yellow"))
arena_shield_yellow.add_flag(ItemType.SHIELD)
arena_shield_yellow.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
arena_shield_yellow.add_capability(ItemCapability.CARRY_KITE_SHIELD)
arena_shield_yellow.set_price(42)
arena_shield_yellow.add_modifier(IModBit.CRACKED)
arena_shield_yellow.add_modifier(IModBit.BATTERED)
arena_shield_yellow.add_modifier(IModBit.THICK)
arena_shield_yellow.add_modifier(IModBit.REINFORCED)
arena_shield_yellow.set_weight(2.0)
arena_shield_yellow.set_abundance(100)
arena_shield_yellow.set_body_armor(1)
arena_shield_yellow.set_hit_points(360)
arena_shield_yellow.set_speed_rating(100)
arena_shield_yellow.set_weapon_length(60)


arena_armor_white = Item("arena_armor_white", "Arena_Armor_White")
arena_armor_white.add_mesh(ItemMesh("arena_armorW_new"))
arena_armor_white.add_flag(ItemType.BODY_ARMOR)
arena_armor_white.add_flag(ItemFlag.COVERS_LEGS)
arena_armor_white.add_flag(ItemFlag.DOESNT_COVER_HAIR)
arena_armor_white.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
arena_armor_white.set_price(650)
arena_armor_white.add_modifier(IModBit.RUSTY)
arena_armor_white.add_modifier(IModBit.BATTERED)
arena_armor_white.add_modifier(IModBit.CRUDE)
arena_armor_white.add_modifier(IModBit.THICK)
arena_armor_white.add_modifier(IModBit.REINFORCED)
arena_armor_white.add_modifier(IModBit.LORDLY)
arena_armor_white.set_weight(16.0)
arena_armor_white.set_abundance(100)
arena_armor_white.set_body_armor(29)
arena_armor_white.set_leg_armor(13)


arena_armor_red = Item("arena_armor_red", "Arena_Armor_Red")
arena_armor_red.add_mesh(ItemMesh("arena_armorR_new"))
arena_armor_red.add_flag(ItemType.BODY_ARMOR)
arena_armor_red.add_flag(ItemFlag.COVERS_LEGS)
arena_armor_red.add_flag(ItemFlag.DOESNT_COVER_HAIR)
arena_armor_red.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
arena_armor_red.set_price(650)
arena_armor_red.add_modifier(IModBit.RUSTY)
arena_armor_red.add_modifier(IModBit.BATTERED)
arena_armor_red.add_modifier(IModBit.CRUDE)
arena_armor_red.add_modifier(IModBit.THICK)
arena_armor_red.add_modifier(IModBit.REINFORCED)
arena_armor_red.add_modifier(IModBit.LORDLY)
arena_armor_red.set_weight(16.0)
arena_armor_red.set_abundance(100)
arena_armor_red.set_body_armor(29)
arena_armor_red.set_leg_armor(13)


arena_armor_blue = Item("arena_armor_blue", "Arena_Armor_Blue")
arena_armor_blue.add_mesh(ItemMesh("arena_armorB_new"))
arena_armor_blue.add_flag(ItemType.BODY_ARMOR)
arena_armor_blue.add_flag(ItemFlag.COVERS_LEGS)
arena_armor_blue.add_flag(ItemFlag.DOESNT_COVER_HAIR)
arena_armor_blue.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
arena_armor_blue.set_price(650)
arena_armor_blue.add_modifier(IModBit.RUSTY)
arena_armor_blue.add_modifier(IModBit.BATTERED)
arena_armor_blue.add_modifier(IModBit.CRUDE)
arena_armor_blue.add_modifier(IModBit.THICK)
arena_armor_blue.add_modifier(IModBit.REINFORCED)
arena_armor_blue.add_modifier(IModBit.LORDLY)
arena_armor_blue.set_weight(16.0)
arena_armor_blue.set_abundance(100)
arena_armor_blue.set_body_armor(29)
arena_armor_blue.set_leg_armor(13)


arena_armor_green = Item("arena_armor_green", "Arena_Armor_Green")
arena_armor_green.add_mesh(ItemMesh("arena_armorG_new"))
arena_armor_green.add_flag(ItemType.BODY_ARMOR)
arena_armor_green.add_flag(ItemFlag.COVERS_LEGS)
arena_armor_green.add_flag(ItemFlag.DOESNT_COVER_HAIR)
arena_armor_green.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
arena_armor_green.set_price(650)
arena_armor_green.add_modifier(IModBit.RUSTY)
arena_armor_green.add_modifier(IModBit.BATTERED)
arena_armor_green.add_modifier(IModBit.CRUDE)
arena_armor_green.add_modifier(IModBit.THICK)
arena_armor_green.add_modifier(IModBit.REINFORCED)
arena_armor_green.add_modifier(IModBit.LORDLY)
arena_armor_green.set_weight(16.0)
arena_armor_green.set_abundance(100)
arena_armor_green.set_body_armor(29)
arena_armor_green.set_leg_armor(13)


arena_armor_yellow = Item("arena_armor_yellow", "Arena_Armor_Yellow")
arena_armor_yellow.add_mesh(ItemMesh("arena_armorY_new"))
arena_armor_yellow.add_flag(ItemType.BODY_ARMOR)
arena_armor_yellow.add_flag(ItemFlag.COVERS_LEGS)
arena_armor_yellow.add_flag(ItemFlag.DOESNT_COVER_HAIR)
arena_armor_yellow.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
arena_armor_yellow.set_price(650)
arena_armor_yellow.add_modifier(IModBit.RUSTY)
arena_armor_yellow.add_modifier(IModBit.BATTERED)
arena_armor_yellow.add_modifier(IModBit.CRUDE)
arena_armor_yellow.add_modifier(IModBit.THICK)
arena_armor_yellow.add_modifier(IModBit.REINFORCED)
arena_armor_yellow.add_modifier(IModBit.LORDLY)
arena_armor_yellow.set_weight(16.0)
arena_armor_yellow.set_abundance(100)
arena_armor_yellow.set_body_armor(29)
arena_armor_yellow.set_leg_armor(13)


arena_tunic_white = Item("arena_tunic_white", "Arena_Tunic_White_")
arena_tunic_white.add_mesh(ItemMesh("arena_tunicW_new"))
arena_tunic_white.add_flag(ItemType.BODY_ARMOR)
arena_tunic_white.add_flag(ItemFlag.COVERS_LEGS)
arena_tunic_white.add_flag(ItemFlag.DOESNT_COVER_HAIR)
arena_tunic_white.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
arena_tunic_white.set_price(47)
arena_tunic_white.add_modifier(IModBit.TETTERED)
arena_tunic_white.add_modifier(IModBit.RAGGED)
arena_tunic_white.add_modifier(IModBit.STURDY)
arena_tunic_white.add_modifier(IModBit.THICK)
arena_tunic_white.add_modifier(IModBit.HARDENED)
arena_tunic_white.set_weight(2.0)
arena_tunic_white.set_abundance(100)
arena_tunic_white.set_body_armor(16)
arena_tunic_white.set_leg_armor(6)


arena_tunic_red = Item("arena_tunic_red", "Arena_Tunic_Red")
arena_tunic_red.add_mesh(ItemMesh("arena_tunicR_new"))
arena_tunic_red.add_flag(ItemType.BODY_ARMOR)
arena_tunic_red.add_flag(ItemFlag.COVERS_LEGS)
arena_tunic_red.add_flag(ItemFlag.DOESNT_COVER_HAIR)
arena_tunic_red.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
arena_tunic_red.set_price(27)
arena_tunic_red.add_modifier(IModBit.TETTERED)
arena_tunic_red.add_modifier(IModBit.RAGGED)
arena_tunic_red.add_modifier(IModBit.STURDY)
arena_tunic_red.add_modifier(IModBit.THICK)
arena_tunic_red.add_modifier(IModBit.HARDENED)
arena_tunic_red.set_weight(2.0)
arena_tunic_red.set_abundance(100)
arena_tunic_red.set_body_armor(16)
arena_tunic_red.set_leg_armor(6)


arena_tunic_blue = Item("arena_tunic_blue", "Arena_Tunic_Blue")
arena_tunic_blue.add_mesh(ItemMesh("arena_tunicB_new"))
arena_tunic_blue.add_flag(ItemType.BODY_ARMOR)
arena_tunic_blue.add_flag(ItemFlag.COVERS_LEGS)
arena_tunic_blue.add_flag(ItemFlag.DOESNT_COVER_HAIR)
arena_tunic_blue.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
arena_tunic_blue.set_price(27)
arena_tunic_blue.add_modifier(IModBit.TETTERED)
arena_tunic_blue.add_modifier(IModBit.RAGGED)
arena_tunic_blue.add_modifier(IModBit.STURDY)
arena_tunic_blue.add_modifier(IModBit.THICK)
arena_tunic_blue.add_modifier(IModBit.HARDENED)
arena_tunic_blue.set_weight(2.0)
arena_tunic_blue.set_abundance(100)
arena_tunic_blue.set_body_armor(16)
arena_tunic_blue.set_leg_armor(6)


arena_tunic_green = Item("arena_tunic_green", "Arena_Tunic_Green")
arena_tunic_green.add_mesh(ItemMesh("arena_tunicG_new"))
arena_tunic_green.add_flag(ItemType.BODY_ARMOR)
arena_tunic_green.add_flag(ItemFlag.COVERS_LEGS)
arena_tunic_green.add_flag(ItemFlag.DOESNT_COVER_HAIR)
arena_tunic_green.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
arena_tunic_green.set_price(27)
arena_tunic_green.add_modifier(IModBit.TETTERED)
arena_tunic_green.add_modifier(IModBit.RAGGED)
arena_tunic_green.add_modifier(IModBit.STURDY)
arena_tunic_green.add_modifier(IModBit.THICK)
arena_tunic_green.add_modifier(IModBit.HARDENED)
arena_tunic_green.set_weight(2.0)
arena_tunic_green.set_abundance(100)
arena_tunic_green.set_body_armor(16)
arena_tunic_green.set_leg_armor(6)


arena_tunic_yellow = Item("arena_tunic_yellow", "Arena_Tunic_Yellow")
arena_tunic_yellow.add_mesh(ItemMesh("arena_tunicY_new"))
arena_tunic_yellow.add_flag(ItemType.BODY_ARMOR)
arena_tunic_yellow.add_flag(ItemFlag.COVERS_LEGS)
arena_tunic_yellow.add_flag(ItemFlag.DOESNT_COVER_HAIR)
arena_tunic_yellow.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
arena_tunic_yellow.set_price(27)
arena_tunic_yellow.add_modifier(IModBit.TETTERED)
arena_tunic_yellow.add_modifier(IModBit.RAGGED)
arena_tunic_yellow.add_modifier(IModBit.STURDY)
arena_tunic_yellow.add_modifier(IModBit.THICK)
arena_tunic_yellow.add_modifier(IModBit.HARDENED)
arena_tunic_yellow.set_weight(2.0)
arena_tunic_yellow.set_abundance(100)
arena_tunic_yellow.set_body_armor(16)
arena_tunic_yellow.set_leg_armor(6)


arena_helmet_red = Item("arena_helmet_red", "Arena_Helmet_Red")
arena_helmet_red.add_mesh(ItemMesh("arena_helmetR"))
arena_helmet_red.add_flag(ItemType.HEAD_ARMOR)
arena_helmet_red.add_flag(ItemFlag.FITS_TO_HEAD)
arena_helmet_red.add_flag(ItemFlag.OFFSET_LANCE)
arena_helmet_red.set_price(187)
arena_helmet_red.add_modifier(IModBit.CRACKED)
arena_helmet_red.add_modifier(IModBit.RUSTY)
arena_helmet_red.add_modifier(IModBit.BATTERED)
arena_helmet_red.add_modifier(IModBit.CRUDE)
arena_helmet_red.add_modifier(IModBit.THICK)
arena_helmet_red.add_modifier(IModBit.REINFORCED)
arena_helmet_red.add_modifier(IModBit.LORDLY)
arena_helmet_red.set_weight(1.25)
arena_helmet_red.set_abundance(100)
arena_helmet_red.set_head_armor(26)


arena_helmet_blue = Item("arena_helmet_blue", "Arena_Helmet_Blue")
arena_helmet_blue.add_mesh(ItemMesh("arena_helmetB"))
arena_helmet_blue.add_flag(ItemType.HEAD_ARMOR)
arena_helmet_blue.add_flag(ItemFlag.FITS_TO_HEAD)
arena_helmet_blue.add_flag(ItemFlag.OFFSET_LANCE)
arena_helmet_blue.set_price(187)
arena_helmet_blue.add_modifier(IModBit.CRACKED)
arena_helmet_blue.add_modifier(IModBit.RUSTY)
arena_helmet_blue.add_modifier(IModBit.BATTERED)
arena_helmet_blue.add_modifier(IModBit.CRUDE)
arena_helmet_blue.add_modifier(IModBit.THICK)
arena_helmet_blue.add_modifier(IModBit.REINFORCED)
arena_helmet_blue.add_modifier(IModBit.LORDLY)
arena_helmet_blue.set_weight(1.25)
arena_helmet_blue.set_abundance(100)
arena_helmet_blue.set_head_armor(26)


arena_helmet_green = Item("arena_helmet_green", "Arena_Helmet_Green")
arena_helmet_green.add_mesh(ItemMesh("arena_helmetG"))
arena_helmet_green.add_flag(ItemType.HEAD_ARMOR)
arena_helmet_green.add_flag(ItemFlag.FITS_TO_HEAD)
arena_helmet_green.add_flag(ItemFlag.OFFSET_LANCE)
arena_helmet_green.set_price(187)
arena_helmet_green.add_modifier(IModBit.CRACKED)
arena_helmet_green.add_modifier(IModBit.RUSTY)
arena_helmet_green.add_modifier(IModBit.BATTERED)
arena_helmet_green.add_modifier(IModBit.CRUDE)
arena_helmet_green.add_modifier(IModBit.THICK)
arena_helmet_green.add_modifier(IModBit.REINFORCED)
arena_helmet_green.add_modifier(IModBit.LORDLY)
arena_helmet_green.set_weight(1.25)
arena_helmet_green.set_abundance(100)
arena_helmet_green.set_head_armor(26)


arena_helmet_yellow = Item("arena_helmet_yellow", "Arena_Helmet_Yellow")
arena_helmet_yellow.add_mesh(ItemMesh("arena_helmetY"))
arena_helmet_yellow.add_flag(ItemType.HEAD_ARMOR)
arena_helmet_yellow.add_flag(ItemFlag.FITS_TO_HEAD)
arena_helmet_yellow.add_flag(ItemFlag.OFFSET_LANCE)
arena_helmet_yellow.set_price(187)
arena_helmet_yellow.add_modifier(IModBit.CRACKED)
arena_helmet_yellow.add_modifier(IModBit.RUSTY)
arena_helmet_yellow.add_modifier(IModBit.BATTERED)
arena_helmet_yellow.add_modifier(IModBit.CRUDE)
arena_helmet_yellow.add_modifier(IModBit.THICK)
arena_helmet_yellow.add_modifier(IModBit.REINFORCED)
arena_helmet_yellow.add_modifier(IModBit.LORDLY)
arena_helmet_yellow.set_weight(1.25)
arena_helmet_yellow.set_abundance(100)
arena_helmet_yellow.set_head_armor(26)


steppe_helmet_white = Item("steppe_helmet_white", "Steppe_Helmet_White")
steppe_helmet_white.add_mesh(ItemMesh("steppe_helmetW"))
steppe_helmet_white.add_flag(ItemType.HEAD_ARMOR)
steppe_helmet_white.add_flag(ItemFlag.FITS_TO_HEAD)
steppe_helmet_white.add_flag(ItemFlag.OFFSET_LANCE)
steppe_helmet_white.set_price(187)
steppe_helmet_white.add_modifier(IModBit.CRACKED)
steppe_helmet_white.add_modifier(IModBit.RUSTY)
steppe_helmet_white.add_modifier(IModBit.BATTERED)
steppe_helmet_white.add_modifier(IModBit.CRUDE)
steppe_helmet_white.add_modifier(IModBit.THICK)
steppe_helmet_white.add_modifier(IModBit.REINFORCED)
steppe_helmet_white.add_modifier(IModBit.LORDLY)
steppe_helmet_white.set_weight(1.25)
steppe_helmet_white.set_abundance(100)
steppe_helmet_white.set_head_armor(20)


steppe_helmet_red = Item("steppe_helmet_red", "Steppe_Helmet_Red")
steppe_helmet_red.add_mesh(ItemMesh("steppe_helmetR"))
steppe_helmet_red.add_flag(ItemType.HEAD_ARMOR)
steppe_helmet_red.add_flag(ItemFlag.FITS_TO_HEAD)
steppe_helmet_red.add_flag(ItemFlag.OFFSET_LANCE)
steppe_helmet_red.set_price(187)
steppe_helmet_red.add_modifier(IModBit.CRACKED)
steppe_helmet_red.add_modifier(IModBit.RUSTY)
steppe_helmet_red.add_modifier(IModBit.BATTERED)
steppe_helmet_red.add_modifier(IModBit.CRUDE)
steppe_helmet_red.add_modifier(IModBit.THICK)
steppe_helmet_red.add_modifier(IModBit.REINFORCED)
steppe_helmet_red.add_modifier(IModBit.LORDLY)
steppe_helmet_red.set_weight(1.25)
steppe_helmet_red.set_abundance(100)
steppe_helmet_red.set_head_armor(20)


steppe_helmet_blue = Item("steppe_helmet_blue", "Steppe_Helmet_Blue")
steppe_helmet_blue.add_mesh(ItemMesh("steppe_helmetB"))
steppe_helmet_blue.add_flag(ItemType.HEAD_ARMOR)
steppe_helmet_blue.add_flag(ItemFlag.FITS_TO_HEAD)
steppe_helmet_blue.add_flag(ItemFlag.OFFSET_LANCE)
steppe_helmet_blue.set_price(187)
steppe_helmet_blue.add_modifier(IModBit.CRACKED)
steppe_helmet_blue.add_modifier(IModBit.RUSTY)
steppe_helmet_blue.add_modifier(IModBit.BATTERED)
steppe_helmet_blue.add_modifier(IModBit.CRUDE)
steppe_helmet_blue.add_modifier(IModBit.THICK)
steppe_helmet_blue.add_modifier(IModBit.REINFORCED)
steppe_helmet_blue.add_modifier(IModBit.LORDLY)
steppe_helmet_blue.set_weight(1.25)
steppe_helmet_blue.set_abundance(100)
steppe_helmet_blue.set_head_armor(20)


steppe_helmet_green = Item("steppe_helmet_green", "Steppe_Helmet_Green")
steppe_helmet_green.add_mesh(ItemMesh("steppe_helmetG"))
steppe_helmet_green.add_flag(ItemType.HEAD_ARMOR)
steppe_helmet_green.add_flag(ItemFlag.FITS_TO_HEAD)
steppe_helmet_green.add_flag(ItemFlag.OFFSET_LANCE)
steppe_helmet_green.set_price(187)
steppe_helmet_green.add_modifier(IModBit.CRACKED)
steppe_helmet_green.add_modifier(IModBit.RUSTY)
steppe_helmet_green.add_modifier(IModBit.BATTERED)
steppe_helmet_green.add_modifier(IModBit.CRUDE)
steppe_helmet_green.add_modifier(IModBit.THICK)
steppe_helmet_green.add_modifier(IModBit.REINFORCED)
steppe_helmet_green.add_modifier(IModBit.LORDLY)
steppe_helmet_green.set_weight(1.25)
steppe_helmet_green.set_abundance(100)
steppe_helmet_green.set_head_armor(20)


steppe_helmet_yellow = Item("steppe_helmet_yellow", "Steppe_Helmet_Yellow")
steppe_helmet_yellow.add_mesh(ItemMesh("steppe_helmetY"))
steppe_helmet_yellow.add_flag(ItemType.HEAD_ARMOR)
steppe_helmet_yellow.add_flag(ItemFlag.FITS_TO_HEAD)
steppe_helmet_yellow.add_flag(ItemFlag.OFFSET_LANCE)
steppe_helmet_yellow.set_price(187)
steppe_helmet_yellow.add_modifier(IModBit.CRACKED)
steppe_helmet_yellow.add_modifier(IModBit.RUSTY)
steppe_helmet_yellow.add_modifier(IModBit.BATTERED)
steppe_helmet_yellow.add_modifier(IModBit.CRUDE)
steppe_helmet_yellow.add_modifier(IModBit.THICK)
steppe_helmet_yellow.add_modifier(IModBit.REINFORCED)
steppe_helmet_yellow.add_modifier(IModBit.LORDLY)
steppe_helmet_yellow.set_weight(1.25)
steppe_helmet_yellow.set_abundance(100)
steppe_helmet_yellow.set_head_armor(20)


tourney_helm_white = Item("tourney_helm_white", "Tourney_Helm_White")
tourney_helm_white.add_mesh(ItemMesh("tourney_helmR"))
tourney_helm_white.add_flag(ItemType.HEAD_ARMOR)
tourney_helm_white.add_flag(ItemFlag.COVERS_HEAD)
tourney_helm_white.add_flag(ItemFlag.IS_COUCHABLE)
tourney_helm_white.set_price(760)
tourney_helm_white.add_modifier(IModBit.CRACKED)
tourney_helm_white.add_modifier(IModBit.RUSTY)
tourney_helm_white.add_modifier(IModBit.BATTERED)
tourney_helm_white.add_modifier(IModBit.CRUDE)
tourney_helm_white.add_modifier(IModBit.THICK)
tourney_helm_white.add_modifier(IModBit.REINFORCED)
tourney_helm_white.add_modifier(IModBit.LORDLY)
tourney_helm_white.set_weight(2.75)
tourney_helm_white.set_abundance(100)
tourney_helm_white.set_head_armor(30)


tourney_helm_red = Item("tourney_helm_red", "Tourney_Helm_Red")
tourney_helm_red.add_mesh(ItemMesh("tourney_helmR"))
tourney_helm_red.add_flag(ItemType.HEAD_ARMOR)
tourney_helm_red.add_flag(ItemFlag.COVERS_HEAD)
tourney_helm_red.add_flag(ItemFlag.IS_COUCHABLE)
tourney_helm_red.set_price(760)
tourney_helm_red.add_modifier(IModBit.CRACKED)
tourney_helm_red.add_modifier(IModBit.RUSTY)
tourney_helm_red.add_modifier(IModBit.BATTERED)
tourney_helm_red.add_modifier(IModBit.CRUDE)
tourney_helm_red.add_modifier(IModBit.THICK)
tourney_helm_red.add_modifier(IModBit.REINFORCED)
tourney_helm_red.add_modifier(IModBit.LORDLY)
tourney_helm_red.set_weight(2.75)
tourney_helm_red.set_abundance(100)
tourney_helm_red.set_head_armor(30)


tourney_helm_blue = Item("tourney_helm_blue", "Tourney_Helm_Blue")
tourney_helm_blue.add_mesh(ItemMesh("tourney_helmB"))
tourney_helm_blue.add_flag(ItemType.HEAD_ARMOR)
tourney_helm_blue.add_flag(ItemFlag.COVERS_HEAD)
tourney_helm_blue.add_flag(ItemFlag.IS_COUCHABLE)
tourney_helm_blue.set_price(760)
tourney_helm_blue.add_modifier(IModBit.CRACKED)
tourney_helm_blue.add_modifier(IModBit.RUSTY)
tourney_helm_blue.add_modifier(IModBit.BATTERED)
tourney_helm_blue.add_modifier(IModBit.CRUDE)
tourney_helm_blue.add_modifier(IModBit.THICK)
tourney_helm_blue.add_modifier(IModBit.REINFORCED)
tourney_helm_blue.add_modifier(IModBit.LORDLY)
tourney_helm_blue.set_weight(2.75)
tourney_helm_blue.set_abundance(100)
tourney_helm_blue.set_head_armor(30)


tourney_helm_green = Item("tourney_helm_green", "Tourney_Helm_Green")
tourney_helm_green.add_mesh(ItemMesh("tourney_helmG"))
tourney_helm_green.add_flag(ItemType.HEAD_ARMOR)
tourney_helm_green.add_flag(ItemFlag.COVERS_HEAD)
tourney_helm_green.add_flag(ItemFlag.IS_COUCHABLE)
tourney_helm_green.set_price(760)
tourney_helm_green.add_modifier(IModBit.CRACKED)
tourney_helm_green.add_modifier(IModBit.RUSTY)
tourney_helm_green.add_modifier(IModBit.BATTERED)
tourney_helm_green.add_modifier(IModBit.CRUDE)
tourney_helm_green.add_modifier(IModBit.THICK)
tourney_helm_green.add_modifier(IModBit.REINFORCED)
tourney_helm_green.add_modifier(IModBit.LORDLY)
tourney_helm_green.set_weight(2.75)
tourney_helm_green.set_abundance(100)
tourney_helm_green.set_head_armor(30)


tourney_helm_yellow = Item("tourney_helm_yellow", "Tourney_Helm_Yellow")
tourney_helm_yellow.add_mesh(ItemMesh("tourney_helmY"))
tourney_helm_yellow.add_flag(ItemType.HEAD_ARMOR)
tourney_helm_yellow.add_flag(ItemFlag.COVERS_HEAD)
tourney_helm_yellow.add_flag(ItemFlag.IS_COUCHABLE)
tourney_helm_yellow.set_price(760)
tourney_helm_yellow.add_modifier(IModBit.CRACKED)
tourney_helm_yellow.add_modifier(IModBit.RUSTY)
tourney_helm_yellow.add_modifier(IModBit.BATTERED)
tourney_helm_yellow.add_modifier(IModBit.CRUDE)
tourney_helm_yellow.add_modifier(IModBit.THICK)
tourney_helm_yellow.add_modifier(IModBit.REINFORCED)
tourney_helm_yellow.add_modifier(IModBit.LORDLY)
tourney_helm_yellow.set_weight(2.75)
tourney_helm_yellow.set_abundance(100)
tourney_helm_yellow.set_head_armor(30)


arena_turban_red = Item("arena_turban_red", "Arena_Turban")
arena_turban_red.add_mesh(ItemMesh("tuareg_open"))
arena_turban_red.add_flag(ItemType.HEAD_ARMOR)
arena_turban_red.add_flag(ItemFlag.FITS_TO_HEAD)
arena_turban_red.add_flag(ItemFlag.OFFSET_LANCE)
arena_turban_red.set_price(187)
arena_turban_red.add_modifier(IModBit.CRACKED)
arena_turban_red.add_modifier(IModBit.RUSTY)
arena_turban_red.add_modifier(IModBit.BATTERED)
arena_turban_red.add_modifier(IModBit.CRUDE)
arena_turban_red.add_modifier(IModBit.THICK)
arena_turban_red.add_modifier(IModBit.REINFORCED)
arena_turban_red.add_modifier(IModBit.LORDLY)
arena_turban_red.set_weight(1.25)
arena_turban_red.set_abundance(100)
arena_turban_red.set_head_armor(26)


arena_turban_blue = Item("arena_turban_blue", "Arena_Turban")
arena_turban_blue.add_mesh(ItemMesh("tuareg_open"))
arena_turban_blue.add_flag(ItemType.HEAD_ARMOR)
arena_turban_blue.add_flag(ItemFlag.FITS_TO_HEAD)
arena_turban_blue.add_flag(ItemFlag.OFFSET_LANCE)
arena_turban_blue.set_price(187)
arena_turban_blue.add_modifier(IModBit.CRACKED)
arena_turban_blue.add_modifier(IModBit.RUSTY)
arena_turban_blue.add_modifier(IModBit.BATTERED)
arena_turban_blue.add_modifier(IModBit.CRUDE)
arena_turban_blue.add_modifier(IModBit.THICK)
arena_turban_blue.add_modifier(IModBit.REINFORCED)
arena_turban_blue.add_modifier(IModBit.LORDLY)
arena_turban_blue.set_weight(1.25)
arena_turban_blue.set_abundance(100)
arena_turban_blue.set_head_armor(26)


arena_turban_green = Item("arena_turban_green", "Arena_Turban")
arena_turban_green.add_mesh(ItemMesh("tuareg_open"))
arena_turban_green.add_flag(ItemType.HEAD_ARMOR)
arena_turban_green.add_flag(ItemFlag.FITS_TO_HEAD)
arena_turban_green.add_flag(ItemFlag.OFFSET_LANCE)
arena_turban_green.set_price(187)
arena_turban_green.add_modifier(IModBit.CRACKED)
arena_turban_green.add_modifier(IModBit.RUSTY)
arena_turban_green.add_modifier(IModBit.BATTERED)
arena_turban_green.add_modifier(IModBit.CRUDE)
arena_turban_green.add_modifier(IModBit.THICK)
arena_turban_green.add_modifier(IModBit.REINFORCED)
arena_turban_green.add_modifier(IModBit.LORDLY)
arena_turban_green.set_weight(1.25)
arena_turban_green.set_abundance(100)
arena_turban_green.set_head_armor(26)


arena_turban_yellow = Item("arena_turban_yellow", "Arena_Turban")
arena_turban_yellow.add_mesh(ItemMesh("tuareg_open"))
arena_turban_yellow.add_flag(ItemType.HEAD_ARMOR)
arena_turban_yellow.add_flag(ItemFlag.FITS_TO_HEAD)
arena_turban_yellow.add_flag(ItemFlag.OFFSET_LANCE)
arena_turban_yellow.set_price(187)
arena_turban_yellow.add_modifier(IModBit.CRACKED)
arena_turban_yellow.add_modifier(IModBit.RUSTY)
arena_turban_yellow.add_modifier(IModBit.BATTERED)
arena_turban_yellow.add_modifier(IModBit.CRUDE)
arena_turban_yellow.add_modifier(IModBit.THICK)
arena_turban_yellow.add_modifier(IModBit.REINFORCED)
arena_turban_yellow.add_modifier(IModBit.LORDLY)
arena_turban_yellow.set_weight(1.25)
arena_turban_yellow.set_abundance(100)
arena_turban_yellow.set_head_armor(26)


book_tactics = Item("book_tactics", "De_Re_Militari")
book_tactics.add_mesh(ItemMesh("book_a"))
book_tactics.add_flag(ItemType.BOOK)
book_tactics.set_price(4000)
book_tactics.set_weight(2.0)
book_tactics.set_abundance(100)


book_persuasion = Item("book_persuasion", "Rhetorica_ad_Herennium")
book_persuasion.add_mesh(ItemMesh("book_b"))
book_persuasion.add_flag(ItemType.BOOK)
book_persuasion.set_price(5000)
book_persuasion.set_weight(2.0)
book_persuasion.set_abundance(100)


book_leadership = Item("book_leadership", "The_Life_of_Alixenus_the_Great")
book_leadership.add_mesh(ItemMesh("book_d"))
book_leadership.add_flag(ItemType.BOOK)
book_leadership.set_price(4200)
book_leadership.set_weight(2.0)
book_leadership.set_abundance(100)


book_intelligence = Item("book_intelligence", "Essays_on_Logic")
book_intelligence.add_mesh(ItemMesh("book_e"))
book_intelligence.add_flag(ItemType.BOOK)
book_intelligence.set_price(2900)
book_intelligence.set_weight(2.0)
book_intelligence.set_abundance(100)


book_trade = Item("book_trade", "A_Treatise_on_the_Value_of_Things")
book_trade.add_mesh(ItemMesh("book_f"))
book_trade.add_flag(ItemType.BOOK)
book_trade.set_price(3100)
book_trade.set_weight(2.0)
book_trade.set_abundance(100)


book_weapon_mastery = Item("book_weapon_mastery", "On_the_Art_of_Fighting_with_Swords")
book_weapon_mastery.add_mesh(ItemMesh("book_d"))
book_weapon_mastery.add_flag(ItemType.BOOK)
book_weapon_mastery.set_price(4200)
book_weapon_mastery.set_weight(2.0)
book_weapon_mastery.set_abundance(100)


book_engineering = Item("book_engineering", "Method_of_Mechanical_Theorems")
book_engineering.add_mesh(ItemMesh("book_open"))
book_engineering.add_flag(ItemType.BOOK)
book_engineering.set_price(4000)
book_engineering.set_weight(2.0)
book_engineering.set_abundance(100)


book_wound_treatment_reference = Item("book_wound_treatment_reference", "The_Book_of_Healing")
book_wound_treatment_reference.add_mesh(ItemMesh("book_c"))
book_wound_treatment_reference.add_flag(ItemType.BOOK)
book_wound_treatment_reference.set_price(3500)
book_wound_treatment_reference.set_weight(2.0)
book_wound_treatment_reference.set_abundance(100)


book_training_reference = Item("book_training_reference", "Manual_of_Arms")
book_training_reference.add_mesh(ItemMesh("book_open"))
book_training_reference.add_flag(ItemType.BOOK)
book_training_reference.set_price(3500)
book_training_reference.set_weight(2.0)
book_training_reference.set_abundance(100)


book_surgery_reference = Item("book_surgery_reference", "The_Great_Book_of_Surgery")
book_surgery_reference.add_mesh(ItemMesh("book_c"))
book_surgery_reference.add_flag(ItemType.BOOK)
book_surgery_reference.set_price(3500)
book_surgery_reference.set_weight(2.0)
book_surgery_reference.set_abundance(100)


spice = Item("spice", "Spice")
spice.add_mesh(ItemMesh("spice_sack"))
spice.add_flag(ItemType.GOODS)
spice.add_flag(ItemFlag.IS_MERCHANDISE)
spice.add_flag(ItemFlag.IS_CONSUMABLE)
spice.set_price(880)
spice.set_weight(40.0)
spice.set_abundance(25)
spice.set_max_ammo(50)


salt = Item("salt", "Salt")
salt.add_mesh(ItemMesh("salt_sack"))
salt.add_flag(ItemType.GOODS)
salt.add_flag(ItemFlag.IS_MERCHANDISE)
salt.set_price(255)
salt.set_weight(50.0)
salt.set_abundance(120)


oil = Item("oil", "Oil")
oil.add_mesh(ItemMesh("oil"))
oil.add_flag(ItemType.GOODS)
oil.add_flag(ItemFlag.IS_MERCHANDISE)
oil.add_flag(ItemFlag.IS_CONSUMABLE)
oil.set_price(450)
oil.set_weight(50.0)
oil.set_abundance(60)
oil.set_max_ammo(50)


pottery = Item("pottery", "Pottery")
pottery.add_mesh(ItemMesh("jug"))
pottery.add_flag(ItemType.GOODS)
pottery.add_flag(ItemFlag.IS_MERCHANDISE)
pottery.set_price(100)
pottery.set_weight(50.0)
pottery.set_abundance(90)


raw_flax = Item("raw_flax", "Flax_Bundle")
raw_flax.add_mesh(ItemMesh("raw_flax"))
raw_flax.add_flag(ItemType.GOODS)
raw_flax.add_flag(ItemFlag.IS_MERCHANDISE)
raw_flax.set_price(150)
raw_flax.set_weight(40.0)
raw_flax.set_abundance(90)


linen = Item("linen", "Linen")
linen.add_mesh(ItemMesh("linen"))
linen.add_flag(ItemType.GOODS)
linen.add_flag(ItemFlag.IS_MERCHANDISE)
linen.set_price(250)
linen.set_weight(40.0)
linen.set_abundance(90)


wool = Item("wool", "Wool")
wool.add_mesh(ItemMesh("wool_sack"))
wool.add_flag(ItemType.GOODS)
wool.add_flag(ItemFlag.IS_MERCHANDISE)
wool.set_price(130)
wool.set_weight(40.0)
wool.set_abundance(90)


wool_cloth = Item("wool_cloth", "Wool_Cloth")
wool_cloth.add_mesh(ItemMesh("wool_cloth"))
wool_cloth.add_flag(ItemType.GOODS)
wool_cloth.add_flag(ItemFlag.IS_MERCHANDISE)
wool_cloth.set_price(250)
wool_cloth.set_weight(40.0)
wool_cloth.set_abundance(90)


raw_silk = Item("raw_silk", "Raw_Silk")
raw_silk.add_mesh(ItemMesh("raw_silk_bundle"))
raw_silk.add_flag(ItemType.GOODS)
raw_silk.add_flag(ItemFlag.IS_MERCHANDISE)
raw_silk.set_price(600)
raw_silk.set_weight(30.0)
raw_silk.set_abundance(90)


raw_dyes = Item("raw_dyes", "Dyes")
raw_dyes.add_mesh(ItemMesh("dyes"))
raw_dyes.add_flag(ItemType.GOODS)
raw_dyes.add_flag(ItemFlag.IS_MERCHANDISE)
raw_dyes.set_price(200)
raw_dyes.set_weight(10.0)
raw_dyes.set_abundance(90)


velvet = Item("velvet", "Velvet")
velvet.add_mesh(ItemMesh("velvet"))
velvet.add_flag(ItemType.GOODS)
velvet.add_flag(ItemFlag.IS_MERCHANDISE)
velvet.set_price(1025)
velvet.set_weight(40.0)
velvet.set_abundance(30)


iron = Item("iron", "Iron")
iron.add_mesh(ItemMesh("iron"))
iron.add_flag(ItemType.GOODS)
iron.add_flag(ItemFlag.IS_MERCHANDISE)
iron.set_price(264)
iron.set_weight(60.0)
iron.set_abundance(60)


tools = Item("tools", "Tools")
tools.add_mesh(ItemMesh("iron_hammer"))
tools.add_flag(ItemType.GOODS)
tools.add_flag(ItemFlag.IS_MERCHANDISE)
tools.set_price(410)
tools.set_weight(50.0)
tools.set_abundance(90)


raw_leather = Item("raw_leather", "Hides")
raw_leather.add_mesh(ItemMesh("leatherwork_inventory"))
raw_leather.add_flag(ItemType.GOODS)
raw_leather.add_flag(ItemFlag.IS_MERCHANDISE)
raw_leather.set_price(120)
raw_leather.set_weight(40.0)
raw_leather.set_abundance(90)


leatherwork = Item("leatherwork", "Leatherwork")
leatherwork.add_mesh(ItemMesh("leatherwork_frame"))
leatherwork.add_flag(ItemType.GOODS)
leatherwork.add_flag(ItemFlag.IS_MERCHANDISE)
leatherwork.set_price(220)
leatherwork.set_weight(40.0)
leatherwork.set_abundance(90)


raw_date_fruit = Item("raw_date_fruit", "Date_Fruit")
raw_date_fruit.add_mesh(ItemMesh("date_inventory"))
raw_date_fruit.add_flag(ItemType.GOODS)
raw_date_fruit.add_flag(ItemFlag.IS_MERCHANDISE)
raw_date_fruit.add_flag(ItemFlag.IS_FOOD)
raw_date_fruit.add_flag(ItemFlag.IS_CONSUMABLE)
raw_date_fruit.set_price(120)
raw_date_fruit.set_weight(40.0)
raw_date_fruit.set_abundance(100)
raw_date_fruit.set_head_armor(10)
raw_date_fruit.set_max_ammo(10)


furs = Item("furs", "Furs")
furs.add_mesh(ItemMesh("fur_pack"))
furs.add_flag(ItemType.GOODS)
furs.add_flag(ItemFlag.IS_MERCHANDISE)
furs.set_price(391)
furs.set_weight(40.0)
furs.set_abundance(90)


wine = Item("wine", "Wine")
wine.add_mesh(ItemMesh("amphora_slim"))
wine.add_flag(ItemType.GOODS)
wine.add_flag(ItemFlag.IS_MERCHANDISE)
wine.add_flag(ItemFlag.IS_CONSUMABLE)
wine.set_price(220)
wine.set_weight(30.0)
wine.set_abundance(60)
wine.set_max_ammo(50)


ale = Item("ale", "Ale")
ale.add_mesh(ItemMesh("ale_barrel"))
ale.add_flag(ItemType.GOODS)
ale.add_flag(ItemFlag.IS_MERCHANDISE)
ale.add_flag(ItemFlag.IS_CONSUMABLE)
ale.set_price(120)
ale.set_weight(30.0)
ale.set_abundance(70)
ale.set_max_ammo(50)


smoked_fish = Item("smoked_fish", "Smoked_Fish")
smoked_fish.add_mesh(ItemMesh("smoked_fish"))
smoked_fish.add_flag(ItemType.GOODS)
smoked_fish.add_flag(ItemFlag.IS_MERCHANDISE)
smoked_fish.add_flag(ItemFlag.IS_FOOD)
smoked_fish.add_flag(ItemFlag.IS_CONSUMABLE)
smoked_fish.set_price(65)
smoked_fish.set_weight(15.0)
smoked_fish.set_abundance(110)
smoked_fish.set_head_armor(50)
smoked_fish.set_max_ammo(50)


cheese = Item("cheese", "Cheese")
cheese.add_mesh(ItemMesh("cheese_b"))
cheese.add_flag(ItemType.GOODS)
cheese.add_flag(ItemFlag.IS_MERCHANDISE)
cheese.add_flag(ItemFlag.IS_FOOD)
cheese.add_flag(ItemFlag.IS_CONSUMABLE)
cheese.set_price(75)
cheese.set_weight(6.0)
cheese.set_abundance(110)
cheese.set_head_armor(40)
cheese.set_max_ammo(30)


honey = Item("honey", "Honey")
honey.add_mesh(ItemMesh("honey_pot"))
honey.add_flag(ItemType.GOODS)
honey.add_flag(ItemFlag.IS_MERCHANDISE)
honey.add_flag(ItemFlag.IS_FOOD)
honey.add_flag(ItemFlag.IS_CONSUMABLE)
honey.set_price(220)
honey.set_weight(5.0)
honey.set_abundance(110)
honey.set_head_armor(40)
honey.set_max_ammo(30)


sausages = Item("sausages", "Sausages")
sausages.add_mesh(ItemMesh("sausages"))
sausages.add_flag(ItemType.GOODS)
sausages.add_flag(ItemFlag.IS_MERCHANDISE)
sausages.add_flag(ItemFlag.IS_FOOD)
sausages.add_flag(ItemFlag.IS_CONSUMABLE)
sausages.set_price(85)
sausages.set_weight(10.0)
sausages.set_abundance(110)
sausages.set_head_armor(40)
sausages.set_max_ammo(40)


cabbages = Item("cabbages", "Cabbages")
cabbages.add_mesh(ItemMesh("cabbage"))
cabbages.add_flag(ItemType.GOODS)
cabbages.add_flag(ItemFlag.IS_MERCHANDISE)
cabbages.add_flag(ItemFlag.IS_FOOD)
cabbages.add_flag(ItemFlag.IS_CONSUMABLE)
cabbages.set_price(30)
cabbages.set_weight(15.0)
cabbages.set_abundance(110)
cabbages.set_head_armor(40)
cabbages.set_max_ammo(50)


dried_meat = Item("dried_meat", "Dried_Meat")
dried_meat.add_mesh(ItemMesh("smoked_meat"))
dried_meat.add_flag(ItemType.GOODS)
dried_meat.add_flag(ItemFlag.IS_MERCHANDISE)
dried_meat.add_flag(ItemFlag.IS_FOOD)
dried_meat.add_flag(ItemFlag.IS_CONSUMABLE)
dried_meat.set_price(85)
dried_meat.set_weight(15.0)
dried_meat.set_abundance(100)
dried_meat.set_head_armor(70)
dried_meat.set_max_ammo(50)


apples = Item("apples", "Fruit")
apples.add_mesh(ItemMesh("apple_basket"))
apples.add_flag(ItemType.GOODS)
apples.add_flag(ItemFlag.IS_MERCHANDISE)
apples.add_flag(ItemFlag.IS_FOOD)
apples.add_flag(ItemFlag.IS_CONSUMABLE)
apples.set_price(44)
apples.set_weight(20.0)
apples.set_abundance(110)
apples.set_head_armor(40)
apples.set_max_ammo(50)


raw_grapes = Item("raw_grapes", "Grapes")
raw_grapes.add_mesh(ItemMesh("grapes_inventory"))
raw_grapes.add_flag(ItemType.GOODS)
raw_grapes.add_flag(ItemFlag.IS_MERCHANDISE)
raw_grapes.add_flag(ItemFlag.IS_CONSUMABLE)
raw_grapes.set_price(75)
raw_grapes.set_weight(40.0)
raw_grapes.set_abundance(90)
raw_grapes.set_head_armor(10)
raw_grapes.set_max_ammo(10)


raw_olives = Item("raw_olives", "Olives")
raw_olives.add_mesh(ItemMesh("olive_inventory"))
raw_olives.add_flag(ItemType.GOODS)
raw_olives.add_flag(ItemFlag.IS_MERCHANDISE)
raw_olives.add_flag(ItemFlag.IS_CONSUMABLE)
raw_olives.set_price(100)
raw_olives.set_weight(40.0)
raw_olives.set_abundance(90)
raw_olives.set_head_armor(10)
raw_olives.set_max_ammo(10)


grain = Item("grain", "Grain")
grain.add_mesh(ItemMesh("wheat_sack"))
grain.add_flag(ItemType.GOODS)
grain.add_flag(ItemFlag.IS_MERCHANDISE)
grain.add_flag(ItemFlag.IS_CONSUMABLE)
grain.set_price(30)
grain.set_weight(30.0)
grain.set_abundance(110)
grain.set_head_armor(40)
grain.set_max_ammo(50)


cattle_meat = Item("cattle_meat", "Beef")
cattle_meat.add_mesh(ItemMesh("raw_meat"))
cattle_meat.add_flag(ItemType.GOODS)
cattle_meat.add_flag(ItemFlag.IS_MERCHANDISE)
cattle_meat.add_flag(ItemFlag.IS_FOOD)
cattle_meat.add_flag(ItemFlag.IS_CONSUMABLE)
cattle_meat.set_price(80)
cattle_meat.set_weight(20.0)
cattle_meat.set_abundance(100)
cattle_meat.set_head_armor(80)
cattle_meat.set_max_ammo(50)


bread = Item("bread", "Bread")
bread.add_mesh(ItemMesh("bread_a"))
bread.add_flag(ItemType.GOODS)
bread.add_flag(ItemFlag.IS_MERCHANDISE)
bread.add_flag(ItemFlag.IS_FOOD)
bread.add_flag(ItemFlag.IS_CONSUMABLE)
bread.set_price(50)
bread.set_weight(30.0)
bread.set_abundance(110)
bread.set_head_armor(40)
bread.set_max_ammo(50)


chicken = Item("chicken", "Chicken")
chicken.add_mesh(ItemMesh("chicken"))
chicken.add_flag(ItemType.GOODS)
chicken.add_flag(ItemFlag.IS_MERCHANDISE)
chicken.add_flag(ItemFlag.IS_FOOD)
chicken.add_flag(ItemFlag.IS_CONSUMABLE)
chicken.set_price(95)
chicken.set_weight(10.0)
chicken.set_abundance(110)
chicken.set_head_armor(40)
chicken.set_max_ammo(50)


pork = Item("pork", "Pork")
pork.add_mesh(ItemMesh("pork"))
pork.add_flag(ItemType.GOODS)
pork.add_flag(ItemFlag.IS_MERCHANDISE)
pork.add_flag(ItemFlag.IS_FOOD)
pork.add_flag(ItemFlag.IS_CONSUMABLE)
pork.set_price(75)
pork.set_weight(15.0)
pork.set_abundance(100)
pork.set_head_armor(70)
pork.set_max_ammo(50)


butter = Item("butter", "Butter")
butter.add_mesh(ItemMesh("butter_pot"))
butter.add_flag(ItemType.GOODS)
butter.add_flag(ItemFlag.IS_MERCHANDISE)
butter.add_flag(ItemFlag.IS_FOOD)
butter.add_flag(ItemFlag.IS_CONSUMABLE)
butter.set_price(150)
butter.set_weight(6.0)
butter.set_abundance(110)
butter.set_head_armor(40)
butter.set_max_ammo(30)


siege_supply = Item("siege_supply", "Supplies")
siege_supply.add_mesh(ItemMesh("ale_barrel"))
siege_supply.add_flag(ItemType.GOODS)
siege_supply.set_price(96)
siege_supply.set_weight(40.0)
siege_supply.set_abundance(70)


quest_wine = Item("quest_wine", "Wine")
quest_wine.add_mesh(ItemMesh("amphora_slim"))
quest_wine.add_flag(ItemType.GOODS)
quest_wine.set_price(46)
quest_wine.set_weight(40.0)
quest_wine.set_abundance(60)
quest_wine.set_max_ammo(50)


quest_ale = Item("quest_ale", "Ale")
quest_ale.add_mesh(ItemMesh("ale_barrel"))
quest_ale.add_flag(ItemType.GOODS)
quest_ale.set_price(31)
quest_ale.set_weight(40.0)
quest_ale.set_abundance(70)
quest_ale.set_max_ammo(50)


sumpter_horse = Item("sumpter_horse", "Sumpter_Horse")
sumpter_horse.add_mesh(ItemMesh("sumpter_horse"))
sumpter_horse.add_flag(ItemType.HORSE)
sumpter_horse.add_flag(ItemFlag.IS_MERCHANDISE)
sumpter_horse.set_price(134)
sumpter_horse.add_modifier(IModBit.HEAVY)
sumpter_horse.add_modifier(IModBit.LAME)
sumpter_horse.add_modifier(IModBit.SWAYBACKED)
sumpter_horse.add_modifier(IModBit.STUBBORN)
sumpter_horse.add_modifier(IModBit.SPIRITED)
sumpter_horse.set_abundance(90)
sumpter_horse.set_body_armor(14)
sumpter_horse.set_difficulty(1)
sumpter_horse.set_hit_points(100)
sumpter_horse.set_speed_rating(39)
sumpter_horse.set_missile_speed(37)
sumpter_horse.set_weapon_length(100)
sumpter_horse.set_thrust_damage(9, 0)


saddle_horse = Item("saddle_horse", "Saddle_Horse")
saddle_horse.add_mesh(ItemMesh("saddle_horse"))
meshx = ItemMesh("horse_c")
meshx.add_modifier(IModBit.HEAVY)
meshx.add_modifier(IModBit.SPIRITED)
saddle_horse.add_mesh(meshx)
saddle_horse.add_flag(ItemType.HORSE)
saddle_horse.add_flag(ItemFlag.IS_MERCHANDISE)
saddle_horse.set_price(240)
saddle_horse.add_modifier(IModBit.HEAVY)
saddle_horse.add_modifier(IModBit.LAME)
saddle_horse.add_modifier(IModBit.SWAYBACKED)
saddle_horse.add_modifier(IModBit.STUBBORN)
saddle_horse.add_modifier(IModBit.SPIRITED)
saddle_horse.set_abundance(90)
saddle_horse.set_body_armor(8)
saddle_horse.set_difficulty(1)
saddle_horse.set_hit_points(100)
saddle_horse.set_speed_rating(44)
saddle_horse.set_missile_speed(45)
saddle_horse.set_weapon_length(104)
saddle_horse.set_thrust_damage(10, 0)


steppe_horse = Item("steppe_horse", "Steppe_Horse")
steppe_horse.add_mesh(ItemMesh("steppe_horse"))
steppe_horse.add_flag(ItemType.HORSE)
steppe_horse.add_flag(ItemFlag.IS_MERCHANDISE)
steppe_horse.set_price(192)
steppe_horse.add_modifier(IModBit.HEAVY)
steppe_horse.add_modifier(IModBit.LAME)
steppe_horse.add_modifier(IModBit.SWAYBACKED)
steppe_horse.add_modifier(IModBit.STUBBORN)
steppe_horse.add_modifier(IModBit.SPIRITED)
steppe_horse.set_abundance(80)
steppe_horse.set_body_armor(10)
steppe_horse.set_difficulty(2)
steppe_horse.set_hit_points(120)
steppe_horse.set_speed_rating(51)
steppe_horse.set_missile_speed(40)
steppe_horse.set_weapon_length(98)
steppe_horse.set_thrust_damage(8, 0)
steppe_horse.allow_in_faction(fac.kingdom_2)
steppe_horse.allow_in_faction(fac.kingdom_3)


arabian_horse_a = Item("arabian_horse_a", "Desert_Horse")
arabian_horse_a.add_mesh(ItemMesh("arabian_horse_a"))
arabian_horse_a.add_flag(ItemType.HORSE)
arabian_horse_a.add_flag(ItemFlag.IS_MERCHANDISE)
arabian_horse_a.set_price(550)
arabian_horse_a.add_modifier(IModBit.HEAVY)
arabian_horse_a.add_modifier(IModBit.LAME)
arabian_horse_a.add_modifier(IModBit.SWAYBACKED)
arabian_horse_a.add_modifier(IModBit.STUBBORN)
arabian_horse_a.add_modifier(IModBit.SPIRITED)
arabian_horse_a.add_modifier(IModBit.CHAMPION)
arabian_horse_a.set_abundance(80)
arabian_horse_a.set_body_armor(10)
arabian_horse_a.set_difficulty(2)
arabian_horse_a.set_hit_points(110)
arabian_horse_a.set_speed_rating(50)
arabian_horse_a.set_missile_speed(42)
arabian_horse_a.set_weapon_length(100)
arabian_horse_a.set_thrust_damage(12, 0)
arabian_horse_a.allow_in_faction(fac.kingdom_3)
arabian_horse_a.allow_in_faction(fac.kingdom_6)


courser = Item("courser", "Courser")
courser.add_mesh(ItemMesh("courser"))
courser.add_flag(ItemType.HORSE)
courser.add_flag(ItemFlag.IS_MERCHANDISE)
courser.set_price(600)
courser.add_modifier(IModBit.HEAVY)
courser.add_modifier(IModBit.LAME)
courser.add_modifier(IModBit.SWAYBACKED)
courser.add_modifier(IModBit.STUBBORN)
courser.add_modifier(IModBit.SPIRITED)
courser.add_modifier(IModBit.CHAMPION)
courser.set_abundance(70)
courser.set_body_armor(12)
courser.set_difficulty(2)
courser.set_hit_points(110)
courser.set_speed_rating(44)
courser.set_missile_speed(50)
courser.set_weapon_length(106)
courser.set_thrust_damage(12, 0)


arabian_horse_b = Item("arabian_horse_b", "Sarranid_Horse")
arabian_horse_b.add_mesh(ItemMesh("arabian_horse_b"))
arabian_horse_b.add_flag(ItemType.HORSE)
arabian_horse_b.add_flag(ItemFlag.IS_MERCHANDISE)
arabian_horse_b.set_price(700)
arabian_horse_b.add_modifier(IModBit.HEAVY)
arabian_horse_b.add_modifier(IModBit.LAME)
arabian_horse_b.add_modifier(IModBit.SWAYBACKED)
arabian_horse_b.add_modifier(IModBit.STUBBORN)
arabian_horse_b.add_modifier(IModBit.SPIRITED)
arabian_horse_b.add_modifier(IModBit.CHAMPION)
arabian_horse_b.set_abundance(80)
arabian_horse_b.set_body_armor(10)
arabian_horse_b.set_difficulty(3)
arabian_horse_b.set_hit_points(120)
arabian_horse_b.set_speed_rating(54)
arabian_horse_b.set_missile_speed(43)
arabian_horse_b.set_weapon_length(100)
arabian_horse_b.set_thrust_damage(16, 0)
arabian_horse_b.allow_in_faction(fac.kingdom_6)


hunter = Item("hunter", "Hunter")
hunter.add_mesh(ItemMesh("hunting_horse"))
meshx = ItemMesh("hunting_horse")
meshx.add_modifier(IModBit.HEAVY)
meshx.add_modifier(IModBit.SPIRITED)
hunter.add_mesh(meshx)
hunter.add_flag(ItemType.HORSE)
hunter.add_flag(ItemFlag.IS_MERCHANDISE)
hunter.set_price(810)
hunter.add_modifier(IModBit.HEAVY)
hunter.add_modifier(IModBit.LAME)
hunter.add_modifier(IModBit.SWAYBACKED)
hunter.add_modifier(IModBit.STUBBORN)
hunter.add_modifier(IModBit.SPIRITED)
hunter.add_modifier(IModBit.CHAMPION)
hunter.set_abundance(60)
hunter.set_body_armor(18)
hunter.set_difficulty(3)
hunter.set_hit_points(160)
hunter.set_speed_rating(44)
hunter.set_missile_speed(43)
hunter.set_weapon_length(108)
hunter.set_thrust_damage(24, 0)


warhorse = Item("warhorse", "War_Horse")
warhorse.add_mesh(ItemMesh("warhorse_chain"))
warhorse.add_flag(ItemType.HORSE)
warhorse.add_flag(ItemFlag.IS_MERCHANDISE)
warhorse.set_price(1224)
warhorse.add_modifier(IModBit.HEAVY)
warhorse.add_modifier(IModBit.LAME)
warhorse.add_modifier(IModBit.SWAYBACKED)
warhorse.add_modifier(IModBit.STUBBORN)
warhorse.add_modifier(IModBit.SPIRITED)
warhorse.add_modifier(IModBit.CHAMPION)
warhorse.set_abundance(50)
warhorse.set_body_armor(40)
warhorse.set_difficulty(4)
warhorse.set_hit_points(165)
warhorse.set_speed_rating(41)
warhorse.set_missile_speed(40)
warhorse.set_weapon_length(110)
warhorse.set_thrust_damage(28, 0)


charger = Item("charger", "Charger")
charger.add_mesh(ItemMesh("charger_new"))
charger.add_flag(ItemType.HORSE)
charger.add_flag(ItemFlag.IS_MERCHANDISE)
charger.set_price(1811)
charger.add_modifier(IModBit.HEAVY)
charger.add_modifier(IModBit.LAME)
charger.add_modifier(IModBit.SWAYBACKED)
charger.add_modifier(IModBit.STUBBORN)
charger.add_modifier(IModBit.SPIRITED)
charger.add_modifier(IModBit.CHAMPION)
charger.set_abundance(40)
charger.set_body_armor(58)
charger.set_difficulty(4)
charger.set_hit_points(165)
charger.set_speed_rating(44)
charger.set_missile_speed(40)
charger.set_weapon_length(112)
charger.set_thrust_damage(32, 0)
charger.allow_in_faction(fac.kingdom_1)
charger.allow_in_faction(fac.kingdom_5)


arrows = Item("arrows", "Arrows")
arrows.add_mesh(ItemMesh("arrow"))
arrows.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
arrows.add_mesh(ItemMesh("quiver", ItemMesh.ixmesh_carry))
arrows.add_flag(ItemType.ARROWS)
arrows.add_flag(ItemFlag.IS_DEFAULT_AMMO)
arrows.add_flag(ItemFlag.IS_MERCHANDISE)
arrows.add_capability(ItemCapability.CARRY_QUIVER_BACK)
arrows.set_price(72)
arrows.add_modifier(IModBit.BENT)
arrows.add_modifier(IModBit.LARGE_BAG)
arrows.set_weight(3.0)
arrows.set_abundance(160)
arrows.set_weapon_length(95)
arrows.set_max_ammo(30)
arrows.set_thrust_damage(1, 1)


khergit_arrows = Item("khergit_arrows", "Khergit_Arrows")
khergit_arrows.add_mesh(ItemMesh("arrow_b"))
khergit_arrows.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
khergit_arrows.add_mesh(ItemMesh("quiver_b", ItemMesh.ixmesh_carry))
khergit_arrows.add_flag(ItemType.ARROWS)
khergit_arrows.add_flag(ItemFlag.IS_MERCHANDISE)
khergit_arrows.add_capability(ItemCapability.CARRY_QUIVER_BACK_RIGHT)
khergit_arrows.set_price(410)
khergit_arrows.add_modifier(IModBit.BENT)
khergit_arrows.add_modifier(IModBit.LARGE_BAG)
khergit_arrows.set_weight(3.5)
khergit_arrows.set_abundance(30)
khergit_arrows.set_weapon_length(95)
khergit_arrows.set_max_ammo(30)
khergit_arrows.set_thrust_damage(3, 1)


barbed_arrows = Item("barbed_arrows", "Barbed_Arrows")
barbed_arrows.add_mesh(ItemMesh("barbed_arrow"))
barbed_arrows.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
barbed_arrows.add_mesh(ItemMesh("quiver_d", ItemMesh.ixmesh_carry))
barbed_arrows.add_flag(ItemType.ARROWS)
barbed_arrows.add_flag(ItemFlag.IS_MERCHANDISE)
barbed_arrows.add_capability(ItemCapability.CARRY_QUIVER_BACK_RIGHT)
barbed_arrows.set_price(124)
barbed_arrows.add_modifier(IModBit.BENT)
barbed_arrows.add_modifier(IModBit.LARGE_BAG)
barbed_arrows.set_weight(3.0)
barbed_arrows.set_abundance(70)
barbed_arrows.set_weapon_length(95)
barbed_arrows.set_max_ammo(30)
barbed_arrows.set_thrust_damage(2, 1)


bodkin_arrows = Item("bodkin_arrows", "Bodkin_Arrows")
bodkin_arrows.add_mesh(ItemMesh("piercing_arrow"))
bodkin_arrows.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
bodkin_arrows.add_mesh(ItemMesh("quiver_c", ItemMesh.ixmesh_carry))
bodkin_arrows.add_flag(ItemType.ARROWS)
bodkin_arrows.add_flag(ItemFlag.IS_MERCHANDISE)
bodkin_arrows.add_capability(ItemCapability.CARRY_QUIVER_BACK_RIGHT)
bodkin_arrows.set_price(350)
bodkin_arrows.add_modifier(IModBit.BENT)
bodkin_arrows.add_modifier(IModBit.LARGE_BAG)
bodkin_arrows.set_weight(3.0)
bodkin_arrows.set_abundance(50)
bodkin_arrows.set_weapon_length(91)
bodkin_arrows.set_max_ammo(28)
bodkin_arrows.set_thrust_damage(3, 1)


bolts = Item("bolts", "Bolts")
bolts.add_mesh(ItemMesh("bolt"))
bolts.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
bolts.add_mesh(ItemMesh("bolt_bag", ItemMesh.ixmesh_carry))
meshx = ItemMesh("bolt_bag_b", ItemMesh.ixmesh_carry)
meshx.add_modifier(IModBit.LARGE_BAG)
bolts.add_mesh(meshx)
bolts.add_flag(ItemType.BOLTS)
bolts.add_flag(ItemFlag.IS_DEFAULT_AMMO)
bolts.add_flag(ItemFlag.IS_MERCHANDISE)
bolts.add_flag(ItemFlag.COVERS_LEGS)
bolts.add_flag(ItemFlag.DOESNT_COVER_HAIR)
bolts.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
bolts.add_capability(ItemCapability.CARRY_QUIVER_RIGHT_VERTICAL)
bolts.set_price(64)
bolts.add_modifier(IModBit.BENT)
bolts.add_modifier(IModBit.LARGE_BAG)
bolts.set_weight(2.25)
bolts.set_abundance(90)
bolts.set_weapon_length(63)
bolts.set_max_ammo(29)
bolts.set_thrust_damage(1, 1)


steel_bolts = Item("steel_bolts", "Steel_Bolts")
steel_bolts.add_mesh(ItemMesh("bolt"))
steel_bolts.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
steel_bolts.add_mesh(ItemMesh("bolt_bag_c", ItemMesh.ixmesh_carry))
steel_bolts.add_flag(ItemType.BOLTS)
steel_bolts.add_flag(ItemFlag.IS_MERCHANDISE)
steel_bolts.add_flag(ItemFlag.COVERS_LEGS)
steel_bolts.add_flag(ItemFlag.DOESNT_COVER_HAIR)
steel_bolts.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
steel_bolts.add_capability(ItemCapability.CARRY_QUIVER_RIGHT_VERTICAL)
steel_bolts.set_price(210)
steel_bolts.add_modifier(IModBit.BENT)
steel_bolts.add_modifier(IModBit.LARGE_BAG)
steel_bolts.set_weight(2.5)
steel_bolts.set_abundance(20)
steel_bolts.set_weapon_length(63)
steel_bolts.set_max_ammo(29)
steel_bolts.set_thrust_damage(2, 1)


cartridges = Item("cartridges", "Cartridges")
cartridges.add_mesh(ItemMesh("cartridge_a"))
cartridges.add_flag(ItemType.BULLETS)
cartridges.add_flag(ItemFlag.IS_DEFAULT_AMMO)
cartridges.add_flag(ItemFlag.IS_MERCHANDISE)
cartridges.add_flag(ItemFlag.COVERS_LEGS)
cartridges.add_flag(ItemFlag.DOESNT_COVER_HAIR)
cartridges.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
cartridges.set_price(41)
cartridges.add_modifier(IModBit.BENT)
cartridges.add_modifier(IModBit.LARGE_BAG)
cartridges.set_weight(2.25)
cartridges.set_abundance(90)
cartridges.set_weapon_length(3)
cartridges.set_max_ammo(50)
cartridges.set_thrust_damage(1, 1)


pilgrim_disguise = Item("pilgrim_disguise", "Pilgrim_Disguise")
pilgrim_disguise.add_mesh(ItemMesh("pilgrim_outfit"))
pilgrim_disguise.add_flag(ItemType.BODY_ARMOR)
pilgrim_disguise.add_flag(ItemFlag.COVERS_LEGS)
pilgrim_disguise.add_flag(ItemFlag.DOESNT_COVER_HAIR)
pilgrim_disguise.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
pilgrim_disguise.add_flag(ItemFlag.IS_CIVILIAN)
pilgrim_disguise.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
pilgrim_disguise.set_price(25)
pilgrim_disguise.add_modifier(IModBit.TETTERED)
pilgrim_disguise.add_modifier(IModBit.RAGGED)
pilgrim_disguise.add_modifier(IModBit.STURDY)
pilgrim_disguise.add_modifier(IModBit.THICK)
pilgrim_disguise.add_modifier(IModBit.HARDENED)
pilgrim_disguise.set_weight(2.0)
pilgrim_disguise.set_abundance(100)
pilgrim_disguise.set_body_armor(19)
pilgrim_disguise.set_leg_armor(8)


pilgrim_hood = Item("pilgrim_hood", "Pilgrim_Hood")
pilgrim_hood.add_mesh(ItemMesh("pilgrim_hood"))
pilgrim_hood.add_flag(ItemType.HEAD_ARMOR)
pilgrim_hood.add_flag(ItemFlag.IS_CIVILIAN)
pilgrim_hood.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
pilgrim_hood.set_price(35)
pilgrim_hood.add_modifier(IModBit.TETTERED)
pilgrim_hood.add_modifier(IModBit.RAGGED)
pilgrim_hood.add_modifier(IModBit.STURDY)
pilgrim_hood.add_modifier(IModBit.THICK)
pilgrim_hood.add_modifier(IModBit.HARDENED)
pilgrim_hood.set_weight(1.25)
pilgrim_hood.set_abundance(100)
pilgrim_hood.set_head_armor(14)


leather_gloves = Item("leather_gloves", "Leather_Gloves")
leather_gloves.add_mesh(ItemMesh("leather_gloves_L"))
leather_gloves.add_flag(ItemType.HAND_ARMOR)
leather_gloves.add_flag(ItemFlag.IS_MERCHANDISE)
leather_gloves.set_price(90)
leather_gloves.add_modifier(IModBit.TETTERED)
leather_gloves.add_modifier(IModBit.RAGGED)
leather_gloves.add_modifier(IModBit.STURDY)
leather_gloves.add_modifier(IModBit.THICK)
leather_gloves.add_modifier(IModBit.HARDENED)
leather_gloves.set_weight(0.25)
leather_gloves.set_abundance(120)
leather_gloves.set_body_armor(2)


mail_mittens = Item("mail_mittens", "Mail_Mittens")
mail_mittens.add_mesh(ItemMesh("mail_mittens_L"))
mail_mittens.add_flag(ItemType.HAND_ARMOR)
mail_mittens.add_flag(ItemFlag.IS_MERCHANDISE)
mail_mittens.set_price(350)
mail_mittens.add_modifier(IModBit.RUSTY)
mail_mittens.add_modifier(IModBit.BATTERED)
mail_mittens.add_modifier(IModBit.CRUDE)
mail_mittens.add_modifier(IModBit.THICK)
mail_mittens.add_modifier(IModBit.REINFORCED)
mail_mittens.add_modifier(IModBit.LORDLY)
mail_mittens.set_weight(0.5)
mail_mittens.set_abundance(100)
mail_mittens.set_body_armor(4)


scale_gauntlets = Item("scale_gauntlets", "Scale_Gauntlets")
scale_gauntlets.add_mesh(ItemMesh("scale_gauntlets_b_L"))
scale_gauntlets.add_flag(ItemType.HAND_ARMOR)
scale_gauntlets.add_flag(ItemFlag.IS_MERCHANDISE)
scale_gauntlets.set_price(710)
scale_gauntlets.add_modifier(IModBit.RUSTY)
scale_gauntlets.add_modifier(IModBit.BATTERED)
scale_gauntlets.add_modifier(IModBit.CRUDE)
scale_gauntlets.add_modifier(IModBit.THICK)
scale_gauntlets.add_modifier(IModBit.REINFORCED)
scale_gauntlets.add_modifier(IModBit.LORDLY)
scale_gauntlets.set_weight(0.75)
scale_gauntlets.set_abundance(100)
scale_gauntlets.set_body_armor(5)


lamellar_gauntlets = Item("lamellar_gauntlets", "Lamellar_Gauntlets")
lamellar_gauntlets.add_mesh(ItemMesh("scale_gauntlets_a_L"))
lamellar_gauntlets.add_flag(ItemType.HAND_ARMOR)
lamellar_gauntlets.add_flag(ItemFlag.IS_MERCHANDISE)
lamellar_gauntlets.set_price(910)
lamellar_gauntlets.add_modifier(IModBit.RUSTY)
lamellar_gauntlets.add_modifier(IModBit.BATTERED)
lamellar_gauntlets.add_modifier(IModBit.CRUDE)
lamellar_gauntlets.add_modifier(IModBit.THICK)
lamellar_gauntlets.add_modifier(IModBit.REINFORCED)
lamellar_gauntlets.add_modifier(IModBit.LORDLY)
lamellar_gauntlets.set_weight(0.75)
lamellar_gauntlets.set_abundance(100)
lamellar_gauntlets.set_body_armor(6)


gauntlets = Item("gauntlets", "Gauntlets")
gauntlets.add_mesh(ItemMesh("gauntlets_L"))
meshx = ItemMesh("gauntlets_L")
meshx.add_modifier(IModBit.REINFORCED)
gauntlets.add_mesh(meshx)
gauntlets.add_flag(ItemType.HAND_ARMOR)
gauntlets.add_flag(ItemFlag.IS_MERCHANDISE)
gauntlets.set_price(1040)
gauntlets.add_modifier(IModBit.RUSTY)
gauntlets.add_modifier(IModBit.BATTERED)
gauntlets.add_modifier(IModBit.CRUDE)
gauntlets.add_modifier(IModBit.THICK)
gauntlets.add_modifier(IModBit.REINFORCED)
gauntlets.add_modifier(IModBit.LORDLY)
gauntlets.set_weight(1.0)
gauntlets.set_abundance(100)
gauntlets.set_body_armor(7)


wrapping_boots = Item("wrapping_boots", "Wrapping_Boots")
wrapping_boots.add_mesh(ItemMesh("wrapping_boots_a"))
wrapping_boots.add_flag(ItemType.FOOT_ARMOR)
wrapping_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
wrapping_boots.add_flag(ItemFlag.IS_MERCHANDISE)
wrapping_boots.add_flag(ItemFlag.IS_CIVILIAN)
wrapping_boots.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
wrapping_boots.set_price(3)
wrapping_boots.add_modifier(IModBit.TETTERED)
wrapping_boots.add_modifier(IModBit.RAGGED)
wrapping_boots.add_modifier(IModBit.STURDY)
wrapping_boots.add_modifier(IModBit.THICK)
wrapping_boots.add_modifier(IModBit.HARDENED)
wrapping_boots.set_weight(1.0)
wrapping_boots.set_abundance(100)
wrapping_boots.set_leg_armor(3)


woolen_hose = Item("woolen_hose", "Woolen_Hose")
woolen_hose.add_mesh(ItemMesh("woolen_hose_a"))
woolen_hose.add_flag(ItemType.FOOT_ARMOR)
woolen_hose.add_flag(ItemFlag.ATTACH_ARMATURE)
woolen_hose.add_flag(ItemFlag.IS_MERCHANDISE)
woolen_hose.add_flag(ItemFlag.IS_CIVILIAN)
woolen_hose.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
woolen_hose.set_price(6)
woolen_hose.add_modifier(IModBit.TETTERED)
woolen_hose.add_modifier(IModBit.RAGGED)
woolen_hose.add_modifier(IModBit.STURDY)
woolen_hose.add_modifier(IModBit.THICK)
woolen_hose.add_modifier(IModBit.HARDENED)
woolen_hose.set_weight(1.0)
woolen_hose.set_abundance(100)
woolen_hose.set_leg_armor(4)


blue_hose = Item("blue_hose", "Blue_Hose")
blue_hose.add_mesh(ItemMesh("blue_hose_a"))
blue_hose.add_flag(ItemType.FOOT_ARMOR)
blue_hose.add_flag(ItemFlag.ATTACH_ARMATURE)
blue_hose.add_flag(ItemFlag.IS_MERCHANDISE)
blue_hose.add_flag(ItemFlag.IS_CIVILIAN)
blue_hose.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
blue_hose.set_price(11)
blue_hose.add_modifier(IModBit.TETTERED)
blue_hose.add_modifier(IModBit.RAGGED)
blue_hose.add_modifier(IModBit.STURDY)
blue_hose.add_modifier(IModBit.THICK)
blue_hose.add_modifier(IModBit.HARDENED)
blue_hose.set_weight(1.0)
blue_hose.set_abundance(100)
blue_hose.set_leg_armor(5)


hunter_boots = Item("hunter_boots", "Hunter_Boots")
hunter_boots.add_mesh(ItemMesh("hunter_boots_a"))
hunter_boots.add_flag(ItemType.FOOT_ARMOR)
hunter_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
hunter_boots.add_flag(ItemFlag.IS_MERCHANDISE)
hunter_boots.add_flag(ItemFlag.IS_CIVILIAN)
hunter_boots.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
hunter_boots.set_price(19)
hunter_boots.add_modifier(IModBit.TETTERED)
hunter_boots.add_modifier(IModBit.RAGGED)
hunter_boots.add_modifier(IModBit.STURDY)
hunter_boots.add_modifier(IModBit.THICK)
hunter_boots.add_modifier(IModBit.HARDENED)
hunter_boots.set_weight(1.25)
hunter_boots.set_abundance(100)
hunter_boots.set_leg_armor(9)


hide_boots = Item("hide_boots", "Hide_Boots")
hide_boots.add_mesh(ItemMesh("hide_boots_a"))
hide_boots.add_flag(ItemType.FOOT_ARMOR)
hide_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
hide_boots.add_flag(ItemFlag.IS_MERCHANDISE)
hide_boots.add_flag(ItemFlag.IS_CIVILIAN)
hide_boots.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
hide_boots.set_price(34)
hide_boots.add_modifier(IModBit.TETTERED)
hide_boots.add_modifier(IModBit.RAGGED)
hide_boots.add_modifier(IModBit.STURDY)
hide_boots.add_modifier(IModBit.THICK)
hide_boots.add_modifier(IModBit.HARDENED)
hide_boots.set_weight(1.0)
hide_boots.set_abundance(100)
hide_boots.set_leg_armor(10)


ankle_boots = Item("ankle_boots", "Ankle_Boots")
ankle_boots.add_mesh(ItemMesh("ankle_boots_a_new"))
ankle_boots.add_flag(ItemType.FOOT_ARMOR)
ankle_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
ankle_boots.add_flag(ItemFlag.IS_MERCHANDISE)
ankle_boots.add_flag(ItemFlag.IS_CIVILIAN)
ankle_boots.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
ankle_boots.set_price(75)
ankle_boots.add_modifier(IModBit.TETTERED)
ankle_boots.add_modifier(IModBit.RAGGED)
ankle_boots.add_modifier(IModBit.STURDY)
ankle_boots.add_modifier(IModBit.THICK)
ankle_boots.add_modifier(IModBit.HARDENED)
ankle_boots.set_weight(1.0)
ankle_boots.set_abundance(100)
ankle_boots.set_leg_armor(12)


nomad_boots = Item("nomad_boots", "Nomad_Boots")
nomad_boots.add_mesh(ItemMesh("nomad_boots_a"))
nomad_boots.add_flag(ItemType.FOOT_ARMOR)
nomad_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
nomad_boots.add_flag(ItemFlag.IS_MERCHANDISE)
nomad_boots.add_flag(ItemFlag.IS_CIVILIAN)
nomad_boots.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
nomad_boots.set_price(90)
nomad_boots.add_modifier(IModBit.TETTERED)
nomad_boots.add_modifier(IModBit.RAGGED)
nomad_boots.add_modifier(IModBit.STURDY)
nomad_boots.add_modifier(IModBit.THICK)
nomad_boots.add_modifier(IModBit.HARDENED)
nomad_boots.set_weight(1.25)
nomad_boots.set_abundance(100)
nomad_boots.set_leg_armor(14)


leather_boots = Item("leather_boots", "Leather_Boots")
leather_boots.add_mesh(ItemMesh("leather_boots_a"))
leather_boots.add_flag(ItemType.FOOT_ARMOR)
leather_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
leather_boots.add_flag(ItemFlag.IS_MERCHANDISE)
leather_boots.add_flag(ItemFlag.IS_CIVILIAN)
leather_boots.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
leather_boots.set_price(174)
leather_boots.add_modifier(IModBit.TETTERED)
leather_boots.add_modifier(IModBit.RAGGED)
leather_boots.add_modifier(IModBit.STURDY)
leather_boots.add_modifier(IModBit.THICK)
leather_boots.add_modifier(IModBit.HARDENED)
leather_boots.set_weight(1.25)
leather_boots.set_abundance(100)
leather_boots.set_leg_armor(16)


splinted_leather_greaves = Item("splinted_leather_greaves", "Splinted_Leather_Greaves")
splinted_leather_greaves.add_mesh(ItemMesh("leather_greaves_a"))
splinted_leather_greaves.add_flag(ItemType.FOOT_ARMOR)
splinted_leather_greaves.add_flag(ItemFlag.ATTACH_ARMATURE)
splinted_leather_greaves.add_flag(ItemFlag.IS_MERCHANDISE)
splinted_leather_greaves.set_price(310)
splinted_leather_greaves.add_modifier(IModBit.RUSTY)
splinted_leather_greaves.add_modifier(IModBit.BATTERED)
splinted_leather_greaves.add_modifier(IModBit.CRUDE)
splinted_leather_greaves.add_modifier(IModBit.THICK)
splinted_leather_greaves.add_modifier(IModBit.REINFORCED)
splinted_leather_greaves.add_modifier(IModBit.LORDLY)
splinted_leather_greaves.set_weight(2.0)
splinted_leather_greaves.set_abundance(100)
splinted_leather_greaves.set_leg_armor(21)


mail_chausses = Item("mail_chausses", "Mail_Chausses")
mail_chausses.add_mesh(ItemMesh("mail_chausses_a"))
mail_chausses.add_flag(ItemType.FOOT_ARMOR)
mail_chausses.add_flag(ItemFlag.ATTACH_ARMATURE)
mail_chausses.add_flag(ItemFlag.IS_MERCHANDISE)
mail_chausses.set_price(530)
mail_chausses.add_modifier(IModBit.RUSTY)
mail_chausses.add_modifier(IModBit.BATTERED)
mail_chausses.add_modifier(IModBit.CRUDE)
mail_chausses.add_modifier(IModBit.THICK)
mail_chausses.add_modifier(IModBit.REINFORCED)
mail_chausses.add_modifier(IModBit.LORDLY)
mail_chausses.set_weight(3.0)
mail_chausses.set_abundance(100)
mail_chausses.set_leg_armor(24)


splinted_greaves = Item("splinted_greaves", "Splinted_Greaves")
splinted_greaves.add_mesh(ItemMesh("splinted_greaves_a"))
splinted_greaves.add_flag(ItemType.FOOT_ARMOR)
splinted_greaves.add_flag(ItemFlag.ATTACH_ARMATURE)
splinted_greaves.add_flag(ItemFlag.IS_MERCHANDISE)
splinted_greaves.set_price(853)
splinted_greaves.add_modifier(IModBit.RUSTY)
splinted_greaves.add_modifier(IModBit.BATTERED)
splinted_greaves.add_modifier(IModBit.CRUDE)
splinted_greaves.add_modifier(IModBit.THICK)
splinted_greaves.add_modifier(IModBit.REINFORCED)
splinted_greaves.add_modifier(IModBit.LORDLY)
splinted_greaves.set_weight(2.75)
splinted_greaves.set_abundance(100)
splinted_greaves.set_leg_armor(28)
splinted_greaves.set_difficulty(7)


mail_boots = Item("mail_boots", "Mail_Boots")
mail_boots.add_mesh(ItemMesh("mail_boots_a"))
mail_boots.add_flag(ItemType.FOOT_ARMOR)
mail_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
mail_boots.add_flag(ItemFlag.IS_MERCHANDISE)
mail_boots.set_price(1250)
mail_boots.add_modifier(IModBit.RUSTY)
mail_boots.add_modifier(IModBit.BATTERED)
mail_boots.add_modifier(IModBit.CRUDE)
mail_boots.add_modifier(IModBit.THICK)
mail_boots.add_modifier(IModBit.REINFORCED)
mail_boots.add_modifier(IModBit.LORDLY)
mail_boots.set_weight(3.0)
mail_boots.set_abundance(100)
mail_boots.set_leg_armor(31)
mail_boots.set_difficulty(8)


iron_greaves = Item("iron_greaves", "Iron_Greaves")
iron_greaves.add_mesh(ItemMesh("iron_greaves_a"))
iron_greaves.add_flag(ItemType.FOOT_ARMOR)
iron_greaves.add_flag(ItemFlag.ATTACH_ARMATURE)
iron_greaves.add_flag(ItemFlag.IS_MERCHANDISE)
iron_greaves.set_price(1770)
iron_greaves.add_modifier(IModBit.RUSTY)
iron_greaves.add_modifier(IModBit.BATTERED)
iron_greaves.add_modifier(IModBit.CRUDE)
iron_greaves.add_modifier(IModBit.THICK)
iron_greaves.add_modifier(IModBit.REINFORCED)
iron_greaves.add_modifier(IModBit.LORDLY)
iron_greaves.set_weight(3.5)
iron_greaves.set_abundance(100)
iron_greaves.set_leg_armor(33)
iron_greaves.set_difficulty(9)


black_greaves = Item("black_greaves", "Black_Greaves")
black_greaves.add_mesh(ItemMesh("black_greaves"))
black_greaves.add_flag(ItemType.FOOT_ARMOR)
black_greaves.add_flag(ItemFlag.ATTACH_ARMATURE)
black_greaves.set_price(2361)
black_greaves.add_modifier(IModBit.RUSTY)
black_greaves.add_modifier(IModBit.BATTERED)
black_greaves.add_modifier(IModBit.CRUDE)
black_greaves.add_modifier(IModBit.THICK)
black_greaves.add_modifier(IModBit.REINFORCED)
black_greaves.add_modifier(IModBit.LORDLY)
black_greaves.set_weight(3.5)
black_greaves.set_abundance(100)
black_greaves.set_leg_armor(35)


khergit_leather_boots = Item("khergit_leather_boots", "Khergit_Leather_Boots")
khergit_leather_boots.add_mesh(ItemMesh("khergit_leather_boots"))
khergit_leather_boots.add_flag(ItemType.FOOT_ARMOR)
khergit_leather_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
khergit_leather_boots.add_flag(ItemFlag.IS_MERCHANDISE)
khergit_leather_boots.add_flag(ItemFlag.IS_CIVILIAN)
khergit_leather_boots.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
khergit_leather_boots.set_price(120)
khergit_leather_boots.add_modifier(IModBit.TETTERED)
khergit_leather_boots.add_modifier(IModBit.RAGGED)
khergit_leather_boots.add_modifier(IModBit.STURDY)
khergit_leather_boots.add_modifier(IModBit.THICK)
khergit_leather_boots.add_modifier(IModBit.HARDENED)
khergit_leather_boots.set_weight(1.0)
khergit_leather_boots.set_abundance(100)
khergit_leather_boots.set_leg_armor(18)


sarranid_boots_a = Item("sarranid_boots_a", "Sarranid_Shoes")
sarranid_boots_a.add_mesh(ItemMesh("sarranid_shoes"))
sarranid_boots_a.add_flag(ItemType.FOOT_ARMOR)
sarranid_boots_a.add_flag(ItemFlag.ATTACH_ARMATURE)
sarranid_boots_a.add_flag(ItemFlag.IS_CIVILIAN)
sarranid_boots_a.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
sarranid_boots_a.set_price(30)
sarranid_boots_a.add_modifier(IModBit.TETTERED)
sarranid_boots_a.add_modifier(IModBit.RAGGED)
sarranid_boots_a.add_modifier(IModBit.STURDY)
sarranid_boots_a.add_modifier(IModBit.THICK)
sarranid_boots_a.add_modifier(IModBit.HARDENED)
sarranid_boots_a.set_weight(1.0)
sarranid_boots_a.set_abundance(100)
sarranid_boots_a.set_leg_armor(8)


sarranid_boots_b = Item("sarranid_boots_b", "Sarranid_Leather_Boots")
sarranid_boots_b.add_mesh(ItemMesh("sarranid_boots"))
sarranid_boots_b.add_flag(ItemType.FOOT_ARMOR)
sarranid_boots_b.add_flag(ItemFlag.ATTACH_ARMATURE)
sarranid_boots_b.add_flag(ItemFlag.IS_MERCHANDISE)
sarranid_boots_b.add_flag(ItemFlag.IS_CIVILIAN)
sarranid_boots_b.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
sarranid_boots_b.set_price(120)
sarranid_boots_b.add_modifier(IModBit.TETTERED)
sarranid_boots_b.add_modifier(IModBit.RAGGED)
sarranid_boots_b.add_modifier(IModBit.STURDY)
sarranid_boots_b.add_modifier(IModBit.THICK)
sarranid_boots_b.add_modifier(IModBit.HARDENED)
sarranid_boots_b.set_weight(2.0)
sarranid_boots_b.set_abundance(100)
sarranid_boots_b.set_leg_armor(16)


sarranid_boots_c = Item("sarranid_boots_c", "Plated_Boots")
sarranid_boots_c.add_mesh(ItemMesh("sarranid_camel_boots"))
sarranid_boots_c.add_flag(ItemType.FOOT_ARMOR)
sarranid_boots_c.add_flag(ItemFlag.ATTACH_ARMATURE)
sarranid_boots_c.add_flag(ItemFlag.IS_MERCHANDISE)
sarranid_boots_c.add_flag(ItemFlag.IS_CIVILIAN)
sarranid_boots_c.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
sarranid_boots_c.set_price(280)
sarranid_boots_c.add_modifier(IModBit.CRACKED)
sarranid_boots_c.add_modifier(IModBit.RUSTY)
sarranid_boots_c.add_modifier(IModBit.BATTERED)
sarranid_boots_c.add_modifier(IModBit.CRUDE)
sarranid_boots_c.add_modifier(IModBit.THICK)
sarranid_boots_c.add_modifier(IModBit.REINFORCED)
sarranid_boots_c.add_modifier(IModBit.LORDLY)
sarranid_boots_c.set_weight(3.0)
sarranid_boots_c.set_abundance(100)
sarranid_boots_c.set_leg_armor(20)


sarranid_boots_d = Item("sarranid_boots_d", "Sarranid_Mail_Boots")
sarranid_boots_d.add_mesh(ItemMesh("sarranid_mail_chausses"))
sarranid_boots_d.add_flag(ItemType.FOOT_ARMOR)
sarranid_boots_d.add_flag(ItemFlag.ATTACH_ARMATURE)
sarranid_boots_d.add_flag(ItemFlag.IS_MERCHANDISE)
sarranid_boots_d.add_flag(ItemFlag.IS_CIVILIAN)
sarranid_boots_d.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
sarranid_boots_d.set_price(920)
sarranid_boots_d.add_modifier(IModBit.RUSTY)
sarranid_boots_d.add_modifier(IModBit.BATTERED)
sarranid_boots_d.add_modifier(IModBit.CRUDE)
sarranid_boots_d.add_modifier(IModBit.THICK)
sarranid_boots_d.add_modifier(IModBit.REINFORCED)
sarranid_boots_d.add_modifier(IModBit.LORDLY)
sarranid_boots_d.set_weight(3.0)
sarranid_boots_d.set_abundance(100)
sarranid_boots_d.set_leg_armor(30)


sarranid_head_cloth = Item("sarranid_head_cloth", "Lady_Head_Cloth")
sarranid_head_cloth.add_mesh(ItemMesh("tulbent"))
sarranid_head_cloth.add_flag(ItemType.HEAD_ARMOR)
sarranid_head_cloth.add_flag(ItemFlag.ATTACH_ARMATURE)
sarranid_head_cloth.add_flag(ItemFlag.COVERS_LEGS)
sarranid_head_cloth.add_flag(ItemFlag.DOESNT_COVER_HAIR)
sarranid_head_cloth.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
sarranid_head_cloth.add_flag(ItemFlag.IS_CIVILIAN)
sarranid_head_cloth.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
sarranid_head_cloth.set_price(1)
sarranid_head_cloth.add_modifier(IModBit.TETTERED)
sarranid_head_cloth.add_modifier(IModBit.RAGGED)
sarranid_head_cloth.add_modifier(IModBit.STURDY)
sarranid_head_cloth.add_modifier(IModBit.THICK)
sarranid_head_cloth.add_modifier(IModBit.HARDENED)
sarranid_head_cloth.set_weight(0.5)
sarranid_head_cloth.set_abundance(100)
sarranid_head_cloth.set_head_armor(4)


sarranid_head_cloth_b = Item("sarranid_head_cloth_b", "Lady_Head_Cloth")
sarranid_head_cloth_b.add_mesh(ItemMesh("tulbent_b"))
sarranid_head_cloth_b.add_flag(ItemType.HEAD_ARMOR)
sarranid_head_cloth_b.add_flag(ItemFlag.ATTACH_ARMATURE)
sarranid_head_cloth_b.add_flag(ItemFlag.COVERS_LEGS)
sarranid_head_cloth_b.add_flag(ItemFlag.DOESNT_COVER_HAIR)
sarranid_head_cloth_b.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
sarranid_head_cloth_b.add_flag(ItemFlag.IS_CIVILIAN)
sarranid_head_cloth_b.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
sarranid_head_cloth_b.set_price(1)
sarranid_head_cloth_b.add_modifier(IModBit.TETTERED)
sarranid_head_cloth_b.add_modifier(IModBit.RAGGED)
sarranid_head_cloth_b.add_modifier(IModBit.STURDY)
sarranid_head_cloth_b.add_modifier(IModBit.THICK)
sarranid_head_cloth_b.add_modifier(IModBit.HARDENED)
sarranid_head_cloth_b.set_weight(0.5)
sarranid_head_cloth_b.set_abundance(100)
sarranid_head_cloth_b.set_head_armor(4)


sarranid_felt_head_cloth = Item("sarranid_felt_head_cloth", "Head_Cloth")
sarranid_felt_head_cloth.add_mesh(ItemMesh("common_tulbent"))
sarranid_felt_head_cloth.add_flag(ItemType.HEAD_ARMOR)
sarranid_felt_head_cloth.add_flag(ItemFlag.ATTACH_ARMATURE)
sarranid_felt_head_cloth.add_flag(ItemFlag.IS_CIVILIAN)
sarranid_felt_head_cloth.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
sarranid_felt_head_cloth.set_price(1)
sarranid_felt_head_cloth.add_modifier(IModBit.TETTERED)
sarranid_felt_head_cloth.add_modifier(IModBit.RAGGED)
sarranid_felt_head_cloth.add_modifier(IModBit.STURDY)
sarranid_felt_head_cloth.add_modifier(IModBit.THICK)
sarranid_felt_head_cloth.add_modifier(IModBit.HARDENED)
sarranid_felt_head_cloth.set_weight(0.5)
sarranid_felt_head_cloth.set_abundance(100)
sarranid_felt_head_cloth.set_head_armor(4)


sarranid_felt_head_cloth_b = Item("sarranid_felt_head_cloth_b", "Head_Cloth")
sarranid_felt_head_cloth_b.add_mesh(ItemMesh("common_tulbent_b"))
sarranid_felt_head_cloth_b.add_flag(ItemType.HEAD_ARMOR)
sarranid_felt_head_cloth_b.add_flag(ItemFlag.ATTACH_ARMATURE)
sarranid_felt_head_cloth_b.add_flag(ItemFlag.IS_CIVILIAN)
sarranid_felt_head_cloth_b.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
sarranid_felt_head_cloth_b.set_price(1)
sarranid_felt_head_cloth_b.add_modifier(IModBit.TETTERED)
sarranid_felt_head_cloth_b.add_modifier(IModBit.RAGGED)
sarranid_felt_head_cloth_b.add_modifier(IModBit.STURDY)
sarranid_felt_head_cloth_b.add_modifier(IModBit.THICK)
sarranid_felt_head_cloth_b.add_modifier(IModBit.HARDENED)
sarranid_felt_head_cloth_b.set_weight(0.5)
sarranid_felt_head_cloth_b.set_abundance(100)
sarranid_felt_head_cloth_b.set_head_armor(4)


lady_dress_ruby = Item("lady_dress_ruby", "Lady_Dress")
lady_dress_ruby.add_mesh(ItemMesh("lady_dress_r"))
lady_dress_ruby.add_flag(ItemType.BODY_ARMOR)
lady_dress_ruby.add_flag(ItemFlag.COVERS_LEGS)
lady_dress_ruby.add_flag(ItemFlag.DOESNT_COVER_HAIR)
lady_dress_ruby.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
lady_dress_ruby.add_flag(ItemFlag.IS_CIVILIAN)
lady_dress_ruby.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
lady_dress_ruby.set_price(500)
lady_dress_ruby.add_modifier(IModBit.TETTERED)
lady_dress_ruby.add_modifier(IModBit.RAGGED)
lady_dress_ruby.add_modifier(IModBit.STURDY)
lady_dress_ruby.add_modifier(IModBit.THICK)
lady_dress_ruby.add_modifier(IModBit.HARDENED)
lady_dress_ruby.set_weight(3.0)
lady_dress_ruby.set_abundance(100)
lady_dress_ruby.set_body_armor(10)
lady_dress_ruby.set_leg_armor(10)


lady_dress_green = Item("lady_dress_green", "Lady_Dress")
lady_dress_green.add_mesh(ItemMesh("lady_dress_g"))
lady_dress_green.add_flag(ItemType.BODY_ARMOR)
lady_dress_green.add_flag(ItemFlag.COVERS_LEGS)
lady_dress_green.add_flag(ItemFlag.DOESNT_COVER_HAIR)
lady_dress_green.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
lady_dress_green.add_flag(ItemFlag.IS_CIVILIAN)
lady_dress_green.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
lady_dress_green.set_price(500)
lady_dress_green.add_modifier(IModBit.TETTERED)
lady_dress_green.add_modifier(IModBit.RAGGED)
lady_dress_green.add_modifier(IModBit.STURDY)
lady_dress_green.add_modifier(IModBit.THICK)
lady_dress_green.add_modifier(IModBit.HARDENED)
lady_dress_green.set_weight(3.0)
lady_dress_green.set_abundance(100)
lady_dress_green.set_body_armor(10)
lady_dress_green.set_leg_armor(10)


lady_dress_blue = Item("lady_dress_blue", "Lady_Dress")
lady_dress_blue.add_mesh(ItemMesh("lady_dress_b"))
lady_dress_blue.add_flag(ItemType.BODY_ARMOR)
lady_dress_blue.add_flag(ItemFlag.COVERS_LEGS)
lady_dress_blue.add_flag(ItemFlag.DOESNT_COVER_HAIR)
lady_dress_blue.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
lady_dress_blue.add_flag(ItemFlag.IS_CIVILIAN)
lady_dress_blue.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
lady_dress_blue.set_price(500)
lady_dress_blue.add_modifier(IModBit.TETTERED)
lady_dress_blue.add_modifier(IModBit.RAGGED)
lady_dress_blue.add_modifier(IModBit.STURDY)
lady_dress_blue.add_modifier(IModBit.THICK)
lady_dress_blue.add_modifier(IModBit.HARDENED)
lady_dress_blue.set_weight(3.0)
lady_dress_blue.set_abundance(100)
lady_dress_blue.set_body_armor(10)
lady_dress_blue.set_leg_armor(10)


red_dress = Item("red_dress", "Red_Dress")
red_dress.add_mesh(ItemMesh("red_dress"))
red_dress.add_flag(ItemType.BODY_ARMOR)
red_dress.add_flag(ItemFlag.COVERS_LEGS)
red_dress.add_flag(ItemFlag.DOESNT_COVER_HAIR)
red_dress.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
red_dress.add_flag(ItemFlag.IS_CIVILIAN)
red_dress.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
red_dress.set_price(500)
red_dress.add_modifier(IModBit.TETTERED)
red_dress.add_modifier(IModBit.RAGGED)
red_dress.add_modifier(IModBit.STURDY)
red_dress.add_modifier(IModBit.THICK)
red_dress.add_modifier(IModBit.HARDENED)
red_dress.set_weight(3.0)
red_dress.set_abundance(100)
red_dress.set_body_armor(10)
red_dress.set_leg_armor(10)


brown_dress = Item("brown_dress", "Brown_Dress")
brown_dress.add_mesh(ItemMesh("brown_dress"))
brown_dress.add_flag(ItemType.BODY_ARMOR)
brown_dress.add_flag(ItemFlag.COVERS_LEGS)
brown_dress.add_flag(ItemFlag.DOESNT_COVER_HAIR)
brown_dress.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
brown_dress.add_flag(ItemFlag.IS_CIVILIAN)
brown_dress.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
brown_dress.set_price(500)
brown_dress.add_modifier(IModBit.TETTERED)
brown_dress.add_modifier(IModBit.RAGGED)
brown_dress.add_modifier(IModBit.STURDY)
brown_dress.add_modifier(IModBit.THICK)
brown_dress.add_modifier(IModBit.HARDENED)
brown_dress.set_weight(3.0)
brown_dress.set_abundance(100)
brown_dress.set_body_armor(10)
brown_dress.set_leg_armor(10)


green_dress = Item("green_dress", "Green_Dress")
green_dress.add_mesh(ItemMesh("green_dress"))
green_dress.add_flag(ItemType.BODY_ARMOR)
green_dress.add_flag(ItemFlag.COVERS_LEGS)
green_dress.add_flag(ItemFlag.DOESNT_COVER_HAIR)
green_dress.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
green_dress.add_flag(ItemFlag.IS_CIVILIAN)
green_dress.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
green_dress.set_price(500)
green_dress.add_modifier(IModBit.TETTERED)
green_dress.add_modifier(IModBit.RAGGED)
green_dress.add_modifier(IModBit.STURDY)
green_dress.add_modifier(IModBit.THICK)
green_dress.add_modifier(IModBit.HARDENED)
green_dress.set_weight(3.0)
green_dress.set_abundance(100)
green_dress.set_body_armor(10)
green_dress.set_leg_armor(10)


khergit_lady_dress = Item("khergit_lady_dress", "Khergit_Lady_Dress")
khergit_lady_dress.add_mesh(ItemMesh("khergit_lady_dress"))
khergit_lady_dress.add_flag(ItemType.BODY_ARMOR)
khergit_lady_dress.add_flag(ItemFlag.COVERS_LEGS)
khergit_lady_dress.add_flag(ItemFlag.DOESNT_COVER_HAIR)
khergit_lady_dress.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
khergit_lady_dress.add_flag(ItemFlag.IS_CIVILIAN)
khergit_lady_dress.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
khergit_lady_dress.set_price(500)
khergit_lady_dress.add_modifier(IModBit.TETTERED)
khergit_lady_dress.add_modifier(IModBit.RAGGED)
khergit_lady_dress.add_modifier(IModBit.STURDY)
khergit_lady_dress.add_modifier(IModBit.THICK)
khergit_lady_dress.add_modifier(IModBit.HARDENED)
khergit_lady_dress.set_weight(3.0)
khergit_lady_dress.set_abundance(100)
khergit_lady_dress.set_body_armor(10)
khergit_lady_dress.set_leg_armor(10)


khergit_lady_dress_b = Item("khergit_lady_dress_b", "Khergit_Leather_Lady_Dress")
khergit_lady_dress_b.add_mesh(ItemMesh("khergit_lady_dress_b"))
khergit_lady_dress_b.add_flag(ItemType.BODY_ARMOR)
khergit_lady_dress_b.add_flag(ItemFlag.COVERS_LEGS)
khergit_lady_dress_b.add_flag(ItemFlag.DOESNT_COVER_HAIR)
khergit_lady_dress_b.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
khergit_lady_dress_b.add_flag(ItemFlag.IS_CIVILIAN)
khergit_lady_dress_b.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
khergit_lady_dress_b.set_price(500)
khergit_lady_dress_b.add_modifier(IModBit.TETTERED)
khergit_lady_dress_b.add_modifier(IModBit.RAGGED)
khergit_lady_dress_b.add_modifier(IModBit.STURDY)
khergit_lady_dress_b.add_modifier(IModBit.THICK)
khergit_lady_dress_b.add_modifier(IModBit.HARDENED)
khergit_lady_dress_b.set_weight(3.0)
khergit_lady_dress_b.set_abundance(100)
khergit_lady_dress_b.set_body_armor(10)
khergit_lady_dress_b.set_leg_armor(10)


sarranid_lady_dress = Item("sarranid_lady_dress", "Sarranid_Lady_Dress")
sarranid_lady_dress.add_mesh(ItemMesh("sarranid_lady_dress"))
sarranid_lady_dress.add_flag(ItemType.BODY_ARMOR)
sarranid_lady_dress.add_flag(ItemFlag.COVERS_LEGS)
sarranid_lady_dress.add_flag(ItemFlag.DOESNT_COVER_HAIR)
sarranid_lady_dress.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
sarranid_lady_dress.add_flag(ItemFlag.IS_CIVILIAN)
sarranid_lady_dress.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
sarranid_lady_dress.set_price(500)
sarranid_lady_dress.add_modifier(IModBit.TETTERED)
sarranid_lady_dress.add_modifier(IModBit.RAGGED)
sarranid_lady_dress.add_modifier(IModBit.STURDY)
sarranid_lady_dress.add_modifier(IModBit.THICK)
sarranid_lady_dress.add_modifier(IModBit.HARDENED)
sarranid_lady_dress.set_weight(3.0)
sarranid_lady_dress.set_abundance(100)
sarranid_lady_dress.set_body_armor(10)
sarranid_lady_dress.set_leg_armor(10)


sarranid_lady_dress_b = Item("sarranid_lady_dress_b", "Sarranid_Lady_Dress")
sarranid_lady_dress_b.add_mesh(ItemMesh("sarranid_lady_dress_b"))
sarranid_lady_dress_b.add_flag(ItemType.BODY_ARMOR)
sarranid_lady_dress_b.add_flag(ItemFlag.COVERS_LEGS)
sarranid_lady_dress_b.add_flag(ItemFlag.DOESNT_COVER_HAIR)
sarranid_lady_dress_b.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
sarranid_lady_dress_b.add_flag(ItemFlag.IS_CIVILIAN)
sarranid_lady_dress_b.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
sarranid_lady_dress_b.set_price(500)
sarranid_lady_dress_b.add_modifier(IModBit.TETTERED)
sarranid_lady_dress_b.add_modifier(IModBit.RAGGED)
sarranid_lady_dress_b.add_modifier(IModBit.STURDY)
sarranid_lady_dress_b.add_modifier(IModBit.THICK)
sarranid_lady_dress_b.add_modifier(IModBit.HARDENED)
sarranid_lady_dress_b.set_weight(3.0)
sarranid_lady_dress_b.set_abundance(100)
sarranid_lady_dress_b.set_body_armor(10)
sarranid_lady_dress_b.set_leg_armor(10)


sarranid_common_dress = Item("sarranid_common_dress", "Sarranid_Dress")
sarranid_common_dress.add_mesh(ItemMesh("sarranid_common_dress"))
sarranid_common_dress.add_flag(ItemType.BODY_ARMOR)
sarranid_common_dress.add_flag(ItemFlag.COVERS_LEGS)
sarranid_common_dress.add_flag(ItemFlag.DOESNT_COVER_HAIR)
sarranid_common_dress.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
sarranid_common_dress.add_flag(ItemFlag.IS_CIVILIAN)
sarranid_common_dress.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
sarranid_common_dress.set_price(500)
sarranid_common_dress.add_modifier(IModBit.TETTERED)
sarranid_common_dress.add_modifier(IModBit.RAGGED)
sarranid_common_dress.add_modifier(IModBit.STURDY)
sarranid_common_dress.add_modifier(IModBit.THICK)
sarranid_common_dress.add_modifier(IModBit.HARDENED)
sarranid_common_dress.set_weight(3.0)
sarranid_common_dress.set_abundance(100)
sarranid_common_dress.set_body_armor(10)
sarranid_common_dress.set_leg_armor(10)


sarranid_common_dress_b = Item("sarranid_common_dress_b", "Sarranid_Dress")
sarranid_common_dress_b.add_mesh(ItemMesh("sarranid_common_dress_b"))
sarranid_common_dress_b.add_flag(ItemType.BODY_ARMOR)
sarranid_common_dress_b.add_flag(ItemFlag.COVERS_LEGS)
sarranid_common_dress_b.add_flag(ItemFlag.DOESNT_COVER_HAIR)
sarranid_common_dress_b.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
sarranid_common_dress_b.add_flag(ItemFlag.IS_CIVILIAN)
sarranid_common_dress_b.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
sarranid_common_dress_b.set_price(500)
sarranid_common_dress_b.add_modifier(IModBit.TETTERED)
sarranid_common_dress_b.add_modifier(IModBit.RAGGED)
sarranid_common_dress_b.add_modifier(IModBit.STURDY)
sarranid_common_dress_b.add_modifier(IModBit.THICK)
sarranid_common_dress_b.add_modifier(IModBit.HARDENED)
sarranid_common_dress_b.set_weight(3.0)
sarranid_common_dress_b.set_abundance(100)
sarranid_common_dress_b.set_body_armor(10)
sarranid_common_dress_b.set_leg_armor(10)


courtly_outfit = Item("courtly_outfit", "Courtly_Outfit")
courtly_outfit.add_mesh(ItemMesh("nobleman_outf"))
courtly_outfit.add_flag(ItemType.BODY_ARMOR)
courtly_outfit.add_flag(ItemFlag.COVERS_LEGS)
courtly_outfit.add_flag(ItemFlag.DOESNT_COVER_HAIR)
courtly_outfit.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
courtly_outfit.add_flag(ItemFlag.IS_CIVILIAN)
courtly_outfit.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
courtly_outfit.set_price(348)
courtly_outfit.add_modifier(IModBit.TETTERED)
courtly_outfit.add_modifier(IModBit.RAGGED)
courtly_outfit.add_modifier(IModBit.STURDY)
courtly_outfit.add_modifier(IModBit.THICK)
courtly_outfit.add_modifier(IModBit.HARDENED)
courtly_outfit.set_weight(4.0)
courtly_outfit.set_abundance(100)
courtly_outfit.set_body_armor(14)
courtly_outfit.set_leg_armor(10)


nobleman_outfit = Item("nobleman_outfit", "Nobleman_Outfit")
nobleman_outfit.add_mesh(ItemMesh("nobleman_outfit_b_new"))
nobleman_outfit.add_flag(ItemType.BODY_ARMOR)
nobleman_outfit.add_flag(ItemFlag.COVERS_LEGS)
nobleman_outfit.add_flag(ItemFlag.DOESNT_COVER_HAIR)
nobleman_outfit.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
nobleman_outfit.add_flag(ItemFlag.IS_CIVILIAN)
nobleman_outfit.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
nobleman_outfit.set_price(348)
nobleman_outfit.add_modifier(IModBit.TETTERED)
nobleman_outfit.add_modifier(IModBit.RAGGED)
nobleman_outfit.add_modifier(IModBit.STURDY)
nobleman_outfit.add_modifier(IModBit.THICK)
nobleman_outfit.add_modifier(IModBit.HARDENED)
nobleman_outfit.set_weight(4.0)
nobleman_outfit.set_abundance(100)
nobleman_outfit.set_body_armor(15)
nobleman_outfit.set_leg_armor(12)


nomad_armor = Item("nomad_armor", "Nomad_Armor")
nomad_armor.add_mesh(ItemMesh("nomad_armor_new"))
nomad_armor.add_flag(ItemType.BODY_ARMOR)
nomad_armor.add_flag(ItemFlag.IS_MERCHANDISE)
nomad_armor.add_flag(ItemFlag.COVERS_LEGS)
nomad_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
nomad_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
nomad_armor.set_price(25)
nomad_armor.add_modifier(IModBit.TETTERED)
nomad_armor.add_modifier(IModBit.RAGGED)
nomad_armor.add_modifier(IModBit.STURDY)
nomad_armor.add_modifier(IModBit.THICK)
nomad_armor.add_modifier(IModBit.HARDENED)
nomad_armor.set_weight(2.0)
nomad_armor.set_abundance(100)
nomad_armor.set_body_armor(24)


khergit_armor = Item("khergit_armor", "Khergit_Armor")
khergit_armor.add_mesh(ItemMesh("khergit_armor_new"))
khergit_armor.add_flag(ItemType.BODY_ARMOR)
khergit_armor.add_flag(ItemFlag.IS_MERCHANDISE)
khergit_armor.add_flag(ItemFlag.COVERS_LEGS)
khergit_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
khergit_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
khergit_armor.set_price(38)
khergit_armor.add_modifier(IModBit.TETTERED)
khergit_armor.add_modifier(IModBit.RAGGED)
khergit_armor.add_modifier(IModBit.STURDY)
khergit_armor.add_modifier(IModBit.THICK)
khergit_armor.add_modifier(IModBit.HARDENED)
khergit_armor.set_weight(2.0)
khergit_armor.set_abundance(100)
khergit_armor.set_body_armor(24)


leather_jacket = Item("leather_jacket", "Leather_Jacket")
leather_jacket.add_mesh(ItemMesh("leather_jacket_new"))
leather_jacket.add_flag(ItemType.BODY_ARMOR)
leather_jacket.add_flag(ItemFlag.IS_MERCHANDISE)
leather_jacket.add_flag(ItemFlag.COVERS_LEGS)
leather_jacket.add_flag(ItemFlag.DOESNT_COVER_HAIR)
leather_jacket.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
leather_jacket.add_flag(ItemFlag.IS_CIVILIAN)
leather_jacket.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
leather_jacket.set_price(50)
leather_jacket.add_modifier(IModBit.TETTERED)
leather_jacket.add_modifier(IModBit.RAGGED)
leather_jacket.add_modifier(IModBit.STURDY)
leather_jacket.add_modifier(IModBit.THICK)
leather_jacket.add_modifier(IModBit.HARDENED)
leather_jacket.set_weight(3.0)
leather_jacket.set_abundance(100)
leather_jacket.set_body_armor(20)


rawhide_coat = Item("rawhide_coat", "Rawhide_Coat")
rawhide_coat.add_mesh(ItemMesh("coat_of_plates_b"))
rawhide_coat.add_flag(ItemType.BODY_ARMOR)
rawhide_coat.add_flag(ItemFlag.IS_MERCHANDISE)
rawhide_coat.add_flag(ItemFlag.COVERS_LEGS)
rawhide_coat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
rawhide_coat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
rawhide_coat.add_flag(ItemFlag.IS_CIVILIAN)
rawhide_coat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
rawhide_coat.set_price(12)
rawhide_coat.add_modifier(IModBit.TETTERED)
rawhide_coat.add_modifier(IModBit.RAGGED)
rawhide_coat.add_modifier(IModBit.STURDY)
rawhide_coat.add_modifier(IModBit.THICK)
rawhide_coat.add_modifier(IModBit.HARDENED)
rawhide_coat.set_weight(5.0)
rawhide_coat.set_abundance(100)
rawhide_coat.set_body_armor(10)


leather_armor = Item("leather_armor", "Leather_Armor")
leather_armor.add_mesh(ItemMesh("tattered_leather_armor_a"))
leather_armor.add_flag(ItemType.BODY_ARMOR)
leather_armor.add_flag(ItemFlag.IS_MERCHANDISE)
leather_armor.add_flag(ItemFlag.COVERS_LEGS)
leather_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
leather_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
leather_armor.set_price(65)
leather_armor.add_modifier(IModBit.TETTERED)
leather_armor.add_modifier(IModBit.RAGGED)
leather_armor.add_modifier(IModBit.STURDY)
leather_armor.add_modifier(IModBit.THICK)
leather_armor.add_modifier(IModBit.HARDENED)
leather_armor.set_weight(7.0)
leather_armor.set_abundance(100)
leather_armor.set_body_armor(18)


fur_coat = Item("fur_coat", "Fur_Coat")
fur_coat.add_mesh(ItemMesh("fur_coat"))
fur_coat.add_flag(ItemType.BODY_ARMOR)
fur_coat.add_flag(ItemFlag.IS_MERCHANDISE)
fur_coat.add_flag(ItemFlag.COVERS_LEGS)
fur_coat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
fur_coat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
fur_coat.add_flag(ItemFlag.IS_CIVILIAN)
fur_coat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
fur_coat.set_price(117)
fur_coat.add_modifier(IModBit.RUSTY)
fur_coat.add_modifier(IModBit.BATTERED)
fur_coat.add_modifier(IModBit.CRUDE)
fur_coat.add_modifier(IModBit.THICK)
fur_coat.add_modifier(IModBit.REINFORCED)
fur_coat.add_modifier(IModBit.LORDLY)
fur_coat.set_weight(6.0)
fur_coat.set_abundance(100)
fur_coat.set_body_armor(13)
fur_coat.set_leg_armor(6)


coat = Item("coat", "Coat")
coat.add_mesh(ItemMesh("nobleman_outf"))
coat.add_flag(ItemType.BODY_ARMOR)
coat.add_flag(ItemFlag.COVERS_LEGS)
coat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
coat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
coat.add_flag(ItemFlag.IS_CIVILIAN)
coat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
coat.set_price(348)
coat.add_modifier(IModBit.TETTERED)
coat.add_modifier(IModBit.RAGGED)
coat.add_modifier(IModBit.STURDY)
coat.add_modifier(IModBit.THICK)
coat.add_modifier(IModBit.HARDENED)
coat.set_weight(4.0)
coat.set_abundance(100)
coat.set_body_armor(14)
coat.set_leg_armor(10)


leather_coat = Item("leather_coat", "Leather_Coat")
leather_coat.add_mesh(ItemMesh("nobleman_outf"))
leather_coat.add_flag(ItemType.BODY_ARMOR)
leather_coat.add_flag(ItemFlag.COVERS_LEGS)
leather_coat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
leather_coat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
leather_coat.add_flag(ItemFlag.IS_CIVILIAN)
leather_coat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
leather_coat.set_price(348)
leather_coat.add_modifier(IModBit.TETTERED)
leather_coat.add_modifier(IModBit.RAGGED)
leather_coat.add_modifier(IModBit.STURDY)
leather_coat.add_modifier(IModBit.THICK)
leather_coat.add_modifier(IModBit.HARDENED)
leather_coat.set_weight(4.0)
leather_coat.set_abundance(100)
leather_coat.set_body_armor(14)
leather_coat.set_leg_armor(10)


mail_coat = Item("mail_coat", "Coat_of_Mail")
mail_coat.add_mesh(ItemMesh("nobleman_outf"))
mail_coat.add_flag(ItemType.BODY_ARMOR)
mail_coat.add_flag(ItemFlag.COVERS_LEGS)
mail_coat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
mail_coat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
mail_coat.add_flag(ItemFlag.IS_CIVILIAN)
mail_coat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
mail_coat.set_price(348)
mail_coat.add_modifier(IModBit.TETTERED)
mail_coat.add_modifier(IModBit.RAGGED)
mail_coat.add_modifier(IModBit.STURDY)
mail_coat.add_modifier(IModBit.THICK)
mail_coat.add_modifier(IModBit.HARDENED)
mail_coat.set_weight(4.0)
mail_coat.set_abundance(100)
mail_coat.set_body_armor(14)
mail_coat.set_leg_armor(10)


long_mail_coat = Item("long_mail_coat", "Long_Coat_of_Mail")
long_mail_coat.add_mesh(ItemMesh("nobleman_outf"))
long_mail_coat.add_flag(ItemType.BODY_ARMOR)
long_mail_coat.add_flag(ItemFlag.COVERS_LEGS)
long_mail_coat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
long_mail_coat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
long_mail_coat.add_flag(ItemFlag.IS_CIVILIAN)
long_mail_coat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
long_mail_coat.set_price(348)
long_mail_coat.add_modifier(IModBit.TETTERED)
long_mail_coat.add_modifier(IModBit.RAGGED)
long_mail_coat.add_modifier(IModBit.STURDY)
long_mail_coat.add_modifier(IModBit.THICK)
long_mail_coat.add_modifier(IModBit.HARDENED)
long_mail_coat.set_weight(4.0)
long_mail_coat.set_abundance(100)
long_mail_coat.set_body_armor(14)
long_mail_coat.set_leg_armor(10)


mail_with_tunic_red = Item("mail_with_tunic_red", "Mail_with_Tunic")
mail_with_tunic_red.add_mesh(ItemMesh("arena_armorR_new"))
mail_with_tunic_red.add_flag(ItemType.BODY_ARMOR)
mail_with_tunic_red.add_flag(ItemFlag.COVERS_LEGS)
mail_with_tunic_red.add_flag(ItemFlag.DOESNT_COVER_HAIR)
mail_with_tunic_red.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
mail_with_tunic_red.set_price(650)
mail_with_tunic_red.add_modifier(IModBit.RUSTY)
mail_with_tunic_red.add_modifier(IModBit.BATTERED)
mail_with_tunic_red.add_modifier(IModBit.CRUDE)
mail_with_tunic_red.add_modifier(IModBit.THICK)
mail_with_tunic_red.add_modifier(IModBit.REINFORCED)
mail_with_tunic_red.add_modifier(IModBit.LORDLY)
mail_with_tunic_red.set_weight(16.0)
mail_with_tunic_red.set_abundance(100)
mail_with_tunic_red.set_body_armor(39)
mail_with_tunic_red.set_leg_armor(8)


mail_with_tunic_green = Item("mail_with_tunic_green", "Mail_with_Tunic")
mail_with_tunic_green.add_mesh(ItemMesh("arena_armorG_new"))
mail_with_tunic_green.add_flag(ItemType.BODY_ARMOR)
mail_with_tunic_green.add_flag(ItemFlag.COVERS_LEGS)
mail_with_tunic_green.add_flag(ItemFlag.DOESNT_COVER_HAIR)
mail_with_tunic_green.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
mail_with_tunic_green.set_price(650)
mail_with_tunic_green.add_modifier(IModBit.RUSTY)
mail_with_tunic_green.add_modifier(IModBit.BATTERED)
mail_with_tunic_green.add_modifier(IModBit.CRUDE)
mail_with_tunic_green.add_modifier(IModBit.THICK)
mail_with_tunic_green.add_modifier(IModBit.REINFORCED)
mail_with_tunic_green.add_modifier(IModBit.LORDLY)
mail_with_tunic_green.set_weight(16.0)
mail_with_tunic_green.set_abundance(100)
mail_with_tunic_green.set_body_armor(39)
mail_with_tunic_green.set_leg_armor(8)


hide_coat = Item("hide_coat", "Hide_Coat")
hide_coat.add_mesh(ItemMesh("nobleman_outf"))
hide_coat.add_flag(ItemType.BODY_ARMOR)
hide_coat.add_flag(ItemFlag.COVERS_LEGS)
hide_coat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
hide_coat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
hide_coat.add_flag(ItemFlag.IS_CIVILIAN)
hide_coat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
hide_coat.set_price(348)
hide_coat.add_modifier(IModBit.TETTERED)
hide_coat.add_modifier(IModBit.RAGGED)
hide_coat.add_modifier(IModBit.STURDY)
hide_coat.add_modifier(IModBit.THICK)
hide_coat.add_modifier(IModBit.HARDENED)
hide_coat.set_weight(4.0)
hide_coat.set_abundance(100)
hide_coat.set_body_armor(14)
hide_coat.set_leg_armor(10)


merchant_outfit = Item("merchant_outfit", "Merchant_Outfit")
merchant_outfit.add_mesh(ItemMesh("nobleman_outf"))
merchant_outfit.add_flag(ItemType.BODY_ARMOR)
merchant_outfit.add_flag(ItemFlag.COVERS_LEGS)
merchant_outfit.add_flag(ItemFlag.DOESNT_COVER_HAIR)
merchant_outfit.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
merchant_outfit.add_flag(ItemFlag.IS_CIVILIAN)
merchant_outfit.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
merchant_outfit.set_price(348)
merchant_outfit.add_modifier(IModBit.TETTERED)
merchant_outfit.add_modifier(IModBit.RAGGED)
merchant_outfit.add_modifier(IModBit.STURDY)
merchant_outfit.add_modifier(IModBit.THICK)
merchant_outfit.add_modifier(IModBit.HARDENED)
merchant_outfit.set_weight(4.0)
merchant_outfit.set_abundance(100)
merchant_outfit.set_body_armor(14)
merchant_outfit.set_leg_armor(10)


homespun_dress = Item("homespun_dress", "Homespun_Dress")
homespun_dress.add_mesh(ItemMesh("nobleman_outf"))
homespun_dress.add_flag(ItemType.BODY_ARMOR)
homespun_dress.add_flag(ItemFlag.COVERS_LEGS)
homespun_dress.add_flag(ItemFlag.DOESNT_COVER_HAIR)
homespun_dress.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
homespun_dress.add_flag(ItemFlag.IS_CIVILIAN)
homespun_dress.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
homespun_dress.set_price(348)
homespun_dress.add_modifier(IModBit.TETTERED)
homespun_dress.add_modifier(IModBit.RAGGED)
homespun_dress.add_modifier(IModBit.STURDY)
homespun_dress.add_modifier(IModBit.THICK)
homespun_dress.add_modifier(IModBit.HARDENED)
homespun_dress.set_weight(4.0)
homespun_dress.set_abundance(100)
homespun_dress.set_body_armor(14)
homespun_dress.set_leg_armor(10)


thick_coat = Item("thick_coat", "Thick_Coat")
thick_coat.add_mesh(ItemMesh("nobleman_outf"))
thick_coat.add_flag(ItemType.BODY_ARMOR)
thick_coat.add_flag(ItemFlag.COVERS_LEGS)
thick_coat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
thick_coat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
thick_coat.add_flag(ItemFlag.IS_CIVILIAN)
thick_coat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
thick_coat.set_price(348)
thick_coat.add_modifier(IModBit.TETTERED)
thick_coat.add_modifier(IModBit.RAGGED)
thick_coat.add_modifier(IModBit.STURDY)
thick_coat.add_modifier(IModBit.THICK)
thick_coat.add_modifier(IModBit.HARDENED)
thick_coat.set_weight(4.0)
thick_coat.set_abundance(100)
thick_coat.set_body_armor(14)
thick_coat.set_leg_armor(10)


coat_with_cape = Item("coat_with_cape", "Coat_with_Cape")
coat_with_cape.add_mesh(ItemMesh("nobleman_outf"))
coat_with_cape.add_flag(ItemType.BODY_ARMOR)
coat_with_cape.add_flag(ItemFlag.COVERS_LEGS)
coat_with_cape.add_flag(ItemFlag.DOESNT_COVER_HAIR)
coat_with_cape.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
coat_with_cape.add_flag(ItemFlag.IS_CIVILIAN)
coat_with_cape.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
coat_with_cape.set_price(348)
coat_with_cape.add_modifier(IModBit.TETTERED)
coat_with_cape.add_modifier(IModBit.RAGGED)
coat_with_cape.add_modifier(IModBit.STURDY)
coat_with_cape.add_modifier(IModBit.THICK)
coat_with_cape.add_modifier(IModBit.HARDENED)
coat_with_cape.set_weight(4.0)
coat_with_cape.set_abundance(100)
coat_with_cape.set_body_armor(14)
coat_with_cape.set_leg_armor(10)


steppe_outfit = Item("steppe_outfit", "Steppe_Outfit")
steppe_outfit.add_mesh(ItemMesh("nobleman_outf"))
steppe_outfit.add_flag(ItemType.BODY_ARMOR)
steppe_outfit.add_flag(ItemFlag.COVERS_LEGS)
steppe_outfit.add_flag(ItemFlag.DOESNT_COVER_HAIR)
steppe_outfit.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
steppe_outfit.add_flag(ItemFlag.IS_CIVILIAN)
steppe_outfit.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
steppe_outfit.set_price(348)
steppe_outfit.add_modifier(IModBit.TETTERED)
steppe_outfit.add_modifier(IModBit.RAGGED)
steppe_outfit.add_modifier(IModBit.STURDY)
steppe_outfit.add_modifier(IModBit.THICK)
steppe_outfit.add_modifier(IModBit.HARDENED)
steppe_outfit.set_weight(4.0)
steppe_outfit.set_abundance(100)
steppe_outfit.set_body_armor(14)
steppe_outfit.set_leg_armor(10)


nordic_outfit = Item("nordic_outfit", "Nordic_Outfit")
nordic_outfit.add_mesh(ItemMesh("nobleman_outf"))
nordic_outfit.add_flag(ItemType.BODY_ARMOR)
nordic_outfit.add_flag(ItemFlag.COVERS_LEGS)
nordic_outfit.add_flag(ItemFlag.DOESNT_COVER_HAIR)
nordic_outfit.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
nordic_outfit.add_flag(ItemFlag.IS_CIVILIAN)
nordic_outfit.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
nordic_outfit.set_price(348)
nordic_outfit.add_modifier(IModBit.TETTERED)
nordic_outfit.add_modifier(IModBit.RAGGED)
nordic_outfit.add_modifier(IModBit.STURDY)
nordic_outfit.add_modifier(IModBit.THICK)
nordic_outfit.add_modifier(IModBit.HARDENED)
nordic_outfit.set_weight(4.0)
nordic_outfit.set_abundance(100)
nordic_outfit.set_body_armor(14)
nordic_outfit.set_leg_armor(10)


nordic_armor = Item("nordic_armor", "Nordic_Armor")
nordic_armor.add_mesh(ItemMesh("nobleman_outf"))
nordic_armor.add_flag(ItemType.BODY_ARMOR)
nordic_armor.add_flag(ItemFlag.COVERS_LEGS)
nordic_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
nordic_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
nordic_armor.add_flag(ItemFlag.IS_CIVILIAN)
nordic_armor.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
nordic_armor.set_price(348)
nordic_armor.add_modifier(IModBit.TETTERED)
nordic_armor.add_modifier(IModBit.RAGGED)
nordic_armor.add_modifier(IModBit.STURDY)
nordic_armor.add_modifier(IModBit.THICK)
nordic_armor.add_modifier(IModBit.HARDENED)
nordic_armor.set_weight(4.0)
nordic_armor.set_abundance(100)
nordic_armor.set_body_armor(14)
nordic_armor.set_leg_armor(10)


hide_armor = Item("hide_armor", "Hide_Armor")
hide_armor.add_mesh(ItemMesh("nobleman_outf"))
hide_armor.add_flag(ItemType.BODY_ARMOR)
hide_armor.add_flag(ItemFlag.COVERS_LEGS)
hide_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
hide_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
hide_armor.add_flag(ItemFlag.IS_CIVILIAN)
hide_armor.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
hide_armor.set_price(348)
hide_armor.add_modifier(IModBit.TETTERED)
hide_armor.add_modifier(IModBit.RAGGED)
hide_armor.add_modifier(IModBit.STURDY)
hide_armor.add_modifier(IModBit.THICK)
hide_armor.add_modifier(IModBit.HARDENED)
hide_armor.set_weight(4.0)
hide_armor.set_abundance(100)
hide_armor.set_body_armor(14)
hide_armor.set_leg_armor(10)


cloaked_tunic = Item("cloaked_tunic", "Cloaked_Tunic")
cloaked_tunic.add_mesh(ItemMesh("nobleman_outf"))
cloaked_tunic.add_flag(ItemType.BODY_ARMOR)
cloaked_tunic.add_flag(ItemFlag.COVERS_LEGS)
cloaked_tunic.add_flag(ItemFlag.DOESNT_COVER_HAIR)
cloaked_tunic.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
cloaked_tunic.add_flag(ItemFlag.IS_CIVILIAN)
cloaked_tunic.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
cloaked_tunic.set_price(348)
cloaked_tunic.add_modifier(IModBit.TETTERED)
cloaked_tunic.add_modifier(IModBit.RAGGED)
cloaked_tunic.add_modifier(IModBit.STURDY)
cloaked_tunic.add_modifier(IModBit.THICK)
cloaked_tunic.add_modifier(IModBit.HARDENED)
cloaked_tunic.set_weight(4.0)
cloaked_tunic.set_abundance(100)
cloaked_tunic.set_body_armor(14)
cloaked_tunic.set_leg_armor(10)


sleeveless_tunic = Item("sleeveless_tunic", "Sleeveless_Tunic")
sleeveless_tunic.add_mesh(ItemMesh("nobleman_outf"))
sleeveless_tunic.add_flag(ItemType.BODY_ARMOR)
sleeveless_tunic.add_flag(ItemFlag.COVERS_LEGS)
sleeveless_tunic.add_flag(ItemFlag.DOESNT_COVER_HAIR)
sleeveless_tunic.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
sleeveless_tunic.add_flag(ItemFlag.IS_CIVILIAN)
sleeveless_tunic.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
sleeveless_tunic.set_price(348)
sleeveless_tunic.add_modifier(IModBit.TETTERED)
sleeveless_tunic.add_modifier(IModBit.RAGGED)
sleeveless_tunic.add_modifier(IModBit.STURDY)
sleeveless_tunic.add_modifier(IModBit.THICK)
sleeveless_tunic.add_modifier(IModBit.HARDENED)
sleeveless_tunic.set_weight(4.0)
sleeveless_tunic.set_abundance(100)
sleeveless_tunic.set_body_armor(14)
sleeveless_tunic.set_leg_armor(10)


sleeveless_leather_tunic = Item("sleeveless_leather_tunic", "Sleeveless_Leather_Tunic")
sleeveless_leather_tunic.add_mesh(ItemMesh("nobleman_outf"))
sleeveless_leather_tunic.add_flag(ItemType.BODY_ARMOR)
sleeveless_leather_tunic.add_flag(ItemFlag.COVERS_LEGS)
sleeveless_leather_tunic.add_flag(ItemFlag.DOESNT_COVER_HAIR)
sleeveless_leather_tunic.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
sleeveless_leather_tunic.add_flag(ItemFlag.IS_CIVILIAN)
sleeveless_leather_tunic.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
sleeveless_leather_tunic.set_price(348)
sleeveless_leather_tunic.add_modifier(IModBit.TETTERED)
sleeveless_leather_tunic.add_modifier(IModBit.RAGGED)
sleeveless_leather_tunic.add_modifier(IModBit.STURDY)
sleeveless_leather_tunic.add_modifier(IModBit.THICK)
sleeveless_leather_tunic.add_modifier(IModBit.HARDENED)
sleeveless_leather_tunic.set_weight(4.0)
sleeveless_leather_tunic.set_abundance(100)
sleeveless_leather_tunic.set_body_armor(14)
sleeveless_leather_tunic.set_leg_armor(10)


linen_shirt = Item("linen_shirt", "Linen_Shirt")
linen_shirt.add_mesh(ItemMesh("nobleman_outf"))
linen_shirt.add_flag(ItemType.BODY_ARMOR)
linen_shirt.add_flag(ItemFlag.COVERS_LEGS)
linen_shirt.add_flag(ItemFlag.DOESNT_COVER_HAIR)
linen_shirt.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
linen_shirt.add_flag(ItemFlag.IS_CIVILIAN)
linen_shirt.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
linen_shirt.set_price(348)
linen_shirt.add_modifier(IModBit.TETTERED)
linen_shirt.add_modifier(IModBit.RAGGED)
linen_shirt.add_modifier(IModBit.STURDY)
linen_shirt.add_modifier(IModBit.THICK)
linen_shirt.add_modifier(IModBit.HARDENED)
linen_shirt.set_weight(4.0)
linen_shirt.set_abundance(100)
linen_shirt.set_body_armor(14)
linen_shirt.set_leg_armor(10)


wool_coat = Item("wool_coat", "Wool_Coat")
wool_coat.add_mesh(ItemMesh("nobleman_outf"))
wool_coat.add_flag(ItemType.BODY_ARMOR)
wool_coat.add_flag(ItemFlag.COVERS_LEGS)
wool_coat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
wool_coat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
wool_coat.add_flag(ItemFlag.IS_CIVILIAN)
wool_coat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
wool_coat.set_price(348)
wool_coat.add_modifier(IModBit.TETTERED)
wool_coat.add_modifier(IModBit.RAGGED)
wool_coat.add_modifier(IModBit.STURDY)
wool_coat.add_modifier(IModBit.THICK)
wool_coat.add_modifier(IModBit.HARDENED)
wool_coat.set_weight(4.0)
wool_coat.set_abundance(100)
wool_coat.set_body_armor(14)
wool_coat.set_leg_armor(10)


dress = Item("dress", "Dress")
dress.add_mesh(ItemMesh("dress"))
dress.add_flag(ItemType.BODY_ARMOR)
dress.add_flag(ItemFlag.IS_MERCHANDISE)
dress.add_flag(ItemFlag.COVERS_LEGS)
dress.add_flag(ItemFlag.DOESNT_COVER_HAIR)
dress.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
dress.add_flag(ItemFlag.IS_CIVILIAN)
dress.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
dress.set_price(6)
dress.add_modifier(IModBit.TETTERED)
dress.add_modifier(IModBit.RAGGED)
dress.add_modifier(IModBit.STURDY)
dress.add_modifier(IModBit.THICK)
dress.add_modifier(IModBit.HARDENED)
dress.set_weight(1.0)
dress.set_abundance(100)
dress.set_body_armor(6)
dress.set_leg_armor(2)


blue_dress = Item("blue_dress", "Blue_Dress")
blue_dress.add_mesh(ItemMesh("blue_dress_new"))
blue_dress.add_flag(ItemType.BODY_ARMOR)
blue_dress.add_flag(ItemFlag.IS_MERCHANDISE)
blue_dress.add_flag(ItemFlag.COVERS_LEGS)
blue_dress.add_flag(ItemFlag.DOESNT_COVER_HAIR)
blue_dress.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
blue_dress.add_flag(ItemFlag.IS_CIVILIAN)
blue_dress.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
blue_dress.set_price(6)
blue_dress.add_modifier(IModBit.TETTERED)
blue_dress.add_modifier(IModBit.RAGGED)
blue_dress.add_modifier(IModBit.STURDY)
blue_dress.add_modifier(IModBit.THICK)
blue_dress.add_modifier(IModBit.HARDENED)
blue_dress.set_weight(1.0)
blue_dress.set_abundance(100)
blue_dress.set_body_armor(6)
blue_dress.set_leg_armor(2)


peasant_dress = Item("peasant_dress", "Peasant_Dress")
peasant_dress.add_mesh(ItemMesh("peasant_dress_b_new"))
peasant_dress.add_flag(ItemType.BODY_ARMOR)
peasant_dress.add_flag(ItemFlag.IS_MERCHANDISE)
peasant_dress.add_flag(ItemFlag.COVERS_LEGS)
peasant_dress.add_flag(ItemFlag.DOESNT_COVER_HAIR)
peasant_dress.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
peasant_dress.add_flag(ItemFlag.IS_CIVILIAN)
peasant_dress.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
peasant_dress.set_price(6)
peasant_dress.add_modifier(IModBit.TETTERED)
peasant_dress.add_modifier(IModBit.RAGGED)
peasant_dress.add_modifier(IModBit.STURDY)
peasant_dress.add_modifier(IModBit.THICK)
peasant_dress.add_modifier(IModBit.HARDENED)
peasant_dress.set_weight(1.0)
peasant_dress.set_abundance(100)
peasant_dress.set_body_armor(6)
peasant_dress.set_leg_armor(2)


woolen_dress = Item("woolen_dress", "Woolen_Dress")
woolen_dress.add_mesh(ItemMesh("woolen_dress"))
woolen_dress.add_flag(ItemType.BODY_ARMOR)
woolen_dress.add_flag(ItemFlag.IS_MERCHANDISE)
woolen_dress.add_flag(ItemFlag.COVERS_LEGS)
woolen_dress.add_flag(ItemFlag.DOESNT_COVER_HAIR)
woolen_dress.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
woolen_dress.add_flag(ItemFlag.IS_CIVILIAN)
woolen_dress.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
woolen_dress.set_price(10)
woolen_dress.add_modifier(IModBit.TETTERED)
woolen_dress.add_modifier(IModBit.RAGGED)
woolen_dress.add_modifier(IModBit.STURDY)
woolen_dress.add_modifier(IModBit.THICK)
woolen_dress.add_modifier(IModBit.HARDENED)
woolen_dress.set_weight(1.75)
woolen_dress.set_abundance(100)
woolen_dress.set_body_armor(8)
woolen_dress.set_leg_armor(2)


shirt = Item("shirt", "Shirt")
shirt.add_mesh(ItemMesh("shirt"))
shirt.add_flag(ItemType.BODY_ARMOR)
shirt.add_flag(ItemFlag.IS_MERCHANDISE)
shirt.add_flag(ItemFlag.COVERS_LEGS)
shirt.add_flag(ItemFlag.DOESNT_COVER_HAIR)
shirt.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
shirt.add_flag(ItemFlag.IS_CIVILIAN)
shirt.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
shirt.set_price(3)
shirt.add_modifier(IModBit.TETTERED)
shirt.add_modifier(IModBit.RAGGED)
shirt.add_modifier(IModBit.STURDY)
shirt.add_modifier(IModBit.THICK)
shirt.add_modifier(IModBit.HARDENED)
shirt.set_weight(1.0)
shirt.set_abundance(100)
shirt.set_body_armor(5)


linen_tunic = Item("linen_tunic", "Linen_Tunic")
linen_tunic.add_mesh(ItemMesh("shirt_a"))
linen_tunic.add_flag(ItemType.BODY_ARMOR)
linen_tunic.add_flag(ItemFlag.IS_MERCHANDISE)
linen_tunic.add_flag(ItemFlag.COVERS_LEGS)
linen_tunic.add_flag(ItemFlag.DOESNT_COVER_HAIR)
linen_tunic.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
linen_tunic.add_flag(ItemFlag.IS_CIVILIAN)
linen_tunic.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
linen_tunic.set_price(6)
linen_tunic.add_modifier(IModBit.TETTERED)
linen_tunic.add_modifier(IModBit.RAGGED)
linen_tunic.add_modifier(IModBit.STURDY)
linen_tunic.add_modifier(IModBit.THICK)
linen_tunic.add_modifier(IModBit.HARDENED)
linen_tunic.set_weight(1.0)
linen_tunic.set_abundance(100)
linen_tunic.set_body_armor(6)
linen_tunic.set_leg_armor(1)


short_tunic = Item("short_tunic", "Red_Tunic")
short_tunic.add_mesh(ItemMesh("rich_tunic_a"))
short_tunic.add_flag(ItemType.BODY_ARMOR)
short_tunic.add_flag(ItemFlag.COVERS_LEGS)
short_tunic.add_flag(ItemFlag.DOESNT_COVER_HAIR)
short_tunic.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
short_tunic.add_flag(ItemFlag.IS_CIVILIAN)
short_tunic.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
short_tunic.set_price(10)
short_tunic.add_modifier(IModBit.TETTERED)
short_tunic.add_modifier(IModBit.RAGGED)
short_tunic.add_modifier(IModBit.STURDY)
short_tunic.add_modifier(IModBit.THICK)
short_tunic.add_modifier(IModBit.HARDENED)
short_tunic.set_weight(1.0)
short_tunic.set_abundance(100)
short_tunic.set_body_armor(7)
short_tunic.set_leg_armor(1)


red_shirt = Item("red_shirt", "Red_Shirt")
red_shirt.add_mesh(ItemMesh("rich_tunic_a"))
red_shirt.add_flag(ItemType.BODY_ARMOR)
red_shirt.add_flag(ItemFlag.IS_MERCHANDISE)
red_shirt.add_flag(ItemFlag.COVERS_LEGS)
red_shirt.add_flag(ItemFlag.DOESNT_COVER_HAIR)
red_shirt.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
red_shirt.add_flag(ItemFlag.IS_CIVILIAN)
red_shirt.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
red_shirt.set_price(10)
red_shirt.add_modifier(IModBit.TETTERED)
red_shirt.add_modifier(IModBit.RAGGED)
red_shirt.add_modifier(IModBit.STURDY)
red_shirt.add_modifier(IModBit.THICK)
red_shirt.add_modifier(IModBit.HARDENED)
red_shirt.set_weight(1.0)
red_shirt.set_abundance(100)
red_shirt.set_body_armor(7)
red_shirt.set_leg_armor(1)


red_tunic = Item("red_tunic", "Red_Tunic")
red_tunic.add_mesh(ItemMesh("arena_tunicR_new"))
red_tunic.add_flag(ItemType.BODY_ARMOR)
red_tunic.add_flag(ItemFlag.IS_MERCHANDISE)
red_tunic.add_flag(ItemFlag.COVERS_LEGS)
red_tunic.add_flag(ItemFlag.DOESNT_COVER_HAIR)
red_tunic.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
red_tunic.add_flag(ItemFlag.IS_CIVILIAN)
red_tunic.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
red_tunic.set_price(10)
red_tunic.add_modifier(IModBit.TETTERED)
red_tunic.add_modifier(IModBit.RAGGED)
red_tunic.add_modifier(IModBit.STURDY)
red_tunic.add_modifier(IModBit.THICK)
red_tunic.add_modifier(IModBit.HARDENED)
red_tunic.set_weight(1.0)
red_tunic.set_abundance(100)
red_tunic.set_body_armor(7)
red_tunic.set_leg_armor(1)


green_tunic = Item("green_tunic", "Green_Tunic")
green_tunic.add_mesh(ItemMesh("arena_tunicG_new"))
green_tunic.add_flag(ItemType.BODY_ARMOR)
green_tunic.add_flag(ItemFlag.IS_MERCHANDISE)
green_tunic.add_flag(ItemFlag.COVERS_LEGS)
green_tunic.add_flag(ItemFlag.DOESNT_COVER_HAIR)
green_tunic.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
green_tunic.add_flag(ItemFlag.IS_CIVILIAN)
green_tunic.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
green_tunic.set_price(10)
green_tunic.add_modifier(IModBit.TETTERED)
green_tunic.add_modifier(IModBit.RAGGED)
green_tunic.add_modifier(IModBit.STURDY)
green_tunic.add_modifier(IModBit.THICK)
green_tunic.add_modifier(IModBit.HARDENED)
green_tunic.set_weight(1.0)
green_tunic.set_abundance(100)
green_tunic.set_body_armor(7)
green_tunic.set_leg_armor(1)


blue_tunic = Item("blue_tunic", "Blue_Tunic")
blue_tunic.add_mesh(ItemMesh("arena_tunicB_new"))
blue_tunic.add_flag(ItemType.BODY_ARMOR)
blue_tunic.add_flag(ItemFlag.IS_MERCHANDISE)
blue_tunic.add_flag(ItemFlag.COVERS_LEGS)
blue_tunic.add_flag(ItemFlag.DOESNT_COVER_HAIR)
blue_tunic.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
blue_tunic.add_flag(ItemFlag.IS_CIVILIAN)
blue_tunic.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
blue_tunic.set_price(10)
blue_tunic.add_modifier(IModBit.TETTERED)
blue_tunic.add_modifier(IModBit.RAGGED)
blue_tunic.add_modifier(IModBit.STURDY)
blue_tunic.add_modifier(IModBit.THICK)
blue_tunic.add_modifier(IModBit.HARDENED)
blue_tunic.set_weight(1.0)
blue_tunic.set_abundance(100)
blue_tunic.set_body_armor(7)
blue_tunic.set_leg_armor(1)


robe = Item("robe", "Robe")
robe.add_mesh(ItemMesh("robe"))
robe.add_flag(ItemType.BODY_ARMOR)
robe.add_flag(ItemFlag.IS_MERCHANDISE)
robe.add_flag(ItemFlag.COVERS_LEGS)
robe.add_flag(ItemFlag.DOESNT_COVER_HAIR)
robe.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
robe.add_flag(ItemFlag.IS_CIVILIAN)
robe.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
robe.set_price(31)
robe.add_modifier(IModBit.TETTERED)
robe.add_modifier(IModBit.RAGGED)
robe.add_modifier(IModBit.STURDY)
robe.add_modifier(IModBit.THICK)
robe.add_modifier(IModBit.HARDENED)
robe.set_weight(1.5)
robe.set_abundance(100)
robe.set_body_armor(8)
robe.set_leg_armor(6)


coarse_tunic = Item("coarse_tunic", "Tunic_with_vest")
coarse_tunic.add_mesh(ItemMesh("coarse_tunic_a"))
coarse_tunic.add_flag(ItemType.BODY_ARMOR)
coarse_tunic.add_flag(ItemFlag.IS_MERCHANDISE)
coarse_tunic.add_flag(ItemFlag.COVERS_LEGS)
coarse_tunic.add_flag(ItemFlag.DOESNT_COVER_HAIR)
coarse_tunic.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
coarse_tunic.add_flag(ItemFlag.IS_CIVILIAN)
coarse_tunic.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
coarse_tunic.set_price(47)
coarse_tunic.add_modifier(IModBit.TETTERED)
coarse_tunic.add_modifier(IModBit.RAGGED)
coarse_tunic.add_modifier(IModBit.STURDY)
coarse_tunic.add_modifier(IModBit.THICK)
coarse_tunic.add_modifier(IModBit.HARDENED)
coarse_tunic.set_weight(2.0)
coarse_tunic.set_abundance(100)
coarse_tunic.set_body_armor(11)
coarse_tunic.set_leg_armor(6)


leather_apron = Item("leather_apron", "Leather_Apron")
leather_apron.add_mesh(ItemMesh("leather_apron"))
leather_apron.add_flag(ItemType.BODY_ARMOR)
leather_apron.add_flag(ItemFlag.IS_MERCHANDISE)
leather_apron.add_flag(ItemFlag.COVERS_LEGS)
leather_apron.add_flag(ItemFlag.DOESNT_COVER_HAIR)
leather_apron.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
leather_apron.add_flag(ItemFlag.IS_CIVILIAN)
leather_apron.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
leather_apron.set_price(61)
leather_apron.add_modifier(IModBit.TETTERED)
leather_apron.add_modifier(IModBit.RAGGED)
leather_apron.add_modifier(IModBit.STURDY)
leather_apron.add_modifier(IModBit.THICK)
leather_apron.add_modifier(IModBit.HARDENED)
leather_apron.set_weight(3.0)
leather_apron.set_abundance(100)
leather_apron.set_body_armor(12)
leather_apron.set_leg_armor(7)


tabard = Item("tabard", "Tabard")
tabard.add_mesh(ItemMesh("tabard_b"))
tabard.add_flag(ItemType.BODY_ARMOR)
tabard.add_flag(ItemFlag.IS_MERCHANDISE)
tabard.add_flag(ItemFlag.COVERS_LEGS)
tabard.add_flag(ItemFlag.DOESNT_COVER_HAIR)
tabard.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
tabard.add_flag(ItemFlag.IS_CIVILIAN)
tabard.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
tabard.set_price(107)
tabard.add_modifier(IModBit.TETTERED)
tabard.add_modifier(IModBit.RAGGED)
tabard.add_modifier(IModBit.STURDY)
tabard.add_modifier(IModBit.THICK)
tabard.add_modifier(IModBit.HARDENED)
tabard.set_weight(3.0)
tabard.set_abundance(100)
tabard.set_body_armor(14)
tabard.set_leg_armor(6)


leather_vest = Item("leather_vest", "Leather_Vest")
leather_vest.add_mesh(ItemMesh("leather_vest_a"))
leather_vest.add_flag(ItemType.BODY_ARMOR)
leather_vest.add_flag(ItemFlag.IS_MERCHANDISE)
leather_vest.add_flag(ItemFlag.COVERS_LEGS)
leather_vest.add_flag(ItemFlag.DOESNT_COVER_HAIR)
leather_vest.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
leather_vest.add_flag(ItemFlag.IS_CIVILIAN)
leather_vest.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
leather_vest.set_price(146)
leather_vest.add_modifier(IModBit.TETTERED)
leather_vest.add_modifier(IModBit.RAGGED)
leather_vest.add_modifier(IModBit.STURDY)
leather_vest.add_modifier(IModBit.THICK)
leather_vest.add_modifier(IModBit.HARDENED)
leather_vest.set_weight(4.0)
leather_vest.set_abundance(100)
leather_vest.set_body_armor(15)
leather_vest.set_leg_armor(7)


steppe_armor = Item("steppe_armor", "Steppe_Armor")
steppe_armor.add_mesh(ItemMesh("lamellar_leather"))
steppe_armor.add_flag(ItemType.BODY_ARMOR)
steppe_armor.add_flag(ItemFlag.IS_MERCHANDISE)
steppe_armor.add_flag(ItemFlag.COVERS_LEGS)
steppe_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
steppe_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
steppe_armor.set_price(195)
steppe_armor.add_modifier(IModBit.TETTERED)
steppe_armor.add_modifier(IModBit.RAGGED)
steppe_armor.add_modifier(IModBit.STURDY)
steppe_armor.add_modifier(IModBit.THICK)
steppe_armor.add_modifier(IModBit.HARDENED)
steppe_armor.set_weight(5.0)
steppe_armor.set_abundance(100)
steppe_armor.set_body_armor(16)
steppe_armor.set_leg_armor(8)


gambeson = Item("gambeson", "Gambeson")
gambeson.add_mesh(ItemMesh("white_gambeson"))
gambeson.add_flag(ItemType.BODY_ARMOR)
gambeson.add_flag(ItemFlag.IS_MERCHANDISE)
gambeson.add_flag(ItemFlag.COVERS_LEGS)
gambeson.add_flag(ItemFlag.DOESNT_COVER_HAIR)
gambeson.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
gambeson.add_flag(ItemFlag.IS_CIVILIAN)
gambeson.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
gambeson.set_price(260)
gambeson.add_modifier(IModBit.TETTERED)
gambeson.add_modifier(IModBit.RAGGED)
gambeson.add_modifier(IModBit.STURDY)
gambeson.add_modifier(IModBit.THICK)
gambeson.add_modifier(IModBit.HARDENED)
gambeson.set_weight(5.0)
gambeson.set_abundance(100)
gambeson.set_body_armor(20)
gambeson.set_leg_armor(5)


blue_gambeson = Item("blue_gambeson", "Blue_Gambeson")
blue_gambeson.add_mesh(ItemMesh("blue_gambeson"))
blue_gambeson.add_flag(ItemType.BODY_ARMOR)
blue_gambeson.add_flag(ItemFlag.IS_MERCHANDISE)
blue_gambeson.add_flag(ItemFlag.COVERS_LEGS)
blue_gambeson.add_flag(ItemFlag.DOESNT_COVER_HAIR)
blue_gambeson.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
blue_gambeson.add_flag(ItemFlag.IS_CIVILIAN)
blue_gambeson.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
blue_gambeson.set_price(270)
blue_gambeson.add_modifier(IModBit.TETTERED)
blue_gambeson.add_modifier(IModBit.RAGGED)
blue_gambeson.add_modifier(IModBit.STURDY)
blue_gambeson.add_modifier(IModBit.THICK)
blue_gambeson.add_modifier(IModBit.HARDENED)
blue_gambeson.set_weight(5.0)
blue_gambeson.set_abundance(100)
blue_gambeson.set_body_armor(21)
blue_gambeson.set_leg_armor(5)


red_gambeson = Item("red_gambeson", "Red_Gambeson")
red_gambeson.add_mesh(ItemMesh("red_gambeson_a"))
red_gambeson.add_flag(ItemType.BODY_ARMOR)
red_gambeson.add_flag(ItemFlag.IS_MERCHANDISE)
red_gambeson.add_flag(ItemFlag.COVERS_LEGS)
red_gambeson.add_flag(ItemFlag.DOESNT_COVER_HAIR)
red_gambeson.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
red_gambeson.add_flag(ItemFlag.IS_CIVILIAN)
red_gambeson.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
red_gambeson.set_price(275)
red_gambeson.add_modifier(IModBit.TETTERED)
red_gambeson.add_modifier(IModBit.RAGGED)
red_gambeson.add_modifier(IModBit.STURDY)
red_gambeson.add_modifier(IModBit.THICK)
red_gambeson.add_modifier(IModBit.HARDENED)
red_gambeson.set_weight(5.0)
red_gambeson.set_abundance(100)
red_gambeson.set_body_armor(21)
red_gambeson.set_leg_armor(5)


padded_cloth = Item("padded_cloth", "Aketon")
padded_cloth.add_mesh(ItemMesh("padded_cloth_a"))
padded_cloth.add_flag(ItemType.BODY_ARMOR)
padded_cloth.add_flag(ItemFlag.IS_MERCHANDISE)
padded_cloth.add_flag(ItemFlag.COVERS_LEGS)
padded_cloth.add_flag(ItemFlag.DOESNT_COVER_HAIR)
padded_cloth.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
padded_cloth.set_price(297)
padded_cloth.add_modifier(IModBit.TETTERED)
padded_cloth.add_modifier(IModBit.RAGGED)
padded_cloth.add_modifier(IModBit.STURDY)
padded_cloth.add_modifier(IModBit.THICK)
padded_cloth.add_modifier(IModBit.HARDENED)
padded_cloth.set_weight(11.0)
padded_cloth.set_abundance(100)
padded_cloth.set_body_armor(22)
padded_cloth.set_leg_armor(6)


aketon_green = Item("aketon_green", "Padded_Cloth")
aketon_green.add_mesh(ItemMesh("padded_cloth_b"))
aketon_green.add_flag(ItemType.BODY_ARMOR)
aketon_green.add_flag(ItemFlag.IS_MERCHANDISE)
aketon_green.add_flag(ItemFlag.COVERS_LEGS)
aketon_green.add_flag(ItemFlag.DOESNT_COVER_HAIR)
aketon_green.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
aketon_green.set_price(297)
aketon_green.add_modifier(IModBit.TETTERED)
aketon_green.add_modifier(IModBit.RAGGED)
aketon_green.add_modifier(IModBit.STURDY)
aketon_green.add_modifier(IModBit.THICK)
aketon_green.add_modifier(IModBit.HARDENED)
aketon_green.set_weight(11.0)
aketon_green.set_abundance(100)
aketon_green.set_body_armor(22)
aketon_green.set_leg_armor(6)


leather_jerkin = Item("leather_jerkin", "Leather_Jerkin")
leather_jerkin.add_mesh(ItemMesh("ragged_leather_jerkin"))
leather_jerkin.add_flag(ItemType.BODY_ARMOR)
leather_jerkin.add_flag(ItemFlag.IS_MERCHANDISE)
leather_jerkin.add_flag(ItemFlag.COVERS_LEGS)
leather_jerkin.add_flag(ItemFlag.DOESNT_COVER_HAIR)
leather_jerkin.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
leather_jerkin.add_flag(ItemFlag.IS_CIVILIAN)
leather_jerkin.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
leather_jerkin.set_price(321)
leather_jerkin.add_modifier(IModBit.TETTERED)
leather_jerkin.add_modifier(IModBit.RAGGED)
leather_jerkin.add_modifier(IModBit.STURDY)
leather_jerkin.add_modifier(IModBit.THICK)
leather_jerkin.add_modifier(IModBit.HARDENED)
leather_jerkin.set_weight(6.0)
leather_jerkin.set_abundance(100)
leather_jerkin.set_body_armor(23)
leather_jerkin.set_leg_armor(6)


nomad_vest = Item("nomad_vest", "Nomad_Vest")
nomad_vest.add_mesh(ItemMesh("nomad_vest_new"))
nomad_vest.add_flag(ItemType.BODY_ARMOR)
nomad_vest.add_flag(ItemFlag.IS_MERCHANDISE)
nomad_vest.add_flag(ItemFlag.COVERS_LEGS)
nomad_vest.add_flag(ItemFlag.DOESNT_COVER_HAIR)
nomad_vest.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
nomad_vest.add_flag(ItemFlag.IS_CIVILIAN)
nomad_vest.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
nomad_vest.set_price(360)
nomad_vest.add_modifier(IModBit.TETTERED)
nomad_vest.add_modifier(IModBit.RAGGED)
nomad_vest.add_modifier(IModBit.STURDY)
nomad_vest.add_modifier(IModBit.THICK)
nomad_vest.add_modifier(IModBit.HARDENED)
nomad_vest.set_weight(7.0)
nomad_vest.set_abundance(50)
nomad_vest.set_body_armor(22)
nomad_vest.set_leg_armor(8)


ragged_outfit = Item("ragged_outfit", "Ragged_Outfit")
ragged_outfit.add_mesh(ItemMesh("ragged_outfit_a_new"))
ragged_outfit.add_flag(ItemType.BODY_ARMOR)
ragged_outfit.add_flag(ItemFlag.IS_MERCHANDISE)
ragged_outfit.add_flag(ItemFlag.COVERS_LEGS)
ragged_outfit.add_flag(ItemFlag.DOESNT_COVER_HAIR)
ragged_outfit.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
ragged_outfit.add_flag(ItemFlag.IS_CIVILIAN)
ragged_outfit.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
ragged_outfit.set_price(390)
ragged_outfit.add_modifier(IModBit.TETTERED)
ragged_outfit.add_modifier(IModBit.RAGGED)
ragged_outfit.add_modifier(IModBit.STURDY)
ragged_outfit.add_modifier(IModBit.THICK)
ragged_outfit.add_modifier(IModBit.HARDENED)
ragged_outfit.set_weight(7.0)
ragged_outfit.set_abundance(100)
ragged_outfit.set_body_armor(23)
ragged_outfit.set_leg_armor(9)


padded_leather = Item("padded_leather", "Padded_Leather")
padded_leather.add_mesh(ItemMesh("leather_armor_b"))
padded_leather.add_flag(ItemType.BODY_ARMOR)
padded_leather.add_flag(ItemFlag.IS_MERCHANDISE)
padded_leather.add_flag(ItemFlag.COVERS_LEGS)
padded_leather.add_flag(ItemFlag.DOESNT_COVER_HAIR)
padded_leather.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
padded_leather.add_flag(ItemFlag.IS_CIVILIAN)
padded_leather.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
padded_leather.set_price(454)
padded_leather.add_modifier(IModBit.TETTERED)
padded_leather.add_modifier(IModBit.RAGGED)
padded_leather.add_modifier(IModBit.STURDY)
padded_leather.add_modifier(IModBit.THICK)
padded_leather.add_modifier(IModBit.HARDENED)
padded_leather.set_weight(12.0)
padded_leather.set_abundance(100)
padded_leather.set_body_armor(27)
padded_leather.set_leg_armor(10)


tribal_warrior_outfit = Item("tribal_warrior_outfit", "Tribal_Warrior_Outfit")
tribal_warrior_outfit.add_mesh(ItemMesh("tribal_warrior_outfit_a_new"))
tribal_warrior_outfit.add_flag(ItemType.BODY_ARMOR)
tribal_warrior_outfit.add_flag(ItemFlag.IS_MERCHANDISE)
tribal_warrior_outfit.add_flag(ItemFlag.COVERS_LEGS)
tribal_warrior_outfit.add_flag(ItemFlag.DOESNT_COVER_HAIR)
tribal_warrior_outfit.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
tribal_warrior_outfit.add_flag(ItemFlag.IS_CIVILIAN)
tribal_warrior_outfit.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
tribal_warrior_outfit.set_price(520)
tribal_warrior_outfit.add_modifier(IModBit.TETTERED)
tribal_warrior_outfit.add_modifier(IModBit.RAGGED)
tribal_warrior_outfit.add_modifier(IModBit.STURDY)
tribal_warrior_outfit.add_modifier(IModBit.THICK)
tribal_warrior_outfit.add_modifier(IModBit.HARDENED)
tribal_warrior_outfit.set_weight(14.0)
tribal_warrior_outfit.set_abundance(100)
tribal_warrior_outfit.set_body_armor(30)
tribal_warrior_outfit.set_leg_armor(10)


nomad_robe = Item("nomad_robe", "Nomad_Robe")
nomad_robe.add_mesh(ItemMesh("nomad_robe_a"))
nomad_robe.add_flag(ItemType.BODY_ARMOR)
nomad_robe.add_flag(ItemFlag.IS_MERCHANDISE)
nomad_robe.add_flag(ItemFlag.COVERS_LEGS)
nomad_robe.add_flag(ItemFlag.DOESNT_COVER_HAIR)
nomad_robe.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
nomad_robe.add_flag(ItemFlag.IS_CIVILIAN)
nomad_robe.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
nomad_robe.set_price(610)
nomad_robe.add_modifier(IModBit.TETTERED)
nomad_robe.add_modifier(IModBit.RAGGED)
nomad_robe.add_modifier(IModBit.STURDY)
nomad_robe.add_modifier(IModBit.THICK)
nomad_robe.add_modifier(IModBit.HARDENED)
nomad_robe.set_weight(15.0)
nomad_robe.set_abundance(100)
nomad_robe.set_body_armor(32)
nomad_robe.set_leg_armor(10)


studded_leather_coat = Item("studded_leather_coat", "Studded_Leather_Coat")
studded_leather_coat.add_mesh(ItemMesh("leather_armor_a"))
studded_leather_coat.add_flag(ItemType.BODY_ARMOR)
studded_leather_coat.add_flag(ItemFlag.IS_MERCHANDISE)
studded_leather_coat.add_flag(ItemFlag.COVERS_LEGS)
studded_leather_coat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
studded_leather_coat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
studded_leather_coat.set_price(690)
studded_leather_coat.add_modifier(IModBit.RUSTY)
studded_leather_coat.add_modifier(IModBit.BATTERED)
studded_leather_coat.add_modifier(IModBit.CRUDE)
studded_leather_coat.add_modifier(IModBit.THICK)
studded_leather_coat.add_modifier(IModBit.REINFORCED)
studded_leather_coat.add_modifier(IModBit.LORDLY)
studded_leather_coat.set_weight(14.0)
studded_leather_coat.set_abundance(100)
studded_leather_coat.set_body_armor(36)
studded_leather_coat.set_leg_armor(10)
studded_leather_coat.set_difficulty(7)


byrnie = Item("byrnie", "Byrnie")
byrnie.add_mesh(ItemMesh("byrnie_a_new"))
byrnie.add_flag(ItemType.BODY_ARMOR)
byrnie.add_flag(ItemFlag.IS_MERCHANDISE)
byrnie.add_flag(ItemFlag.COVERS_LEGS)
byrnie.add_flag(ItemFlag.DOESNT_COVER_HAIR)
byrnie.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
byrnie.set_price(795)
byrnie.add_modifier(IModBit.RUSTY)
byrnie.add_modifier(IModBit.BATTERED)
byrnie.add_modifier(IModBit.CRUDE)
byrnie.add_modifier(IModBit.THICK)
byrnie.add_modifier(IModBit.REINFORCED)
byrnie.add_modifier(IModBit.LORDLY)
byrnie.set_weight(17.0)
byrnie.set_abundance(100)
byrnie.set_body_armor(39)
byrnie.set_leg_armor(6)
byrnie.set_difficulty(7)


haubergeon = Item("haubergeon", "Haubergeon")
haubergeon.add_mesh(ItemMesh("haubergeon_c"))
haubergeon.add_flag(ItemType.BODY_ARMOR)
haubergeon.add_flag(ItemFlag.IS_MERCHANDISE)
haubergeon.add_flag(ItemFlag.COVERS_LEGS)
haubergeon.add_flag(ItemFlag.DOESNT_COVER_HAIR)
haubergeon.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
haubergeon.set_price(863)
haubergeon.add_modifier(IModBit.RUSTY)
haubergeon.add_modifier(IModBit.BATTERED)
haubergeon.add_modifier(IModBit.CRUDE)
haubergeon.add_modifier(IModBit.THICK)
haubergeon.add_modifier(IModBit.REINFORCED)
haubergeon.add_modifier(IModBit.LORDLY)
haubergeon.set_weight(18.0)
haubergeon.set_abundance(100)
haubergeon.set_body_armor(41)
haubergeon.set_leg_armor(6)
haubergeon.set_difficulty(6)


lamellar_vest = Item("lamellar_vest", "Lamellar_Vest")
lamellar_vest.add_mesh(ItemMesh("lamellar_vest_a"))
lamellar_vest.add_flag(ItemType.BODY_ARMOR)
lamellar_vest.add_flag(ItemFlag.IS_MERCHANDISE)
lamellar_vest.add_flag(ItemFlag.COVERS_LEGS)
lamellar_vest.add_flag(ItemFlag.DOESNT_COVER_HAIR)
lamellar_vest.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
lamellar_vest.add_flag(ItemFlag.IS_CIVILIAN)
lamellar_vest.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
lamellar_vest.set_price(970)
lamellar_vest.add_modifier(IModBit.TETTERED)
lamellar_vest.add_modifier(IModBit.RAGGED)
lamellar_vest.add_modifier(IModBit.STURDY)
lamellar_vest.add_modifier(IModBit.THICK)
lamellar_vest.add_modifier(IModBit.HARDENED)
lamellar_vest.set_weight(18.0)
lamellar_vest.set_abundance(100)
lamellar_vest.set_body_armor(40)
lamellar_vest.set_leg_armor(8)
lamellar_vest.set_difficulty(7)


lamellar_vest_khergit = Item("lamellar_vest_khergit", "Khergit_Lamellar_Vest")
lamellar_vest_khergit.add_mesh(ItemMesh("lamellar_vest_b"))
lamellar_vest_khergit.add_flag(ItemType.BODY_ARMOR)
lamellar_vest_khergit.add_flag(ItemFlag.IS_MERCHANDISE)
lamellar_vest_khergit.add_flag(ItemFlag.COVERS_LEGS)
lamellar_vest_khergit.add_flag(ItemFlag.DOESNT_COVER_HAIR)
lamellar_vest_khergit.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
lamellar_vest_khergit.add_flag(ItemFlag.IS_CIVILIAN)
lamellar_vest_khergit.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
lamellar_vest_khergit.set_price(970)
lamellar_vest_khergit.add_modifier(IModBit.TETTERED)
lamellar_vest_khergit.add_modifier(IModBit.RAGGED)
lamellar_vest_khergit.add_modifier(IModBit.STURDY)
lamellar_vest_khergit.add_modifier(IModBit.THICK)
lamellar_vest_khergit.add_modifier(IModBit.HARDENED)
lamellar_vest_khergit.set_weight(18.0)
lamellar_vest_khergit.set_abundance(100)
lamellar_vest_khergit.set_body_armor(40)
lamellar_vest_khergit.set_leg_armor(8)
lamellar_vest_khergit.set_difficulty(7)


mail_shirt = Item("mail_shirt", "Mail_Shirt")
mail_shirt.add_mesh(ItemMesh("mail_shirt_a"))
mail_shirt.add_flag(ItemType.BODY_ARMOR)
mail_shirt.add_flag(ItemFlag.IS_MERCHANDISE)
mail_shirt.add_flag(ItemFlag.COVERS_LEGS)
mail_shirt.add_flag(ItemFlag.DOESNT_COVER_HAIR)
mail_shirt.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
mail_shirt.set_price(1040)
mail_shirt.add_modifier(IModBit.RUSTY)
mail_shirt.add_modifier(IModBit.BATTERED)
mail_shirt.add_modifier(IModBit.CRUDE)
mail_shirt.add_modifier(IModBit.THICK)
mail_shirt.add_modifier(IModBit.REINFORCED)
mail_shirt.add_modifier(IModBit.LORDLY)
mail_shirt.set_weight(19.0)
mail_shirt.set_abundance(100)
mail_shirt.set_body_armor(37)
mail_shirt.set_leg_armor(12)
mail_shirt.set_difficulty(7)


mail_hauberk = Item("mail_hauberk", "Mail_Hauberk")
mail_hauberk.add_mesh(ItemMesh("hauberk_a_new"))
mail_hauberk.add_flag(ItemType.BODY_ARMOR)
mail_hauberk.add_flag(ItemFlag.IS_MERCHANDISE)
mail_hauberk.add_flag(ItemFlag.COVERS_LEGS)
mail_hauberk.add_flag(ItemFlag.DOESNT_COVER_HAIR)
mail_hauberk.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
mail_hauberk.set_price(1320)
mail_hauberk.add_modifier(IModBit.RUSTY)
mail_hauberk.add_modifier(IModBit.BATTERED)
mail_hauberk.add_modifier(IModBit.CRUDE)
mail_hauberk.add_modifier(IModBit.THICK)
mail_hauberk.add_modifier(IModBit.REINFORCED)
mail_hauberk.add_modifier(IModBit.LORDLY)
mail_hauberk.set_weight(19.0)
mail_hauberk.set_abundance(100)
mail_hauberk.set_body_armor(40)
mail_hauberk.set_leg_armor(12)
mail_hauberk.set_difficulty(7)


mail_with_surcoat = Item("mail_with_surcoat", "Mail_with_Surcoat")
mail_with_surcoat.add_mesh(ItemMesh("mail_long_surcoat_new"))
mail_with_surcoat.add_flag(ItemType.BODY_ARMOR)
mail_with_surcoat.add_flag(ItemFlag.IS_MERCHANDISE)
mail_with_surcoat.add_flag(ItemFlag.COVERS_LEGS)
mail_with_surcoat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
mail_with_surcoat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
mail_with_surcoat.set_price(1544)
mail_with_surcoat.add_modifier(IModBit.RUSTY)
mail_with_surcoat.add_modifier(IModBit.BATTERED)
mail_with_surcoat.add_modifier(IModBit.CRUDE)
mail_with_surcoat.add_modifier(IModBit.THICK)
mail_with_surcoat.add_modifier(IModBit.REINFORCED)
mail_with_surcoat.add_modifier(IModBit.LORDLY)
mail_with_surcoat.set_weight(22.0)
mail_with_surcoat.set_abundance(100)
mail_with_surcoat.set_body_armor(42)
mail_with_surcoat.set_leg_armor(14)
mail_with_surcoat.set_difficulty(7)


surcoat_over_mail = Item("surcoat_over_mail", "Surcoat_over_Mail")
surcoat_over_mail.add_mesh(ItemMesh("surcoat_over_mail_new"))
surcoat_over_mail.add_flag(ItemType.BODY_ARMOR)
surcoat_over_mail.add_flag(ItemFlag.IS_MERCHANDISE)
surcoat_over_mail.add_flag(ItemFlag.COVERS_LEGS)
surcoat_over_mail.add_flag(ItemFlag.DOESNT_COVER_HAIR)
surcoat_over_mail.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
surcoat_over_mail.set_price(1720)
surcoat_over_mail.add_modifier(IModBit.RUSTY)
surcoat_over_mail.add_modifier(IModBit.BATTERED)
surcoat_over_mail.add_modifier(IModBit.CRUDE)
surcoat_over_mail.add_modifier(IModBit.THICK)
surcoat_over_mail.add_modifier(IModBit.REINFORCED)
surcoat_over_mail.add_modifier(IModBit.LORDLY)
surcoat_over_mail.set_weight(22.0)
surcoat_over_mail.set_abundance(100)
surcoat_over_mail.set_body_armor(43)
surcoat_over_mail.set_leg_armor(14)
surcoat_over_mail.set_difficulty(7)


brigandine_red = Item("brigandine_red", "Brigandine")
brigandine_red.add_mesh(ItemMesh("brigandine_b"))
brigandine_red.add_flag(ItemType.BODY_ARMOR)
brigandine_red.add_flag(ItemFlag.IS_MERCHANDISE)
brigandine_red.add_flag(ItemFlag.COVERS_LEGS)
brigandine_red.add_flag(ItemFlag.DOESNT_COVER_HAIR)
brigandine_red.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
brigandine_red.set_price(1830)
brigandine_red.add_modifier(IModBit.RUSTY)
brigandine_red.add_modifier(IModBit.BATTERED)
brigandine_red.add_modifier(IModBit.CRUDE)
brigandine_red.add_modifier(IModBit.THICK)
brigandine_red.add_modifier(IModBit.REINFORCED)
brigandine_red.add_modifier(IModBit.LORDLY)
brigandine_red.set_weight(19.0)
brigandine_red.set_abundance(100)
brigandine_red.set_body_armor(46)
brigandine_red.set_leg_armor(12)


lamellar_armor = Item("lamellar_armor", "Lamellar_Armor")
lamellar_armor.add_mesh(ItemMesh("lamellar_armor_b"))
lamellar_armor.add_flag(ItemType.BODY_ARMOR)
lamellar_armor.add_flag(ItemFlag.IS_MERCHANDISE)
lamellar_armor.add_flag(ItemFlag.COVERS_LEGS)
lamellar_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
lamellar_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
lamellar_armor.set_price(2410)
lamellar_armor.add_modifier(IModBit.RUSTY)
lamellar_armor.add_modifier(IModBit.BATTERED)
lamellar_armor.add_modifier(IModBit.CRUDE)
lamellar_armor.add_modifier(IModBit.THICK)
lamellar_armor.add_modifier(IModBit.REINFORCED)
lamellar_armor.add_modifier(IModBit.LORDLY)
lamellar_armor.set_weight(25.0)
lamellar_armor.set_abundance(100)
lamellar_armor.set_body_armor(48)
lamellar_armor.set_leg_armor(13)


scale_armor = Item("scale_armor", "Scale_Armor")
scale_armor.add_mesh(ItemMesh("lamellar_armor_e"))
scale_armor.add_flag(ItemType.BODY_ARMOR)
scale_armor.add_flag(ItemFlag.IS_MERCHANDISE)
scale_armor.add_flag(ItemFlag.COVERS_LEGS)
scale_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
scale_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
scale_armor.set_price(2558)
scale_armor.add_modifier(IModBit.RUSTY)
scale_armor.add_modifier(IModBit.BATTERED)
scale_armor.add_modifier(IModBit.CRUDE)
scale_armor.add_modifier(IModBit.THICK)
scale_armor.add_modifier(IModBit.REINFORCED)
scale_armor.add_modifier(IModBit.LORDLY)
scale_armor.set_weight(25.0)
scale_armor.set_abundance(100)
scale_armor.set_body_armor(52)
scale_armor.set_leg_armor(13)
scale_armor.set_difficulty(8)


banded_armor = Item("banded_armor", "Banded_Armor")
banded_armor.add_mesh(ItemMesh("banded_armor_a"))
banded_armor.add_flag(ItemType.BODY_ARMOR)
banded_armor.add_flag(ItemFlag.IS_MERCHANDISE)
banded_armor.add_flag(ItemFlag.COVERS_LEGS)
banded_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
banded_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
banded_armor.set_price(2710)
banded_armor.add_modifier(IModBit.RUSTY)
banded_armor.add_modifier(IModBit.BATTERED)
banded_armor.add_modifier(IModBit.CRUDE)
banded_armor.add_modifier(IModBit.THICK)
banded_armor.add_modifier(IModBit.REINFORCED)
banded_armor.add_modifier(IModBit.LORDLY)
banded_armor.set_weight(23.0)
banded_armor.set_abundance(100)
banded_armor.set_body_armor(49)
banded_armor.set_leg_armor(14)
banded_armor.set_difficulty(8)


cuir_bouilli = Item("cuir_bouilli", "Cuir_Bouilli")
cuir_bouilli.add_mesh(ItemMesh("cuir_bouilli_a"))
cuir_bouilli.add_flag(ItemType.BODY_ARMOR)
cuir_bouilli.add_flag(ItemFlag.IS_MERCHANDISE)
cuir_bouilli.add_flag(ItemFlag.COVERS_LEGS)
cuir_bouilli.add_flag(ItemFlag.DOESNT_COVER_HAIR)
cuir_bouilli.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
cuir_bouilli.set_price(3100)
cuir_bouilli.add_modifier(IModBit.RUSTY)
cuir_bouilli.add_modifier(IModBit.BATTERED)
cuir_bouilli.add_modifier(IModBit.CRUDE)
cuir_bouilli.add_modifier(IModBit.THICK)
cuir_bouilli.add_modifier(IModBit.REINFORCED)
cuir_bouilli.add_modifier(IModBit.LORDLY)
cuir_bouilli.set_weight(24.0)
cuir_bouilli.set_abundance(100)
cuir_bouilli.set_body_armor(50)
cuir_bouilli.set_leg_armor(15)
cuir_bouilli.set_difficulty(8)


coat_of_plates = Item("coat_of_plates", "Coat_of_Plates")
coat_of_plates.add_mesh(ItemMesh("coat_of_plates_a"))
coat_of_plates.add_flag(ItemType.BODY_ARMOR)
coat_of_plates.add_flag(ItemFlag.IS_MERCHANDISE)
coat_of_plates.add_flag(ItemFlag.COVERS_LEGS)
coat_of_plates.add_flag(ItemFlag.DOESNT_COVER_HAIR)
coat_of_plates.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
coat_of_plates.set_price(3828)
coat_of_plates.add_modifier(IModBit.RUSTY)
coat_of_plates.add_modifier(IModBit.BATTERED)
coat_of_plates.add_modifier(IModBit.CRUDE)
coat_of_plates.add_modifier(IModBit.THICK)
coat_of_plates.add_modifier(IModBit.REINFORCED)
coat_of_plates.add_modifier(IModBit.LORDLY)
coat_of_plates.set_weight(25.0)
coat_of_plates.set_abundance(100)
coat_of_plates.set_body_armor(52)
coat_of_plates.set_leg_armor(16)
coat_of_plates.set_difficulty(8)


coat_of_plates_red = Item("coat_of_plates_red", "Coat_of_Plates")
coat_of_plates_red.add_mesh(ItemMesh("coat_of_plates_red"))
coat_of_plates_red.add_flag(ItemType.BODY_ARMOR)
coat_of_plates_red.add_flag(ItemFlag.IS_MERCHANDISE)
coat_of_plates_red.add_flag(ItemFlag.COVERS_LEGS)
coat_of_plates_red.add_flag(ItemFlag.DOESNT_COVER_HAIR)
coat_of_plates_red.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
coat_of_plates_red.set_price(3828)
coat_of_plates_red.add_modifier(IModBit.RUSTY)
coat_of_plates_red.add_modifier(IModBit.BATTERED)
coat_of_plates_red.add_modifier(IModBit.CRUDE)
coat_of_plates_red.add_modifier(IModBit.THICK)
coat_of_plates_red.add_modifier(IModBit.REINFORCED)
coat_of_plates_red.add_modifier(IModBit.LORDLY)
coat_of_plates_red.set_weight(25.0)
coat_of_plates_red.set_abundance(100)
coat_of_plates_red.set_body_armor(52)
coat_of_plates_red.set_leg_armor(16)
coat_of_plates_red.set_difficulty(8)


plate_armor = Item("plate_armor", "Plate_Armor")
plate_armor.add_mesh(ItemMesh("full_plate_armor"))
plate_armor.add_flag(ItemType.BODY_ARMOR)
plate_armor.add_flag(ItemFlag.IS_MERCHANDISE)
plate_armor.add_flag(ItemFlag.COVERS_LEGS)
plate_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
plate_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
plate_armor.set_price(6553)
plate_armor.add_modifier(IModBit.CRACKED)
plate_armor.add_modifier(IModBit.RUSTY)
plate_armor.add_modifier(IModBit.BATTERED)
plate_armor.add_modifier(IModBit.CRUDE)
plate_armor.add_modifier(IModBit.THICK)
plate_armor.add_modifier(IModBit.REINFORCED)
plate_armor.add_modifier(IModBit.LORDLY)
plate_armor.set_weight(27.0)
plate_armor.set_abundance(100)
plate_armor.set_body_armor(55)
plate_armor.set_leg_armor(17)
plate_armor.set_difficulty(9)


black_armor = Item("black_armor", "Black_Armor")
black_armor.add_mesh(ItemMesh("black_armor"))
black_armor.add_flag(ItemType.BODY_ARMOR)
black_armor.add_flag(ItemFlag.COVERS_LEGS)
black_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
black_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
black_armor.set_price(9496)
black_armor.add_modifier(IModBit.CRACKED)
black_armor.add_modifier(IModBit.RUSTY)
black_armor.add_modifier(IModBit.BATTERED)
black_armor.add_modifier(IModBit.CRUDE)
black_armor.add_modifier(IModBit.THICK)
black_armor.add_modifier(IModBit.REINFORCED)
black_armor.add_modifier(IModBit.LORDLY)
black_armor.set_weight(28.0)
black_armor.set_abundance(100)
black_armor.set_body_armor(57)
black_armor.set_leg_armor(18)
black_armor.set_difficulty(10)


pelt_coat = Item("pelt_coat", "Pelt_Coat")
pelt_coat.add_mesh(ItemMesh("thick_coat_a"))
pelt_coat.add_flag(ItemType.BODY_ARMOR)
pelt_coat.add_flag(ItemFlag.IS_MERCHANDISE)
pelt_coat.add_flag(ItemFlag.COVERS_LEGS)
pelt_coat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
pelt_coat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
pelt_coat.set_price(14)
pelt_coat.add_modifier(IModBit.TETTERED)
pelt_coat.add_modifier(IModBit.RAGGED)
pelt_coat.add_modifier(IModBit.STURDY)
pelt_coat.add_modifier(IModBit.THICK)
pelt_coat.add_modifier(IModBit.HARDENED)
pelt_coat.set_weight(2.0)
pelt_coat.set_abundance(100)
pelt_coat.set_body_armor(9)
pelt_coat.set_leg_armor(1)


khergit_elite_armor = Item("khergit_elite_armor", "Khergit_Elite_Armor")
khergit_elite_armor.add_mesh(ItemMesh("lamellar_armor_d"))
khergit_elite_armor.add_flag(ItemType.BODY_ARMOR)
khergit_elite_armor.add_flag(ItemFlag.IS_MERCHANDISE)
khergit_elite_armor.add_flag(ItemFlag.COVERS_LEGS)
khergit_elite_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
khergit_elite_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
khergit_elite_armor.set_price(3828)
khergit_elite_armor.add_modifier(IModBit.RUSTY)
khergit_elite_armor.add_modifier(IModBit.BATTERED)
khergit_elite_armor.add_modifier(IModBit.CRUDE)
khergit_elite_armor.add_modifier(IModBit.THICK)
khergit_elite_armor.add_modifier(IModBit.REINFORCED)
khergit_elite_armor.add_modifier(IModBit.LORDLY)
khergit_elite_armor.set_weight(25.0)
khergit_elite_armor.set_abundance(100)
khergit_elite_armor.set_body_armor(52)
khergit_elite_armor.set_leg_armor(16)
khergit_elite_armor.set_difficulty(8)


vaegir_elite_armor = Item("vaegir_elite_armor", "Vaegir_Elite_Armor")
vaegir_elite_armor.add_mesh(ItemMesh("lamellar_armor_c"))
vaegir_elite_armor.add_flag(ItemType.BODY_ARMOR)
vaegir_elite_armor.add_flag(ItemFlag.IS_MERCHANDISE)
vaegir_elite_armor.add_flag(ItemFlag.COVERS_LEGS)
vaegir_elite_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
vaegir_elite_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
vaegir_elite_armor.set_price(3828)
vaegir_elite_armor.add_modifier(IModBit.RUSTY)
vaegir_elite_armor.add_modifier(IModBit.BATTERED)
vaegir_elite_armor.add_modifier(IModBit.CRUDE)
vaegir_elite_armor.add_modifier(IModBit.THICK)
vaegir_elite_armor.add_modifier(IModBit.REINFORCED)
vaegir_elite_armor.add_modifier(IModBit.LORDLY)
vaegir_elite_armor.set_weight(25.0)
vaegir_elite_armor.set_abundance(100)
vaegir_elite_armor.set_body_armor(52)
vaegir_elite_armor.set_leg_armor(16)
vaegir_elite_armor.set_difficulty(8)


sarranid_elite_armor = Item("sarranid_elite_armor", "Sarranid_Elite_Armor")
sarranid_elite_armor.add_mesh(ItemMesh("tunic_armor_a"))
sarranid_elite_armor.add_flag(ItemType.BODY_ARMOR)
sarranid_elite_armor.add_flag(ItemFlag.IS_MERCHANDISE)
sarranid_elite_armor.add_flag(ItemFlag.COVERS_LEGS)
sarranid_elite_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
sarranid_elite_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
sarranid_elite_armor.add_flag(ItemFlag.IS_CIVILIAN)
sarranid_elite_armor.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
sarranid_elite_armor.set_price(3828)
sarranid_elite_armor.add_modifier(IModBit.RUSTY)
sarranid_elite_armor.add_modifier(IModBit.BATTERED)
sarranid_elite_armor.add_modifier(IModBit.CRUDE)
sarranid_elite_armor.add_modifier(IModBit.THICK)
sarranid_elite_armor.add_modifier(IModBit.REINFORCED)
sarranid_elite_armor.add_modifier(IModBit.LORDLY)
sarranid_elite_armor.set_weight(25.0)
sarranid_elite_armor.set_abundance(100)
sarranid_elite_armor.set_body_armor(52)
sarranid_elite_armor.set_leg_armor(16)
sarranid_elite_armor.set_difficulty(8)


sarranid_dress_a = Item("sarranid_dress_a", "Dress")
sarranid_dress_a.add_mesh(ItemMesh("woolen_dress"))
sarranid_dress_a.add_flag(ItemType.BODY_ARMOR)
sarranid_dress_a.add_flag(ItemFlag.IS_MERCHANDISE)
sarranid_dress_a.add_flag(ItemFlag.COVERS_LEGS)
sarranid_dress_a.add_flag(ItemFlag.DOESNT_COVER_HAIR)
sarranid_dress_a.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
sarranid_dress_a.set_price(33)
sarranid_dress_a.add_modifier(IModBit.TETTERED)
sarranid_dress_a.add_modifier(IModBit.RAGGED)
sarranid_dress_a.add_modifier(IModBit.STURDY)
sarranid_dress_a.add_modifier(IModBit.THICK)
sarranid_dress_a.add_modifier(IModBit.HARDENED)
sarranid_dress_a.set_weight(1.0)
sarranid_dress_a.set_abundance(100)
sarranid_dress_a.set_body_armor(9)
sarranid_dress_a.set_leg_armor(9)


sarranid_dress_b = Item("sarranid_dress_b", "Dress")
sarranid_dress_b.add_mesh(ItemMesh("woolen_dress"))
sarranid_dress_b.add_flag(ItemType.BODY_ARMOR)
sarranid_dress_b.add_flag(ItemFlag.IS_MERCHANDISE)
sarranid_dress_b.add_flag(ItemFlag.COVERS_LEGS)
sarranid_dress_b.add_flag(ItemFlag.DOESNT_COVER_HAIR)
sarranid_dress_b.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
sarranid_dress_b.set_price(33)
sarranid_dress_b.add_modifier(IModBit.TETTERED)
sarranid_dress_b.add_modifier(IModBit.RAGGED)
sarranid_dress_b.add_modifier(IModBit.STURDY)
sarranid_dress_b.add_modifier(IModBit.THICK)
sarranid_dress_b.add_modifier(IModBit.HARDENED)
sarranid_dress_b.set_weight(1.0)
sarranid_dress_b.set_abundance(100)
sarranid_dress_b.set_body_armor(9)
sarranid_dress_b.set_leg_armor(9)


sarranid_cloth_robe = Item("sarranid_cloth_robe", "Worn_Robe")
sarranid_cloth_robe.add_mesh(ItemMesh("sar_robe"))
sarranid_cloth_robe.add_flag(ItemType.BODY_ARMOR)
sarranid_cloth_robe.add_flag(ItemFlag.IS_MERCHANDISE)
sarranid_cloth_robe.add_flag(ItemFlag.COVERS_LEGS)
sarranid_cloth_robe.add_flag(ItemFlag.DOESNT_COVER_HAIR)
sarranid_cloth_robe.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
sarranid_cloth_robe.set_price(33)
sarranid_cloth_robe.add_modifier(IModBit.TETTERED)
sarranid_cloth_robe.add_modifier(IModBit.RAGGED)
sarranid_cloth_robe.add_modifier(IModBit.STURDY)
sarranid_cloth_robe.add_modifier(IModBit.THICK)
sarranid_cloth_robe.add_modifier(IModBit.HARDENED)
sarranid_cloth_robe.set_weight(1.0)
sarranid_cloth_robe.set_abundance(100)
sarranid_cloth_robe.set_body_armor(9)
sarranid_cloth_robe.set_leg_armor(9)


sarranid_cloth_robe_b = Item("sarranid_cloth_robe_b", "Worn_Robe")
sarranid_cloth_robe_b.add_mesh(ItemMesh("sar_robe_b"))
sarranid_cloth_robe_b.add_flag(ItemType.BODY_ARMOR)
sarranid_cloth_robe_b.add_flag(ItemFlag.IS_MERCHANDISE)
sarranid_cloth_robe_b.add_flag(ItemFlag.COVERS_LEGS)
sarranid_cloth_robe_b.add_flag(ItemFlag.DOESNT_COVER_HAIR)
sarranid_cloth_robe_b.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
sarranid_cloth_robe_b.set_price(33)
sarranid_cloth_robe_b.add_modifier(IModBit.TETTERED)
sarranid_cloth_robe_b.add_modifier(IModBit.RAGGED)
sarranid_cloth_robe_b.add_modifier(IModBit.STURDY)
sarranid_cloth_robe_b.add_modifier(IModBit.THICK)
sarranid_cloth_robe_b.add_modifier(IModBit.HARDENED)
sarranid_cloth_robe_b.set_weight(1.0)
sarranid_cloth_robe_b.set_abundance(100)
sarranid_cloth_robe_b.set_body_armor(9)
sarranid_cloth_robe_b.set_leg_armor(9)


skirmisher_armor = Item("skirmisher_armor", "Skirmisher_Armor")
skirmisher_armor.add_mesh(ItemMesh("skirmisher_armor"))
skirmisher_armor.add_flag(ItemType.BODY_ARMOR)
skirmisher_armor.add_flag(ItemFlag.IS_MERCHANDISE)
skirmisher_armor.add_flag(ItemFlag.COVERS_LEGS)
skirmisher_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
skirmisher_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
skirmisher_armor.set_price(74)
skirmisher_armor.add_modifier(IModBit.TETTERED)
skirmisher_armor.add_modifier(IModBit.RAGGED)
skirmisher_armor.add_modifier(IModBit.STURDY)
skirmisher_armor.add_modifier(IModBit.THICK)
skirmisher_armor.add_modifier(IModBit.HARDENED)
skirmisher_armor.set_weight(3.0)
skirmisher_armor.set_abundance(100)
skirmisher_armor.set_body_armor(15)
skirmisher_armor.set_leg_armor(9)


archers_vest = Item("archers_vest", "Archer's_Padded_Vest")
archers_vest.add_mesh(ItemMesh("archers_vest"))
archers_vest.add_flag(ItemType.BODY_ARMOR)
archers_vest.add_flag(ItemFlag.IS_MERCHANDISE)
archers_vest.add_flag(ItemFlag.COVERS_LEGS)
archers_vest.add_flag(ItemFlag.DOESNT_COVER_HAIR)
archers_vest.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
archers_vest.set_price(260)
archers_vest.add_modifier(IModBit.TETTERED)
archers_vest.add_modifier(IModBit.RAGGED)
archers_vest.add_modifier(IModBit.STURDY)
archers_vest.add_modifier(IModBit.THICK)
archers_vest.add_modifier(IModBit.HARDENED)
archers_vest.set_weight(6.0)
archers_vest.set_abundance(100)
archers_vest.set_body_armor(23)
archers_vest.set_leg_armor(12)


sarranid_leather_armor = Item("sarranid_leather_armor", "Sarranid_Leather_Armor")
sarranid_leather_armor.add_mesh(ItemMesh("sarranid_leather_armor"))
sarranid_leather_armor.add_flag(ItemType.BODY_ARMOR)
sarranid_leather_armor.add_flag(ItemFlag.IS_MERCHANDISE)
sarranid_leather_armor.add_flag(ItemFlag.COVERS_LEGS)
sarranid_leather_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
sarranid_leather_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
sarranid_leather_armor.set_price(650)
sarranid_leather_armor.add_modifier(IModBit.RUSTY)
sarranid_leather_armor.add_modifier(IModBit.BATTERED)
sarranid_leather_armor.add_modifier(IModBit.CRUDE)
sarranid_leather_armor.add_modifier(IModBit.THICK)
sarranid_leather_armor.add_modifier(IModBit.REINFORCED)
sarranid_leather_armor.add_modifier(IModBit.LORDLY)
sarranid_leather_armor.set_weight(9.0)
sarranid_leather_armor.set_abundance(100)
sarranid_leather_armor.set_body_armor(32)
sarranid_leather_armor.set_leg_armor(12)


sarranid_cavalry_robe = Item("sarranid_cavalry_robe", "Cavalry_Robe")
sarranid_cavalry_robe.add_mesh(ItemMesh("arabian_armor_a"))
sarranid_cavalry_robe.add_flag(ItemType.BODY_ARMOR)
sarranid_cavalry_robe.add_flag(ItemFlag.IS_MERCHANDISE)
sarranid_cavalry_robe.add_flag(ItemFlag.COVERS_LEGS)
sarranid_cavalry_robe.add_flag(ItemFlag.DOESNT_COVER_HAIR)
sarranid_cavalry_robe.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
sarranid_cavalry_robe.add_flag(ItemFlag.IS_CIVILIAN)
sarranid_cavalry_robe.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
sarranid_cavalry_robe.set_price(990)
sarranid_cavalry_robe.add_modifier(IModBit.RUSTY)
sarranid_cavalry_robe.add_modifier(IModBit.BATTERED)
sarranid_cavalry_robe.add_modifier(IModBit.CRUDE)
sarranid_cavalry_robe.add_modifier(IModBit.THICK)
sarranid_cavalry_robe.add_modifier(IModBit.REINFORCED)
sarranid_cavalry_robe.add_modifier(IModBit.LORDLY)
sarranid_cavalry_robe.set_weight(15.0)
sarranid_cavalry_robe.set_abundance(100)
sarranid_cavalry_robe.set_body_armor(36)
sarranid_cavalry_robe.set_leg_armor(8)


arabian_armor_b = Item("arabian_armor_b", "Sarranid_Guard_Armor")
arabian_armor_b.add_mesh(ItemMesh("arabian_armor_b"))
arabian_armor_b.add_flag(ItemType.BODY_ARMOR)
arabian_armor_b.add_flag(ItemFlag.IS_MERCHANDISE)
arabian_armor_b.add_flag(ItemFlag.COVERS_LEGS)
arabian_armor_b.add_flag(ItemFlag.DOESNT_COVER_HAIR)
arabian_armor_b.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
arabian_armor_b.set_price(1200)
arabian_armor_b.add_modifier(IModBit.RUSTY)
arabian_armor_b.add_modifier(IModBit.BATTERED)
arabian_armor_b.add_modifier(IModBit.CRUDE)
arabian_armor_b.add_modifier(IModBit.THICK)
arabian_armor_b.add_modifier(IModBit.REINFORCED)
arabian_armor_b.add_modifier(IModBit.LORDLY)
arabian_armor_b.set_weight(19.0)
arabian_armor_b.set_abundance(100)
arabian_armor_b.set_body_armor(38)
arabian_armor_b.set_leg_armor(8)


sarranid_mail_shirt = Item("sarranid_mail_shirt", "Sarranid_Mail_Shirt")
sarranid_mail_shirt.add_mesh(ItemMesh("sarranian_mail_shirt"))
sarranid_mail_shirt.add_flag(ItemType.BODY_ARMOR)
sarranid_mail_shirt.add_flag(ItemFlag.IS_MERCHANDISE)
sarranid_mail_shirt.add_flag(ItemFlag.COVERS_LEGS)
sarranid_mail_shirt.add_flag(ItemFlag.DOESNT_COVER_HAIR)
sarranid_mail_shirt.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
sarranid_mail_shirt.add_flag(ItemFlag.IS_CIVILIAN)
sarranid_mail_shirt.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
sarranid_mail_shirt.set_price(1400)
sarranid_mail_shirt.add_modifier(IModBit.RUSTY)
sarranid_mail_shirt.add_modifier(IModBit.BATTERED)
sarranid_mail_shirt.add_modifier(IModBit.CRUDE)
sarranid_mail_shirt.add_modifier(IModBit.THICK)
sarranid_mail_shirt.add_modifier(IModBit.REINFORCED)
sarranid_mail_shirt.add_modifier(IModBit.LORDLY)
sarranid_mail_shirt.set_weight(19.0)
sarranid_mail_shirt.set_abundance(100)
sarranid_mail_shirt.set_body_armor(40)
sarranid_mail_shirt.set_leg_armor(14)
sarranid_mail_shirt.set_difficulty(7)


mamluke_mail = Item("mamluke_mail", "Mamluke_Mail")
mamluke_mail.add_mesh(ItemMesh("sarranid_elite_cavalary"))
mamluke_mail.add_flag(ItemType.BODY_ARMOR)
mamluke_mail.add_flag(ItemFlag.IS_MERCHANDISE)
mamluke_mail.add_flag(ItemFlag.COVERS_LEGS)
mamluke_mail.add_flag(ItemFlag.DOESNT_COVER_HAIR)
mamluke_mail.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
mamluke_mail.add_flag(ItemFlag.IS_CIVILIAN)
mamluke_mail.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
mamluke_mail.set_price(2900)
mamluke_mail.add_modifier(IModBit.RUSTY)
mamluke_mail.add_modifier(IModBit.BATTERED)
mamluke_mail.add_modifier(IModBit.CRUDE)
mamluke_mail.add_modifier(IModBit.THICK)
mamluke_mail.add_modifier(IModBit.REINFORCED)
mamluke_mail.add_modifier(IModBit.LORDLY)
mamluke_mail.set_weight(24.0)
mamluke_mail.set_abundance(100)
mamluke_mail.set_body_armor(48)
mamluke_mail.set_leg_armor(16)
mamluke_mail.set_difficulty(8)


burlap_tunic = Item("burlap_tunic", "Burlap_Tunic")
burlap_tunic.add_mesh(ItemMesh("shirt"))
burlap_tunic.add_flag(ItemType.BODY_ARMOR)
burlap_tunic.add_flag(ItemFlag.COVERS_LEGS)
burlap_tunic.add_flag(ItemFlag.DOESNT_COVER_HAIR)
burlap_tunic.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
burlap_tunic.set_price(5)
burlap_tunic.add_modifier(IModBit.RUSTY)
burlap_tunic.add_modifier(IModBit.BATTERED)
burlap_tunic.add_modifier(IModBit.CRUDE)
burlap_tunic.add_modifier(IModBit.THICK)
burlap_tunic.add_modifier(IModBit.REINFORCED)
burlap_tunic.add_modifier(IModBit.LORDLY)
burlap_tunic.set_weight(1.0)
burlap_tunic.set_abundance(100)
burlap_tunic.set_body_armor(3)
burlap_tunic.set_leg_armor(1)


heraldic_mail_with_surcoat = Item("heraldic_mail_with_surcoat", "Heraldic_Mail_with_Surcoat")
heraldic_mail_with_surcoat.add_mesh(ItemMesh("heraldic_armor_new_a"))
heraldic_mail_with_surcoat.add_flag(ItemType.BODY_ARMOR)
heraldic_mail_with_surcoat.add_flag(ItemFlag.IS_MERCHANDISE)
heraldic_mail_with_surcoat.add_flag(ItemFlag.COVERS_LEGS)
heraldic_mail_with_surcoat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
heraldic_mail_with_surcoat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
heraldic_mail_with_surcoat.set_price(3454)
heraldic_mail_with_surcoat.add_modifier(IModBit.RUSTY)
heraldic_mail_with_surcoat.add_modifier(IModBit.BATTERED)
heraldic_mail_with_surcoat.add_modifier(IModBit.CRUDE)
heraldic_mail_with_surcoat.add_modifier(IModBit.THICK)
heraldic_mail_with_surcoat.add_modifier(IModBit.REINFORCED)
heraldic_mail_with_surcoat.add_modifier(IModBit.LORDLY)
heraldic_mail_with_surcoat.set_weight(22.0)
heraldic_mail_with_surcoat.set_abundance(100)
heraldic_mail_with_surcoat.set_body_armor(49)
heraldic_mail_with_surcoat.set_leg_armor(17)
heraldic_mail_with_surcoat.set_difficulty(7)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270485 1224979098644774912 1224979098644774913


heraldic_mail_with_tunic = Item("heraldic_mail_with_tunic", "Heraldic_Mail")
heraldic_mail_with_tunic.add_mesh(ItemMesh("heraldic_armor_new_b"))
heraldic_mail_with_tunic.add_flag(ItemType.BODY_ARMOR)
heraldic_mail_with_tunic.add_flag(ItemFlag.IS_MERCHANDISE)
heraldic_mail_with_tunic.add_flag(ItemFlag.COVERS_LEGS)
heraldic_mail_with_tunic.add_flag(ItemFlag.DOESNT_COVER_HAIR)
heraldic_mail_with_tunic.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
heraldic_mail_with_tunic.set_price(3520)
heraldic_mail_with_tunic.add_modifier(IModBit.RUSTY)
heraldic_mail_with_tunic.add_modifier(IModBit.BATTERED)
heraldic_mail_with_tunic.add_modifier(IModBit.CRUDE)
heraldic_mail_with_tunic.add_modifier(IModBit.THICK)
heraldic_mail_with_tunic.add_modifier(IModBit.REINFORCED)
heraldic_mail_with_tunic.add_modifier(IModBit.LORDLY)
heraldic_mail_with_tunic.set_weight(22.0)
heraldic_mail_with_tunic.set_abundance(100)
heraldic_mail_with_tunic.set_body_armor(50)
heraldic_mail_with_tunic.set_leg_armor(16)
heraldic_mail_with_tunic.set_difficulty(7)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270486 1224979098644774912 1224979098644774913


heraldic_mail_with_tunic_b = Item("heraldic_mail_with_tunic_b", "Heraldic_Mail")
heraldic_mail_with_tunic_b.add_mesh(ItemMesh("heraldic_armor_new_c"))
heraldic_mail_with_tunic_b.add_flag(ItemType.BODY_ARMOR)
heraldic_mail_with_tunic_b.add_flag(ItemFlag.IS_MERCHANDISE)
heraldic_mail_with_tunic_b.add_flag(ItemFlag.COVERS_LEGS)
heraldic_mail_with_tunic_b.add_flag(ItemFlag.DOESNT_COVER_HAIR)
heraldic_mail_with_tunic_b.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
heraldic_mail_with_tunic_b.set_price(3610)
heraldic_mail_with_tunic_b.add_modifier(IModBit.RUSTY)
heraldic_mail_with_tunic_b.add_modifier(IModBit.BATTERED)
heraldic_mail_with_tunic_b.add_modifier(IModBit.CRUDE)
heraldic_mail_with_tunic_b.add_modifier(IModBit.THICK)
heraldic_mail_with_tunic_b.add_modifier(IModBit.REINFORCED)
heraldic_mail_with_tunic_b.add_modifier(IModBit.LORDLY)
heraldic_mail_with_tunic_b.set_weight(22.0)
heraldic_mail_with_tunic_b.set_abundance(100)
heraldic_mail_with_tunic_b.set_body_armor(50)
heraldic_mail_with_tunic_b.set_leg_armor(16)
heraldic_mail_with_tunic_b.set_difficulty(7)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270487 1224979098644774912 1224979098644774913


heraldic_mail_with_tabard = Item("heraldic_mail_with_tabard", "Heraldic_Mail_with_Tabard")
heraldic_mail_with_tabard.add_mesh(ItemMesh("heraldic_armor_new_d"))
heraldic_mail_with_tabard.add_flag(ItemType.BODY_ARMOR)
heraldic_mail_with_tabard.add_flag(ItemFlag.IS_MERCHANDISE)
heraldic_mail_with_tabard.add_flag(ItemFlag.COVERS_LEGS)
heraldic_mail_with_tabard.add_flag(ItemFlag.DOESNT_COVER_HAIR)
heraldic_mail_with_tabard.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
heraldic_mail_with_tabard.set_price(3654)
heraldic_mail_with_tabard.add_modifier(IModBit.RUSTY)
heraldic_mail_with_tabard.add_modifier(IModBit.BATTERED)
heraldic_mail_with_tabard.add_modifier(IModBit.CRUDE)
heraldic_mail_with_tabard.add_modifier(IModBit.THICK)
heraldic_mail_with_tabard.add_modifier(IModBit.REINFORCED)
heraldic_mail_with_tabard.add_modifier(IModBit.LORDLY)
heraldic_mail_with_tabard.set_weight(21.0)
heraldic_mail_with_tabard.set_abundance(100)
heraldic_mail_with_tabard.set_body_armor(51)
heraldic_mail_with_tabard.set_leg_armor(15)
heraldic_mail_with_tabard.set_difficulty(7)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270488 1224979098644774912 1224979098644774913


turret_hat_ruby = Item("turret_hat_ruby", "Turret_Hat")
turret_hat_ruby.add_mesh(ItemMesh("turret_hat_r"))
turret_hat_ruby.add_flag(ItemType.HEAD_ARMOR)
turret_hat_ruby.add_flag(ItemFlag.IS_CIVILIAN)
turret_hat_ruby.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
turret_hat_ruby.add_flag(ItemFlag.FITS_TO_HEAD)
turret_hat_ruby.add_flag(ItemFlag.OFFSET_LANCE)
turret_hat_ruby.set_price(70)
turret_hat_ruby.add_modifier(IModBit.TETTERED)
turret_hat_ruby.add_modifier(IModBit.RAGGED)
turret_hat_ruby.add_modifier(IModBit.STURDY)
turret_hat_ruby.add_modifier(IModBit.THICK)
turret_hat_ruby.add_modifier(IModBit.HARDENED)
turret_hat_ruby.set_weight(0.5)
turret_hat_ruby.set_abundance(100)
turret_hat_ruby.set_head_armor(8)


turret_hat_blue = Item("turret_hat_blue", "Turret_Hat")
turret_hat_blue.add_mesh(ItemMesh("turret_hat_b"))
turret_hat_blue.add_flag(ItemType.HEAD_ARMOR)
turret_hat_blue.add_flag(ItemFlag.IS_CIVILIAN)
turret_hat_blue.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
turret_hat_blue.add_flag(ItemFlag.FITS_TO_HEAD)
turret_hat_blue.add_flag(ItemFlag.OFFSET_LANCE)
turret_hat_blue.set_price(80)
turret_hat_blue.add_modifier(IModBit.TETTERED)
turret_hat_blue.add_modifier(IModBit.RAGGED)
turret_hat_blue.add_modifier(IModBit.STURDY)
turret_hat_blue.add_modifier(IModBit.THICK)
turret_hat_blue.add_modifier(IModBit.HARDENED)
turret_hat_blue.set_weight(0.5)
turret_hat_blue.set_abundance(100)
turret_hat_blue.set_head_armor(8)


turret_hat_green = Item("turret_hat_green", "Barbette")
turret_hat_green.add_mesh(ItemMesh("barbette_new"))
turret_hat_green.add_flag(ItemType.HEAD_ARMOR)
turret_hat_green.add_flag(ItemFlag.IS_MERCHANDISE)
turret_hat_green.add_flag(ItemFlag.IS_CIVILIAN)
turret_hat_green.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
turret_hat_green.add_flag(ItemFlag.FITS_TO_HEAD)
turret_hat_green.add_flag(ItemFlag.OFFSET_LANCE)
turret_hat_green.set_price(70)
turret_hat_green.add_modifier(IModBit.TETTERED)
turret_hat_green.add_modifier(IModBit.RAGGED)
turret_hat_green.add_modifier(IModBit.STURDY)
turret_hat_green.add_modifier(IModBit.THICK)
turret_hat_green.add_modifier(IModBit.HARDENED)
turret_hat_green.set_weight(0.5)
turret_hat_green.set_abundance(100)
turret_hat_green.set_head_armor(6)


head_wrappings = Item("head_wrappings", "Head_Wrapping")
head_wrappings.add_mesh(ItemMesh("head_wrapping"))
head_wrappings.add_flag(ItemType.HEAD_ARMOR)
head_wrappings.add_flag(ItemFlag.FITS_TO_HEAD)
head_wrappings.add_flag(ItemFlag.OFFSET_LANCE)
head_wrappings.set_price(16)
head_wrappings.add_modifier(IModBit.TETTERED)
head_wrappings.add_modifier(IModBit.RAGGED)
head_wrappings.add_modifier(IModBit.STURDY)
head_wrappings.add_modifier(IModBit.THICK)
head_wrappings.set_weight(0.25)
head_wrappings.set_abundance(100)
head_wrappings.set_head_armor(3)


court_hat = Item("court_hat", "Turret_Hat")
court_hat.add_mesh(ItemMesh("court_hat"))
court_hat.add_flag(ItemType.HEAD_ARMOR)
court_hat.add_flag(ItemFlag.IS_CIVILIAN)
court_hat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
court_hat.add_flag(ItemFlag.FITS_TO_HEAD)
court_hat.add_flag(ItemFlag.OFFSET_LANCE)
court_hat.set_price(80)
court_hat.add_modifier(IModBit.TETTERED)
court_hat.add_modifier(IModBit.RAGGED)
court_hat.add_modifier(IModBit.STURDY)
court_hat.add_modifier(IModBit.THICK)
court_hat.add_modifier(IModBit.HARDENED)
court_hat.set_weight(0.5)
court_hat.set_abundance(100)
court_hat.set_head_armor(8)


wimple_a = Item("wimple_a", "Wimple")
wimple_a.add_mesh(ItemMesh("wimple_a_new"))
wimple_a.add_flag(ItemType.HEAD_ARMOR)
wimple_a.add_flag(ItemFlag.IS_MERCHANDISE)
wimple_a.add_flag(ItemFlag.IS_CIVILIAN)
wimple_a.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
wimple_a.add_flag(ItemFlag.FITS_TO_HEAD)
wimple_a.add_flag(ItemFlag.OFFSET_LANCE)
wimple_a.set_price(10)
wimple_a.add_modifier(IModBit.TETTERED)
wimple_a.add_modifier(IModBit.RAGGED)
wimple_a.add_modifier(IModBit.STURDY)
wimple_a.add_modifier(IModBit.THICK)
wimple_a.add_modifier(IModBit.HARDENED)
wimple_a.set_weight(0.5)
wimple_a.set_abundance(100)
wimple_a.set_head_armor(4)


wimple_with_veil = Item("wimple_with_veil", "Wimple_with_Veil")
wimple_with_veil.add_mesh(ItemMesh("wimple_b_new"))
wimple_with_veil.add_flag(ItemType.HEAD_ARMOR)
wimple_with_veil.add_flag(ItemFlag.IS_MERCHANDISE)
wimple_with_veil.add_flag(ItemFlag.IS_CIVILIAN)
wimple_with_veil.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
wimple_with_veil.add_flag(ItemFlag.FITS_TO_HEAD)
wimple_with_veil.add_flag(ItemFlag.OFFSET_LANCE)
wimple_with_veil.set_price(10)
wimple_with_veil.add_modifier(IModBit.TETTERED)
wimple_with_veil.add_modifier(IModBit.RAGGED)
wimple_with_veil.add_modifier(IModBit.STURDY)
wimple_with_veil.add_modifier(IModBit.THICK)
wimple_with_veil.add_modifier(IModBit.HARDENED)
wimple_with_veil.set_weight(0.5)
wimple_with_veil.set_abundance(100)
wimple_with_veil.set_head_armor(4)


straw_hat = Item("straw_hat", "Straw_Hat")
straw_hat.add_mesh(ItemMesh("straw_hat_new"))
straw_hat.add_flag(ItemType.HEAD_ARMOR)
straw_hat.add_flag(ItemFlag.IS_MERCHANDISE)
straw_hat.add_flag(ItemFlag.IS_CIVILIAN)
straw_hat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
straw_hat.set_price(9)
straw_hat.add_modifier(IModBit.TETTERED)
straw_hat.add_modifier(IModBit.RAGGED)
straw_hat.add_modifier(IModBit.STURDY)
straw_hat.add_modifier(IModBit.THICK)
straw_hat.add_modifier(IModBit.HARDENED)
straw_hat.set_weight(1.0)
straw_hat.set_abundance(100)
straw_hat.set_head_armor(2)


common_hood = Item("common_hood", "Hood")
common_hood.add_mesh(ItemMesh("hood_new"))
common_hood.add_flag(ItemType.HEAD_ARMOR)
common_hood.add_flag(ItemFlag.IS_MERCHANDISE)
common_hood.add_flag(ItemFlag.IS_CIVILIAN)
common_hood.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
common_hood.set_price(9)
common_hood.add_modifier(IModBit.TETTERED)
common_hood.add_modifier(IModBit.RAGGED)
common_hood.add_modifier(IModBit.STURDY)
common_hood.add_modifier(IModBit.THICK)
common_hood.add_modifier(IModBit.HARDENED)
common_hood.set_weight(1.0)
common_hood.set_abundance(100)
common_hood.set_head_armor(10)


hood_b = Item("hood_b", "Hood")
hood_b.add_mesh(ItemMesh("hood_b"))
hood_b.add_flag(ItemType.HEAD_ARMOR)
hood_b.add_flag(ItemFlag.IS_MERCHANDISE)
hood_b.add_flag(ItemFlag.IS_CIVILIAN)
hood_b.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
hood_b.set_price(9)
hood_b.add_modifier(IModBit.TETTERED)
hood_b.add_modifier(IModBit.RAGGED)
hood_b.add_modifier(IModBit.STURDY)
hood_b.add_modifier(IModBit.THICK)
hood_b.add_modifier(IModBit.HARDENED)
hood_b.set_weight(1.0)
hood_b.set_abundance(100)
hood_b.set_head_armor(10)


hood_c = Item("hood_c", "Hood")
hood_c.add_mesh(ItemMesh("hood_c"))
hood_c.add_flag(ItemType.HEAD_ARMOR)
hood_c.add_flag(ItemFlag.IS_MERCHANDISE)
hood_c.add_flag(ItemFlag.IS_CIVILIAN)
hood_c.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
hood_c.set_price(9)
hood_c.add_modifier(IModBit.TETTERED)
hood_c.add_modifier(IModBit.RAGGED)
hood_c.add_modifier(IModBit.STURDY)
hood_c.add_modifier(IModBit.THICK)
hood_c.add_modifier(IModBit.HARDENED)
hood_c.set_weight(1.0)
hood_c.set_abundance(100)
hood_c.set_head_armor(10)


hood_d = Item("hood_d", "Hood")
hood_d.add_mesh(ItemMesh("hood_d"))
hood_d.add_flag(ItemType.HEAD_ARMOR)
hood_d.add_flag(ItemFlag.IS_MERCHANDISE)
hood_d.add_flag(ItemFlag.IS_CIVILIAN)
hood_d.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
hood_d.set_price(9)
hood_d.add_modifier(IModBit.TETTERED)
hood_d.add_modifier(IModBit.RAGGED)
hood_d.add_modifier(IModBit.STURDY)
hood_d.add_modifier(IModBit.THICK)
hood_d.add_modifier(IModBit.HARDENED)
hood_d.set_weight(1.0)
hood_d.set_abundance(100)
hood_d.set_head_armor(10)


headcloth = Item("headcloth", "Headcloth")
headcloth.add_mesh(ItemMesh("headcloth_a_new"))
headcloth.add_flag(ItemType.HEAD_ARMOR)
headcloth.add_flag(ItemFlag.IS_MERCHANDISE)
headcloth.add_flag(ItemFlag.IS_CIVILIAN)
headcloth.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
headcloth.set_price(1)
headcloth.add_modifier(IModBit.TETTERED)
headcloth.add_modifier(IModBit.RAGGED)
headcloth.add_modifier(IModBit.STURDY)
headcloth.add_modifier(IModBit.THICK)
headcloth.add_modifier(IModBit.HARDENED)
headcloth.set_weight(0.5)
headcloth.set_abundance(100)
headcloth.set_head_armor(4)


woolen_hood = Item("woolen_hood", "Woolen_Hood")
woolen_hood.add_mesh(ItemMesh("woolen_hood"))
woolen_hood.add_flag(ItemType.HEAD_ARMOR)
woolen_hood.add_flag(ItemFlag.IS_MERCHANDISE)
woolen_hood.add_flag(ItemFlag.IS_CIVILIAN)
woolen_hood.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
woolen_hood.set_price(4)
woolen_hood.add_modifier(IModBit.TETTERED)
woolen_hood.add_modifier(IModBit.RAGGED)
woolen_hood.add_modifier(IModBit.STURDY)
woolen_hood.add_modifier(IModBit.THICK)
woolen_hood.add_modifier(IModBit.HARDENED)
woolen_hood.set_weight(1.0)
woolen_hood.set_abundance(100)
woolen_hood.set_head_armor(8)


arming_cap = Item("arming_cap", "Arming_Cap")
arming_cap.add_mesh(ItemMesh("arming_cap_a_new"))
arming_cap.add_flag(ItemType.HEAD_ARMOR)
arming_cap.add_flag(ItemFlag.IS_MERCHANDISE)
arming_cap.add_flag(ItemFlag.IS_CIVILIAN)
arming_cap.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
arming_cap.set_price(5)
arming_cap.add_modifier(IModBit.TETTERED)
arming_cap.add_modifier(IModBit.RAGGED)
arming_cap.add_modifier(IModBit.STURDY)
arming_cap.add_modifier(IModBit.THICK)
arming_cap.add_modifier(IModBit.HARDENED)
arming_cap.set_weight(1.0)
arming_cap.set_abundance(100)
arming_cap.set_head_armor(7)


fur_hat = Item("fur_hat", "Fur_Hat")
fur_hat.add_mesh(ItemMesh("fur_hat_a_new"))
fur_hat.add_flag(ItemType.HEAD_ARMOR)
fur_hat.add_flag(ItemFlag.IS_MERCHANDISE)
fur_hat.add_flag(ItemFlag.IS_CIVILIAN)
fur_hat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
fur_hat.set_price(4)
fur_hat.add_modifier(IModBit.TETTERED)
fur_hat.add_modifier(IModBit.RAGGED)
fur_hat.add_modifier(IModBit.STURDY)
fur_hat.add_modifier(IModBit.THICK)
fur_hat.add_modifier(IModBit.HARDENED)
fur_hat.set_weight(0.5)
fur_hat.set_abundance(100)
fur_hat.set_head_armor(8)


nomad_cap = Item("nomad_cap", "Nomad_Cap")
nomad_cap.add_mesh(ItemMesh("nomad_cap_a_new"))
nomad_cap.add_flag(ItemType.HEAD_ARMOR)
nomad_cap.add_flag(ItemFlag.IS_MERCHANDISE)
nomad_cap.add_flag(ItemFlag.IS_CIVILIAN)
nomad_cap.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
nomad_cap.set_price(6)
nomad_cap.add_modifier(IModBit.TETTERED)
nomad_cap.add_modifier(IModBit.RAGGED)
nomad_cap.add_modifier(IModBit.STURDY)
nomad_cap.add_modifier(IModBit.THICK)
nomad_cap.add_modifier(IModBit.HARDENED)
nomad_cap.set_weight(0.75)
nomad_cap.set_abundance(100)
nomad_cap.set_head_armor(10)


nomad_cap_b = Item("nomad_cap_b", "Nomad_Cap")
nomad_cap_b.add_mesh(ItemMesh("nomad_cap_b_new"))
nomad_cap_b.add_flag(ItemType.HEAD_ARMOR)
nomad_cap_b.add_flag(ItemFlag.IS_MERCHANDISE)
nomad_cap_b.add_flag(ItemFlag.IS_CIVILIAN)
nomad_cap_b.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
nomad_cap_b.set_price(6)
nomad_cap_b.add_modifier(IModBit.TETTERED)
nomad_cap_b.add_modifier(IModBit.RAGGED)
nomad_cap_b.add_modifier(IModBit.STURDY)
nomad_cap_b.add_modifier(IModBit.THICK)
nomad_cap_b.add_modifier(IModBit.HARDENED)
nomad_cap_b.set_weight(0.75)
nomad_cap_b.set_abundance(100)
nomad_cap_b.set_head_armor(13)


steppe_cap = Item("steppe_cap", "Steppe_Cap")
steppe_cap.add_mesh(ItemMesh("steppe_cap_a_new"))
steppe_cap.add_flag(ItemType.HEAD_ARMOR)
steppe_cap.add_flag(ItemFlag.IS_MERCHANDISE)
steppe_cap.add_flag(ItemFlag.IS_CIVILIAN)
steppe_cap.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
steppe_cap.set_price(14)
steppe_cap.add_modifier(IModBit.TETTERED)
steppe_cap.add_modifier(IModBit.RAGGED)
steppe_cap.add_modifier(IModBit.STURDY)
steppe_cap.add_modifier(IModBit.THICK)
steppe_cap.add_modifier(IModBit.HARDENED)
steppe_cap.set_weight(1.0)
steppe_cap.set_abundance(100)
steppe_cap.set_head_armor(14)


padded_coif = Item("padded_coif", "Padded_Coif")
padded_coif.add_mesh(ItemMesh("padded_coif_a_new"))
padded_coif.add_flag(ItemType.HEAD_ARMOR)
padded_coif.add_flag(ItemFlag.IS_MERCHANDISE)
padded_coif.set_price(6)
padded_coif.add_modifier(IModBit.TETTERED)
padded_coif.add_modifier(IModBit.RAGGED)
padded_coif.add_modifier(IModBit.STURDY)
padded_coif.add_modifier(IModBit.THICK)
padded_coif.add_modifier(IModBit.HARDENED)
padded_coif.set_weight(1.0)
padded_coif.set_abundance(100)
padded_coif.set_head_armor(11)


woolen_cap = Item("woolen_cap", "Woolen_Cap")
woolen_cap.add_mesh(ItemMesh("woolen_cap_new"))
woolen_cap.add_flag(ItemType.HEAD_ARMOR)
woolen_cap.add_flag(ItemFlag.IS_MERCHANDISE)
woolen_cap.add_flag(ItemFlag.IS_CIVILIAN)
woolen_cap.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
woolen_cap.set_price(2)
woolen_cap.add_modifier(IModBit.TETTERED)
woolen_cap.add_modifier(IModBit.RAGGED)
woolen_cap.add_modifier(IModBit.STURDY)
woolen_cap.add_modifier(IModBit.THICK)
woolen_cap.add_modifier(IModBit.HARDENED)
woolen_cap.set_weight(1.0)
woolen_cap.set_abundance(100)
woolen_cap.set_head_armor(6)


felt_hat = Item("felt_hat", "Felt_Hat")
felt_hat.add_mesh(ItemMesh("felt_hat_a_new"))
felt_hat.add_flag(ItemType.HEAD_ARMOR)
felt_hat.add_flag(ItemFlag.IS_MERCHANDISE)
felt_hat.add_flag(ItemFlag.IS_CIVILIAN)
felt_hat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
felt_hat.set_price(4)
felt_hat.add_modifier(IModBit.TETTERED)
felt_hat.add_modifier(IModBit.RAGGED)
felt_hat.add_modifier(IModBit.STURDY)
felt_hat.add_modifier(IModBit.THICK)
felt_hat.add_modifier(IModBit.HARDENED)
felt_hat.set_weight(1.0)
felt_hat.set_abundance(100)
felt_hat.set_head_armor(8)


felt_hat_b = Item("felt_hat_b", "Felt_Hat")
felt_hat_b.add_mesh(ItemMesh("felt_hat_b_new"))
felt_hat_b.add_flag(ItemType.HEAD_ARMOR)
felt_hat_b.add_flag(ItemFlag.IS_MERCHANDISE)
felt_hat_b.add_flag(ItemFlag.IS_CIVILIAN)
felt_hat_b.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
felt_hat_b.set_price(4)
felt_hat_b.add_modifier(IModBit.TETTERED)
felt_hat_b.add_modifier(IModBit.RAGGED)
felt_hat_b.add_modifier(IModBit.STURDY)
felt_hat_b.add_modifier(IModBit.THICK)
felt_hat_b.add_modifier(IModBit.HARDENED)
felt_hat_b.set_weight(1.0)
felt_hat_b.set_abundance(100)
felt_hat_b.set_head_armor(8)


leather_cap = Item("leather_cap", "Leather_Cap")
leather_cap.add_mesh(ItemMesh("leather_cap_a_new"))
leather_cap.add_flag(ItemType.HEAD_ARMOR)
leather_cap.add_flag(ItemFlag.IS_MERCHANDISE)
leather_cap.add_flag(ItemFlag.IS_CIVILIAN)
leather_cap.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
leather_cap.set_price(8)
leather_cap.add_modifier(IModBit.TETTERED)
leather_cap.add_modifier(IModBit.RAGGED)
leather_cap.add_modifier(IModBit.STURDY)
leather_cap.add_modifier(IModBit.THICK)
leather_cap.add_modifier(IModBit.HARDENED)
leather_cap.set_weight(1.0)
leather_cap.set_abundance(100)
leather_cap.set_head_armor(18)


female_hood = Item("female_hood", "Lady's_Hood")
female_hood.add_mesh(ItemMesh("ladys_hood_new"))
female_hood.add_flag(ItemType.HEAD_ARMOR)
female_hood.add_flag(ItemFlag.IS_MERCHANDISE)
female_hood.add_flag(ItemFlag.IS_CIVILIAN)
female_hood.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
female_hood.set_price(9)
female_hood.add_modifier(IModBit.TETTERED)
female_hood.add_modifier(IModBit.RAGGED)
female_hood.add_modifier(IModBit.STURDY)
female_hood.add_modifier(IModBit.THICK)
female_hood.add_modifier(IModBit.HARDENED)
female_hood.set_weight(1.0)
female_hood.set_abundance(100)
female_hood.set_head_armor(10)


leather_steppe_cap_a = Item("leather_steppe_cap_a", "Steppe_Cap")
leather_steppe_cap_a.add_mesh(ItemMesh("leather_steppe_cap_a_new"))
leather_steppe_cap_a.add_flag(ItemType.HEAD_ARMOR)
leather_steppe_cap_a.add_flag(ItemFlag.IS_MERCHANDISE)
leather_steppe_cap_a.set_price(24)
leather_steppe_cap_a.add_modifier(IModBit.TETTERED)
leather_steppe_cap_a.add_modifier(IModBit.RAGGED)
leather_steppe_cap_a.add_modifier(IModBit.STURDY)
leather_steppe_cap_a.add_modifier(IModBit.THICK)
leather_steppe_cap_a.add_modifier(IModBit.HARDENED)
leather_steppe_cap_a.set_weight(1.0)
leather_steppe_cap_a.set_abundance(100)
leather_steppe_cap_a.set_head_armor(15)


leather_steppe_cap_b = Item("leather_steppe_cap_b", "Steppe_Cap_")
leather_steppe_cap_b.add_mesh(ItemMesh("tattered_steppe_cap_b_new"))
leather_steppe_cap_b.add_flag(ItemType.HEAD_ARMOR)
leather_steppe_cap_b.add_flag(ItemFlag.IS_MERCHANDISE)
leather_steppe_cap_b.set_price(36)
leather_steppe_cap_b.add_modifier(IModBit.TETTERED)
leather_steppe_cap_b.add_modifier(IModBit.RAGGED)
leather_steppe_cap_b.add_modifier(IModBit.STURDY)
leather_steppe_cap_b.add_modifier(IModBit.THICK)
leather_steppe_cap_b.add_modifier(IModBit.HARDENED)
leather_steppe_cap_b.set_weight(1.0)
leather_steppe_cap_b.set_abundance(100)
leather_steppe_cap_b.set_head_armor(16)


leather_steppe_cap_c = Item("leather_steppe_cap_c", "Steppe_Cap")
leather_steppe_cap_c.add_mesh(ItemMesh("steppe_cap_a_new"))
leather_steppe_cap_c.add_flag(ItemType.HEAD_ARMOR)
leather_steppe_cap_c.add_flag(ItemFlag.IS_MERCHANDISE)
leather_steppe_cap_c.set_price(51)
leather_steppe_cap_c.add_modifier(IModBit.TETTERED)
leather_steppe_cap_c.add_modifier(IModBit.RAGGED)
leather_steppe_cap_c.add_modifier(IModBit.STURDY)
leather_steppe_cap_c.add_modifier(IModBit.THICK)
leather_steppe_cap_c.add_modifier(IModBit.HARDENED)
leather_steppe_cap_c.set_weight(1.0)
leather_steppe_cap_c.set_abundance(100)
leather_steppe_cap_c.set_head_armor(16)


leather_warrior_cap = Item("leather_warrior_cap", "Leather_Warrior_Cap")
leather_warrior_cap.add_mesh(ItemMesh("skull_cap_new_b"))
leather_warrior_cap.add_flag(ItemType.HEAD_ARMOR)
leather_warrior_cap.add_flag(ItemFlag.IS_MERCHANDISE)
leather_warrior_cap.add_flag(ItemFlag.IS_CIVILIAN)
leather_warrior_cap.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
leather_warrior_cap.set_price(14)
leather_warrior_cap.add_modifier(IModBit.TETTERED)
leather_warrior_cap.add_modifier(IModBit.RAGGED)
leather_warrior_cap.add_modifier(IModBit.STURDY)
leather_warrior_cap.add_modifier(IModBit.THICK)
leather_warrior_cap.add_modifier(IModBit.HARDENED)
leather_warrior_cap.set_weight(1.0)
leather_warrior_cap.set_abundance(100)
leather_warrior_cap.set_head_armor(18)


skullcap = Item("skullcap", "Skullcap")
skullcap.add_mesh(ItemMesh("skull_cap_new_a"))
skullcap.add_flag(ItemType.HEAD_ARMOR)
skullcap.add_flag(ItemFlag.IS_MERCHANDISE)
skullcap.set_price(60)
skullcap.add_modifier(IModBit.CRACKED)
skullcap.add_modifier(IModBit.RUSTY)
skullcap.add_modifier(IModBit.BATTERED)
skullcap.add_modifier(IModBit.CRUDE)
skullcap.add_modifier(IModBit.THICK)
skullcap.add_modifier(IModBit.REINFORCED)
skullcap.add_modifier(IModBit.LORDLY)
skullcap.set_weight(1.0)
skullcap.set_abundance(100)
skullcap.set_head_armor(20)


mail_coif = Item("mail_coif", "Mail_Coif")
mail_coif.add_mesh(ItemMesh("mail_coif_new"))
mail_coif.add_flag(ItemType.HEAD_ARMOR)
mail_coif.add_flag(ItemFlag.IS_MERCHANDISE)
mail_coif.set_price(71)
mail_coif.add_modifier(IModBit.RUSTY)
mail_coif.add_modifier(IModBit.BATTERED)
mail_coif.add_modifier(IModBit.CRUDE)
mail_coif.add_modifier(IModBit.THICK)
mail_coif.add_modifier(IModBit.REINFORCED)
mail_coif.add_modifier(IModBit.LORDLY)
mail_coif.set_weight(1.25)
mail_coif.set_abundance(100)
mail_coif.set_head_armor(22)
mail_coif.set_difficulty(7)


footman_helmet = Item("footman_helmet", "Footman's_Helmet")
footman_helmet.add_mesh(ItemMesh("skull_cap_new"))
footman_helmet.add_flag(ItemType.HEAD_ARMOR)
footman_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
footman_helmet.set_price(95)
footman_helmet.add_modifier(IModBit.CRACKED)
footman_helmet.add_modifier(IModBit.RUSTY)
footman_helmet.add_modifier(IModBit.BATTERED)
footman_helmet.add_modifier(IModBit.CRUDE)
footman_helmet.add_modifier(IModBit.THICK)
footman_helmet.add_modifier(IModBit.REINFORCED)
footman_helmet.add_modifier(IModBit.LORDLY)
footman_helmet.set_weight(1.5)
footman_helmet.set_abundance(100)
footman_helmet.set_head_armor(24)


nasal_helmet = Item("nasal_helmet", "Nasal_Helmet")
nasal_helmet.add_mesh(ItemMesh("nasal_helmet_b"))
nasal_helmet.add_flag(ItemType.HEAD_ARMOR)
nasal_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
nasal_helmet.set_price(121)
nasal_helmet.add_modifier(IModBit.CRACKED)
nasal_helmet.add_modifier(IModBit.RUSTY)
nasal_helmet.add_modifier(IModBit.BATTERED)
nasal_helmet.add_modifier(IModBit.CRUDE)
nasal_helmet.add_modifier(IModBit.THICK)
nasal_helmet.add_modifier(IModBit.REINFORCED)
nasal_helmet.add_modifier(IModBit.LORDLY)
nasal_helmet.set_weight(1.25)
nasal_helmet.set_abundance(100)
nasal_helmet.set_head_armor(26)
nasal_helmet.set_difficulty(7)


norman_helmet = Item("norman_helmet", "Helmet_with_Cap")
norman_helmet.add_mesh(ItemMesh("norman_helmet_a"))
norman_helmet.add_flag(ItemType.HEAD_ARMOR)
norman_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
norman_helmet.add_flag(ItemFlag.FITS_TO_HEAD)
norman_helmet.add_flag(ItemFlag.OFFSET_LANCE)
norman_helmet.set_price(147)
norman_helmet.add_modifier(IModBit.CRACKED)
norman_helmet.add_modifier(IModBit.RUSTY)
norman_helmet.add_modifier(IModBit.BATTERED)
norman_helmet.add_modifier(IModBit.CRUDE)
norman_helmet.add_modifier(IModBit.THICK)
norman_helmet.add_modifier(IModBit.REINFORCED)
norman_helmet.add_modifier(IModBit.LORDLY)
norman_helmet.set_weight(1.25)
norman_helmet.set_abundance(100)
norman_helmet.set_head_armor(28)
norman_helmet.set_difficulty(7)


segmented_helmet = Item("segmented_helmet", "Segmented_Helmet")
segmented_helmet.add_mesh(ItemMesh("segmented_helm_new"))
segmented_helmet.add_flag(ItemType.HEAD_ARMOR)
segmented_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
segmented_helmet.set_price(174)
segmented_helmet.add_modifier(IModBit.CRACKED)
segmented_helmet.add_modifier(IModBit.RUSTY)
segmented_helmet.add_modifier(IModBit.BATTERED)
segmented_helmet.add_modifier(IModBit.CRUDE)
segmented_helmet.add_modifier(IModBit.THICK)
segmented_helmet.add_modifier(IModBit.REINFORCED)
segmented_helmet.add_modifier(IModBit.LORDLY)
segmented_helmet.set_weight(1.25)
segmented_helmet.set_abundance(100)
segmented_helmet.set_head_armor(31)
segmented_helmet.set_difficulty(7)


helmet_with_neckguard = Item("helmet_with_neckguard", "Helmet_with_Neckguard")
helmet_with_neckguard.add_mesh(ItemMesh("neckguard_helm_new"))
helmet_with_neckguard.add_flag(ItemType.HEAD_ARMOR)
helmet_with_neckguard.add_flag(ItemFlag.IS_MERCHANDISE)
helmet_with_neckguard.set_price(190)
helmet_with_neckguard.add_modifier(IModBit.CRACKED)
helmet_with_neckguard.add_modifier(IModBit.RUSTY)
helmet_with_neckguard.add_modifier(IModBit.BATTERED)
helmet_with_neckguard.add_modifier(IModBit.CRUDE)
helmet_with_neckguard.add_modifier(IModBit.THICK)
helmet_with_neckguard.add_modifier(IModBit.REINFORCED)
helmet_with_neckguard.add_modifier(IModBit.LORDLY)
helmet_with_neckguard.set_weight(1.5)
helmet_with_neckguard.set_abundance(100)
helmet_with_neckguard.set_head_armor(32)
helmet_with_neckguard.set_difficulty(7)


flat_topped_helmet = Item("flat_topped_helmet", "Flat_Topped_Helmet")
flat_topped_helmet.add_mesh(ItemMesh("flattop_helmet_new"))
flat_topped_helmet.add_flag(ItemType.HEAD_ARMOR)
flat_topped_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
flat_topped_helmet.set_price(203)
flat_topped_helmet.add_modifier(IModBit.CRACKED)
flat_topped_helmet.add_modifier(IModBit.RUSTY)
flat_topped_helmet.add_modifier(IModBit.BATTERED)
flat_topped_helmet.add_modifier(IModBit.CRUDE)
flat_topped_helmet.add_modifier(IModBit.THICK)
flat_topped_helmet.add_modifier(IModBit.REINFORCED)
flat_topped_helmet.add_modifier(IModBit.LORDLY)
flat_topped_helmet.set_weight(1.75)
flat_topped_helmet.set_abundance(100)
flat_topped_helmet.set_head_armor(33)
flat_topped_helmet.set_difficulty(7)


kettle_hat = Item("kettle_hat", "Kettle_Hat")
kettle_hat.add_mesh(ItemMesh("kettle_hat_new"))
kettle_hat.add_flag(ItemType.HEAD_ARMOR)
kettle_hat.add_flag(ItemFlag.IS_MERCHANDISE)
kettle_hat.set_price(240)
kettle_hat.add_modifier(IModBit.CRACKED)
kettle_hat.add_modifier(IModBit.RUSTY)
kettle_hat.add_modifier(IModBit.BATTERED)
kettle_hat.add_modifier(IModBit.CRUDE)
kettle_hat.add_modifier(IModBit.THICK)
kettle_hat.add_modifier(IModBit.REINFORCED)
kettle_hat.add_modifier(IModBit.LORDLY)
kettle_hat.set_weight(1.75)
kettle_hat.set_abundance(100)
kettle_hat.set_head_armor(35)
kettle_hat.set_difficulty(7)


spiked_helmet = Item("spiked_helmet", "Spiked_Helmet")
spiked_helmet.add_mesh(ItemMesh("spiked_helmet_new"))
spiked_helmet.add_flag(ItemType.HEAD_ARMOR)
spiked_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
spiked_helmet.set_price(278)
spiked_helmet.add_modifier(IModBit.CRACKED)
spiked_helmet.add_modifier(IModBit.RUSTY)
spiked_helmet.add_modifier(IModBit.BATTERED)
spiked_helmet.add_modifier(IModBit.CRUDE)
spiked_helmet.add_modifier(IModBit.THICK)
spiked_helmet.add_modifier(IModBit.REINFORCED)
spiked_helmet.add_modifier(IModBit.LORDLY)
spiked_helmet.set_weight(2.0)
spiked_helmet.set_abundance(100)
spiked_helmet.set_head_armor(38)
spiked_helmet.set_difficulty(7)


nordic_helmet = Item("nordic_helmet", "Nordic_Helmet")
nordic_helmet.add_mesh(ItemMesh("helmet_w_eyeguard_new"))
nordic_helmet.add_flag(ItemType.HEAD_ARMOR)
nordic_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
nordic_helmet.set_price(340)
nordic_helmet.add_modifier(IModBit.CRACKED)
nordic_helmet.add_modifier(IModBit.RUSTY)
nordic_helmet.add_modifier(IModBit.BATTERED)
nordic_helmet.add_modifier(IModBit.CRUDE)
nordic_helmet.add_modifier(IModBit.THICK)
nordic_helmet.add_modifier(IModBit.REINFORCED)
nordic_helmet.add_modifier(IModBit.LORDLY)
nordic_helmet.set_weight(2.0)
nordic_helmet.set_abundance(100)
nordic_helmet.set_head_armor(40)
nordic_helmet.set_difficulty(7)


khergit_lady_hat = Item("khergit_lady_hat", "Khergit_Lady_Hat")
khergit_lady_hat.add_mesh(ItemMesh("khergit_lady_hat"))
khergit_lady_hat.add_flag(ItemType.HEAD_ARMOR)
khergit_lady_hat.add_flag(ItemFlag.COVERS_LEGS)
khergit_lady_hat.add_flag(ItemFlag.DOESNT_COVER_HAIR)
khergit_lady_hat.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
khergit_lady_hat.add_flag(ItemFlag.IS_CIVILIAN)
khergit_lady_hat.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
khergit_lady_hat.add_flag(ItemFlag.FITS_TO_HEAD)
khergit_lady_hat.add_flag(ItemFlag.OFFSET_LANCE)
khergit_lady_hat.set_price(1)
khergit_lady_hat.add_modifier(IModBit.TETTERED)
khergit_lady_hat.add_modifier(IModBit.RAGGED)
khergit_lady_hat.add_modifier(IModBit.STURDY)
khergit_lady_hat.add_modifier(IModBit.THICK)
khergit_lady_hat.add_modifier(IModBit.HARDENED)
khergit_lady_hat.set_weight(0.5)
khergit_lady_hat.set_abundance(100)
khergit_lady_hat.set_head_armor(4)


khergit_lady_hat_b = Item("khergit_lady_hat_b", "Khergit_Lady_Leather_Hat")
khergit_lady_hat_b.add_mesh(ItemMesh("khergit_lady_hat_b"))
khergit_lady_hat_b.add_flag(ItemType.HEAD_ARMOR)
khergit_lady_hat_b.add_flag(ItemFlag.COVERS_LEGS)
khergit_lady_hat_b.add_flag(ItemFlag.DOESNT_COVER_HAIR)
khergit_lady_hat_b.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
khergit_lady_hat_b.add_flag(ItemFlag.IS_CIVILIAN)
khergit_lady_hat_b.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
khergit_lady_hat_b.add_flag(ItemFlag.FITS_TO_HEAD)
khergit_lady_hat_b.add_flag(ItemFlag.OFFSET_LANCE)
khergit_lady_hat_b.set_price(1)
khergit_lady_hat_b.add_modifier(IModBit.TETTERED)
khergit_lady_hat_b.add_modifier(IModBit.RAGGED)
khergit_lady_hat_b.add_modifier(IModBit.STURDY)
khergit_lady_hat_b.add_modifier(IModBit.THICK)
khergit_lady_hat_b.add_modifier(IModBit.HARDENED)
khergit_lady_hat_b.set_weight(0.5)
khergit_lady_hat_b.set_abundance(100)
khergit_lady_hat_b.set_head_armor(4)


sarranid_felt_hat = Item("sarranid_felt_hat", "Sarranid_Felt_Hat")
sarranid_felt_hat.add_mesh(ItemMesh("sar_helmet3"))
sarranid_felt_hat.add_flag(ItemType.HEAD_ARMOR)
sarranid_felt_hat.add_flag(ItemFlag.IS_MERCHANDISE)
sarranid_felt_hat.set_price(16)
sarranid_felt_hat.add_modifier(IModBit.TETTERED)
sarranid_felt_hat.add_modifier(IModBit.RAGGED)
sarranid_felt_hat.add_modifier(IModBit.STURDY)
sarranid_felt_hat.add_modifier(IModBit.THICK)
sarranid_felt_hat.add_modifier(IModBit.HARDENED)
sarranid_felt_hat.set_weight(2.0)
sarranid_felt_hat.set_abundance(100)
sarranid_felt_hat.set_head_armor(5)
sarranid_felt_hat.set_difficulty(7)


turban = Item("turban", "Turban")
turban.add_mesh(ItemMesh("tuareg_open"))
turban.add_flag(ItemType.HEAD_ARMOR)
turban.add_flag(ItemFlag.IS_MERCHANDISE)
turban.set_price(28)
turban.add_modifier(IModBit.TETTERED)
turban.add_modifier(IModBit.RAGGED)
turban.add_modifier(IModBit.STURDY)
turban.add_modifier(IModBit.THICK)
turban.add_modifier(IModBit.HARDENED)
turban.set_weight(1.0)
turban.set_abundance(100)
turban.set_head_armor(11)
turban.set_difficulty(7)


desert_turban = Item("desert_turban", "Desert_Turban")
desert_turban.add_mesh(ItemMesh("tuareg"))
desert_turban.add_flag(ItemType.HEAD_ARMOR)
desert_turban.add_flag(ItemFlag.IS_MERCHANDISE)
desert_turban.add_flag(ItemFlag.COVERS_BEARD)
desert_turban.set_price(38)
desert_turban.add_modifier(IModBit.TETTERED)
desert_turban.add_modifier(IModBit.RAGGED)
desert_turban.add_modifier(IModBit.STURDY)
desert_turban.add_modifier(IModBit.THICK)
desert_turban.add_modifier(IModBit.HARDENED)
desert_turban.set_weight(1.5)
desert_turban.set_abundance(100)
desert_turban.set_head_armor(14)
desert_turban.set_difficulty(7)


sarranid_warrior_cap = Item("sarranid_warrior_cap", "Sarranid_Warrior_Cap")
sarranid_warrior_cap.add_mesh(ItemMesh("tuareg_helmet"))
sarranid_warrior_cap.add_flag(ItemType.HEAD_ARMOR)
sarranid_warrior_cap.add_flag(ItemFlag.IS_MERCHANDISE)
sarranid_warrior_cap.add_flag(ItemFlag.COVERS_BEARD)
sarranid_warrior_cap.set_price(90)
sarranid_warrior_cap.add_modifier(IModBit.CRACKED)
sarranid_warrior_cap.add_modifier(IModBit.RUSTY)
sarranid_warrior_cap.add_modifier(IModBit.BATTERED)
sarranid_warrior_cap.add_modifier(IModBit.CRUDE)
sarranid_warrior_cap.add_modifier(IModBit.THICK)
sarranid_warrior_cap.add_modifier(IModBit.REINFORCED)
sarranid_warrior_cap.add_modifier(IModBit.LORDLY)
sarranid_warrior_cap.set_weight(2.0)
sarranid_warrior_cap.set_abundance(100)
sarranid_warrior_cap.set_head_armor(19)
sarranid_warrior_cap.set_difficulty(7)


sarranid_horseman_helmet = Item("sarranid_horseman_helmet", "Horseman_Helmet")
sarranid_horseman_helmet.add_mesh(ItemMesh("sar_helmet2"))
sarranid_horseman_helmet.add_flag(ItemType.HEAD_ARMOR)
sarranid_horseman_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
sarranid_horseman_helmet.set_price(180)
sarranid_horseman_helmet.add_modifier(IModBit.CRACKED)
sarranid_horseman_helmet.add_modifier(IModBit.RUSTY)
sarranid_horseman_helmet.add_modifier(IModBit.BATTERED)
sarranid_horseman_helmet.add_modifier(IModBit.CRUDE)
sarranid_horseman_helmet.add_modifier(IModBit.THICK)
sarranid_horseman_helmet.add_modifier(IModBit.REINFORCED)
sarranid_horseman_helmet.add_modifier(IModBit.LORDLY)
sarranid_horseman_helmet.set_weight(2.75)
sarranid_horseman_helmet.set_abundance(100)
sarranid_horseman_helmet.set_head_armor(25)
sarranid_horseman_helmet.set_difficulty(7)


sarranid_helmet1 = Item("sarranid_helmet1", "Sarranid_Keffiyeh_Helmet")
sarranid_helmet1.add_mesh(ItemMesh("sar_helmet1"))
sarranid_helmet1.add_flag(ItemType.HEAD_ARMOR)
sarranid_helmet1.add_flag(ItemFlag.IS_MERCHANDISE)
sarranid_helmet1.set_price(290)
sarranid_helmet1.add_modifier(IModBit.CRACKED)
sarranid_helmet1.add_modifier(IModBit.RUSTY)
sarranid_helmet1.add_modifier(IModBit.BATTERED)
sarranid_helmet1.add_modifier(IModBit.CRUDE)
sarranid_helmet1.add_modifier(IModBit.THICK)
sarranid_helmet1.add_modifier(IModBit.REINFORCED)
sarranid_helmet1.add_modifier(IModBit.LORDLY)
sarranid_helmet1.set_weight(2.5)
sarranid_helmet1.set_abundance(100)
sarranid_helmet1.set_head_armor(35)
sarranid_helmet1.set_difficulty(7)


sarranid_mail_coif = Item("sarranid_mail_coif", "Sarranid_Mail_Coif")
sarranid_mail_coif.add_mesh(ItemMesh("tuareg_helmet2"))
sarranid_mail_coif.add_flag(ItemType.HEAD_ARMOR)
sarranid_mail_coif.add_flag(ItemFlag.IS_MERCHANDISE)
sarranid_mail_coif.set_price(430)
sarranid_mail_coif.add_modifier(IModBit.CRACKED)
sarranid_mail_coif.add_modifier(IModBit.RUSTY)
sarranid_mail_coif.add_modifier(IModBit.BATTERED)
sarranid_mail_coif.add_modifier(IModBit.CRUDE)
sarranid_mail_coif.add_modifier(IModBit.THICK)
sarranid_mail_coif.add_modifier(IModBit.REINFORCED)
sarranid_mail_coif.add_modifier(IModBit.LORDLY)
sarranid_mail_coif.set_weight(3.0)
sarranid_mail_coif.set_abundance(100)
sarranid_mail_coif.set_head_armor(41)
sarranid_mail_coif.set_difficulty(7)


sarranid_veiled_helmet = Item("sarranid_veiled_helmet", "Sarranid_Veiled_Helmet")
sarranid_veiled_helmet.add_mesh(ItemMesh("sar_helmet4"))
sarranid_veiled_helmet.add_flag(ItemType.HEAD_ARMOR)
sarranid_veiled_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
sarranid_veiled_helmet.add_flag(ItemFlag.COVERS_BEARD)
sarranid_veiled_helmet.set_price(810)
sarranid_veiled_helmet.add_modifier(IModBit.CRACKED)
sarranid_veiled_helmet.add_modifier(IModBit.RUSTY)
sarranid_veiled_helmet.add_modifier(IModBit.BATTERED)
sarranid_veiled_helmet.add_modifier(IModBit.CRUDE)
sarranid_veiled_helmet.add_modifier(IModBit.THICK)
sarranid_veiled_helmet.add_modifier(IModBit.REINFORCED)
sarranid_veiled_helmet.add_modifier(IModBit.LORDLY)
sarranid_veiled_helmet.set_weight(3.5)
sarranid_veiled_helmet.set_abundance(100)
sarranid_veiled_helmet.set_head_armor(47)
sarranid_veiled_helmet.set_difficulty(7)


nordic_archer_helmet = Item("nordic_archer_helmet", "Nordic_Leather_Helmet")
nordic_archer_helmet.add_mesh(ItemMesh("Helmet_A_vs2"))
nordic_archer_helmet.add_flag(ItemType.HEAD_ARMOR)
nordic_archer_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
nordic_archer_helmet.set_price(40)
nordic_archer_helmet.add_modifier(IModBit.CRACKED)
nordic_archer_helmet.add_modifier(IModBit.RUSTY)
nordic_archer_helmet.add_modifier(IModBit.BATTERED)
nordic_archer_helmet.add_modifier(IModBit.CRUDE)
nordic_archer_helmet.add_modifier(IModBit.THICK)
nordic_archer_helmet.add_modifier(IModBit.REINFORCED)
nordic_archer_helmet.add_modifier(IModBit.LORDLY)
nordic_archer_helmet.set_weight(1.25)
nordic_archer_helmet.set_abundance(100)
nordic_archer_helmet.set_head_armor(14)
nordic_archer_helmet.set_difficulty(7)


nordic_veteran_archer_helmet = Item("nordic_veteran_archer_helmet", "Nordic_Leather_Helmet")
nordic_veteran_archer_helmet.add_mesh(ItemMesh("Helmet_A"))
nordic_veteran_archer_helmet.add_flag(ItemType.HEAD_ARMOR)
nordic_veteran_archer_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
nordic_veteran_archer_helmet.set_price(70)
nordic_veteran_archer_helmet.add_modifier(IModBit.CRACKED)
nordic_veteran_archer_helmet.add_modifier(IModBit.RUSTY)
nordic_veteran_archer_helmet.add_modifier(IModBit.BATTERED)
nordic_veteran_archer_helmet.add_modifier(IModBit.CRUDE)
nordic_veteran_archer_helmet.add_modifier(IModBit.THICK)
nordic_veteran_archer_helmet.add_modifier(IModBit.REINFORCED)
nordic_veteran_archer_helmet.add_modifier(IModBit.LORDLY)
nordic_veteran_archer_helmet.set_weight(1.5)
nordic_veteran_archer_helmet.set_abundance(100)
nordic_veteran_archer_helmet.set_head_armor(20)
nordic_veteran_archer_helmet.set_difficulty(7)


nordic_footman_helmet = Item("nordic_footman_helmet", "Nordic_Footman_Helmet")
nordic_footman_helmet.add_mesh(ItemMesh("Helmet_B_vs2"))
nordic_footman_helmet.add_flag(ItemType.HEAD_ARMOR)
nordic_footman_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
nordic_footman_helmet.add_flag(ItemFlag.FITS_TO_HEAD)
nordic_footman_helmet.add_flag(ItemFlag.OFFSET_LANCE)
nordic_footman_helmet.set_price(150)
nordic_footman_helmet.add_modifier(IModBit.CRACKED)
nordic_footman_helmet.add_modifier(IModBit.RUSTY)
nordic_footman_helmet.add_modifier(IModBit.BATTERED)
nordic_footman_helmet.add_modifier(IModBit.CRUDE)
nordic_footman_helmet.add_modifier(IModBit.THICK)
nordic_footman_helmet.add_modifier(IModBit.REINFORCED)
nordic_footman_helmet.add_modifier(IModBit.LORDLY)
nordic_footman_helmet.set_weight(1.75)
nordic_footman_helmet.set_abundance(100)
nordic_footman_helmet.set_head_armor(30)
nordic_footman_helmet.set_difficulty(7)


nordic_fighter_helmet = Item("nordic_fighter_helmet", "Nordic_Fighter_Helmet")
nordic_fighter_helmet.add_mesh(ItemMesh("Helmet_B"))
nordic_fighter_helmet.add_flag(ItemType.HEAD_ARMOR)
nordic_fighter_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
nordic_fighter_helmet.add_flag(ItemFlag.FITS_TO_HEAD)
nordic_fighter_helmet.add_flag(ItemFlag.OFFSET_LANCE)
nordic_fighter_helmet.set_price(240)
nordic_fighter_helmet.add_modifier(IModBit.CRACKED)
nordic_fighter_helmet.add_modifier(IModBit.RUSTY)
nordic_fighter_helmet.add_modifier(IModBit.BATTERED)
nordic_fighter_helmet.add_modifier(IModBit.CRUDE)
nordic_fighter_helmet.add_modifier(IModBit.THICK)
nordic_fighter_helmet.add_modifier(IModBit.REINFORCED)
nordic_fighter_helmet.add_modifier(IModBit.LORDLY)
nordic_fighter_helmet.set_weight(2.0)
nordic_fighter_helmet.set_abundance(100)
nordic_fighter_helmet.set_head_armor(34)
nordic_fighter_helmet.set_difficulty(7)


nordic_huscarl_helmet = Item("nordic_huscarl_helmet", "Nordic_Huscarl's_Helmet")
nordic_huscarl_helmet.add_mesh(ItemMesh("Helmet_C_vs2"))
nordic_huscarl_helmet.add_flag(ItemType.HEAD_ARMOR)
nordic_huscarl_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
nordic_huscarl_helmet.set_price(390)
nordic_huscarl_helmet.add_modifier(IModBit.CRACKED)
nordic_huscarl_helmet.add_modifier(IModBit.RUSTY)
nordic_huscarl_helmet.add_modifier(IModBit.BATTERED)
nordic_huscarl_helmet.add_modifier(IModBit.CRUDE)
nordic_huscarl_helmet.add_modifier(IModBit.THICK)
nordic_huscarl_helmet.add_modifier(IModBit.REINFORCED)
nordic_huscarl_helmet.add_modifier(IModBit.LORDLY)
nordic_huscarl_helmet.set_weight(2.0)
nordic_huscarl_helmet.set_abundance(100)
nordic_huscarl_helmet.set_head_armor(40)
nordic_huscarl_helmet.set_difficulty(7)


nordic_warlord_helmet = Item("nordic_warlord_helmet", "Nordic_Warlord_Helmet")
nordic_warlord_helmet.add_mesh(ItemMesh("Helmet_C"))
nordic_warlord_helmet.add_flag(ItemType.HEAD_ARMOR)
nordic_warlord_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
nordic_warlord_helmet.set_price(880)
nordic_warlord_helmet.add_modifier(IModBit.CRACKED)
nordic_warlord_helmet.add_modifier(IModBit.RUSTY)
nordic_warlord_helmet.add_modifier(IModBit.BATTERED)
nordic_warlord_helmet.add_modifier(IModBit.CRUDE)
nordic_warlord_helmet.add_modifier(IModBit.THICK)
nordic_warlord_helmet.add_modifier(IModBit.REINFORCED)
nordic_warlord_helmet.add_modifier(IModBit.LORDLY)
nordic_warlord_helmet.set_weight(2.25)
nordic_warlord_helmet.set_abundance(100)
nordic_warlord_helmet.set_head_armor(48)
nordic_warlord_helmet.set_difficulty(7)


vaegir_fur_cap = Item("vaegir_fur_cap", "Cap_with_Fur")
vaegir_fur_cap.add_mesh(ItemMesh("vaeg_helmet3"))
vaegir_fur_cap.add_flag(ItemType.HEAD_ARMOR)
vaegir_fur_cap.add_flag(ItemFlag.IS_MERCHANDISE)
vaegir_fur_cap.set_price(50)
vaegir_fur_cap.add_modifier(IModBit.CRACKED)
vaegir_fur_cap.add_modifier(IModBit.RUSTY)
vaegir_fur_cap.add_modifier(IModBit.BATTERED)
vaegir_fur_cap.add_modifier(IModBit.CRUDE)
vaegir_fur_cap.add_modifier(IModBit.THICK)
vaegir_fur_cap.add_modifier(IModBit.REINFORCED)
vaegir_fur_cap.add_modifier(IModBit.LORDLY)
vaegir_fur_cap.set_weight(1.0)
vaegir_fur_cap.set_abundance(100)
vaegir_fur_cap.set_head_armor(15)
vaegir_fur_cap.set_difficulty(7)


vaegir_fur_helmet = Item("vaegir_fur_helmet", "Vaegir_Helmet")
vaegir_fur_helmet.add_mesh(ItemMesh("vaeg_helmet2"))
vaegir_fur_helmet.add_flag(ItemType.HEAD_ARMOR)
vaegir_fur_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
vaegir_fur_helmet.set_price(110)
vaegir_fur_helmet.add_modifier(IModBit.CRACKED)
vaegir_fur_helmet.add_modifier(IModBit.RUSTY)
vaegir_fur_helmet.add_modifier(IModBit.BATTERED)
vaegir_fur_helmet.add_modifier(IModBit.CRUDE)
vaegir_fur_helmet.add_modifier(IModBit.THICK)
vaegir_fur_helmet.add_modifier(IModBit.REINFORCED)
vaegir_fur_helmet.add_modifier(IModBit.LORDLY)
vaegir_fur_helmet.set_weight(2.0)
vaegir_fur_helmet.set_abundance(100)
vaegir_fur_helmet.set_head_armor(21)
vaegir_fur_helmet.set_difficulty(7)


vaegir_spiked_helmet = Item("vaegir_spiked_helmet", "Spiked_Cap")
vaegir_spiked_helmet.add_mesh(ItemMesh("vaeg_helmet1"))
vaegir_spiked_helmet.add_flag(ItemType.HEAD_ARMOR)
vaegir_spiked_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
vaegir_spiked_helmet.set_price(230)
vaegir_spiked_helmet.add_modifier(IModBit.CRACKED)
vaegir_spiked_helmet.add_modifier(IModBit.RUSTY)
vaegir_spiked_helmet.add_modifier(IModBit.BATTERED)
vaegir_spiked_helmet.add_modifier(IModBit.CRUDE)
vaegir_spiked_helmet.add_modifier(IModBit.THICK)
vaegir_spiked_helmet.add_modifier(IModBit.REINFORCED)
vaegir_spiked_helmet.add_modifier(IModBit.LORDLY)
vaegir_spiked_helmet.set_weight(2.5)
vaegir_spiked_helmet.set_abundance(100)
vaegir_spiked_helmet.set_head_armor(32)
vaegir_spiked_helmet.set_difficulty(7)


vaegir_lamellar_helmet = Item("vaegir_lamellar_helmet", "Helmet_with_Lamellar_Guard")
vaegir_lamellar_helmet.add_mesh(ItemMesh("vaeg_helmet4"))
vaegir_lamellar_helmet.add_flag(ItemType.HEAD_ARMOR)
vaegir_lamellar_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
vaegir_lamellar_helmet.set_price(360)
vaegir_lamellar_helmet.add_modifier(IModBit.CRACKED)
vaegir_lamellar_helmet.add_modifier(IModBit.RUSTY)
vaegir_lamellar_helmet.add_modifier(IModBit.BATTERED)
vaegir_lamellar_helmet.add_modifier(IModBit.CRUDE)
vaegir_lamellar_helmet.add_modifier(IModBit.THICK)
vaegir_lamellar_helmet.add_modifier(IModBit.REINFORCED)
vaegir_lamellar_helmet.add_modifier(IModBit.LORDLY)
vaegir_lamellar_helmet.set_weight(2.75)
vaegir_lamellar_helmet.set_abundance(100)
vaegir_lamellar_helmet.set_head_armor(38)
vaegir_lamellar_helmet.set_difficulty(7)


vaegir_noble_helmet = Item("vaegir_noble_helmet", "Vaegir_Nobleman_Helmet")
vaegir_noble_helmet.add_mesh(ItemMesh("vaeg_helmet7"))
vaegir_noble_helmet.add_flag(ItemType.HEAD_ARMOR)
vaegir_noble_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
vaegir_noble_helmet.set_price(710)
vaegir_noble_helmet.add_modifier(IModBit.CRACKED)
vaegir_noble_helmet.add_modifier(IModBit.RUSTY)
vaegir_noble_helmet.add_modifier(IModBit.BATTERED)
vaegir_noble_helmet.add_modifier(IModBit.CRUDE)
vaegir_noble_helmet.add_modifier(IModBit.THICK)
vaegir_noble_helmet.add_modifier(IModBit.REINFORCED)
vaegir_noble_helmet.add_modifier(IModBit.LORDLY)
vaegir_noble_helmet.set_weight(2.75)
vaegir_noble_helmet.set_abundance(100)
vaegir_noble_helmet.set_head_armor(45)
vaegir_noble_helmet.set_difficulty(7)


vaegir_war_helmet = Item("vaegir_war_helmet", "Vaegir_War_Helmet")
vaegir_war_helmet.add_mesh(ItemMesh("vaeg_helmet6"))
vaegir_war_helmet.add_flag(ItemType.HEAD_ARMOR)
vaegir_war_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
vaegir_war_helmet.set_price(820)
vaegir_war_helmet.add_modifier(IModBit.CRACKED)
vaegir_war_helmet.add_modifier(IModBit.RUSTY)
vaegir_war_helmet.add_modifier(IModBit.BATTERED)
vaegir_war_helmet.add_modifier(IModBit.CRUDE)
vaegir_war_helmet.add_modifier(IModBit.THICK)
vaegir_war_helmet.add_modifier(IModBit.REINFORCED)
vaegir_war_helmet.add_modifier(IModBit.LORDLY)
vaegir_war_helmet.set_weight(3.0)
vaegir_war_helmet.set_abundance(100)
vaegir_war_helmet.set_head_armor(47)
vaegir_war_helmet.set_difficulty(7)


vaegir_mask = Item("vaegir_mask", "Vaegir_War_Mask")
vaegir_mask.add_mesh(ItemMesh("vaeg_helmet9"))
vaegir_mask.add_flag(ItemType.HEAD_ARMOR)
vaegir_mask.add_flag(ItemFlag.IS_MERCHANDISE)
vaegir_mask.add_flag(ItemFlag.COVERS_BEARD)
vaegir_mask.set_price(950)
vaegir_mask.add_modifier(IModBit.CRACKED)
vaegir_mask.add_modifier(IModBit.RUSTY)
vaegir_mask.add_modifier(IModBit.BATTERED)
vaegir_mask.add_modifier(IModBit.CRUDE)
vaegir_mask.add_modifier(IModBit.THICK)
vaegir_mask.add_modifier(IModBit.REINFORCED)
vaegir_mask.add_modifier(IModBit.LORDLY)
vaegir_mask.set_weight(3.5)
vaegir_mask.set_abundance(100)
vaegir_mask.set_head_armor(52)
vaegir_mask.set_difficulty(7)


bascinet = Item("bascinet", "Bascinet")
bascinet.add_mesh(ItemMesh("bascinet_avt_new"))
bascinet.add_flag(ItemType.HEAD_ARMOR)
bascinet.add_flag(ItemFlag.IS_MERCHANDISE)
bascinet.set_price(479)
bascinet.add_modifier(IModBit.CRACKED)
bascinet.add_modifier(IModBit.RUSTY)
bascinet.add_modifier(IModBit.BATTERED)
bascinet.add_modifier(IModBit.CRUDE)
bascinet.add_modifier(IModBit.THICK)
bascinet.add_modifier(IModBit.REINFORCED)
bascinet.add_modifier(IModBit.LORDLY)
bascinet.set_weight(2.25)
bascinet.set_abundance(100)
bascinet.set_head_armor(45)
bascinet.set_difficulty(8)


bascinet_2 = Item("bascinet_2", "Bascinet_with_Aventail")
bascinet_2.add_mesh(ItemMesh("bascinet_new_a"))
bascinet_2.add_flag(ItemType.HEAD_ARMOR)
bascinet_2.add_flag(ItemFlag.IS_MERCHANDISE)
bascinet_2.set_price(479)
bascinet_2.add_modifier(IModBit.CRACKED)
bascinet_2.add_modifier(IModBit.RUSTY)
bascinet_2.add_modifier(IModBit.BATTERED)
bascinet_2.add_modifier(IModBit.CRUDE)
bascinet_2.add_modifier(IModBit.THICK)
bascinet_2.add_modifier(IModBit.REINFORCED)
bascinet_2.add_modifier(IModBit.LORDLY)
bascinet_2.set_weight(2.25)
bascinet_2.set_abundance(100)
bascinet_2.set_head_armor(45)
bascinet_2.set_difficulty(8)


bascinet_3 = Item("bascinet_3", "Bascinet_with_Nose_Guard")
bascinet_3.add_mesh(ItemMesh("bascinet_new_b"))
bascinet_3.add_flag(ItemType.HEAD_ARMOR)
bascinet_3.add_flag(ItemFlag.IS_MERCHANDISE)
bascinet_3.set_price(479)
bascinet_3.add_modifier(IModBit.CRACKED)
bascinet_3.add_modifier(IModBit.RUSTY)
bascinet_3.add_modifier(IModBit.BATTERED)
bascinet_3.add_modifier(IModBit.CRUDE)
bascinet_3.add_modifier(IModBit.THICK)
bascinet_3.add_modifier(IModBit.REINFORCED)
bascinet_3.add_modifier(IModBit.LORDLY)
bascinet_3.set_weight(2.25)
bascinet_3.set_abundance(100)
bascinet_3.set_head_armor(45)
bascinet_3.set_difficulty(8)


guard_helmet = Item("guard_helmet", "Guard_Helmet")
guard_helmet.add_mesh(ItemMesh("reinf_helmet_new"))
guard_helmet.add_flag(ItemType.HEAD_ARMOR)
guard_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
guard_helmet.set_price(555)
guard_helmet.add_modifier(IModBit.CRACKED)
guard_helmet.add_modifier(IModBit.RUSTY)
guard_helmet.add_modifier(IModBit.BATTERED)
guard_helmet.add_modifier(IModBit.CRUDE)
guard_helmet.add_modifier(IModBit.THICK)
guard_helmet.add_modifier(IModBit.REINFORCED)
guard_helmet.add_modifier(IModBit.LORDLY)
guard_helmet.set_weight(2.5)
guard_helmet.set_abundance(100)
guard_helmet.set_head_armor(47)
guard_helmet.set_difficulty(9)


black_helmet = Item("black_helmet", "Black_Helmet")
black_helmet.add_mesh(ItemMesh("black_helm"))
black_helmet.add_flag(ItemType.HEAD_ARMOR)
black_helmet.set_price(638)
black_helmet.add_modifier(IModBit.CRACKED)
black_helmet.add_modifier(IModBit.RUSTY)
black_helmet.add_modifier(IModBit.BATTERED)
black_helmet.add_modifier(IModBit.CRUDE)
black_helmet.add_modifier(IModBit.THICK)
black_helmet.add_modifier(IModBit.REINFORCED)
black_helmet.add_modifier(IModBit.LORDLY)
black_helmet.set_weight(2.75)
black_helmet.set_abundance(100)
black_helmet.set_head_armor(50)
black_helmet.set_difficulty(9)


full_helm = Item("full_helm", "Full_Helm")
full_helm.add_mesh(ItemMesh("great_helmet_new_b"))
full_helm.add_flag(ItemType.HEAD_ARMOR)
full_helm.add_flag(ItemFlag.IS_MERCHANDISE)
full_helm.add_flag(ItemFlag.COVERS_HEAD)
full_helm.add_flag(ItemFlag.IS_COUCHABLE)
full_helm.set_price(811)
full_helm.add_modifier(IModBit.CRACKED)
full_helm.add_modifier(IModBit.RUSTY)
full_helm.add_modifier(IModBit.BATTERED)
full_helm.add_modifier(IModBit.CRUDE)
full_helm.add_modifier(IModBit.THICK)
full_helm.add_modifier(IModBit.REINFORCED)
full_helm.add_modifier(IModBit.LORDLY)
full_helm.set_weight(2.5)
full_helm.set_abundance(100)
full_helm.set_head_armor(51)
full_helm.set_difficulty(10)


great_helmet = Item("great_helmet", "Great_Helmet")
great_helmet.add_mesh(ItemMesh("great_helmet_new"))
great_helmet.add_flag(ItemType.HEAD_ARMOR)
great_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
great_helmet.add_flag(ItemFlag.COVERS_HEAD)
great_helmet.add_flag(ItemFlag.IS_COUCHABLE)
great_helmet.set_price(980)
great_helmet.add_modifier(IModBit.CRACKED)
great_helmet.add_modifier(IModBit.RUSTY)
great_helmet.add_modifier(IModBit.BATTERED)
great_helmet.add_modifier(IModBit.CRUDE)
great_helmet.add_modifier(IModBit.THICK)
great_helmet.add_modifier(IModBit.REINFORCED)
great_helmet.add_modifier(IModBit.LORDLY)
great_helmet.set_weight(2.75)
great_helmet.set_abundance(100)
great_helmet.set_head_armor(53)
great_helmet.set_difficulty(10)


winged_great_helmet = Item("winged_great_helmet", "Winged_Great_Helmet")
winged_great_helmet.add_mesh(ItemMesh("maciejowski_helmet_new"))
winged_great_helmet.add_flag(ItemType.HEAD_ARMOR)
winged_great_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
winged_great_helmet.add_flag(ItemFlag.COVERS_HEAD)
winged_great_helmet.add_flag(ItemFlag.IS_COUCHABLE)
winged_great_helmet.set_price(1240)
winged_great_helmet.add_modifier(IModBit.CRACKED)
winged_great_helmet.add_modifier(IModBit.RUSTY)
winged_great_helmet.add_modifier(IModBit.BATTERED)
winged_great_helmet.add_modifier(IModBit.CRUDE)
winged_great_helmet.add_modifier(IModBit.THICK)
winged_great_helmet.add_modifier(IModBit.REINFORCED)
winged_great_helmet.add_modifier(IModBit.LORDLY)
winged_great_helmet.set_weight(2.75)
winged_great_helmet.set_abundance(100)
winged_great_helmet.set_head_armor(55)
winged_great_helmet.set_difficulty(10)


wooden_stick = Item("wooden_stick", "Wooden_Stick")
wooden_stick.add_mesh(ItemMesh("wooden_stick"))
wooden_stick.add_flag(ItemType.ONE_HANDED_WEAPON)
wooden_stick.add_flag(ItemFlag.IS_MERCHANDISE)
wooden_stick.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
wooden_stick.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
wooden_stick.add_flag(ItemFlag.IS_PRIMARY)
wooden_stick.add_capability(ItemCapability.ONEHANDED_OVERSWING)
wooden_stick.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
wooden_stick.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
wooden_stick.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
wooden_stick.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
wooden_stick.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
wooden_stick.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
wooden_stick.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
wooden_stick.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
wooden_stick.add_capability(ItemCapability.FORCE_64_BITS)
wooden_stick.set_price(4)
wooden_stick.set_weight(2.5)
wooden_stick.set_abundance(100)
wooden_stick.set_hit_points(13312)
wooden_stick.set_speed_rating(99)
wooden_stick.set_weapon_length(63)
wooden_stick.set_thrust_damage(0, 1)
wooden_stick.set_swing_damage(13, 2)


cudgel = Item("cudgel", "Cudgel")
cudgel.add_mesh(ItemMesh("club"))
cudgel.add_flag(ItemType.ONE_HANDED_WEAPON)
cudgel.add_flag(ItemFlag.IS_MERCHANDISE)
cudgel.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
cudgel.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
cudgel.add_flag(ItemFlag.IS_PRIMARY)
cudgel.add_capability(ItemCapability.ONEHANDED_OVERSWING)
cudgel.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
cudgel.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
cudgel.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
cudgel.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
cudgel.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
cudgel.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
cudgel.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
cudgel.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
cudgel.add_capability(ItemCapability.FORCE_64_BITS)
cudgel.set_price(4)
cudgel.set_weight(2.5)
cudgel.set_abundance(100)
cudgel.set_hit_points(13312)
cudgel.set_speed_rating(99)
cudgel.set_weapon_length(70)
cudgel.set_thrust_damage(0, 1)
cudgel.set_swing_damage(13, 2)


hammer = Item("hammer", "Hammer")
hammer.add_mesh(ItemMesh("iron_hammer_new"))
hammer.add_flag(ItemType.ONE_HANDED_WEAPON)
hammer.add_flag(ItemFlag.IS_MERCHANDISE)
hammer.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
hammer.add_flag(ItemFlag.IS_PRIMARY)
hammer.add_flag(ItemFlag.CAN_KNOCK_DOWN)
hammer.add_capability(ItemCapability.ONEHANDED_OVERSWING)
hammer.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
hammer.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
hammer.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
hammer.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
hammer.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
hammer.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
hammer.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
hammer.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
hammer.add_capability(ItemCapability.FORCE_64_BITS)
hammer.set_price(7)
hammer.add_modifier(IModBit.RUSTY)
hammer.add_modifier(IModBit.CHIPPED)
hammer.add_modifier(IModBit.HEAVY)
hammer.set_weight(2.0)
hammer.set_abundance(100)
hammer.set_hit_points(24576)
hammer.set_speed_rating(100)
hammer.set_weapon_length(55)
hammer.set_thrust_damage(0, 1)
hammer.set_swing_damage(24, 2)


club = Item("club", "Club")
club.add_mesh(ItemMesh("club"))
club.add_flag(ItemType.ONE_HANDED_WEAPON)
club.add_flag(ItemFlag.IS_MERCHANDISE)
club.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
club.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
club.add_flag(ItemFlag.IS_PRIMARY)
club.add_flag(ItemFlag.CAN_KNOCK_DOWN)
club.add_capability(ItemCapability.ONEHANDED_OVERSWING)
club.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
club.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
club.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
club.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
club.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
club.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
club.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
club.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
club.add_capability(ItemCapability.FORCE_64_BITS)
club.set_price(11)
club.set_weight(2.5)
club.set_abundance(100)
club.set_hit_points(20480)
club.set_speed_rating(98)
club.set_weapon_length(70)
club.set_thrust_damage(0, 1)
club.set_swing_damage(20, 2)


winged_mace = Item("winged_mace", "Flanged_Mace")
winged_mace.add_mesh(ItemMesh("flanged_mace"))
winged_mace.add_flag(ItemType.ONE_HANDED_WEAPON)
winged_mace.add_flag(ItemFlag.IS_MERCHANDISE)
winged_mace.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
winged_mace.add_flag(ItemFlag.IS_PRIMARY)
winged_mace.add_flag(ItemFlag.CAN_KNOCK_DOWN)
winged_mace.add_capability(ItemCapability.ONEHANDED_OVERSWING)
winged_mace.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
winged_mace.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
winged_mace.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
winged_mace.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
winged_mace.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
winged_mace.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
winged_mace.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
winged_mace.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
winged_mace.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
winged_mace.add_capability(ItemCapability.FORCE_64_BITS)
winged_mace.set_price(122)
winged_mace.add_modifier(IModBit.RUSTY)
winged_mace.add_modifier(IModBit.CHIPPED)
winged_mace.add_modifier(IModBit.HEAVY)
winged_mace.set_weight(3.5)
winged_mace.set_abundance(100)
winged_mace.set_hit_points(24576)
winged_mace.set_speed_rating(103)
winged_mace.set_weapon_length(70)
winged_mace.set_thrust_damage(0, 1)
winged_mace.set_swing_damage(24, 2)


spiked_mace = Item("spiked_mace", "Spiked_Mace")
spiked_mace.add_mesh(ItemMesh("spiked_mace_new"))
spiked_mace.add_flag(ItemType.ONE_HANDED_WEAPON)
spiked_mace.add_flag(ItemFlag.IS_MERCHANDISE)
spiked_mace.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
spiked_mace.add_flag(ItemFlag.IS_PRIMARY)
spiked_mace.add_flag(ItemFlag.CAN_KNOCK_DOWN)
spiked_mace.add_capability(ItemCapability.ONEHANDED_OVERSWING)
spiked_mace.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
spiked_mace.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
spiked_mace.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
spiked_mace.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
spiked_mace.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
spiked_mace.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
spiked_mace.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
spiked_mace.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
spiked_mace.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
spiked_mace.add_capability(ItemCapability.FORCE_64_BITS)
spiked_mace.set_price(180)
spiked_mace.add_modifier(IModBit.RUSTY)
spiked_mace.add_modifier(IModBit.CHIPPED)
spiked_mace.add_modifier(IModBit.BALANCED)
spiked_mace.add_modifier(IModBit.HEAVY)
spiked_mace.set_weight(3.5)
spiked_mace.set_abundance(100)
spiked_mace.set_hit_points(28672)
spiked_mace.set_speed_rating(98)
spiked_mace.set_weapon_length(70)
spiked_mace.set_thrust_damage(0, 1)
spiked_mace.set_swing_damage(28, 2)


military_hammer = Item("military_hammer", "Military_Hammer")
military_hammer.add_mesh(ItemMesh("military_hammer"))
military_hammer.add_flag(ItemType.ONE_HANDED_WEAPON)
military_hammer.add_flag(ItemFlag.IS_MERCHANDISE)
military_hammer.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
military_hammer.add_flag(ItemFlag.IS_PRIMARY)
military_hammer.add_flag(ItemFlag.CAN_KNOCK_DOWN)
military_hammer.add_capability(ItemCapability.ONEHANDED_OVERSWING)
military_hammer.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
military_hammer.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
military_hammer.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
military_hammer.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
military_hammer.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
military_hammer.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
military_hammer.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
military_hammer.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
military_hammer.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
military_hammer.add_capability(ItemCapability.FORCE_64_BITS)
military_hammer.set_price(317)
military_hammer.add_modifier(IModBit.RUSTY)
military_hammer.add_modifier(IModBit.CHIPPED)
military_hammer.add_modifier(IModBit.HEAVY)
military_hammer.set_weight(2.0)
military_hammer.set_abundance(100)
military_hammer.set_hit_points(31744)
military_hammer.set_speed_rating(95)
military_hammer.set_weapon_length(70)
military_hammer.set_thrust_damage(0, 1)
military_hammer.set_swing_damage(31, 2)


maul = Item("maul", "Maul")
maul.add_mesh(ItemMesh("maul_b"))
maul.add_flag(ItemType.TWO_HANDED_WEAPON)
maul.add_flag(ItemFlag.IS_MERCHANDISE)
maul.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
maul.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
maul.add_flag(ItemFlag.IS_TWO_HANDED)
maul.add_flag(ItemFlag.IS_PRIMARY)
maul.add_flag(ItemFlag.HAS_CRUSH_THROUGH)
maul.add_flag(ItemFlag.IS_UNBALANCED)
maul.add_flag(ItemFlag.CAN_KNOCK_DOWN)
maul.add_capability(ItemCapability.TWOHANDED_OVERSWING)
maul.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
maul.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
maul.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
maul.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
maul.add_capability(ItemCapability.CARRY_SPEAR)
maul.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
maul.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
maul.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
maul.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
maul.add_capability(ItemCapability.FORCE_64_BITS)
maul.set_price(97)
maul.add_modifier(IModBit.RUSTY)
maul.add_modifier(IModBit.CHIPPED)
maul.add_modifier(IModBit.HEAVY)
maul.set_weight(6.0)
maul.set_abundance(100)
maul.set_difficulty(11)
maul.set_hit_points(36864)
maul.set_speed_rating(83)
maul.set_weapon_length(79)
maul.set_thrust_damage(0, 1)
maul.set_swing_damage(36, 2)


sledgehammer = Item("sledgehammer", "Sledgehammer")
sledgehammer.add_mesh(ItemMesh("maul_c"))
sledgehammer.add_flag(ItemType.TWO_HANDED_WEAPON)
sledgehammer.add_flag(ItemFlag.IS_MERCHANDISE)
sledgehammer.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
sledgehammer.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
sledgehammer.add_flag(ItemFlag.IS_TWO_HANDED)
sledgehammer.add_flag(ItemFlag.IS_PRIMARY)
sledgehammer.add_flag(ItemFlag.HAS_CRUSH_THROUGH)
sledgehammer.add_flag(ItemFlag.IS_UNBALANCED)
sledgehammer.add_flag(ItemFlag.CAN_KNOCK_DOWN)
sledgehammer.add_capability(ItemCapability.TWOHANDED_OVERSWING)
sledgehammer.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
sledgehammer.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
sledgehammer.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sledgehammer.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sledgehammer.add_capability(ItemCapability.CARRY_SPEAR)
sledgehammer.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
sledgehammer.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
sledgehammer.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
sledgehammer.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
sledgehammer.add_capability(ItemCapability.FORCE_64_BITS)
sledgehammer.set_price(101)
sledgehammer.add_modifier(IModBit.RUSTY)
sledgehammer.add_modifier(IModBit.CHIPPED)
sledgehammer.add_modifier(IModBit.HEAVY)
sledgehammer.set_weight(7.0)
sledgehammer.set_abundance(100)
sledgehammer.set_difficulty(12)
sledgehammer.set_hit_points(39936)
sledgehammer.set_speed_rating(81)
sledgehammer.set_weapon_length(82)
sledgehammer.set_thrust_damage(0, 1)
sledgehammer.set_swing_damage(39, 2)


warhammer = Item("warhammer", "Great_Hammer")
warhammer.add_mesh(ItemMesh("maul_d"))
warhammer.add_flag(ItemType.TWO_HANDED_WEAPON)
warhammer.add_flag(ItemFlag.IS_MERCHANDISE)
warhammer.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
warhammer.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
warhammer.add_flag(ItemFlag.IS_TWO_HANDED)
warhammer.add_flag(ItemFlag.IS_PRIMARY)
warhammer.add_flag(ItemFlag.HAS_CRUSH_THROUGH)
warhammer.add_flag(ItemFlag.IS_UNBALANCED)
warhammer.add_flag(ItemFlag.CAN_KNOCK_DOWN)
warhammer.add_capability(ItemCapability.TWOHANDED_OVERSWING)
warhammer.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
warhammer.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
warhammer.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
warhammer.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
warhammer.add_capability(ItemCapability.CARRY_SPEAR)
warhammer.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
warhammer.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
warhammer.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
warhammer.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
warhammer.add_capability(ItemCapability.FORCE_64_BITS)
warhammer.set_price(290)
warhammer.add_modifier(IModBit.RUSTY)
warhammer.add_modifier(IModBit.CHIPPED)
warhammer.add_modifier(IModBit.HEAVY)
warhammer.set_weight(9.0)
warhammer.set_abundance(100)
warhammer.set_difficulty(14)
warhammer.set_hit_points(46080)
warhammer.set_speed_rating(79)
warhammer.set_weapon_length(75)
warhammer.set_thrust_damage(0, 1)
warhammer.set_swing_damage(45, 2)


pickaxe = Item("pickaxe", "Pickaxe")
pickaxe.add_mesh(ItemMesh("fighting_pick_new"))
pickaxe.add_flag(ItemType.ONE_HANDED_WEAPON)
pickaxe.add_flag(ItemFlag.IS_MERCHANDISE)
pickaxe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
pickaxe.add_flag(ItemFlag.IS_PRIMARY)
pickaxe.add_capability(ItemCapability.ONEHANDED_OVERSWING)
pickaxe.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
pickaxe.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
pickaxe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
pickaxe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
pickaxe.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
pickaxe.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
pickaxe.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
pickaxe.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
pickaxe.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
pickaxe.add_capability(ItemCapability.FORCE_64_BITS)
pickaxe.set_price(27)
pickaxe.add_modifier(IModBit.RUSTY)
pickaxe.add_modifier(IModBit.CHIPPED)
pickaxe.add_modifier(IModBit.BALANCED)
pickaxe.add_modifier(IModBit.HEAVY)
pickaxe.set_weight(3.0)
pickaxe.set_abundance(100)
pickaxe.set_hit_points(19456)
pickaxe.set_speed_rating(99)
pickaxe.set_weapon_length(70)
pickaxe.set_thrust_damage(0, 1)
pickaxe.set_swing_damage(19, 1)


spiked_club = Item("spiked_club", "Spiked_Club")
spiked_club.add_mesh(ItemMesh("spiked_club"))
spiked_club.add_flag(ItemType.ONE_HANDED_WEAPON)
spiked_club.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
spiked_club.add_flag(ItemFlag.IS_PRIMARY)
spiked_club.add_capability(ItemCapability.ONEHANDED_OVERSWING)
spiked_club.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
spiked_club.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
spiked_club.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
spiked_club.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
spiked_club.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
spiked_club.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
spiked_club.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
spiked_club.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
spiked_club.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
spiked_club.add_capability(ItemCapability.FORCE_64_BITS)
spiked_club.set_price(83)
spiked_club.add_modifier(IModBit.RUSTY)
spiked_club.add_modifier(IModBit.CHIPPED)
spiked_club.add_modifier(IModBit.HEAVY)
spiked_club.set_weight(3.0)
spiked_club.set_abundance(100)
spiked_club.set_hit_points(21504)
spiked_club.set_speed_rating(97)
spiked_club.set_weapon_length(70)
spiked_club.set_thrust_damage(0, 1)
spiked_club.set_swing_damage(21, 1)


fighting_pick = Item("fighting_pick", "Fighting_Pick")
fighting_pick.add_mesh(ItemMesh("fighting_pick_new"))
fighting_pick.add_flag(ItemType.ONE_HANDED_WEAPON)
fighting_pick.add_flag(ItemFlag.IS_MERCHANDISE)
fighting_pick.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
fighting_pick.add_flag(ItemFlag.IS_PRIMARY)
fighting_pick.add_capability(ItemCapability.ONEHANDED_OVERSWING)
fighting_pick.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
fighting_pick.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
fighting_pick.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
fighting_pick.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
fighting_pick.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
fighting_pick.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
fighting_pick.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
fighting_pick.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
fighting_pick.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
fighting_pick.add_capability(ItemCapability.FORCE_64_BITS)
fighting_pick.set_price(108)
fighting_pick.add_modifier(IModBit.RUSTY)
fighting_pick.add_modifier(IModBit.CHIPPED)
fighting_pick.add_modifier(IModBit.BALANCED)
fighting_pick.add_modifier(IModBit.HEAVY)
fighting_pick.set_weight(1.0)
fighting_pick.set_abundance(100)
fighting_pick.set_hit_points(22528)
fighting_pick.set_speed_rating(98)
fighting_pick.set_weapon_length(70)
fighting_pick.set_thrust_damage(0, 1)
fighting_pick.set_swing_damage(22, 1)


military_pick = Item("military_pick", "Military_Pick")
military_pick.add_mesh(ItemMesh("steel_pick_new"))
military_pick.add_flag(ItemType.ONE_HANDED_WEAPON)
military_pick.add_flag(ItemFlag.IS_MERCHANDISE)
military_pick.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
military_pick.add_flag(ItemFlag.IS_PRIMARY)
military_pick.add_capability(ItemCapability.ONEHANDED_OVERSWING)
military_pick.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
military_pick.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
military_pick.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
military_pick.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
military_pick.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
military_pick.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
military_pick.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
military_pick.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
military_pick.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
military_pick.add_capability(ItemCapability.FORCE_64_BITS)
military_pick.set_price(280)
military_pick.add_modifier(IModBit.RUSTY)
military_pick.add_modifier(IModBit.CHIPPED)
military_pick.add_modifier(IModBit.BALANCED)
military_pick.add_modifier(IModBit.HEAVY)
military_pick.set_weight(1.5)
military_pick.set_abundance(100)
military_pick.set_hit_points(31744)
military_pick.set_speed_rating(97)
military_pick.set_weapon_length(70)
military_pick.set_thrust_damage(0, 1)
military_pick.set_swing_damage(31, 1)


morningstar = Item("morningstar", "Morningstar")
morningstar.add_mesh(ItemMesh("mace_morningstar_new"))
morningstar.add_flag(ItemType.TWO_HANDED_WEAPON)
morningstar.add_flag(ItemFlag.IS_MERCHANDISE)
morningstar.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
morningstar.add_flag(ItemFlag.IS_PRIMARY)
morningstar.add_flag(ItemFlag.HAS_CRUSH_THROUGH)
morningstar.add_flag(ItemFlag.IS_UNBALANCED)
morningstar.add_capability(ItemCapability.ONEHANDED_OVERSWING)
morningstar.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
morningstar.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
morningstar.add_capability(ItemCapability.TWOHANDED_OVERSWING)
morningstar.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
morningstar.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
morningstar.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
morningstar.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
morningstar.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
morningstar.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
morningstar.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
morningstar.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
morningstar.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
morningstar.add_capability(ItemCapability.FORCE_64_BITS)
morningstar.set_price(305)
morningstar.add_modifier(IModBit.RUSTY)
morningstar.add_modifier(IModBit.CHIPPED)
morningstar.add_modifier(IModBit.HEAVY)
morningstar.set_weight(4.5)
morningstar.set_abundance(100)
morningstar.set_difficulty(13)
morningstar.set_hit_points(38912)
morningstar.set_speed_rating(95)
morningstar.set_weapon_length(85)
morningstar.set_thrust_damage(0, 1)
morningstar.set_swing_damage(38, 1)


sickle = Item("sickle", "Sickle")
sickle.add_mesh(ItemMesh("sickle"))
sickle.add_flag(ItemType.ONE_HANDED_WEAPON)
sickle.add_flag(ItemFlag.NO_PARRY)
sickle.add_flag(ItemFlag.IS_MERCHANDISE)
sickle.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
sickle.add_flag(ItemFlag.IS_PRIMARY)
sickle.add_flag(ItemFlag.IS_SECONDARY)
sickle.add_capability(ItemCapability.ONEHANDED_OVERSWING)
sickle.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
sickle.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
sickle.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sickle.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sickle.add_capability(ItemCapability.FORCE_64_BITS)
sickle.set_price(9)
sickle.set_weight(1.5)
sickle.set_abundance(100)
sickle.set_hit_points(20480)
sickle.set_speed_rating(99)
sickle.set_weapon_length(40)
sickle.set_thrust_damage(0, 1)
sickle.set_swing_damage(20, 0)


cleaver = Item("cleaver", "Cleaver")
cleaver.add_mesh(ItemMesh("cleaver_new"))
cleaver.add_flag(ItemType.ONE_HANDED_WEAPON)
cleaver.add_flag(ItemFlag.NO_PARRY)
cleaver.add_flag(ItemFlag.IS_MERCHANDISE)
cleaver.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
cleaver.add_flag(ItemFlag.IS_PRIMARY)
cleaver.add_flag(ItemFlag.IS_SECONDARY)
cleaver.add_capability(ItemCapability.ONEHANDED_OVERSWING)
cleaver.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
cleaver.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
cleaver.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
cleaver.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
cleaver.add_capability(ItemCapability.FORCE_64_BITS)
cleaver.set_price(14)
cleaver.set_weight(1.5)
cleaver.set_abundance(100)
cleaver.set_hit_points(24576)
cleaver.set_speed_rating(103)
cleaver.set_weapon_length(35)
cleaver.set_thrust_damage(0, 1)
cleaver.set_swing_damage(24, 0)


knife = Item("knife", "Knife")
knife.add_mesh(ItemMesh("peasant_knife_new"))
knife.add_flag(ItemType.ONE_HANDED_WEAPON)
knife.add_flag(ItemFlag.NO_PARRY)
knife.add_flag(ItemFlag.IS_MERCHANDISE)
knife.add_flag(ItemFlag.IS_PRIMARY)
knife.add_flag(ItemFlag.IS_SECONDARY)
knife.add_capability(ItemCapability.ONEHANDED_TRUST)
knife.add_capability(ItemCapability.ONEHANDED_OVERSWING)
knife.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
knife.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
knife.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
knife.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
knife.add_capability(ItemCapability.CARRY_DAGGER_FRONT_LEFT)
knife.add_capability(ItemCapability.FORCE_64_BITS)
knife.set_price(18)
knife.add_modifier(IModBit.RUSTY)
knife.add_modifier(IModBit.CHIPPED)
knife.add_modifier(IModBit.BALANCED)
knife.add_modifier(IModBit.TEMPERED)
knife.set_weight(0.5)
knife.set_abundance(100)
knife.set_hit_points(21504)
knife.set_speed_rating(110)
knife.set_weapon_length(40)
knife.set_thrust_damage(13, 1)
knife.set_swing_damage(21, 0)


butchering_knife = Item("butchering_knife", "Butchering_Knife")
butchering_knife.add_mesh(ItemMesh("khyber_knife_new"))
butchering_knife.add_flag(ItemType.ONE_HANDED_WEAPON)
butchering_knife.add_flag(ItemFlag.NO_PARRY)
butchering_knife.add_flag(ItemFlag.IS_MERCHANDISE)
butchering_knife.add_flag(ItemFlag.IS_PRIMARY)
butchering_knife.add_flag(ItemFlag.IS_SECONDARY)
butchering_knife.add_capability(ItemCapability.ONEHANDED_TRUST)
butchering_knife.add_capability(ItemCapability.ONEHANDED_OVERSWING)
butchering_knife.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
butchering_knife.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
butchering_knife.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
butchering_knife.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
butchering_knife.add_capability(ItemCapability.CARRY_DAGGER_FRONT_RIGHT)
butchering_knife.add_capability(ItemCapability.FORCE_64_BITS)
butchering_knife.set_price(23)
butchering_knife.add_modifier(IModBit.RUSTY)
butchering_knife.add_modifier(IModBit.CHIPPED)
butchering_knife.add_modifier(IModBit.BALANCED)
butchering_knife.add_modifier(IModBit.TEMPERED)
butchering_knife.set_weight(0.75)
butchering_knife.set_abundance(100)
butchering_knife.set_hit_points(24576)
butchering_knife.set_speed_rating(108)
butchering_knife.set_weapon_length(60)
butchering_knife.set_thrust_damage(17, 1)
butchering_knife.set_swing_damage(24, 0)


dagger = Item("dagger", "Dagger")
dagger.add_mesh(ItemMesh("dagger_b"))
dagger.add_mesh(ItemMesh("dagger_b_scabbard", ItemMesh.ixmesh_carry))
meshx = ItemMesh("dagger_b")
meshx.add_modifier(IModBit.STURDY)
meshx.add_modifier(IModBit.THICK)
meshx.add_modifier(IModBit.HARDENED)
meshx.add_modifier(IModBit.REINFORCED)
dagger.add_mesh(meshx)
meshx = ItemMesh("dagger_b_scabbard", ItemMesh.ixmesh_carry)
meshx.add_modifier(IModBit.STURDY)
meshx.add_modifier(IModBit.THICK)
meshx.add_modifier(IModBit.HARDENED)
meshx.add_modifier(IModBit.REINFORCED)
dagger.add_mesh(meshx)
dagger.add_flag(ItemType.ONE_HANDED_WEAPON)
dagger.add_flag(ItemFlag.NO_PARRY)
dagger.add_flag(ItemFlag.IS_MERCHANDISE)
dagger.add_flag(ItemFlag.IS_PRIMARY)
dagger.add_flag(ItemFlag.IS_SECONDARY)
dagger.add_capability(ItemCapability.ONEHANDED_TRUST)
dagger.add_capability(ItemCapability.ONEHANDED_OVERSWING)
dagger.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
dagger.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
dagger.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
dagger.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
dagger.add_capability(ItemCapability.CARRY_DAGGER_FRONT_LEFT)
dagger.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
dagger.add_capability(ItemCapability.FORCE_64_BITS)
dagger.set_price(37)
dagger.add_modifier(IModBit.RUSTY)
dagger.add_modifier(IModBit.CHIPPED)
dagger.add_modifier(IModBit.BALANCED)
dagger.add_modifier(IModBit.TEMPERED)
dagger.add_modifier(IModBit.MASTERWORK)
dagger.set_weight(0.75)
dagger.set_abundance(100)
dagger.set_hit_points(22528)
dagger.set_speed_rating(109)
dagger.set_weapon_length(47)
dagger.set_thrust_damage(19, 1)
dagger.set_swing_damage(22, 0)


falchion = Item("falchion", "Falchion")
falchion.add_mesh(ItemMesh("falchion_new"))
falchion.add_flag(ItemType.ONE_HANDED_WEAPON)
falchion.add_flag(ItemFlag.IS_MERCHANDISE)
falchion.add_flag(ItemFlag.IS_PRIMARY)
falchion.add_capability(ItemCapability.ONEHANDED_OVERSWING)
falchion.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
falchion.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
falchion.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
falchion.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
falchion.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
falchion.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
falchion.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
falchion.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
falchion.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
falchion.add_capability(ItemCapability.FORCE_64_BITS)
falchion.set_price(105)
falchion.add_modifier(IModBit.RUSTY)
falchion.add_modifier(IModBit.CHIPPED)
falchion.add_modifier(IModBit.BALANCED)
falchion.add_modifier(IModBit.TEMPERED)
falchion.set_weight(2.5)
falchion.set_abundance(100)
falchion.set_difficulty(8)
falchion.set_hit_points(30720)
falchion.set_speed_rating(98)
falchion.set_weapon_length(73)
falchion.set_thrust_damage(0, 1)
falchion.set_swing_damage(30, 0)


scimitar = Item("scimitar", "Scimitar")
scimitar.add_mesh(ItemMesh("scimitar_a"))
scimitar.add_mesh(ItemMesh("scab_scimeter_a", ItemMesh.ixmesh_carry))
scimitar.add_flag(ItemType.ONE_HANDED_WEAPON)
scimitar.add_flag(ItemFlag.IS_MERCHANDISE)
scimitar.add_flag(ItemFlag.IS_PRIMARY)
scimitar.add_capability(ItemCapability.ONEHANDED_OVERSWING)
scimitar.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
scimitar.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
scimitar.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
scimitar.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
scimitar.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
scimitar.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
scimitar.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
scimitar.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
scimitar.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
scimitar.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
scimitar.add_capability(ItemCapability.FORCE_64_BITS)
scimitar.set_price(210)
scimitar.add_modifier(IModBit.RUSTY)
scimitar.add_modifier(IModBit.CHIPPED)
scimitar.add_modifier(IModBit.BALANCED)
scimitar.add_modifier(IModBit.TEMPERED)
scimitar.add_modifier(IModBit.MASTERWORK)
scimitar.set_weight(1.5)
scimitar.set_abundance(100)
scimitar.set_hit_points(30720)
scimitar.set_speed_rating(101)
scimitar.set_weapon_length(97)
scimitar.set_thrust_damage(0, 1)
scimitar.set_swing_damage(30, 0)


scimitar_b = Item("scimitar_b", "Elite_Scimitar")
scimitar_b.add_mesh(ItemMesh("scimitar_b"))
scimitar_b.add_mesh(ItemMesh("scab_scimeter_b", ItemMesh.ixmesh_carry))
scimitar_b.add_flag(ItemType.ONE_HANDED_WEAPON)
scimitar_b.add_flag(ItemFlag.IS_MERCHANDISE)
scimitar_b.add_flag(ItemFlag.IS_PRIMARY)
scimitar_b.add_capability(ItemCapability.ONEHANDED_OVERSWING)
scimitar_b.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
scimitar_b.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
scimitar_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
scimitar_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
scimitar_b.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
scimitar_b.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
scimitar_b.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
scimitar_b.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
scimitar_b.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
scimitar_b.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
scimitar_b.add_capability(ItemCapability.FORCE_64_BITS)
scimitar_b.set_price(290)
scimitar_b.add_modifier(IModBit.RUSTY)
scimitar_b.add_modifier(IModBit.CHIPPED)
scimitar_b.add_modifier(IModBit.BALANCED)
scimitar_b.add_modifier(IModBit.TEMPERED)
scimitar_b.add_modifier(IModBit.MASTERWORK)
scimitar_b.set_weight(1.5)
scimitar_b.set_abundance(100)
scimitar_b.set_hit_points(32768)
scimitar_b.set_speed_rating(100)
scimitar_b.set_weapon_length(103)
scimitar_b.set_thrust_damage(0, 1)
scimitar_b.set_swing_damage(32, 0)


arabian_sword_a = Item("arabian_sword_a", "Sarranid_Sword")
arabian_sword_a.add_mesh(ItemMesh("arabian_sword_a"))
arabian_sword_a.add_mesh(ItemMesh("scab_arabian_sword_a", ItemMesh.ixmesh_carry))
arabian_sword_a.add_flag(ItemType.ONE_HANDED_WEAPON)
arabian_sword_a.add_flag(ItemFlag.IS_MERCHANDISE)
arabian_sword_a.add_flag(ItemFlag.IS_PRIMARY)
arabian_sword_a.add_capability(ItemCapability.ONEHANDED_TRUST)
arabian_sword_a.add_capability(ItemCapability.ONEHANDED_OVERSWING)
arabian_sword_a.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
arabian_sword_a.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
arabian_sword_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
arabian_sword_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
arabian_sword_a.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
arabian_sword_a.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
arabian_sword_a.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
arabian_sword_a.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
arabian_sword_a.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
arabian_sword_a.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
arabian_sword_a.add_capability(ItemCapability.FORCE_64_BITS)
arabian_sword_a.set_price(108)
arabian_sword_a.add_modifier(IModBit.RUSTY)
arabian_sword_a.add_modifier(IModBit.CHIPPED)
arabian_sword_a.add_modifier(IModBit.BALANCED)
arabian_sword_a.add_modifier(IModBit.TEMPERED)
arabian_sword_a.add_modifier(IModBit.MASTERWORK)
arabian_sword_a.set_weight(1.5)
arabian_sword_a.set_abundance(100)
arabian_sword_a.set_hit_points(26624)
arabian_sword_a.set_speed_rating(99)
arabian_sword_a.set_weapon_length(97)
arabian_sword_a.set_thrust_damage(19, 1)
arabian_sword_a.set_swing_damage(26, 0)


arabian_sword_b = Item("arabian_sword_b", "Sarranid_Arming_Sword")
arabian_sword_b.add_mesh(ItemMesh("arabian_sword_b"))
arabian_sword_b.add_mesh(ItemMesh("scab_arabian_sword_b", ItemMesh.ixmesh_carry))
arabian_sword_b.add_flag(ItemType.ONE_HANDED_WEAPON)
arabian_sword_b.add_flag(ItemFlag.IS_MERCHANDISE)
arabian_sword_b.add_flag(ItemFlag.IS_PRIMARY)
arabian_sword_b.add_capability(ItemCapability.ONEHANDED_TRUST)
arabian_sword_b.add_capability(ItemCapability.ONEHANDED_OVERSWING)
arabian_sword_b.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
arabian_sword_b.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
arabian_sword_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
arabian_sword_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
arabian_sword_b.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
arabian_sword_b.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
arabian_sword_b.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
arabian_sword_b.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
arabian_sword_b.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
arabian_sword_b.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
arabian_sword_b.add_capability(ItemCapability.FORCE_64_BITS)
arabian_sword_b.set_price(218)
arabian_sword_b.add_modifier(IModBit.RUSTY)
arabian_sword_b.add_modifier(IModBit.CHIPPED)
arabian_sword_b.add_modifier(IModBit.BALANCED)
arabian_sword_b.add_modifier(IModBit.TEMPERED)
arabian_sword_b.add_modifier(IModBit.MASTERWORK)
arabian_sword_b.set_weight(1.5)
arabian_sword_b.set_abundance(100)
arabian_sword_b.set_hit_points(28672)
arabian_sword_b.set_speed_rating(99)
arabian_sword_b.set_weapon_length(97)
arabian_sword_b.set_thrust_damage(19, 1)
arabian_sword_b.set_swing_damage(28, 0)


sarranid_cavalry_sword = Item("sarranid_cavalry_sword", "Sarranid_Cavalry_Sword")
sarranid_cavalry_sword.add_mesh(ItemMesh("arabian_sword_c"))
sarranid_cavalry_sword.add_mesh(ItemMesh("scab_arabian_sword_c", ItemMesh.ixmesh_carry))
sarranid_cavalry_sword.add_flag(ItemType.ONE_HANDED_WEAPON)
sarranid_cavalry_sword.add_flag(ItemFlag.IS_MERCHANDISE)
sarranid_cavalry_sword.add_flag(ItemFlag.IS_PRIMARY)
sarranid_cavalry_sword.add_capability(ItemCapability.ONEHANDED_TRUST)
sarranid_cavalry_sword.add_capability(ItemCapability.ONEHANDED_OVERSWING)
sarranid_cavalry_sword.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
sarranid_cavalry_sword.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
sarranid_cavalry_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sarranid_cavalry_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sarranid_cavalry_sword.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
sarranid_cavalry_sword.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
sarranid_cavalry_sword.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
sarranid_cavalry_sword.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
sarranid_cavalry_sword.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
sarranid_cavalry_sword.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
sarranid_cavalry_sword.add_capability(ItemCapability.FORCE_64_BITS)
sarranid_cavalry_sword.set_price(310)
sarranid_cavalry_sword.add_modifier(IModBit.RUSTY)
sarranid_cavalry_sword.add_modifier(IModBit.CHIPPED)
sarranid_cavalry_sword.add_modifier(IModBit.BALANCED)
sarranid_cavalry_sword.add_modifier(IModBit.TEMPERED)
sarranid_cavalry_sword.add_modifier(IModBit.MASTERWORK)
sarranid_cavalry_sword.set_weight(1.5)
sarranid_cavalry_sword.set_abundance(100)
sarranid_cavalry_sword.set_hit_points(28672)
sarranid_cavalry_sword.set_speed_rating(98)
sarranid_cavalry_sword.set_weapon_length(105)
sarranid_cavalry_sword.set_thrust_damage(19, 1)
sarranid_cavalry_sword.set_swing_damage(28, 0)


arabian_sword_d = Item("arabian_sword_d", "Sarranid_Guard_Sword")
arabian_sword_d.add_mesh(ItemMesh("arabian_sword_d"))
arabian_sword_d.add_mesh(ItemMesh("scab_arabian_sword_d", ItemMesh.ixmesh_carry))
arabian_sword_d.add_flag(ItemType.ONE_HANDED_WEAPON)
arabian_sword_d.add_flag(ItemFlag.IS_MERCHANDISE)
arabian_sword_d.add_flag(ItemFlag.IS_PRIMARY)
arabian_sword_d.add_capability(ItemCapability.ONEHANDED_TRUST)
arabian_sword_d.add_capability(ItemCapability.ONEHANDED_OVERSWING)
arabian_sword_d.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
arabian_sword_d.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
arabian_sword_d.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
arabian_sword_d.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
arabian_sword_d.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
arabian_sword_d.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
arabian_sword_d.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
arabian_sword_d.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
arabian_sword_d.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
arabian_sword_d.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
arabian_sword_d.add_capability(ItemCapability.FORCE_64_BITS)
arabian_sword_d.set_price(420)
arabian_sword_d.add_modifier(IModBit.RUSTY)
arabian_sword_d.add_modifier(IModBit.CHIPPED)
arabian_sword_d.add_modifier(IModBit.BALANCED)
arabian_sword_d.add_modifier(IModBit.TEMPERED)
arabian_sword_d.add_modifier(IModBit.MASTERWORK)
arabian_sword_d.set_weight(1.5)
arabian_sword_d.set_abundance(100)
arabian_sword_d.set_hit_points(30720)
arabian_sword_d.set_speed_rating(99)
arabian_sword_d.set_weapon_length(97)
arabian_sword_d.set_thrust_damage(20, 1)
arabian_sword_d.set_swing_damage(30, 0)


great_sword = Item("great_sword", "Great_Sword")
great_sword.add_mesh(ItemMesh("b_bastard_sword"))
great_sword.add_mesh(ItemMesh("scab_bastardsw_b", ItemMesh.ixmesh_carry))
great_sword.add_flag(ItemType.TWO_HANDED_WEAPON)
great_sword.add_flag(ItemFlag.IS_MERCHANDISE)
great_sword.add_flag(ItemFlag.IS_TWO_HANDED)
great_sword.add_flag(ItemFlag.IS_PRIMARY)
great_sword.add_capability(ItemCapability.TWOHANDED_THRUST)
great_sword.add_capability(ItemCapability.TWOHANDED_OVERSWING)
great_sword.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
great_sword.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
great_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
great_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
great_sword.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
great_sword.add_capability(ItemCapability.CARRY_SWORD_BACK)
great_sword.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
great_sword.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
great_sword.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
great_sword.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
great_sword.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
great_sword.add_capability(ItemCapability.FORCE_64_BITS)
great_sword.set_price(423)
great_sword.add_modifier(IModBit.RUSTY)
great_sword.add_modifier(IModBit.CHIPPED)
great_sword.add_modifier(IModBit.BALANCED)
great_sword.add_modifier(IModBit.TEMPERED)
great_sword.add_modifier(IModBit.MASTERWORK)
great_sword.set_weight(2.75)
great_sword.set_abundance(100)
great_sword.set_difficulty(10)
great_sword.set_hit_points(39936)
great_sword.set_speed_rating(95)
great_sword.set_weapon_length(125)
great_sword.set_thrust_damage(31, 1)
great_sword.set_swing_damage(39, 0)


sword_of_war = Item("sword_of_war", "Sword_of_War")
sword_of_war.add_mesh(ItemMesh("b_bastard_sword"))
sword_of_war.add_mesh(ItemMesh("scab_bastardsw_b", ItemMesh.ixmesh_carry))
sword_of_war.add_flag(ItemType.TWO_HANDED_WEAPON)
sword_of_war.add_flag(ItemFlag.IS_MERCHANDISE)
sword_of_war.add_flag(ItemFlag.IS_TWO_HANDED)
sword_of_war.add_flag(ItemFlag.IS_PRIMARY)
sword_of_war.add_capability(ItemCapability.TWOHANDED_THRUST)
sword_of_war.add_capability(ItemCapability.TWOHANDED_OVERSWING)
sword_of_war.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
sword_of_war.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
sword_of_war.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sword_of_war.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sword_of_war.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
sword_of_war.add_capability(ItemCapability.CARRY_SWORD_BACK)
sword_of_war.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
sword_of_war.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
sword_of_war.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
sword_of_war.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
sword_of_war.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
sword_of_war.add_capability(ItemCapability.FORCE_64_BITS)
sword_of_war.set_price(524)
sword_of_war.add_modifier(IModBit.RUSTY)
sword_of_war.add_modifier(IModBit.CHIPPED)
sword_of_war.add_modifier(IModBit.BALANCED)
sword_of_war.add_modifier(IModBit.TEMPERED)
sword_of_war.add_modifier(IModBit.MASTERWORK)
sword_of_war.set_weight(3.0)
sword_of_war.set_abundance(100)
sword_of_war.set_difficulty(11)
sword_of_war.set_hit_points(40960)
sword_of_war.set_speed_rating(94)
sword_of_war.set_weapon_length(130)
sword_of_war.set_thrust_damage(31, 1)
sword_of_war.set_swing_damage(40, 0)


hatchet = Item("hatchet", "Hatchet")
hatchet.add_mesh(ItemMesh("hatchet"))
hatchet.add_flag(ItemType.ONE_HANDED_WEAPON)
hatchet.add_flag(ItemFlag.IS_MERCHANDISE)
hatchet.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
hatchet.add_flag(ItemFlag.IS_PRIMARY)
hatchet.add_flag(ItemFlag.IS_SECONDARY)
hatchet.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
hatchet.add_capability(ItemCapability.ONEHANDED_OVERSWING)
hatchet.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
hatchet.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
hatchet.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
hatchet.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
hatchet.add_capability(ItemCapability.CARRY_AXE_LEFT_HIP)
hatchet.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
hatchet.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
hatchet.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
hatchet.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
hatchet.add_capability(ItemCapability.FORCE_64_BITS)
hatchet.set_price(13)
hatchet.add_modifier(IModBit.RUSTY)
hatchet.add_modifier(IModBit.CHIPPED)
hatchet.add_modifier(IModBit.HEAVY)
hatchet.set_weight(2.0)
hatchet.set_abundance(100)
hatchet.set_hit_points(23552)
hatchet.set_speed_rating(97)
hatchet.set_weapon_length(60)
hatchet.set_thrust_damage(0, 1)
hatchet.set_swing_damage(23, 0)


hand_axe = Item("hand_axe", "Hand_Axe")
hand_axe.add_mesh(ItemMesh("hatchet"))
hand_axe.add_flag(ItemType.ONE_HANDED_WEAPON)
hand_axe.add_flag(ItemFlag.IS_MERCHANDISE)
hand_axe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
hand_axe.add_flag(ItemFlag.IS_PRIMARY)
hand_axe.add_flag(ItemFlag.IS_SECONDARY)
hand_axe.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
hand_axe.add_capability(ItemCapability.ONEHANDED_OVERSWING)
hand_axe.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
hand_axe.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
hand_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
hand_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
hand_axe.add_capability(ItemCapability.CARRY_AXE_LEFT_HIP)
hand_axe.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
hand_axe.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
hand_axe.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
hand_axe.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
hand_axe.add_capability(ItemCapability.FORCE_64_BITS)
hand_axe.set_price(24)
hand_axe.add_modifier(IModBit.RUSTY)
hand_axe.add_modifier(IModBit.CHIPPED)
hand_axe.add_modifier(IModBit.HEAVY)
hand_axe.set_weight(2.0)
hand_axe.set_abundance(100)
hand_axe.set_difficulty(7)
hand_axe.set_hit_points(27648)
hand_axe.set_speed_rating(95)
hand_axe.set_weapon_length(75)
hand_axe.set_thrust_damage(0, 1)
hand_axe.set_swing_damage(27, 0)


fighting_axe = Item("fighting_axe", "Fighting_Axe")
fighting_axe.add_mesh(ItemMesh("fighting_ax"))
fighting_axe.add_flag(ItemType.ONE_HANDED_WEAPON)
fighting_axe.add_flag(ItemFlag.IS_MERCHANDISE)
fighting_axe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
fighting_axe.add_flag(ItemFlag.IS_PRIMARY)
fighting_axe.add_flag(ItemFlag.IS_SECONDARY)
fighting_axe.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
fighting_axe.add_capability(ItemCapability.ONEHANDED_OVERSWING)
fighting_axe.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
fighting_axe.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
fighting_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
fighting_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
fighting_axe.add_capability(ItemCapability.CARRY_AXE_LEFT_HIP)
fighting_axe.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
fighting_axe.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
fighting_axe.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
fighting_axe.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
fighting_axe.add_capability(ItemCapability.FORCE_64_BITS)
fighting_axe.set_price(77)
fighting_axe.add_modifier(IModBit.RUSTY)
fighting_axe.add_modifier(IModBit.CHIPPED)
fighting_axe.add_modifier(IModBit.HEAVY)
fighting_axe.set_weight(2.5)
fighting_axe.set_abundance(100)
fighting_axe.set_difficulty(9)
fighting_axe.set_hit_points(31744)
fighting_axe.set_speed_rating(92)
fighting_axe.set_weapon_length(90)
fighting_axe.set_thrust_damage(0, 1)
fighting_axe.set_swing_damage(31, 0)


axe = Item("axe", "Axe")
axe.add_mesh(ItemMesh("iron_ax"))
axe.add_flag(ItemType.TWO_HANDED_WEAPON)
axe.add_flag(ItemFlag.IS_MERCHANDISE)
axe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
axe.add_flag(ItemFlag.IS_TWO_HANDED)
axe.add_flag(ItemFlag.IS_PRIMARY)
axe.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
axe.add_capability(ItemCapability.TWOHANDED_OVERSWING)
axe.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
axe.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
axe.add_capability(ItemCapability.CARRY_AXE_BACK)
axe.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
axe.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
axe.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
axe.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
axe.add_capability(ItemCapability.FORCE_64_BITS)
axe.set_price(65)
axe.add_modifier(IModBit.RUSTY)
axe.add_modifier(IModBit.CHIPPED)
axe.add_modifier(IModBit.HEAVY)
axe.set_weight(4.0)
axe.set_abundance(100)
axe.set_difficulty(8)
axe.set_hit_points(32768)
axe.set_speed_rating(91)
axe.set_weapon_length(108)
axe.set_thrust_damage(0, 1)
axe.set_swing_damage(32, 0)


voulge = Item("voulge", "Voulge")
voulge.add_mesh(ItemMesh("two_handed_battle_long_axe_a"))
voulge.add_flag(ItemType.POLEARM)
voulge.add_flag(ItemFlag.IS_MERCHANDISE)
voulge.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
voulge.add_flag(ItemFlag.IS_TWO_HANDED)
voulge.add_flag(ItemFlag.IS_PRIMARY)
voulge.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
voulge.add_capability(ItemCapability.POLEARM_THRUST)
voulge.add_capability(ItemCapability.POLEARM_OVERSWING)
voulge.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
voulge.add_capability(ItemCapability.POLEARM_SLASHLEFT)
voulge.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
voulge.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
voulge.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
voulge.add_capability(ItemCapability.POLEARM_PARRY_UP)
voulge.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
voulge.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
voulge.set_price(120)
voulge.add_modifier(IModBit.RUSTY)
voulge.add_modifier(IModBit.CHIPPED)
voulge.add_modifier(IModBit.HEAVY)
voulge.set_weight(3.0)
voulge.set_abundance(100)
voulge.set_difficulty(10)
voulge.set_hit_points(40960)
voulge.set_speed_rating(88)
voulge.set_weapon_length(175)
voulge.set_thrust_damage(18, 1)
voulge.set_swing_damage(40, 0)


battle_axe = Item("battle_axe", "Battle_Axe")
battle_axe.add_mesh(ItemMesh("battle_ax"))
battle_axe.add_flag(ItemType.TWO_HANDED_WEAPON)
battle_axe.add_flag(ItemFlag.IS_MERCHANDISE)
battle_axe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
battle_axe.add_flag(ItemFlag.IS_TWO_HANDED)
battle_axe.add_flag(ItemFlag.IS_PRIMARY)
battle_axe.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
battle_axe.add_capability(ItemCapability.TWOHANDED_OVERSWING)
battle_axe.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
battle_axe.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
battle_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
battle_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
battle_axe.add_capability(ItemCapability.CARRY_AXE_BACK)
battle_axe.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
battle_axe.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
battle_axe.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
battle_axe.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
battle_axe.add_capability(ItemCapability.FORCE_64_BITS)
battle_axe.set_price(240)
battle_axe.add_modifier(IModBit.RUSTY)
battle_axe.add_modifier(IModBit.CHIPPED)
battle_axe.add_modifier(IModBit.HEAVY)
battle_axe.set_weight(5.0)
battle_axe.set_abundance(100)
battle_axe.set_difficulty(9)
battle_axe.set_hit_points(41984)
battle_axe.set_speed_rating(88)
battle_axe.set_weapon_length(108)
battle_axe.set_thrust_damage(0, 1)
battle_axe.set_swing_damage(41, 0)


war_axe = Item("war_axe", "War_Axe")
war_axe.add_mesh(ItemMesh("war_ax"))
war_axe.add_flag(ItemType.TWO_HANDED_WEAPON)
war_axe.add_flag(ItemFlag.IS_MERCHANDISE)
war_axe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
war_axe.add_flag(ItemFlag.IS_TWO_HANDED)
war_axe.add_flag(ItemFlag.IS_PRIMARY)
war_axe.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
war_axe.add_capability(ItemCapability.TWOHANDED_OVERSWING)
war_axe.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
war_axe.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
war_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
war_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
war_axe.add_capability(ItemCapability.CARRY_AXE_BACK)
war_axe.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
war_axe.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
war_axe.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
war_axe.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
war_axe.add_capability(ItemCapability.FORCE_64_BITS)
war_axe.set_price(264)
war_axe.add_modifier(IModBit.RUSTY)
war_axe.add_modifier(IModBit.CHIPPED)
war_axe.add_modifier(IModBit.HEAVY)
war_axe.set_weight(5.0)
war_axe.set_abundance(100)
war_axe.set_difficulty(10)
war_axe.set_hit_points(44032)
war_axe.set_speed_rating(86)
war_axe.set_weapon_length(110)
war_axe.set_thrust_damage(0, 1)
war_axe.set_swing_damage(43, 0)


sword_two_handed_b = Item("sword_two_handed_b", "Two_Handed_Sword")
sword_two_handed_b.add_mesh(ItemMesh("sword_two_handed_b"))
sword_two_handed_b.add_flag(ItemType.TWO_HANDED_WEAPON)
sword_two_handed_b.add_flag(ItemFlag.IS_MERCHANDISE)
sword_two_handed_b.add_flag(ItemFlag.IS_TWO_HANDED)
sword_two_handed_b.add_flag(ItemFlag.IS_PRIMARY)
sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_THRUST)
sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_OVERSWING)
sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
sword_two_handed_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sword_two_handed_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sword_two_handed_b.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
sword_two_handed_b.add_capability(ItemCapability.CARRY_SWORD_BACK)
sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
sword_two_handed_b.add_capability(ItemCapability.FORCE_64_BITS)
sword_two_handed_b.set_price(670)
sword_two_handed_b.add_modifier(IModBit.RUSTY)
sword_two_handed_b.add_modifier(IModBit.CHIPPED)
sword_two_handed_b.add_modifier(IModBit.BALANCED)
sword_two_handed_b.add_modifier(IModBit.TEMPERED)
sword_two_handed_b.add_modifier(IModBit.MASTERWORK)
sword_two_handed_b.set_weight(2.75)
sword_two_handed_b.set_abundance(100)
sword_two_handed_b.set_difficulty(10)
sword_two_handed_b.set_hit_points(40960)
sword_two_handed_b.set_speed_rating(97)
sword_two_handed_b.set_weapon_length(110)
sword_two_handed_b.set_thrust_damage(28, 1)
sword_two_handed_b.set_swing_damage(40, 0)


sword_two_handed_a = Item("sword_two_handed_a", "Great_Sword")
sword_two_handed_a.add_mesh(ItemMesh("sword_two_handed_a"))
sword_two_handed_a.add_flag(ItemType.TWO_HANDED_WEAPON)
sword_two_handed_a.add_flag(ItemFlag.IS_MERCHANDISE)
sword_two_handed_a.add_flag(ItemFlag.IS_TWO_HANDED)
sword_two_handed_a.add_flag(ItemFlag.IS_PRIMARY)
sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_THRUST)
sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_OVERSWING)
sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
sword_two_handed_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sword_two_handed_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sword_two_handed_a.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
sword_two_handed_a.add_capability(ItemCapability.CARRY_SWORD_BACK)
sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
sword_two_handed_a.add_capability(ItemCapability.FORCE_64_BITS)
sword_two_handed_a.set_price(1123)
sword_two_handed_a.add_modifier(IModBit.RUSTY)
sword_two_handed_a.add_modifier(IModBit.CHIPPED)
sword_two_handed_a.add_modifier(IModBit.BALANCED)
sword_two_handed_a.add_modifier(IModBit.TEMPERED)
sword_two_handed_a.add_modifier(IModBit.MASTERWORK)
sword_two_handed_a.set_weight(2.75)
sword_two_handed_a.set_abundance(100)
sword_two_handed_a.set_difficulty(10)
sword_two_handed_a.set_hit_points(43008)
sword_two_handed_a.set_speed_rating(96)
sword_two_handed_a.set_weapon_length(120)
sword_two_handed_a.set_thrust_damage(29, 1)
sword_two_handed_a.set_swing_damage(42, 0)


khergit_sword_two_handed_a = Item("khergit_sword_two_handed_a", "Two_Handed_Sabre")
khergit_sword_two_handed_a.add_mesh(ItemMesh("khergit_sword_two_handed_a"))
khergit_sword_two_handed_a.add_flag(ItemType.TWO_HANDED_WEAPON)
khergit_sword_two_handed_a.add_flag(ItemFlag.IS_MERCHANDISE)
khergit_sword_two_handed_a.add_flag(ItemFlag.IS_TWO_HANDED)
khergit_sword_two_handed_a.add_flag(ItemFlag.IS_PRIMARY)
khergit_sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_OVERSWING)
khergit_sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
khergit_sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
khergit_sword_two_handed_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
khergit_sword_two_handed_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
khergit_sword_two_handed_a.add_capability(ItemCapability.CARRY_SWORD_BACK)
khergit_sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
khergit_sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
khergit_sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
khergit_sword_two_handed_a.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
khergit_sword_two_handed_a.add_capability(ItemCapability.FORCE_64_BITS)
khergit_sword_two_handed_a.set_price(523)
khergit_sword_two_handed_a.add_modifier(IModBit.RUSTY)
khergit_sword_two_handed_a.add_modifier(IModBit.CHIPPED)
khergit_sword_two_handed_a.add_modifier(IModBit.BALANCED)
khergit_sword_two_handed_a.add_modifier(IModBit.TEMPERED)
khergit_sword_two_handed_a.add_modifier(IModBit.MASTERWORK)
khergit_sword_two_handed_a.set_weight(2.75)
khergit_sword_two_handed_a.set_abundance(100)
khergit_sword_two_handed_a.set_difficulty(10)
khergit_sword_two_handed_a.set_hit_points(40960)
khergit_sword_two_handed_a.set_speed_rating(96)
khergit_sword_two_handed_a.set_weapon_length(120)
khergit_sword_two_handed_a.set_thrust_damage(0, 1)
khergit_sword_two_handed_a.set_swing_damage(40, 0)


khergit_sword_two_handed_b = Item("khergit_sword_two_handed_b", "Two_Handed_Sabre")
khergit_sword_two_handed_b.add_mesh(ItemMesh("khergit_sword_two_handed_b"))
khergit_sword_two_handed_b.add_flag(ItemType.TWO_HANDED_WEAPON)
khergit_sword_two_handed_b.add_flag(ItemFlag.IS_MERCHANDISE)
khergit_sword_two_handed_b.add_flag(ItemFlag.IS_TWO_HANDED)
khergit_sword_two_handed_b.add_flag(ItemFlag.IS_PRIMARY)
khergit_sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_OVERSWING)
khergit_sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
khergit_sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
khergit_sword_two_handed_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
khergit_sword_two_handed_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
khergit_sword_two_handed_b.add_capability(ItemCapability.CARRY_SWORD_BACK)
khergit_sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
khergit_sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
khergit_sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
khergit_sword_two_handed_b.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
khergit_sword_two_handed_b.add_capability(ItemCapability.FORCE_64_BITS)
khergit_sword_two_handed_b.set_price(920)
khergit_sword_two_handed_b.add_modifier(IModBit.RUSTY)
khergit_sword_two_handed_b.add_modifier(IModBit.CHIPPED)
khergit_sword_two_handed_b.add_modifier(IModBit.BALANCED)
khergit_sword_two_handed_b.add_modifier(IModBit.TEMPERED)
khergit_sword_two_handed_b.add_modifier(IModBit.MASTERWORK)
khergit_sword_two_handed_b.set_weight(2.75)
khergit_sword_two_handed_b.set_abundance(100)
khergit_sword_two_handed_b.set_difficulty(10)
khergit_sword_two_handed_b.set_hit_points(45056)
khergit_sword_two_handed_b.set_speed_rating(96)
khergit_sword_two_handed_b.set_weapon_length(120)
khergit_sword_two_handed_b.set_thrust_damage(0, 1)
khergit_sword_two_handed_b.set_swing_damage(44, 0)


two_handed_cleaver = Item("two_handed_cleaver", "War_Cleaver")
two_handed_cleaver.add_mesh(ItemMesh("military_cleaver_a"))
two_handed_cleaver.add_flag(ItemType.TWO_HANDED_WEAPON)
two_handed_cleaver.add_flag(ItemFlag.IS_MERCHANDISE)
two_handed_cleaver.add_flag(ItemFlag.IS_TWO_HANDED)
two_handed_cleaver.add_flag(ItemFlag.IS_PRIMARY)
two_handed_cleaver.add_capability(ItemCapability.TWOHANDED_OVERSWING)
two_handed_cleaver.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
two_handed_cleaver.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
two_handed_cleaver.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
two_handed_cleaver.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
two_handed_cleaver.add_capability(ItemCapability.CARRY_SWORD_BACK)
two_handed_cleaver.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
two_handed_cleaver.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
two_handed_cleaver.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
two_handed_cleaver.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
two_handed_cleaver.add_capability(ItemCapability.FORCE_64_BITS)
two_handed_cleaver.set_price(640)
two_handed_cleaver.add_modifier(IModBit.RUSTY)
two_handed_cleaver.add_modifier(IModBit.CHIPPED)
two_handed_cleaver.add_modifier(IModBit.BALANCED)
two_handed_cleaver.add_modifier(IModBit.TEMPERED)
two_handed_cleaver.add_modifier(IModBit.MASTERWORK)
two_handed_cleaver.set_weight(2.75)
two_handed_cleaver.set_abundance(100)
two_handed_cleaver.set_difficulty(10)
two_handed_cleaver.set_hit_points(46080)
two_handed_cleaver.set_speed_rating(93)
two_handed_cleaver.set_weapon_length(120)
two_handed_cleaver.set_swing_damage(45, 0)


military_cleaver_b = Item("military_cleaver_b", "Soldier's_Cleaver")
military_cleaver_b.add_mesh(ItemMesh("military_cleaver_b"))
military_cleaver_b.add_flag(ItemType.ONE_HANDED_WEAPON)
military_cleaver_b.add_flag(ItemFlag.IS_MERCHANDISE)
military_cleaver_b.add_flag(ItemFlag.IS_PRIMARY)
military_cleaver_b.add_capability(ItemCapability.ONEHANDED_OVERSWING)
military_cleaver_b.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
military_cleaver_b.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
military_cleaver_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
military_cleaver_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
military_cleaver_b.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
military_cleaver_b.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
military_cleaver_b.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
military_cleaver_b.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
military_cleaver_b.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
military_cleaver_b.add_capability(ItemCapability.FORCE_64_BITS)
military_cleaver_b.set_price(193)
military_cleaver_b.add_modifier(IModBit.RUSTY)
military_cleaver_b.add_modifier(IModBit.CHIPPED)
military_cleaver_b.add_modifier(IModBit.BALANCED)
military_cleaver_b.add_modifier(IModBit.TEMPERED)
military_cleaver_b.add_modifier(IModBit.MASTERWORK)
military_cleaver_b.set_weight(1.5)
military_cleaver_b.set_abundance(100)
military_cleaver_b.set_hit_points(31744)
military_cleaver_b.set_speed_rating(96)
military_cleaver_b.set_weapon_length(95)
military_cleaver_b.set_thrust_damage(0, 1)
military_cleaver_b.set_swing_damage(31, 0)


military_cleaver_c = Item("military_cleaver_c", "Military_Cleaver")
military_cleaver_c.add_mesh(ItemMesh("military_cleaver_c"))
military_cleaver_c.add_flag(ItemType.ONE_HANDED_WEAPON)
military_cleaver_c.add_flag(ItemFlag.IS_MERCHANDISE)
military_cleaver_c.add_flag(ItemFlag.IS_PRIMARY)
military_cleaver_c.add_capability(ItemCapability.ONEHANDED_OVERSWING)
military_cleaver_c.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
military_cleaver_c.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
military_cleaver_c.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
military_cleaver_c.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
military_cleaver_c.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
military_cleaver_c.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
military_cleaver_c.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
military_cleaver_c.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
military_cleaver_c.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
military_cleaver_c.add_capability(ItemCapability.FORCE_64_BITS)
military_cleaver_c.set_price(263)
military_cleaver_c.add_modifier(IModBit.RUSTY)
military_cleaver_c.add_modifier(IModBit.CHIPPED)
military_cleaver_c.add_modifier(IModBit.BALANCED)
military_cleaver_c.add_modifier(IModBit.TEMPERED)
military_cleaver_c.add_modifier(IModBit.MASTERWORK)
military_cleaver_c.set_weight(1.5)
military_cleaver_c.set_abundance(100)
military_cleaver_c.set_hit_points(35840)
military_cleaver_c.set_speed_rating(96)
military_cleaver_c.set_weapon_length(95)
military_cleaver_c.set_thrust_damage(0, 1)
military_cleaver_c.set_swing_damage(35, 0)


military_sickle_a = Item("military_sickle_a", "Military_Sickle")
military_sickle_a.add_mesh(ItemMesh("military_sickle_a"))
military_sickle_a.add_flag(ItemType.ONE_HANDED_WEAPON)
military_sickle_a.add_flag(ItemFlag.IS_MERCHANDISE)
military_sickle_a.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
military_sickle_a.add_flag(ItemFlag.IS_PRIMARY)
military_sickle_a.add_flag(ItemFlag.IS_SECONDARY)
military_sickle_a.add_capability(ItemCapability.ONEHANDED_OVERSWING)
military_sickle_a.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
military_sickle_a.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
military_sickle_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
military_sickle_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
military_sickle_a.add_capability(ItemCapability.CARRY_AXE_LEFT_HIP)
military_sickle_a.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
military_sickle_a.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
military_sickle_a.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
military_sickle_a.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
military_sickle_a.add_capability(ItemCapability.FORCE_64_BITS)
military_sickle_a.set_price(220)
military_sickle_a.add_modifier(IModBit.RUSTY)
military_sickle_a.add_modifier(IModBit.CHIPPED)
military_sickle_a.add_modifier(IModBit.HEAVY)
military_sickle_a.set_weight(1.0)
military_sickle_a.set_abundance(100)
military_sickle_a.set_difficulty(9)
military_sickle_a.set_hit_points(26624)
military_sickle_a.set_speed_rating(100)
military_sickle_a.set_weapon_length(75)
military_sickle_a.set_thrust_damage(0, 1)
military_sickle_a.set_swing_damage(26, 1)


bastard_sword_a = Item("bastard_sword_a", "Bastard_Sword")
bastard_sword_a.add_mesh(ItemMesh("bastard_sword_a"))
bastard_sword_a.add_mesh(ItemMesh("bastard_sword_a_scabbard", ItemMesh.ixmesh_carry))
bastard_sword_a.add_flag(ItemType.TWO_HANDED_WEAPON)
bastard_sword_a.add_flag(ItemFlag.IS_MERCHANDISE)
bastard_sword_a.add_flag(ItemFlag.IS_PRIMARY)
bastard_sword_a.add_capability(ItemCapability.ONEHANDED_TRUST)
bastard_sword_a.add_capability(ItemCapability.ONEHANDED_OVERSWING)
bastard_sword_a.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
bastard_sword_a.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
bastard_sword_a.add_capability(ItemCapability.TWOHANDED_THRUST)
bastard_sword_a.add_capability(ItemCapability.TWOHANDED_OVERSWING)
bastard_sword_a.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
bastard_sword_a.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
bastard_sword_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
bastard_sword_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
bastard_sword_a.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
bastard_sword_a.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
bastard_sword_a.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
bastard_sword_a.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
bastard_sword_a.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
bastard_sword_a.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
bastard_sword_a.add_capability(ItemCapability.FORCE_64_BITS)
bastard_sword_a.set_price(294)
bastard_sword_a.add_modifier(IModBit.RUSTY)
bastard_sword_a.add_modifier(IModBit.CHIPPED)
bastard_sword_a.add_modifier(IModBit.BALANCED)
bastard_sword_a.add_modifier(IModBit.TEMPERED)
bastard_sword_a.add_modifier(IModBit.MASTERWORK)
bastard_sword_a.set_weight(2.0)
bastard_sword_a.set_abundance(100)
bastard_sword_a.set_difficulty(9)
bastard_sword_a.set_hit_points(35840)
bastard_sword_a.set_speed_rating(98)
bastard_sword_a.set_weapon_length(101)
bastard_sword_a.set_thrust_damage(26, 1)
bastard_sword_a.set_swing_damage(35, 0)


bastard_sword_b = Item("bastard_sword_b", "Heavy_Bastard_Sword")
bastard_sword_b.add_mesh(ItemMesh("bastard_sword_b"))
bastard_sword_b.add_mesh(ItemMesh("bastard_sword_b_scabbard", ItemMesh.ixmesh_carry))
bastard_sword_b.add_flag(ItemType.TWO_HANDED_WEAPON)
bastard_sword_b.add_flag(ItemFlag.IS_MERCHANDISE)
bastard_sword_b.add_flag(ItemFlag.IS_PRIMARY)
bastard_sword_b.add_capability(ItemCapability.ONEHANDED_TRUST)
bastard_sword_b.add_capability(ItemCapability.ONEHANDED_OVERSWING)
bastard_sword_b.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
bastard_sword_b.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
bastard_sword_b.add_capability(ItemCapability.TWOHANDED_THRUST)
bastard_sword_b.add_capability(ItemCapability.TWOHANDED_OVERSWING)
bastard_sword_b.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
bastard_sword_b.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
bastard_sword_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
bastard_sword_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
bastard_sword_b.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
bastard_sword_b.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
bastard_sword_b.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
bastard_sword_b.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
bastard_sword_b.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
bastard_sword_b.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
bastard_sword_b.add_capability(ItemCapability.FORCE_64_BITS)
bastard_sword_b.set_price(526)
bastard_sword_b.add_modifier(IModBit.RUSTY)
bastard_sword_b.add_modifier(IModBit.CHIPPED)
bastard_sword_b.add_modifier(IModBit.BALANCED)
bastard_sword_b.add_modifier(IModBit.TEMPERED)
bastard_sword_b.add_modifier(IModBit.MASTERWORK)
bastard_sword_b.set_weight(2.25)
bastard_sword_b.set_abundance(100)
bastard_sword_b.set_difficulty(9)
bastard_sword_b.set_hit_points(37888)
bastard_sword_b.set_speed_rating(97)
bastard_sword_b.set_weapon_length(105)
bastard_sword_b.set_thrust_damage(27, 1)
bastard_sword_b.set_swing_damage(37, 0)


one_handed_war_axe_a = Item("one_handed_war_axe_a", "One_Handed_Axe")
one_handed_war_axe_a.add_mesh(ItemMesh("one_handed_war_axe_a"))
one_handed_war_axe_a.add_flag(ItemType.ONE_HANDED_WEAPON)
one_handed_war_axe_a.add_flag(ItemFlag.IS_MERCHANDISE)
one_handed_war_axe_a.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
one_handed_war_axe_a.add_flag(ItemFlag.IS_PRIMARY)
one_handed_war_axe_a.add_flag(ItemFlag.IS_SECONDARY)
one_handed_war_axe_a.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
one_handed_war_axe_a.add_capability(ItemCapability.ONEHANDED_OVERSWING)
one_handed_war_axe_a.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
one_handed_war_axe_a.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
one_handed_war_axe_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
one_handed_war_axe_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
one_handed_war_axe_a.add_capability(ItemCapability.CARRY_AXE_LEFT_HIP)
one_handed_war_axe_a.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
one_handed_war_axe_a.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
one_handed_war_axe_a.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
one_handed_war_axe_a.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
one_handed_war_axe_a.add_capability(ItemCapability.FORCE_64_BITS)
one_handed_war_axe_a.set_price(87)
one_handed_war_axe_a.add_modifier(IModBit.RUSTY)
one_handed_war_axe_a.add_modifier(IModBit.CHIPPED)
one_handed_war_axe_a.add_modifier(IModBit.HEAVY)
one_handed_war_axe_a.set_weight(1.5)
one_handed_war_axe_a.set_abundance(100)
one_handed_war_axe_a.set_difficulty(9)
one_handed_war_axe_a.set_hit_points(32768)
one_handed_war_axe_a.set_speed_rating(98)
one_handed_war_axe_a.set_weapon_length(71)
one_handed_war_axe_a.set_thrust_damage(0, 1)
one_handed_war_axe_a.set_swing_damage(32, 0)


one_handed_battle_axe_a = Item("one_handed_battle_axe_a", "One_Handed_Battle_Axe")
one_handed_battle_axe_a.add_mesh(ItemMesh("one_handed_battle_axe_a"))
one_handed_battle_axe_a.add_flag(ItemType.ONE_HANDED_WEAPON)
one_handed_battle_axe_a.add_flag(ItemFlag.IS_MERCHANDISE)
one_handed_battle_axe_a.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
one_handed_battle_axe_a.add_flag(ItemFlag.IS_PRIMARY)
one_handed_battle_axe_a.add_flag(ItemFlag.IS_SECONDARY)
one_handed_battle_axe_a.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
one_handed_battle_axe_a.add_capability(ItemCapability.ONEHANDED_OVERSWING)
one_handed_battle_axe_a.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
one_handed_battle_axe_a.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
one_handed_battle_axe_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
one_handed_battle_axe_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
one_handed_battle_axe_a.add_capability(ItemCapability.CARRY_AXE_LEFT_HIP)
one_handed_battle_axe_a.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
one_handed_battle_axe_a.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
one_handed_battle_axe_a.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
one_handed_battle_axe_a.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
one_handed_battle_axe_a.add_capability(ItemCapability.FORCE_64_BITS)
one_handed_battle_axe_a.set_price(142)
one_handed_battle_axe_a.add_modifier(IModBit.RUSTY)
one_handed_battle_axe_a.add_modifier(IModBit.CHIPPED)
one_handed_battle_axe_a.add_modifier(IModBit.HEAVY)
one_handed_battle_axe_a.set_weight(1.5)
one_handed_battle_axe_a.set_abundance(100)
one_handed_battle_axe_a.set_difficulty(9)
one_handed_battle_axe_a.set_hit_points(34816)
one_handed_battle_axe_a.set_speed_rating(98)
one_handed_battle_axe_a.set_weapon_length(73)
one_handed_battle_axe_a.set_thrust_damage(0, 1)
one_handed_battle_axe_a.set_swing_damage(34, 0)


one_handed_war_axe_b = Item("one_handed_war_axe_b", "One_Handed_War_Axe")
one_handed_war_axe_b.add_mesh(ItemMesh("one_handed_war_axe_b"))
one_handed_war_axe_b.add_flag(ItemType.ONE_HANDED_WEAPON)
one_handed_war_axe_b.add_flag(ItemFlag.IS_MERCHANDISE)
one_handed_war_axe_b.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
one_handed_war_axe_b.add_flag(ItemFlag.IS_PRIMARY)
one_handed_war_axe_b.add_flag(ItemFlag.IS_SECONDARY)
one_handed_war_axe_b.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
one_handed_war_axe_b.add_capability(ItemCapability.ONEHANDED_OVERSWING)
one_handed_war_axe_b.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
one_handed_war_axe_b.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
one_handed_war_axe_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
one_handed_war_axe_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
one_handed_war_axe_b.add_capability(ItemCapability.CARRY_AXE_LEFT_HIP)
one_handed_war_axe_b.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
one_handed_war_axe_b.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
one_handed_war_axe_b.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
one_handed_war_axe_b.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
one_handed_war_axe_b.add_capability(ItemCapability.FORCE_64_BITS)
one_handed_war_axe_b.set_price(190)
one_handed_war_axe_b.add_modifier(IModBit.RUSTY)
one_handed_war_axe_b.add_modifier(IModBit.CHIPPED)
one_handed_war_axe_b.add_modifier(IModBit.HEAVY)
one_handed_war_axe_b.set_weight(1.5)
one_handed_war_axe_b.set_abundance(100)
one_handed_war_axe_b.set_difficulty(9)
one_handed_war_axe_b.set_hit_points(34816)
one_handed_war_axe_b.set_speed_rating(98)
one_handed_war_axe_b.set_weapon_length(76)
one_handed_war_axe_b.set_thrust_damage(0, 1)
one_handed_war_axe_b.set_swing_damage(34, 0)


one_handed_battle_axe_b = Item("one_handed_battle_axe_b", "One_Handed_Battle_Axe")
one_handed_battle_axe_b.add_mesh(ItemMesh("one_handed_battle_axe_b"))
one_handed_battle_axe_b.add_flag(ItemType.ONE_HANDED_WEAPON)
one_handed_battle_axe_b.add_flag(ItemFlag.IS_MERCHANDISE)
one_handed_battle_axe_b.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
one_handed_battle_axe_b.add_flag(ItemFlag.IS_PRIMARY)
one_handed_battle_axe_b.add_flag(ItemFlag.IS_SECONDARY)
one_handed_battle_axe_b.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
one_handed_battle_axe_b.add_capability(ItemCapability.ONEHANDED_OVERSWING)
one_handed_battle_axe_b.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
one_handed_battle_axe_b.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
one_handed_battle_axe_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
one_handed_battle_axe_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
one_handed_battle_axe_b.add_capability(ItemCapability.CARRY_AXE_LEFT_HIP)
one_handed_battle_axe_b.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
one_handed_battle_axe_b.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
one_handed_battle_axe_b.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
one_handed_battle_axe_b.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
one_handed_battle_axe_b.add_capability(ItemCapability.FORCE_64_BITS)
one_handed_battle_axe_b.set_price(230)
one_handed_battle_axe_b.add_modifier(IModBit.RUSTY)
one_handed_battle_axe_b.add_modifier(IModBit.CHIPPED)
one_handed_battle_axe_b.add_modifier(IModBit.HEAVY)
one_handed_battle_axe_b.set_weight(1.75)
one_handed_battle_axe_b.set_abundance(100)
one_handed_battle_axe_b.set_difficulty(9)
one_handed_battle_axe_b.set_hit_points(36864)
one_handed_battle_axe_b.set_speed_rating(98)
one_handed_battle_axe_b.set_weapon_length(72)
one_handed_battle_axe_b.set_thrust_damage(0, 1)
one_handed_battle_axe_b.set_swing_damage(36, 0)


one_handed_battle_axe_c = Item("one_handed_battle_axe_c", "One_Handed_Battle_Axe")
one_handed_battle_axe_c.add_mesh(ItemMesh("one_handed_battle_axe_c"))
one_handed_battle_axe_c.add_flag(ItemType.ONE_HANDED_WEAPON)
one_handed_battle_axe_c.add_flag(ItemFlag.IS_MERCHANDISE)
one_handed_battle_axe_c.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
one_handed_battle_axe_c.add_flag(ItemFlag.IS_PRIMARY)
one_handed_battle_axe_c.add_flag(ItemFlag.IS_SECONDARY)
one_handed_battle_axe_c.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
one_handed_battle_axe_c.add_capability(ItemCapability.ONEHANDED_OVERSWING)
one_handed_battle_axe_c.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
one_handed_battle_axe_c.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
one_handed_battle_axe_c.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
one_handed_battle_axe_c.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
one_handed_battle_axe_c.add_capability(ItemCapability.CARRY_AXE_LEFT_HIP)
one_handed_battle_axe_c.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
one_handed_battle_axe_c.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
one_handed_battle_axe_c.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
one_handed_battle_axe_c.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
one_handed_battle_axe_c.add_capability(ItemCapability.FORCE_64_BITS)
one_handed_battle_axe_c.set_price(550)
one_handed_battle_axe_c.add_modifier(IModBit.RUSTY)
one_handed_battle_axe_c.add_modifier(IModBit.CHIPPED)
one_handed_battle_axe_c.add_modifier(IModBit.HEAVY)
one_handed_battle_axe_c.set_weight(2.0)
one_handed_battle_axe_c.set_abundance(100)
one_handed_battle_axe_c.set_difficulty(9)
one_handed_battle_axe_c.set_hit_points(37888)
one_handed_battle_axe_c.set_speed_rating(98)
one_handed_battle_axe_c.set_weapon_length(76)
one_handed_battle_axe_c.set_thrust_damage(0, 1)
one_handed_battle_axe_c.set_swing_damage(37, 0)


two_handed_axe = Item("two_handed_axe", "Two_Handed_Axe")
two_handed_axe.add_mesh(ItemMesh("two_handed_battle_axe_a"))
two_handed_axe.add_flag(ItemType.TWO_HANDED_WEAPON)
two_handed_axe.add_flag(ItemFlag.IS_MERCHANDISE)
two_handed_axe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
two_handed_axe.add_flag(ItemFlag.IS_TWO_HANDED)
two_handed_axe.add_flag(ItemFlag.IS_PRIMARY)
two_handed_axe.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
two_handed_axe.add_flag(ItemFlag.IS_UNBALANCED)
two_handed_axe.add_capability(ItemCapability.TWOHANDED_OVERSWING)
two_handed_axe.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
two_handed_axe.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
two_handed_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
two_handed_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
two_handed_axe.add_capability(ItemCapability.CARRY_AXE_BACK)
two_handed_axe.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
two_handed_axe.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
two_handed_axe.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
two_handed_axe.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
two_handed_axe.add_capability(ItemCapability.FORCE_64_BITS)
two_handed_axe.set_price(90)
two_handed_axe.add_modifier(IModBit.RUSTY)
two_handed_axe.add_modifier(IModBit.CHIPPED)
two_handed_axe.add_modifier(IModBit.HEAVY)
two_handed_axe.set_weight(4.5)
two_handed_axe.set_abundance(100)
two_handed_axe.set_difficulty(10)
two_handed_axe.set_hit_points(38912)
two_handed_axe.set_speed_rating(96)
two_handed_axe.set_weapon_length(90)
two_handed_axe.set_thrust_damage(0, 1)
two_handed_axe.set_swing_damage(38, 0)


two_handed_battle_axe_2 = Item("two_handed_battle_axe_2", "Two_Handed_War_Axe")
two_handed_battle_axe_2.add_mesh(ItemMesh("two_handed_battle_axe_b"))
two_handed_battle_axe_2.add_flag(ItemType.TWO_HANDED_WEAPON)
two_handed_battle_axe_2.add_flag(ItemFlag.IS_MERCHANDISE)
two_handed_battle_axe_2.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
two_handed_battle_axe_2.add_flag(ItemFlag.IS_TWO_HANDED)
two_handed_battle_axe_2.add_flag(ItemFlag.IS_PRIMARY)
two_handed_battle_axe_2.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
two_handed_battle_axe_2.add_flag(ItemFlag.IS_UNBALANCED)
two_handed_battle_axe_2.add_capability(ItemCapability.TWOHANDED_OVERSWING)
two_handed_battle_axe_2.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
two_handed_battle_axe_2.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
two_handed_battle_axe_2.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
two_handed_battle_axe_2.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
two_handed_battle_axe_2.add_capability(ItemCapability.CARRY_AXE_BACK)
two_handed_battle_axe_2.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
two_handed_battle_axe_2.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
two_handed_battle_axe_2.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
two_handed_battle_axe_2.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
two_handed_battle_axe_2.add_capability(ItemCapability.FORCE_64_BITS)
two_handed_battle_axe_2.set_price(152)
two_handed_battle_axe_2.add_modifier(IModBit.RUSTY)
two_handed_battle_axe_2.add_modifier(IModBit.CHIPPED)
two_handed_battle_axe_2.add_modifier(IModBit.HEAVY)
two_handed_battle_axe_2.set_weight(4.5)
two_handed_battle_axe_2.set_abundance(100)
two_handed_battle_axe_2.set_difficulty(10)
two_handed_battle_axe_2.set_hit_points(45056)
two_handed_battle_axe_2.set_speed_rating(96)
two_handed_battle_axe_2.set_weapon_length(92)
two_handed_battle_axe_2.set_thrust_damage(0, 1)
two_handed_battle_axe_2.set_swing_damage(44, 0)


shortened_voulge = Item("shortened_voulge", "Shortened_Voulge")
shortened_voulge.add_mesh(ItemMesh("two_handed_battle_axe_c"))
shortened_voulge.add_flag(ItemType.TWO_HANDED_WEAPON)
shortened_voulge.add_flag(ItemFlag.IS_MERCHANDISE)
shortened_voulge.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
shortened_voulge.add_flag(ItemFlag.IS_TWO_HANDED)
shortened_voulge.add_flag(ItemFlag.IS_PRIMARY)
shortened_voulge.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
shortened_voulge.add_flag(ItemFlag.IS_UNBALANCED)
shortened_voulge.add_capability(ItemCapability.TWOHANDED_OVERSWING)
shortened_voulge.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
shortened_voulge.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
shortened_voulge.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
shortened_voulge.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
shortened_voulge.add_capability(ItemCapability.CARRY_AXE_BACK)
shortened_voulge.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
shortened_voulge.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
shortened_voulge.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
shortened_voulge.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
shortened_voulge.add_capability(ItemCapability.FORCE_64_BITS)
shortened_voulge.set_price(228)
shortened_voulge.add_modifier(IModBit.RUSTY)
shortened_voulge.add_modifier(IModBit.CHIPPED)
shortened_voulge.add_modifier(IModBit.HEAVY)
shortened_voulge.set_weight(4.5)
shortened_voulge.set_abundance(100)
shortened_voulge.set_difficulty(10)
shortened_voulge.set_hit_points(46080)
shortened_voulge.set_speed_rating(92)
shortened_voulge.set_weapon_length(100)
shortened_voulge.set_thrust_damage(0, 1)
shortened_voulge.set_swing_damage(45, 0)


great_axe = Item("great_axe", "Great_Axe")
great_axe.add_mesh(ItemMesh("two_handed_battle_axe_e"))
great_axe.add_flag(ItemType.TWO_HANDED_WEAPON)
great_axe.add_flag(ItemFlag.IS_MERCHANDISE)
great_axe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
great_axe.add_flag(ItemFlag.IS_TWO_HANDED)
great_axe.add_flag(ItemFlag.IS_PRIMARY)
great_axe.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
great_axe.add_flag(ItemFlag.IS_UNBALANCED)
great_axe.add_capability(ItemCapability.TWOHANDED_OVERSWING)
great_axe.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
great_axe.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
great_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
great_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
great_axe.add_capability(ItemCapability.CARRY_AXE_BACK)
great_axe.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
great_axe.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
great_axe.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
great_axe.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
great_axe.add_capability(ItemCapability.FORCE_64_BITS)
great_axe.set_price(316)
great_axe.add_modifier(IModBit.RUSTY)
great_axe.add_modifier(IModBit.CHIPPED)
great_axe.add_modifier(IModBit.HEAVY)
great_axe.set_weight(4.5)
great_axe.set_abundance(100)
great_axe.set_difficulty(10)
great_axe.set_hit_points(48128)
great_axe.set_speed_rating(94)
great_axe.set_weapon_length(96)
great_axe.set_thrust_damage(0, 1)
great_axe.set_swing_damage(47, 0)


long_axe = Item("long_axe", "Long_Axe")
long_axe.add_mesh(ItemMesh("long_axe_a"))
long_axe.add_flag(ItemType.POLEARM)
long_axe.add_flag(ItemFlag.IS_MERCHANDISE)
long_axe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
long_axe.add_flag(ItemFlag.IS_TWO_HANDED)
long_axe.add_flag(ItemFlag.IS_PRIMARY)
long_axe.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
long_axe.add_flag(ItemFlag.IS_CIVILIAN)
long_axe.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
long_axe.add_flag(ItemFlag.IS_UNBALANCED)
long_axe.add_capability(ItemCapability.POLEARM_THRUST)
long_axe.add_capability(ItemCapability.POLEARM_OVERSWING)
long_axe.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
long_axe.add_capability(ItemCapability.POLEARM_SLASHLEFT)
long_axe.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
long_axe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
long_axe.add_capability(ItemCapability.CARRY_AXE_BACK)
long_axe.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
long_axe.add_capability(ItemCapability.POLEARM_PARRY_UP)
long_axe.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
long_axe.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
long_axe.set_price(390)
long_axe.add_modifier(IModBit.RUSTY)
long_axe.add_modifier(IModBit.CHIPPED)
long_axe.add_modifier(IModBit.HEAVY)
long_axe.set_weight(4.75)
long_axe.set_abundance(100)
long_axe.set_difficulty(10)
long_axe.set_hit_points(47104)
long_axe.set_speed_rating(93)
long_axe.set_weapon_length(120)
long_axe.set_thrust_damage(19, 2)
long_axe.set_swing_damage(46, 0)


long_axe_alt = Item("long_axe_alt", "Long_Axe")
long_axe_alt.add_mesh(ItemMesh("long_axe_a"))
long_axe_alt.add_flag(ItemType.TWO_HANDED_WEAPON)
long_axe_alt.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
long_axe_alt.add_flag(ItemFlag.IS_TWO_HANDED)
long_axe_alt.add_flag(ItemFlag.IS_PRIMARY)
long_axe_alt.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
long_axe_alt.add_flag(ItemFlag.IS_UNBALANCED)
long_axe_alt.add_capability(ItemCapability.TWOHANDED_OVERSWING)
long_axe_alt.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
long_axe_alt.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
long_axe_alt.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
long_axe_alt.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
long_axe_alt.add_capability(ItemCapability.CARRY_AXE_BACK)
long_axe_alt.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
long_axe_alt.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
long_axe_alt.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
long_axe_alt.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
long_axe_alt.add_capability(ItemCapability.FORCE_64_BITS)
long_axe_alt.set_price(390)
long_axe_alt.add_modifier(IModBit.RUSTY)
long_axe_alt.add_modifier(IModBit.CHIPPED)
long_axe_alt.add_modifier(IModBit.HEAVY)
long_axe_alt.set_weight(4.75)
long_axe_alt.set_abundance(100)
long_axe_alt.set_difficulty(10)
long_axe_alt.set_hit_points(47104)
long_axe_alt.set_speed_rating(88)
long_axe_alt.set_weapon_length(120)
long_axe_alt.set_thrust_damage(0, 1)
long_axe_alt.set_swing_damage(46, 0)


long_axe_b = Item("long_axe_b", "Long_War_Axe")
long_axe_b.add_mesh(ItemMesh("long_axe_b"))
long_axe_b.add_flag(ItemType.POLEARM)
long_axe_b.add_flag(ItemFlag.IS_MERCHANDISE)
long_axe_b.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
long_axe_b.add_flag(ItemFlag.IS_TWO_HANDED)
long_axe_b.add_flag(ItemFlag.IS_PRIMARY)
long_axe_b.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
long_axe_b.add_flag(ItemFlag.IS_CIVILIAN)
long_axe_b.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
long_axe_b.add_flag(ItemFlag.IS_UNBALANCED)
long_axe_b.add_capability(ItemCapability.POLEARM_THRUST)
long_axe_b.add_capability(ItemCapability.POLEARM_OVERSWING)
long_axe_b.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
long_axe_b.add_capability(ItemCapability.POLEARM_SLASHLEFT)
long_axe_b.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
long_axe_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
long_axe_b.add_capability(ItemCapability.CARRY_AXE_BACK)
long_axe_b.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
long_axe_b.add_capability(ItemCapability.POLEARM_PARRY_UP)
long_axe_b.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
long_axe_b.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
long_axe_b.set_price(510)
long_axe_b.add_modifier(IModBit.RUSTY)
long_axe_b.add_modifier(IModBit.CHIPPED)
long_axe_b.add_modifier(IModBit.HEAVY)
long_axe_b.set_weight(5.0)
long_axe_b.set_abundance(100)
long_axe_b.set_difficulty(10)
long_axe_b.set_hit_points(51200)
long_axe_b.set_speed_rating(92)
long_axe_b.set_weapon_length(125)
long_axe_b.set_thrust_damage(18, 2)
long_axe_b.set_swing_damage(50, 0)


long_axe_b_alt = Item("long_axe_b_alt", "Long_War_Axe")
long_axe_b_alt.add_mesh(ItemMesh("long_axe_b"))
long_axe_b_alt.add_flag(ItemType.TWO_HANDED_WEAPON)
long_axe_b_alt.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
long_axe_b_alt.add_flag(ItemFlag.IS_TWO_HANDED)
long_axe_b_alt.add_flag(ItemFlag.IS_PRIMARY)
long_axe_b_alt.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
long_axe_b_alt.add_flag(ItemFlag.IS_UNBALANCED)
long_axe_b_alt.add_capability(ItemCapability.TWOHANDED_OVERSWING)
long_axe_b_alt.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
long_axe_b_alt.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
long_axe_b_alt.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
long_axe_b_alt.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
long_axe_b_alt.add_capability(ItemCapability.CARRY_AXE_BACK)
long_axe_b_alt.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
long_axe_b_alt.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
long_axe_b_alt.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
long_axe_b_alt.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
long_axe_b_alt.add_capability(ItemCapability.FORCE_64_BITS)
long_axe_b_alt.set_price(510)
long_axe_b_alt.add_modifier(IModBit.RUSTY)
long_axe_b_alt.add_modifier(IModBit.CHIPPED)
long_axe_b_alt.add_modifier(IModBit.HEAVY)
long_axe_b_alt.set_weight(5.0)
long_axe_b_alt.set_abundance(100)
long_axe_b_alt.set_difficulty(10)
long_axe_b_alt.set_hit_points(51200)
long_axe_b_alt.set_speed_rating(87)
long_axe_b_alt.set_weapon_length(125)
long_axe_b_alt.set_thrust_damage(0, 1)
long_axe_b_alt.set_swing_damage(50, 0)


long_axe_c = Item("long_axe_c", "Great_Long_Axe")
long_axe_c.add_mesh(ItemMesh("long_axe_c"))
long_axe_c.add_flag(ItemType.POLEARM)
long_axe_c.add_flag(ItemFlag.IS_MERCHANDISE)
long_axe_c.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
long_axe_c.add_flag(ItemFlag.IS_TWO_HANDED)
long_axe_c.add_flag(ItemFlag.IS_PRIMARY)
long_axe_c.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
long_axe_c.add_flag(ItemFlag.IS_CIVILIAN)
long_axe_c.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
long_axe_c.add_flag(ItemFlag.IS_UNBALANCED)
long_axe_c.add_capability(ItemCapability.POLEARM_THRUST)
long_axe_c.add_capability(ItemCapability.POLEARM_OVERSWING)
long_axe_c.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
long_axe_c.add_capability(ItemCapability.POLEARM_SLASHLEFT)
long_axe_c.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
long_axe_c.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
long_axe_c.add_capability(ItemCapability.CARRY_AXE_BACK)
long_axe_c.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
long_axe_c.add_capability(ItemCapability.POLEARM_PARRY_UP)
long_axe_c.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
long_axe_c.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
long_axe_c.set_price(660)
long_axe_c.add_modifier(IModBit.RUSTY)
long_axe_c.add_modifier(IModBit.CHIPPED)
long_axe_c.add_modifier(IModBit.HEAVY)
long_axe_c.set_weight(5.5)
long_axe_c.set_abundance(100)
long_axe_c.set_difficulty(10)
long_axe_c.set_hit_points(55296)
long_axe_c.set_speed_rating(91)
long_axe_c.set_weapon_length(127)
long_axe_c.set_thrust_damage(19, 2)
long_axe_c.set_swing_damage(54, 0)


long_axe_c_alt = Item("long_axe_c_alt", "Great_Long_Axe")
long_axe_c_alt.add_mesh(ItemMesh("long_axe_c"))
long_axe_c_alt.add_flag(ItemType.TWO_HANDED_WEAPON)
long_axe_c_alt.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
long_axe_c_alt.add_flag(ItemFlag.IS_TWO_HANDED)
long_axe_c_alt.add_flag(ItemFlag.IS_PRIMARY)
long_axe_c_alt.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
long_axe_c_alt.add_flag(ItemFlag.IS_UNBALANCED)
long_axe_c_alt.add_capability(ItemCapability.TWOHANDED_OVERSWING)
long_axe_c_alt.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
long_axe_c_alt.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
long_axe_c_alt.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
long_axe_c_alt.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
long_axe_c_alt.add_capability(ItemCapability.CARRY_AXE_BACK)
long_axe_c_alt.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
long_axe_c_alt.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
long_axe_c_alt.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
long_axe_c_alt.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
long_axe_c_alt.add_capability(ItemCapability.FORCE_64_BITS)
long_axe_c_alt.set_price(660)
long_axe_c_alt.add_modifier(IModBit.RUSTY)
long_axe_c_alt.add_modifier(IModBit.CHIPPED)
long_axe_c_alt.add_modifier(IModBit.HEAVY)
long_axe_c_alt.set_weight(5.5)
long_axe_c_alt.set_abundance(100)
long_axe_c_alt.set_difficulty(10)
long_axe_c_alt.set_hit_points(55296)
long_axe_c_alt.set_speed_rating(85)
long_axe_c_alt.set_weapon_length(127)
long_axe_c_alt.set_thrust_damage(0, 1)
long_axe_c_alt.set_swing_damage(54, 0)


bardiche = Item("bardiche", "Bardiche")
bardiche.add_mesh(ItemMesh("two_handed_battle_axe_d"))
bardiche.add_flag(ItemType.TWO_HANDED_WEAPON)
bardiche.add_flag(ItemFlag.IS_MERCHANDISE)
bardiche.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
bardiche.add_flag(ItemFlag.IS_TWO_HANDED)
bardiche.add_flag(ItemFlag.IS_PRIMARY)
bardiche.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
bardiche.add_flag(ItemFlag.IS_UNBALANCED)
bardiche.add_capability(ItemCapability.TWOHANDED_OVERSWING)
bardiche.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
bardiche.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
bardiche.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
bardiche.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
bardiche.add_capability(ItemCapability.CARRY_AXE_BACK)
bardiche.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
bardiche.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
bardiche.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
bardiche.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
bardiche.add_capability(ItemCapability.FORCE_64_BITS)
bardiche.set_price(291)
bardiche.add_modifier(IModBit.RUSTY)
bardiche.add_modifier(IModBit.CHIPPED)
bardiche.add_modifier(IModBit.HEAVY)
bardiche.set_weight(4.75)
bardiche.set_abundance(100)
bardiche.set_difficulty(10)
bardiche.set_hit_points(48128)
bardiche.set_speed_rating(91)
bardiche.set_weapon_length(102)
bardiche.set_thrust_damage(0, 1)
bardiche.set_swing_damage(47, 0)


great_bardiche = Item("great_bardiche", "Great_Bardiche")
great_bardiche.add_mesh(ItemMesh("two_handed_battle_axe_f"))
great_bardiche.add_flag(ItemType.TWO_HANDED_WEAPON)
great_bardiche.add_flag(ItemFlag.IS_MERCHANDISE)
great_bardiche.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
great_bardiche.add_flag(ItemFlag.IS_TWO_HANDED)
great_bardiche.add_flag(ItemFlag.IS_PRIMARY)
great_bardiche.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
great_bardiche.add_flag(ItemFlag.IS_UNBALANCED)
great_bardiche.add_capability(ItemCapability.TWOHANDED_OVERSWING)
great_bardiche.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
great_bardiche.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
great_bardiche.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
great_bardiche.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
great_bardiche.add_capability(ItemCapability.CARRY_AXE_BACK)
great_bardiche.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
great_bardiche.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
great_bardiche.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
great_bardiche.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
great_bardiche.add_capability(ItemCapability.FORCE_64_BITS)
great_bardiche.set_price(617)
great_bardiche.add_modifier(IModBit.RUSTY)
great_bardiche.add_modifier(IModBit.CHIPPED)
great_bardiche.add_modifier(IModBit.HEAVY)
great_bardiche.set_weight(5.0)
great_bardiche.set_abundance(100)
great_bardiche.set_difficulty(10)
great_bardiche.set_hit_points(51200)
great_bardiche.set_speed_rating(89)
great_bardiche.set_weapon_length(116)
great_bardiche.set_thrust_damage(0, 1)
great_bardiche.set_swing_damage(50, 0)


long_bardiche = Item("long_bardiche", "Long_Bardiche")
long_bardiche.add_mesh(ItemMesh("two_handed_battle_long_axe_b"))
long_bardiche.add_flag(ItemType.POLEARM)
long_bardiche.add_flag(ItemFlag.IS_MERCHANDISE)
long_bardiche.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
long_bardiche.add_flag(ItemFlag.IS_TWO_HANDED)
long_bardiche.add_flag(ItemFlag.IS_PRIMARY)
long_bardiche.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
long_bardiche.add_flag(ItemFlag.IS_UNBALANCED)
long_bardiche.add_capability(ItemCapability.POLEARM_THRUST)
long_bardiche.add_capability(ItemCapability.POLEARM_OVERSWING)
long_bardiche.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
long_bardiche.add_capability(ItemCapability.POLEARM_SLASHLEFT)
long_bardiche.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
long_bardiche.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
long_bardiche.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
long_bardiche.add_capability(ItemCapability.POLEARM_PARRY_UP)
long_bardiche.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
long_bardiche.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
long_bardiche.set_price(390)
long_bardiche.add_modifier(IModBit.RUSTY)
long_bardiche.add_modifier(IModBit.CHIPPED)
long_bardiche.add_modifier(IModBit.HEAVY)
long_bardiche.set_weight(4.75)
long_bardiche.set_abundance(100)
long_bardiche.set_difficulty(11)
long_bardiche.set_hit_points(49152)
long_bardiche.set_speed_rating(89)
long_bardiche.set_weapon_length(140)
long_bardiche.set_thrust_damage(17, 1)
long_bardiche.set_swing_damage(48, 0)


great_long_bardiche = Item("great_long_bardiche", "Great_Long_Bardiche")
great_long_bardiche.add_mesh(ItemMesh("two_handed_battle_long_axe_c"))
great_long_bardiche.add_flag(ItemType.POLEARM)
great_long_bardiche.add_flag(ItemFlag.IS_MERCHANDISE)
great_long_bardiche.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
great_long_bardiche.add_flag(ItemFlag.IS_TWO_HANDED)
great_long_bardiche.add_flag(ItemFlag.IS_PRIMARY)
great_long_bardiche.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
great_long_bardiche.add_flag(ItemFlag.IS_UNBALANCED)
great_long_bardiche.add_capability(ItemCapability.POLEARM_THRUST)
great_long_bardiche.add_capability(ItemCapability.POLEARM_OVERSWING)
great_long_bardiche.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
great_long_bardiche.add_capability(ItemCapability.POLEARM_SLASHLEFT)
great_long_bardiche.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
great_long_bardiche.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
great_long_bardiche.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
great_long_bardiche.add_capability(ItemCapability.POLEARM_PARRY_UP)
great_long_bardiche.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
great_long_bardiche.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
great_long_bardiche.set_price(660)
great_long_bardiche.add_modifier(IModBit.RUSTY)
great_long_bardiche.add_modifier(IModBit.CHIPPED)
great_long_bardiche.add_modifier(IModBit.HEAVY)
great_long_bardiche.set_weight(5.0)
great_long_bardiche.set_abundance(100)
great_long_bardiche.set_difficulty(12)
great_long_bardiche.set_hit_points(51200)
great_long_bardiche.set_speed_rating(88)
great_long_bardiche.set_weapon_length(155)
great_long_bardiche.set_thrust_damage(17, 1)
great_long_bardiche.set_swing_damage(50, 0)


hafted_blade_b = Item("hafted_blade_b", "Hafted_Blade")
hafted_blade_b.add_mesh(ItemMesh("khergit_pike_b"))
hafted_blade_b.add_flag(ItemType.POLEARM)
hafted_blade_b.add_flag(ItemFlag.IS_MERCHANDISE)
hafted_blade_b.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
hafted_blade_b.add_flag(ItemFlag.IS_TWO_HANDED)
hafted_blade_b.add_flag(ItemFlag.IS_PRIMARY)
hafted_blade_b.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
hafted_blade_b.add_capability(ItemCapability.POLEARM_THRUST)
hafted_blade_b.add_capability(ItemCapability.POLEARM_OVERSWING)
hafted_blade_b.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
hafted_blade_b.add_capability(ItemCapability.POLEARM_SLASHLEFT)
hafted_blade_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
hafted_blade_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
hafted_blade_b.add_capability(ItemCapability.CARRY_SPEAR)
hafted_blade_b.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
hafted_blade_b.add_capability(ItemCapability.POLEARM_PARRY_UP)
hafted_blade_b.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
hafted_blade_b.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
hafted_blade_b.add_capability(ItemCapability.HORSEBACK_POLEARM_SLASH)
hafted_blade_b.set_price(185)
hafted_blade_b.add_modifier(IModBit.CRACKED)
hafted_blade_b.add_modifier(IModBit.BENT)
hafted_blade_b.add_modifier(IModBit.BALANCED)
hafted_blade_b.set_weight(2.75)
hafted_blade_b.set_abundance(100)
hafted_blade_b.set_hit_points(37888)
hafted_blade_b.set_speed_rating(95)
hafted_blade_b.set_weapon_length(135)
hafted_blade_b.set_thrust_damage(20, 1)
hafted_blade_b.set_swing_damage(37, 0)


hafted_blade_a = Item("hafted_blade_a", "Hafted_Blade")
hafted_blade_a.add_mesh(ItemMesh("khergit_pike_a"))
hafted_blade_a.add_flag(ItemType.POLEARM)
hafted_blade_a.add_flag(ItemFlag.IS_MERCHANDISE)
hafted_blade_a.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
hafted_blade_a.add_flag(ItemFlag.IS_TWO_HANDED)
hafted_blade_a.add_flag(ItemFlag.IS_PRIMARY)
hafted_blade_a.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
hafted_blade_a.add_capability(ItemCapability.POLEARM_THRUST)
hafted_blade_a.add_capability(ItemCapability.POLEARM_OVERSWING)
hafted_blade_a.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
hafted_blade_a.add_capability(ItemCapability.POLEARM_SLASHLEFT)
hafted_blade_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
hafted_blade_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
hafted_blade_a.add_capability(ItemCapability.CARRY_SPEAR)
hafted_blade_a.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
hafted_blade_a.add_capability(ItemCapability.POLEARM_PARRY_UP)
hafted_blade_a.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
hafted_blade_a.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
hafted_blade_a.add_capability(ItemCapability.HORSEBACK_POLEARM_SLASH)
hafted_blade_a.set_price(350)
hafted_blade_a.add_modifier(IModBit.CRACKED)
hafted_blade_a.add_modifier(IModBit.BENT)
hafted_blade_a.add_modifier(IModBit.BALANCED)
hafted_blade_a.set_weight(3.25)
hafted_blade_a.set_abundance(100)
hafted_blade_a.set_hit_points(39936)
hafted_blade_a.set_speed_rating(93)
hafted_blade_a.set_weapon_length(153)
hafted_blade_a.set_thrust_damage(19, 1)
hafted_blade_a.set_swing_damage(39, 0)


shortened_military_scythe = Item("shortened_military_scythe", "Shortened_Military_Scythe")
shortened_military_scythe.add_mesh(ItemMesh("two_handed_battle_scythe_a"))
shortened_military_scythe.add_flag(ItemType.TWO_HANDED_WEAPON)
shortened_military_scythe.add_flag(ItemFlag.IS_MERCHANDISE)
shortened_military_scythe.add_flag(ItemFlag.IS_TWO_HANDED)
shortened_military_scythe.add_flag(ItemFlag.IS_PRIMARY)
shortened_military_scythe.add_capability(ItemCapability.TWOHANDED_OVERSWING)
shortened_military_scythe.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
shortened_military_scythe.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
shortened_military_scythe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
shortened_military_scythe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
shortened_military_scythe.add_capability(ItemCapability.CARRY_SWORD_BACK)
shortened_military_scythe.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
shortened_military_scythe.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
shortened_military_scythe.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
shortened_military_scythe.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
shortened_military_scythe.add_capability(ItemCapability.FORCE_64_BITS)
shortened_military_scythe.set_price(264)
shortened_military_scythe.add_modifier(IModBit.RUSTY)
shortened_military_scythe.add_modifier(IModBit.CHIPPED)
shortened_military_scythe.add_modifier(IModBit.BALANCED)
shortened_military_scythe.add_modifier(IModBit.TEMPERED)
shortened_military_scythe.add_modifier(IModBit.MASTERWORK)
shortened_military_scythe.set_weight(3.0)
shortened_military_scythe.set_abundance(100)
shortened_military_scythe.set_difficulty(10)
shortened_military_scythe.set_hit_points(46080)
shortened_military_scythe.set_speed_rating(90)
shortened_military_scythe.set_weapon_length(112)
shortened_military_scythe.set_thrust_damage(0, 1)
shortened_military_scythe.set_swing_damage(45, 0)


sword_medieval_a = Item("sword_medieval_a", "Sword")
sword_medieval_a.add_mesh(ItemMesh("sword_medieval_a"))
sword_medieval_a.add_mesh(ItemMesh("sword_medieval_a_scabbard", ItemMesh.ixmesh_carry))
sword_medieval_a.add_flag(ItemType.ONE_HANDED_WEAPON)
sword_medieval_a.add_flag(ItemFlag.IS_MERCHANDISE)
sword_medieval_a.add_flag(ItemFlag.IS_PRIMARY)
sword_medieval_a.add_capability(ItemCapability.ONEHANDED_TRUST)
sword_medieval_a.add_capability(ItemCapability.ONEHANDED_OVERSWING)
sword_medieval_a.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
sword_medieval_a.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
sword_medieval_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sword_medieval_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sword_medieval_a.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
sword_medieval_a.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
sword_medieval_a.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
sword_medieval_a.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
sword_medieval_a.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
sword_medieval_a.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
sword_medieval_a.add_capability(ItemCapability.FORCE_64_BITS)
sword_medieval_a.set_price(163)
sword_medieval_a.add_modifier(IModBit.RUSTY)
sword_medieval_a.add_modifier(IModBit.CHIPPED)
sword_medieval_a.add_modifier(IModBit.BALANCED)
sword_medieval_a.add_modifier(IModBit.TEMPERED)
sword_medieval_a.add_modifier(IModBit.MASTERWORK)
sword_medieval_a.set_weight(1.5)
sword_medieval_a.set_abundance(100)
sword_medieval_a.set_hit_points(27648)
sword_medieval_a.set_speed_rating(99)
sword_medieval_a.set_weapon_length(95)
sword_medieval_a.set_thrust_damage(22, 1)
sword_medieval_a.set_swing_damage(27, 0)


sword_medieval_b = Item("sword_medieval_b", "Sword")
sword_medieval_b.add_mesh(ItemMesh("sword_medieval_b"))
sword_medieval_b.add_mesh(ItemMesh("sword_medieval_b_scabbard", ItemMesh.ixmesh_carry))
meshx = ItemMesh("sword_rusty_a")
meshx.add_modifier(IModBit.RUSTY)
sword_medieval_b.add_mesh(meshx)
meshx = ItemMesh("sword_rusty_a_scabbard", ItemMesh.ixmesh_carry)
meshx.add_modifier(IModBit.RUSTY)
sword_medieval_b.add_mesh(meshx)
sword_medieval_b.add_flag(ItemType.ONE_HANDED_WEAPON)
sword_medieval_b.add_flag(ItemFlag.IS_MERCHANDISE)
sword_medieval_b.add_flag(ItemFlag.IS_PRIMARY)
sword_medieval_b.add_capability(ItemCapability.ONEHANDED_TRUST)
sword_medieval_b.add_capability(ItemCapability.ONEHANDED_OVERSWING)
sword_medieval_b.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
sword_medieval_b.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
sword_medieval_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sword_medieval_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sword_medieval_b.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
sword_medieval_b.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
sword_medieval_b.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
sword_medieval_b.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
sword_medieval_b.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
sword_medieval_b.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
sword_medieval_b.add_capability(ItemCapability.FORCE_64_BITS)
sword_medieval_b.set_price(243)
sword_medieval_b.add_modifier(IModBit.RUSTY)
sword_medieval_b.add_modifier(IModBit.CHIPPED)
sword_medieval_b.add_modifier(IModBit.BALANCED)
sword_medieval_b.add_modifier(IModBit.TEMPERED)
sword_medieval_b.add_modifier(IModBit.MASTERWORK)
sword_medieval_b.set_weight(1.5)
sword_medieval_b.set_abundance(100)
sword_medieval_b.set_hit_points(28672)
sword_medieval_b.set_speed_rating(99)
sword_medieval_b.set_weapon_length(95)
sword_medieval_b.set_thrust_damage(23, 1)
sword_medieval_b.set_swing_damage(28, 0)


sword_medieval_b_small = Item("sword_medieval_b_small", "Short_Sword")
sword_medieval_b_small.add_mesh(ItemMesh("sword_medieval_b_small"))
sword_medieval_b_small.add_mesh(ItemMesh("sword_medieval_b_small_scabbard", ItemMesh.ixmesh_carry))
sword_medieval_b_small.add_flag(ItemType.ONE_HANDED_WEAPON)
sword_medieval_b_small.add_flag(ItemFlag.IS_MERCHANDISE)
sword_medieval_b_small.add_flag(ItemFlag.IS_PRIMARY)
sword_medieval_b_small.add_capability(ItemCapability.ONEHANDED_TRUST)
sword_medieval_b_small.add_capability(ItemCapability.ONEHANDED_OVERSWING)
sword_medieval_b_small.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
sword_medieval_b_small.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
sword_medieval_b_small.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sword_medieval_b_small.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sword_medieval_b_small.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
sword_medieval_b_small.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
sword_medieval_b_small.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
sword_medieval_b_small.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
sword_medieval_b_small.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
sword_medieval_b_small.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
sword_medieval_b_small.add_capability(ItemCapability.FORCE_64_BITS)
sword_medieval_b_small.set_price(152)
sword_medieval_b_small.add_modifier(IModBit.RUSTY)
sword_medieval_b_small.add_modifier(IModBit.CHIPPED)
sword_medieval_b_small.add_modifier(IModBit.BALANCED)
sword_medieval_b_small.add_modifier(IModBit.TEMPERED)
sword_medieval_b_small.add_modifier(IModBit.MASTERWORK)
sword_medieval_b_small.set_weight(1.0)
sword_medieval_b_small.set_abundance(100)
sword_medieval_b_small.set_hit_points(26624)
sword_medieval_b_small.set_speed_rating(102)
sword_medieval_b_small.set_weapon_length(85)
sword_medieval_b_small.set_thrust_damage(24, 1)
sword_medieval_b_small.set_swing_damage(26, 0)


sword_medieval_c = Item("sword_medieval_c", "Arming_Sword")
sword_medieval_c.add_mesh(ItemMesh("sword_medieval_c"))
sword_medieval_c.add_mesh(ItemMesh("sword_medieval_c_scabbard", ItemMesh.ixmesh_carry))
sword_medieval_c.add_flag(ItemType.ONE_HANDED_WEAPON)
sword_medieval_c.add_flag(ItemFlag.IS_MERCHANDISE)
sword_medieval_c.add_flag(ItemFlag.IS_PRIMARY)
sword_medieval_c.add_capability(ItemCapability.ONEHANDED_TRUST)
sword_medieval_c.add_capability(ItemCapability.ONEHANDED_OVERSWING)
sword_medieval_c.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
sword_medieval_c.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
sword_medieval_c.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sword_medieval_c.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sword_medieval_c.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
sword_medieval_c.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
sword_medieval_c.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
sword_medieval_c.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
sword_medieval_c.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
sword_medieval_c.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
sword_medieval_c.add_capability(ItemCapability.FORCE_64_BITS)
sword_medieval_c.set_price(410)
sword_medieval_c.add_modifier(IModBit.RUSTY)
sword_medieval_c.add_modifier(IModBit.CHIPPED)
sword_medieval_c.add_modifier(IModBit.BALANCED)
sword_medieval_c.add_modifier(IModBit.TEMPERED)
sword_medieval_c.add_modifier(IModBit.MASTERWORK)
sword_medieval_c.set_weight(1.5)
sword_medieval_c.set_abundance(100)
sword_medieval_c.set_hit_points(29696)
sword_medieval_c.set_speed_rating(99)
sword_medieval_c.set_weapon_length(95)
sword_medieval_c.set_thrust_damage(24, 1)
sword_medieval_c.set_swing_damage(29, 0)


sword_medieval_c_small = Item("sword_medieval_c_small", "Short_Arming_Sword")
sword_medieval_c_small.add_mesh(ItemMesh("sword_medieval_c_small"))
sword_medieval_c_small.add_mesh(ItemMesh("sword_medieval_c_small_scabbard", ItemMesh.ixmesh_carry))
sword_medieval_c_small.add_flag(ItemType.ONE_HANDED_WEAPON)
sword_medieval_c_small.add_flag(ItemFlag.IS_MERCHANDISE)
sword_medieval_c_small.add_flag(ItemFlag.IS_PRIMARY)
sword_medieval_c_small.add_capability(ItemCapability.ONEHANDED_TRUST)
sword_medieval_c_small.add_capability(ItemCapability.ONEHANDED_OVERSWING)
sword_medieval_c_small.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
sword_medieval_c_small.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
sword_medieval_c_small.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sword_medieval_c_small.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sword_medieval_c_small.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
sword_medieval_c_small.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
sword_medieval_c_small.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
sword_medieval_c_small.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
sword_medieval_c_small.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
sword_medieval_c_small.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
sword_medieval_c_small.add_capability(ItemCapability.FORCE_64_BITS)
sword_medieval_c_small.set_price(243)
sword_medieval_c_small.add_modifier(IModBit.RUSTY)
sword_medieval_c_small.add_modifier(IModBit.CHIPPED)
sword_medieval_c_small.add_modifier(IModBit.BALANCED)
sword_medieval_c_small.add_modifier(IModBit.TEMPERED)
sword_medieval_c_small.add_modifier(IModBit.MASTERWORK)
sword_medieval_c_small.set_weight(1.0)
sword_medieval_c_small.set_abundance(100)
sword_medieval_c_small.set_hit_points(26624)
sword_medieval_c_small.set_speed_rating(103)
sword_medieval_c_small.set_weapon_length(86)
sword_medieval_c_small.set_thrust_damage(24, 1)
sword_medieval_c_small.set_swing_damage(26, 0)


sword_medieval_c_long = Item("sword_medieval_c_long", "Arming_Sword")
sword_medieval_c_long.add_mesh(ItemMesh("sword_medieval_c_long"))
sword_medieval_c_long.add_mesh(ItemMesh("sword_medieval_c_long_scabbard", ItemMesh.ixmesh_carry))
sword_medieval_c_long.add_flag(ItemType.ONE_HANDED_WEAPON)
sword_medieval_c_long.add_flag(ItemFlag.IS_MERCHANDISE)
sword_medieval_c_long.add_flag(ItemFlag.IS_PRIMARY)
sword_medieval_c_long.add_capability(ItemCapability.ONEHANDED_TRUST)
sword_medieval_c_long.add_capability(ItemCapability.ONEHANDED_OVERSWING)
sword_medieval_c_long.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
sword_medieval_c_long.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
sword_medieval_c_long.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sword_medieval_c_long.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sword_medieval_c_long.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
sword_medieval_c_long.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
sword_medieval_c_long.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
sword_medieval_c_long.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
sword_medieval_c_long.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
sword_medieval_c_long.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
sword_medieval_c_long.add_capability(ItemCapability.FORCE_64_BITS)
sword_medieval_c_long.set_price(480)
sword_medieval_c_long.add_modifier(IModBit.RUSTY)
sword_medieval_c_long.add_modifier(IModBit.CHIPPED)
sword_medieval_c_long.add_modifier(IModBit.BALANCED)
sword_medieval_c_long.add_modifier(IModBit.TEMPERED)
sword_medieval_c_long.add_modifier(IModBit.MASTERWORK)
sword_medieval_c_long.set_weight(1.5)
sword_medieval_c_long.set_abundance(100)
sword_medieval_c_long.set_hit_points(29696)
sword_medieval_c_long.set_speed_rating(99)
sword_medieval_c_long.set_weapon_length(100)
sword_medieval_c_long.set_thrust_damage(28, 1)
sword_medieval_c_long.set_swing_damage(29, 0)


sword_medieval_d_long = Item("sword_medieval_d_long", "Long_Arming_Sword")
sword_medieval_d_long.add_mesh(ItemMesh("sword_medieval_d_long"))
sword_medieval_d_long.add_mesh(ItemMesh("sword_medieval_d_long_scabbard", ItemMesh.ixmesh_carry))
sword_medieval_d_long.add_flag(ItemType.ONE_HANDED_WEAPON)
sword_medieval_d_long.add_flag(ItemFlag.IS_MERCHANDISE)
sword_medieval_d_long.add_flag(ItemFlag.IS_PRIMARY)
sword_medieval_d_long.add_capability(ItemCapability.ONEHANDED_TRUST)
sword_medieval_d_long.add_capability(ItemCapability.ONEHANDED_OVERSWING)
sword_medieval_d_long.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
sword_medieval_d_long.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
sword_medieval_d_long.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sword_medieval_d_long.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sword_medieval_d_long.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
sword_medieval_d_long.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
sword_medieval_d_long.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
sword_medieval_d_long.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
sword_medieval_d_long.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
sword_medieval_d_long.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
sword_medieval_d_long.add_capability(ItemCapability.FORCE_64_BITS)
sword_medieval_d_long.set_price(550)
sword_medieval_d_long.add_modifier(IModBit.RUSTY)
sword_medieval_d_long.add_modifier(IModBit.CHIPPED)
sword_medieval_d_long.add_modifier(IModBit.BALANCED)
sword_medieval_d_long.add_modifier(IModBit.TEMPERED)
sword_medieval_d_long.set_weight(1.75)
sword_medieval_d_long.set_abundance(100)
sword_medieval_d_long.set_hit_points(33792)
sword_medieval_d_long.set_speed_rating(96)
sword_medieval_d_long.set_weapon_length(105)
sword_medieval_d_long.set_thrust_damage(28, 1)
sword_medieval_d_long.set_swing_damage(33, 0)


sword_viking_1 = Item("sword_viking_1", "Nordic_Sword")
sword_viking_1.add_mesh(ItemMesh("sword_viking_c"))
sword_viking_1.add_mesh(ItemMesh("sword_viking_c_scabbard", ItemMesh.ixmesh_carry))
sword_viking_1.add_flag(ItemType.ONE_HANDED_WEAPON)
sword_viking_1.add_flag(ItemFlag.IS_MERCHANDISE)
sword_viking_1.add_flag(ItemFlag.IS_PRIMARY)
sword_viking_1.add_capability(ItemCapability.ONEHANDED_TRUST)
sword_viking_1.add_capability(ItemCapability.ONEHANDED_OVERSWING)
sword_viking_1.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
sword_viking_1.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
sword_viking_1.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sword_viking_1.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sword_viking_1.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
sword_viking_1.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
sword_viking_1.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
sword_viking_1.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
sword_viking_1.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
sword_viking_1.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
sword_viking_1.add_capability(ItemCapability.FORCE_64_BITS)
sword_viking_1.set_price(147)
sword_viking_1.add_modifier(IModBit.RUSTY)
sword_viking_1.add_modifier(IModBit.CHIPPED)
sword_viking_1.add_modifier(IModBit.BALANCED)
sword_viking_1.add_modifier(IModBit.TEMPERED)
sword_viking_1.add_modifier(IModBit.MASTERWORK)
sword_viking_1.set_weight(1.5)
sword_viking_1.set_abundance(100)
sword_viking_1.set_hit_points(28672)
sword_viking_1.set_speed_rating(99)
sword_viking_1.set_weapon_length(94)
sword_viking_1.set_thrust_damage(20, 1)
sword_viking_1.set_swing_damage(28, 0)


sword_viking_2 = Item("sword_viking_2", "Nordic_Sword")
sword_viking_2.add_mesh(ItemMesh("sword_viking_b"))
sword_viking_2.add_mesh(ItemMesh("sword_viking_b_scabbard", ItemMesh.ixmesh_carry))
sword_viking_2.add_flag(ItemType.ONE_HANDED_WEAPON)
sword_viking_2.add_flag(ItemFlag.IS_MERCHANDISE)
sword_viking_2.add_flag(ItemFlag.IS_PRIMARY)
sword_viking_2.add_capability(ItemCapability.ONEHANDED_TRUST)
sword_viking_2.add_capability(ItemCapability.ONEHANDED_OVERSWING)
sword_viking_2.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
sword_viking_2.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
sword_viking_2.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sword_viking_2.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sword_viking_2.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
sword_viking_2.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
sword_viking_2.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
sword_viking_2.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
sword_viking_2.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
sword_viking_2.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
sword_viking_2.add_capability(ItemCapability.FORCE_64_BITS)
sword_viking_2.set_price(276)
sword_viking_2.add_modifier(IModBit.RUSTY)
sword_viking_2.add_modifier(IModBit.CHIPPED)
sword_viking_2.add_modifier(IModBit.BALANCED)
sword_viking_2.add_modifier(IModBit.TEMPERED)
sword_viking_2.add_modifier(IModBit.MASTERWORK)
sword_viking_2.set_weight(1.5)
sword_viking_2.set_abundance(100)
sword_viking_2.set_hit_points(29696)
sword_viking_2.set_speed_rating(99)
sword_viking_2.set_weapon_length(95)
sword_viking_2.set_thrust_damage(21, 1)
sword_viking_2.set_swing_damage(29, 0)


sword_viking_2_small = Item("sword_viking_2_small", "Nordic_Short_Sword")
sword_viking_2_small.add_mesh(ItemMesh("sword_viking_b_small"))
sword_viking_2_small.add_mesh(ItemMesh("sword_viking_b_small_scabbard", ItemMesh.ixmesh_carry))
sword_viking_2_small.add_flag(ItemType.ONE_HANDED_WEAPON)
sword_viking_2_small.add_flag(ItemFlag.IS_MERCHANDISE)
sword_viking_2_small.add_flag(ItemFlag.IS_PRIMARY)
sword_viking_2_small.add_capability(ItemCapability.ONEHANDED_TRUST)
sword_viking_2_small.add_capability(ItemCapability.ONEHANDED_OVERSWING)
sword_viking_2_small.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
sword_viking_2_small.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
sword_viking_2_small.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sword_viking_2_small.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sword_viking_2_small.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
sword_viking_2_small.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
sword_viking_2_small.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
sword_viking_2_small.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
sword_viking_2_small.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
sword_viking_2_small.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
sword_viking_2_small.add_capability(ItemCapability.FORCE_64_BITS)
sword_viking_2_small.set_price(162)
sword_viking_2_small.add_modifier(IModBit.RUSTY)
sword_viking_2_small.add_modifier(IModBit.CHIPPED)
sword_viking_2_small.add_modifier(IModBit.BALANCED)
sword_viking_2_small.add_modifier(IModBit.TEMPERED)
sword_viking_2_small.add_modifier(IModBit.MASTERWORK)
sword_viking_2_small.set_weight(1.25)
sword_viking_2_small.set_abundance(100)
sword_viking_2_small.set_hit_points(28672)
sword_viking_2_small.set_speed_rating(103)
sword_viking_2_small.set_weapon_length(85)
sword_viking_2_small.set_thrust_damage(21, 1)
sword_viking_2_small.set_swing_damage(28, 0)


sword_viking_3 = Item("sword_viking_3", "Nordic_War_Sword")
sword_viking_3.add_mesh(ItemMesh("sword_viking_a"))
sword_viking_3.add_mesh(ItemMesh("sword_viking_a_scabbard", ItemMesh.ixmesh_carry))
sword_viking_3.add_flag(ItemType.ONE_HANDED_WEAPON)
sword_viking_3.add_flag(ItemFlag.IS_MERCHANDISE)
sword_viking_3.add_flag(ItemFlag.IS_PRIMARY)
sword_viking_3.add_capability(ItemCapability.ONEHANDED_TRUST)
sword_viking_3.add_capability(ItemCapability.ONEHANDED_OVERSWING)
sword_viking_3.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
sword_viking_3.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
sword_viking_3.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sword_viking_3.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sword_viking_3.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
sword_viking_3.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
sword_viking_3.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
sword_viking_3.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
sword_viking_3.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
sword_viking_3.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
sword_viking_3.add_capability(ItemCapability.FORCE_64_BITS)
sword_viking_3.set_price(394)
sword_viking_3.add_modifier(IModBit.RUSTY)
sword_viking_3.add_modifier(IModBit.CHIPPED)
sword_viking_3.add_modifier(IModBit.BALANCED)
sword_viking_3.add_modifier(IModBit.TEMPERED)
sword_viking_3.add_modifier(IModBit.MASTERWORK)
sword_viking_3.set_weight(1.5)
sword_viking_3.set_abundance(100)
sword_viking_3.set_hit_points(30720)
sword_viking_3.set_speed_rating(99)
sword_viking_3.set_weapon_length(95)
sword_viking_3.set_thrust_damage(21, 1)
sword_viking_3.set_swing_damage(30, 0)


sword_viking_3_small = Item("sword_viking_3_small", "Nordic_Short_War_Sword")
sword_viking_3_small.add_mesh(ItemMesh("sword_viking_a_small"))
sword_viking_3_small.add_mesh(ItemMesh("sword_viking_a_small_scabbard", ItemMesh.ixmesh_carry))
sword_viking_3_small.add_flag(ItemType.ONE_HANDED_WEAPON)
sword_viking_3_small.add_flag(ItemFlag.IS_MERCHANDISE)
sword_viking_3_small.add_flag(ItemFlag.IS_PRIMARY)
sword_viking_3_small.add_capability(ItemCapability.ONEHANDED_TRUST)
sword_viking_3_small.add_capability(ItemCapability.ONEHANDED_OVERSWING)
sword_viking_3_small.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
sword_viking_3_small.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
sword_viking_3_small.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sword_viking_3_small.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sword_viking_3_small.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
sword_viking_3_small.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
sword_viking_3_small.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
sword_viking_3_small.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
sword_viking_3_small.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
sword_viking_3_small.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
sword_viking_3_small.add_capability(ItemCapability.FORCE_64_BITS)
sword_viking_3_small.set_price(280)
sword_viking_3_small.add_modifier(IModBit.RUSTY)
sword_viking_3_small.add_modifier(IModBit.CHIPPED)
sword_viking_3_small.add_modifier(IModBit.BALANCED)
sword_viking_3_small.add_modifier(IModBit.TEMPERED)
sword_viking_3_small.add_modifier(IModBit.MASTERWORK)
sword_viking_3_small.set_weight(1.25)
sword_viking_3_small.set_abundance(100)
sword_viking_3_small.set_hit_points(29696)
sword_viking_3_small.set_speed_rating(103)
sword_viking_3_small.set_weapon_length(86)
sword_viking_3_small.set_thrust_damage(21, 1)
sword_viking_3_small.set_swing_damage(29, 0)


sword_khergit_1 = Item("sword_khergit_1", "Nomad_Sabre")
sword_khergit_1.add_mesh(ItemMesh("khergit_sword_b"))
sword_khergit_1.add_mesh(ItemMesh("khergit_sword_b_scabbard", ItemMesh.ixmesh_carry))
sword_khergit_1.add_flag(ItemType.ONE_HANDED_WEAPON)
sword_khergit_1.add_flag(ItemFlag.IS_MERCHANDISE)
sword_khergit_1.add_flag(ItemFlag.IS_PRIMARY)
sword_khergit_1.add_capability(ItemCapability.ONEHANDED_OVERSWING)
sword_khergit_1.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
sword_khergit_1.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
sword_khergit_1.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sword_khergit_1.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sword_khergit_1.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
sword_khergit_1.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
sword_khergit_1.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
sword_khergit_1.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
sword_khergit_1.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
sword_khergit_1.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
sword_khergit_1.add_capability(ItemCapability.FORCE_64_BITS)
sword_khergit_1.set_price(105)
sword_khergit_1.add_modifier(IModBit.RUSTY)
sword_khergit_1.add_modifier(IModBit.CHIPPED)
sword_khergit_1.add_modifier(IModBit.BALANCED)
sword_khergit_1.add_modifier(IModBit.TEMPERED)
sword_khergit_1.add_modifier(IModBit.MASTERWORK)
sword_khergit_1.set_weight(1.25)
sword_khergit_1.set_abundance(100)
sword_khergit_1.set_hit_points(29696)
sword_khergit_1.set_speed_rating(100)
sword_khergit_1.set_weapon_length(97)
sword_khergit_1.set_swing_damage(29, 0)


sword_khergit_2 = Item("sword_khergit_2", "Sabre")
sword_khergit_2.add_mesh(ItemMesh("khergit_sword_c"))
sword_khergit_2.add_mesh(ItemMesh("khergit_sword_c_scabbard", ItemMesh.ixmesh_carry))
sword_khergit_2.add_flag(ItemType.ONE_HANDED_WEAPON)
sword_khergit_2.add_flag(ItemFlag.IS_MERCHANDISE)
sword_khergit_2.add_flag(ItemFlag.IS_PRIMARY)
sword_khergit_2.add_capability(ItemCapability.ONEHANDED_OVERSWING)
sword_khergit_2.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
sword_khergit_2.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
sword_khergit_2.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sword_khergit_2.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sword_khergit_2.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
sword_khergit_2.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
sword_khergit_2.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
sword_khergit_2.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
sword_khergit_2.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
sword_khergit_2.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
sword_khergit_2.add_capability(ItemCapability.FORCE_64_BITS)
sword_khergit_2.set_price(191)
sword_khergit_2.add_modifier(IModBit.RUSTY)
sword_khergit_2.add_modifier(IModBit.CHIPPED)
sword_khergit_2.add_modifier(IModBit.BALANCED)
sword_khergit_2.add_modifier(IModBit.TEMPERED)
sword_khergit_2.add_modifier(IModBit.MASTERWORK)
sword_khergit_2.set_weight(1.5)
sword_khergit_2.set_abundance(100)
sword_khergit_2.set_hit_points(30720)
sword_khergit_2.set_speed_rating(99)
sword_khergit_2.set_weapon_length(97)
sword_khergit_2.set_swing_damage(30, 0)


sword_khergit_3 = Item("sword_khergit_3", "Sabre")
sword_khergit_3.add_mesh(ItemMesh("khergit_sword_a"))
sword_khergit_3.add_mesh(ItemMesh("khergit_sword_a_scabbard", ItemMesh.ixmesh_carry))
sword_khergit_3.add_flag(ItemType.ONE_HANDED_WEAPON)
sword_khergit_3.add_flag(ItemFlag.IS_MERCHANDISE)
sword_khergit_3.add_flag(ItemFlag.IS_PRIMARY)
sword_khergit_3.add_capability(ItemCapability.ONEHANDED_OVERSWING)
sword_khergit_3.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
sword_khergit_3.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
sword_khergit_3.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sword_khergit_3.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sword_khergit_3.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
sword_khergit_3.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
sword_khergit_3.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
sword_khergit_3.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
sword_khergit_3.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
sword_khergit_3.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
sword_khergit_3.add_capability(ItemCapability.FORCE_64_BITS)
sword_khergit_3.set_price(294)
sword_khergit_3.add_modifier(IModBit.RUSTY)
sword_khergit_3.add_modifier(IModBit.CHIPPED)
sword_khergit_3.add_modifier(IModBit.BALANCED)
sword_khergit_3.add_modifier(IModBit.TEMPERED)
sword_khergit_3.add_modifier(IModBit.MASTERWORK)
sword_khergit_3.set_weight(1.5)
sword_khergit_3.set_abundance(100)
sword_khergit_3.set_hit_points(31744)
sword_khergit_3.set_speed_rating(99)
sword_khergit_3.set_weapon_length(98)
sword_khergit_3.set_swing_damage(31, 0)


sword_khergit_4 = Item("sword_khergit_4", "Heavy_Sabre")
sword_khergit_4.add_mesh(ItemMesh("khergit_sword_d"))
sword_khergit_4.add_mesh(ItemMesh("khergit_sword_d_scabbard", ItemMesh.ixmesh_carry))
sword_khergit_4.add_flag(ItemType.ONE_HANDED_WEAPON)
sword_khergit_4.add_flag(ItemFlag.IS_MERCHANDISE)
sword_khergit_4.add_flag(ItemFlag.IS_PRIMARY)
sword_khergit_4.add_capability(ItemCapability.ONEHANDED_OVERSWING)
sword_khergit_4.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
sword_khergit_4.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
sword_khergit_4.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sword_khergit_4.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sword_khergit_4.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
sword_khergit_4.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
sword_khergit_4.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
sword_khergit_4.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
sword_khergit_4.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
sword_khergit_4.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
sword_khergit_4.add_capability(ItemCapability.FORCE_64_BITS)
sword_khergit_4.set_price(384)
sword_khergit_4.add_modifier(IModBit.RUSTY)
sword_khergit_4.add_modifier(IModBit.CHIPPED)
sword_khergit_4.add_modifier(IModBit.BALANCED)
sword_khergit_4.add_modifier(IModBit.TEMPERED)
sword_khergit_4.add_modifier(IModBit.MASTERWORK)
sword_khergit_4.set_weight(1.75)
sword_khergit_4.set_abundance(100)
sword_khergit_4.set_hit_points(33792)
sword_khergit_4.set_speed_rating(98)
sword_khergit_4.set_weapon_length(96)
sword_khergit_4.set_swing_damage(33, 0)


mace_1 = Item("mace_1", "Spiked_Club")
mace_1.add_mesh(ItemMesh("mace_d"))
mace_1.add_flag(ItemType.ONE_HANDED_WEAPON)
mace_1.add_flag(ItemFlag.IS_MERCHANDISE)
mace_1.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
mace_1.add_flag(ItemFlag.IS_PRIMARY)
mace_1.add_flag(ItemFlag.CAN_KNOCK_DOWN)
mace_1.add_capability(ItemCapability.ONEHANDED_OVERSWING)
mace_1.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
mace_1.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
mace_1.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
mace_1.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
mace_1.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
mace_1.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
mace_1.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
mace_1.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
mace_1.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
mace_1.add_capability(ItemCapability.FORCE_64_BITS)
mace_1.set_price(45)
mace_1.add_modifier(IModBit.RUSTY)
mace_1.add_modifier(IModBit.CHIPPED)
mace_1.add_modifier(IModBit.HEAVY)
mace_1.set_weight(1.5)
mace_1.set_abundance(100)
mace_1.set_hit_points(19456)
mace_1.set_speed_rating(99)
mace_1.set_weapon_length(70)
mace_1.set_thrust_damage(0, 1)
mace_1.set_swing_damage(19, 1)


mace_2 = Item("mace_2", "Knobbed_Mace")
mace_2.add_mesh(ItemMesh("mace_a"))
mace_2.add_flag(ItemType.ONE_HANDED_WEAPON)
mace_2.add_flag(ItemFlag.IS_MERCHANDISE)
mace_2.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
mace_2.add_flag(ItemFlag.IS_PRIMARY)
mace_2.add_flag(ItemFlag.CAN_KNOCK_DOWN)
mace_2.add_capability(ItemCapability.ONEHANDED_OVERSWING)
mace_2.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
mace_2.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
mace_2.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
mace_2.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
mace_2.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
mace_2.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
mace_2.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
mace_2.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
mace_2.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
mace_2.add_capability(ItemCapability.FORCE_64_BITS)
mace_2.set_price(98)
mace_2.add_modifier(IModBit.RUSTY)
mace_2.add_modifier(IModBit.CHIPPED)
mace_2.add_modifier(IModBit.HEAVY)
mace_2.set_weight(2.5)
mace_2.set_abundance(100)
mace_2.set_hit_points(21504)
mace_2.set_speed_rating(98)
mace_2.set_weapon_length(70)
mace_2.set_thrust_damage(0, 1)
mace_2.set_swing_damage(21, 2)


mace_3 = Item("mace_3", "Spiked_Mace")
mace_3.add_mesh(ItemMesh("mace_c"))
mace_3.add_flag(ItemType.ONE_HANDED_WEAPON)
mace_3.add_flag(ItemFlag.IS_MERCHANDISE)
mace_3.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
mace_3.add_flag(ItemFlag.IS_PRIMARY)
mace_3.add_flag(ItemFlag.CAN_KNOCK_DOWN)
mace_3.add_capability(ItemCapability.ONEHANDED_OVERSWING)
mace_3.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
mace_3.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
mace_3.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
mace_3.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
mace_3.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
mace_3.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
mace_3.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
mace_3.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
mace_3.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
mace_3.add_capability(ItemCapability.FORCE_64_BITS)
mace_3.set_price(152)
mace_3.add_modifier(IModBit.RUSTY)
mace_3.add_modifier(IModBit.CHIPPED)
mace_3.add_modifier(IModBit.HEAVY)
mace_3.set_weight(2.75)
mace_3.set_abundance(100)
mace_3.set_hit_points(23552)
mace_3.set_speed_rating(98)
mace_3.set_weapon_length(70)
mace_3.set_thrust_damage(0, 1)
mace_3.set_swing_damage(23, 2)


mace_4 = Item("mace_4", "Winged_Mace")
mace_4.add_mesh(ItemMesh("mace_b"))
mace_4.add_flag(ItemType.ONE_HANDED_WEAPON)
mace_4.add_flag(ItemFlag.IS_MERCHANDISE)
mace_4.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
mace_4.add_flag(ItemFlag.IS_PRIMARY)
mace_4.add_flag(ItemFlag.CAN_KNOCK_DOWN)
mace_4.add_capability(ItemCapability.ONEHANDED_OVERSWING)
mace_4.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
mace_4.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
mace_4.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
mace_4.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
mace_4.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
mace_4.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
mace_4.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
mace_4.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
mace_4.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
mace_4.add_capability(ItemCapability.FORCE_64_BITS)
mace_4.set_price(212)
mace_4.add_modifier(IModBit.RUSTY)
mace_4.add_modifier(IModBit.CHIPPED)
mace_4.add_modifier(IModBit.HEAVY)
mace_4.set_weight(2.75)
mace_4.set_abundance(100)
mace_4.set_hit_points(24576)
mace_4.set_speed_rating(98)
mace_4.set_weapon_length(70)
mace_4.set_thrust_damage(0, 1)
mace_4.set_swing_damage(24, 2)


club_with_spike_head = Item("club_with_spike_head", "Spiked_Staff")
club_with_spike_head.add_mesh(ItemMesh("mace_e"))
club_with_spike_head.add_flag(ItemType.TWO_HANDED_WEAPON)
club_with_spike_head.add_flag(ItemFlag.IS_MERCHANDISE)
club_with_spike_head.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
club_with_spike_head.add_flag(ItemFlag.IS_PRIMARY)
club_with_spike_head.add_flag(ItemFlag.CAN_KNOCK_DOWN)
club_with_spike_head.add_capability(ItemCapability.ONEHANDED_TRUST)
club_with_spike_head.add_capability(ItemCapability.ONEHANDED_OVERSWING)
club_with_spike_head.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
club_with_spike_head.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
club_with_spike_head.add_capability(ItemCapability.TWOHANDED_THRUST)
club_with_spike_head.add_capability(ItemCapability.TWOHANDED_OVERSWING)
club_with_spike_head.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
club_with_spike_head.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
club_with_spike_head.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
club_with_spike_head.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
club_with_spike_head.add_capability(ItemCapability.CARRY_AXE_BACK)
club_with_spike_head.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
club_with_spike_head.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
club_with_spike_head.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
club_with_spike_head.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
club_with_spike_head.add_capability(ItemCapability.FORCE_64_BITS)
club_with_spike_head.set_price(200)
club_with_spike_head.add_modifier(IModBit.RUSTY)
club_with_spike_head.add_modifier(IModBit.CHIPPED)
club_with_spike_head.add_modifier(IModBit.HEAVY)
club_with_spike_head.set_weight(2.75)
club_with_spike_head.set_abundance(100)
club_with_spike_head.set_difficulty(9)
club_with_spike_head.set_hit_points(24576)
club_with_spike_head.set_speed_rating(95)
club_with_spike_head.set_weapon_length(117)
club_with_spike_head.set_thrust_damage(20, 1)
club_with_spike_head.set_swing_damage(24, 2)


long_spiked_club = Item("long_spiked_club", "Long_Spiked_Club")
long_spiked_club.add_mesh(ItemMesh("mace_long_c"))
long_spiked_club.add_flag(ItemType.POLEARM)
long_spiked_club.add_flag(ItemFlag.IS_MERCHANDISE)
long_spiked_club.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
long_spiked_club.add_flag(ItemFlag.IS_PRIMARY)
long_spiked_club.add_flag(ItemFlag.CAN_KNOCK_DOWN)
long_spiked_club.add_capability(ItemCapability.POLEARM_THRUST)
long_spiked_club.add_capability(ItemCapability.POLEARM_OVERSWING)
long_spiked_club.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
long_spiked_club.add_capability(ItemCapability.POLEARM_SLASHLEFT)
long_spiked_club.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
long_spiked_club.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
long_spiked_club.add_capability(ItemCapability.CARRY_AXE_BACK)
long_spiked_club.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
long_spiked_club.add_capability(ItemCapability.POLEARM_PARRY_UP)
long_spiked_club.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
long_spiked_club.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
long_spiked_club.set_price(264)
long_spiked_club.add_modifier(IModBit.RUSTY)
long_spiked_club.add_modifier(IModBit.CHIPPED)
long_spiked_club.add_modifier(IModBit.HEAVY)
long_spiked_club.set_weight(3.0)
long_spiked_club.set_abundance(100)
long_spiked_club.set_hit_points(23552)
long_spiked_club.set_speed_rating(96)
long_spiked_club.set_weapon_length(126)
long_spiked_club.set_thrust_damage(20, 2)
long_spiked_club.set_swing_damage(23, 1)


long_hafted_knobbed_mace = Item("long_hafted_knobbed_mace", "Long_Hafted_Knobbed_Mace")
long_hafted_knobbed_mace.add_mesh(ItemMesh("mace_long_a"))
long_hafted_knobbed_mace.add_flag(ItemType.POLEARM)
long_hafted_knobbed_mace.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
long_hafted_knobbed_mace.add_flag(ItemFlag.IS_PRIMARY)
long_hafted_knobbed_mace.add_flag(ItemFlag.CAN_KNOCK_DOWN)
long_hafted_knobbed_mace.add_capability(ItemCapability.POLEARM_THRUST)
long_hafted_knobbed_mace.add_capability(ItemCapability.POLEARM_OVERSWING)
long_hafted_knobbed_mace.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
long_hafted_knobbed_mace.add_capability(ItemCapability.POLEARM_SLASHLEFT)
long_hafted_knobbed_mace.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
long_hafted_knobbed_mace.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
long_hafted_knobbed_mace.add_capability(ItemCapability.CARRY_AXE_BACK)
long_hafted_knobbed_mace.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
long_hafted_knobbed_mace.add_capability(ItemCapability.POLEARM_PARRY_UP)
long_hafted_knobbed_mace.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
long_hafted_knobbed_mace.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
long_hafted_knobbed_mace.set_price(324)
long_hafted_knobbed_mace.add_modifier(IModBit.RUSTY)
long_hafted_knobbed_mace.add_modifier(IModBit.CHIPPED)
long_hafted_knobbed_mace.add_modifier(IModBit.HEAVY)
long_hafted_knobbed_mace.set_weight(3.0)
long_hafted_knobbed_mace.set_abundance(100)
long_hafted_knobbed_mace.set_hit_points(26624)
long_hafted_knobbed_mace.set_speed_rating(95)
long_hafted_knobbed_mace.set_weapon_length(133)
long_hafted_knobbed_mace.set_thrust_damage(23, 2)
long_hafted_knobbed_mace.set_swing_damage(26, 2)


long_hafted_spiked_mace = Item("long_hafted_spiked_mace", "Long_Hafted_Spiked_Mace")
long_hafted_spiked_mace.add_mesh(ItemMesh("mace_long_b"))
long_hafted_spiked_mace.add_flag(ItemType.POLEARM)
long_hafted_spiked_mace.add_flag(ItemFlag.IS_MERCHANDISE)
long_hafted_spiked_mace.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
long_hafted_spiked_mace.add_flag(ItemFlag.IS_PRIMARY)
long_hafted_spiked_mace.add_flag(ItemFlag.CAN_KNOCK_DOWN)
long_hafted_spiked_mace.add_capability(ItemCapability.POLEARM_THRUST)
long_hafted_spiked_mace.add_capability(ItemCapability.POLEARM_OVERSWING)
long_hafted_spiked_mace.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
long_hafted_spiked_mace.add_capability(ItemCapability.POLEARM_SLASHLEFT)
long_hafted_spiked_mace.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
long_hafted_spiked_mace.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
long_hafted_spiked_mace.add_capability(ItemCapability.CARRY_AXE_BACK)
long_hafted_spiked_mace.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
long_hafted_spiked_mace.add_capability(ItemCapability.POLEARM_PARRY_UP)
long_hafted_spiked_mace.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
long_hafted_spiked_mace.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
long_hafted_spiked_mace.set_price(310)
long_hafted_spiked_mace.add_modifier(IModBit.RUSTY)
long_hafted_spiked_mace.add_modifier(IModBit.CHIPPED)
long_hafted_spiked_mace.add_modifier(IModBit.HEAVY)
long_hafted_spiked_mace.set_weight(3.0)
long_hafted_spiked_mace.set_abundance(100)
long_hafted_spiked_mace.set_hit_points(28672)
long_hafted_spiked_mace.set_speed_rating(94)
long_hafted_spiked_mace.set_weapon_length(140)
long_hafted_spiked_mace.set_thrust_damage(26, 2)
long_hafted_spiked_mace.set_swing_damage(28, 2)


sarranid_two_handed_mace_1 = Item("sarranid_two_handed_mace_1", "Iron_Mace")
sarranid_two_handed_mace_1.add_mesh(ItemMesh("mace_long_d"))
sarranid_two_handed_mace_1.add_flag(ItemType.TWO_HANDED_WEAPON)
sarranid_two_handed_mace_1.add_flag(ItemFlag.IS_MERCHANDISE)
sarranid_two_handed_mace_1.add_flag(ItemFlag.IS_TWO_HANDED)
sarranid_two_handed_mace_1.add_flag(ItemFlag.IS_PRIMARY)
sarranid_two_handed_mace_1.add_flag(ItemFlag.HAS_CRUSH_THROUGH)
sarranid_two_handed_mace_1.add_flag(ItemFlag.IS_UNBALANCED)
sarranid_two_handed_mace_1.add_flag(ItemFlag.CAN_KNOCK_DOWN)
sarranid_two_handed_mace_1.add_capability(ItemCapability.TWOHANDED_THRUST)
sarranid_two_handed_mace_1.add_capability(ItemCapability.TWOHANDED_OVERSWING)
sarranid_two_handed_mace_1.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
sarranid_two_handed_mace_1.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
sarranid_two_handed_mace_1.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sarranid_two_handed_mace_1.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sarranid_two_handed_mace_1.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
sarranid_two_handed_mace_1.add_capability(ItemCapability.CARRY_AXE_BACK)
sarranid_two_handed_mace_1.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
sarranid_two_handed_mace_1.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
sarranid_two_handed_mace_1.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
sarranid_two_handed_mace_1.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
sarranid_two_handed_mace_1.add_capability(ItemCapability.FORCE_64_BITS)
sarranid_two_handed_mace_1.set_price(470)
sarranid_two_handed_mace_1.add_modifier(IModBit.RUSTY)
sarranid_two_handed_mace_1.add_modifier(IModBit.CHIPPED)
sarranid_two_handed_mace_1.add_modifier(IModBit.HEAVY)
sarranid_two_handed_mace_1.set_weight(4.5)
sarranid_two_handed_mace_1.set_abundance(100)
sarranid_two_handed_mace_1.set_hit_points(35840)
sarranid_two_handed_mace_1.set_speed_rating(90)
sarranid_two_handed_mace_1.set_weapon_length(95)
sarranid_two_handed_mace_1.set_thrust_damage(22, 2)
sarranid_two_handed_mace_1.set_swing_damage(35, 2)


sarranid_mace_1 = Item("sarranid_mace_1", "Iron_Mace")
sarranid_mace_1.add_mesh(ItemMesh("mace_small_d"))
sarranid_mace_1.add_flag(ItemType.ONE_HANDED_WEAPON)
sarranid_mace_1.add_flag(ItemFlag.IS_MERCHANDISE)
sarranid_mace_1.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
sarranid_mace_1.add_flag(ItemFlag.IS_PRIMARY)
sarranid_mace_1.add_flag(ItemFlag.CAN_KNOCK_DOWN)
sarranid_mace_1.add_capability(ItemCapability.ONEHANDED_OVERSWING)
sarranid_mace_1.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
sarranid_mace_1.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
sarranid_mace_1.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sarranid_mace_1.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sarranid_mace_1.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
sarranid_mace_1.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
sarranid_mace_1.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
sarranid_mace_1.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
sarranid_mace_1.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
sarranid_mace_1.add_capability(ItemCapability.FORCE_64_BITS)
sarranid_mace_1.set_price(45)
sarranid_mace_1.add_modifier(IModBit.RUSTY)
sarranid_mace_1.add_modifier(IModBit.CHIPPED)
sarranid_mace_1.add_modifier(IModBit.HEAVY)
sarranid_mace_1.set_weight(2.0)
sarranid_mace_1.set_abundance(100)
sarranid_mace_1.set_hit_points(22528)
sarranid_mace_1.set_speed_rating(99)
sarranid_mace_1.set_weapon_length(73)
sarranid_mace_1.set_thrust_damage(0, 1)
sarranid_mace_1.set_swing_damage(22, 2)


sarranid_axe_a = Item("sarranid_axe_a", "Iron_Battle_Axe")
sarranid_axe_a.add_mesh(ItemMesh("one_handed_battle_axe_g"))
sarranid_axe_a.add_flag(ItemType.ONE_HANDED_WEAPON)
sarranid_axe_a.add_flag(ItemFlag.IS_MERCHANDISE)
sarranid_axe_a.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
sarranid_axe_a.add_flag(ItemFlag.IS_PRIMARY)
sarranid_axe_a.add_flag(ItemFlag.IS_SECONDARY)
sarranid_axe_a.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
sarranid_axe_a.add_capability(ItemCapability.ONEHANDED_OVERSWING)
sarranid_axe_a.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
sarranid_axe_a.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
sarranid_axe_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sarranid_axe_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sarranid_axe_a.add_capability(ItemCapability.CARRY_AXE_LEFT_HIP)
sarranid_axe_a.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
sarranid_axe_a.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
sarranid_axe_a.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
sarranid_axe_a.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
sarranid_axe_a.add_capability(ItemCapability.FORCE_64_BITS)
sarranid_axe_a.set_price(250)
sarranid_axe_a.add_modifier(IModBit.RUSTY)
sarranid_axe_a.add_modifier(IModBit.CHIPPED)
sarranid_axe_a.add_modifier(IModBit.HEAVY)
sarranid_axe_a.set_weight(1.5)
sarranid_axe_a.set_abundance(100)
sarranid_axe_a.set_difficulty(9)
sarranid_axe_a.set_hit_points(35840)
sarranid_axe_a.set_speed_rating(97)
sarranid_axe_a.set_weapon_length(71)
sarranid_axe_a.set_thrust_damage(0, 1)
sarranid_axe_a.set_swing_damage(35, 0)


sarranid_axe_b = Item("sarranid_axe_b", "Iron_War_Axe")
sarranid_axe_b.add_mesh(ItemMesh("one_handed_battle_axe_h"))
sarranid_axe_b.add_flag(ItemType.ONE_HANDED_WEAPON)
sarranid_axe_b.add_flag(ItemFlag.IS_MERCHANDISE)
sarranid_axe_b.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
sarranid_axe_b.add_flag(ItemFlag.IS_PRIMARY)
sarranid_axe_b.add_flag(ItemFlag.IS_SECONDARY)
sarranid_axe_b.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
sarranid_axe_b.add_capability(ItemCapability.ONEHANDED_OVERSWING)
sarranid_axe_b.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
sarranid_axe_b.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
sarranid_axe_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sarranid_axe_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sarranid_axe_b.add_capability(ItemCapability.CARRY_AXE_LEFT_HIP)
sarranid_axe_b.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
sarranid_axe_b.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
sarranid_axe_b.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
sarranid_axe_b.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
sarranid_axe_b.add_capability(ItemCapability.FORCE_64_BITS)
sarranid_axe_b.set_price(360)
sarranid_axe_b.add_modifier(IModBit.RUSTY)
sarranid_axe_b.add_modifier(IModBit.CHIPPED)
sarranid_axe_b.add_modifier(IModBit.HEAVY)
sarranid_axe_b.set_weight(1.75)
sarranid_axe_b.set_abundance(100)
sarranid_axe_b.set_difficulty(9)
sarranid_axe_b.set_hit_points(38912)
sarranid_axe_b.set_speed_rating(97)
sarranid_axe_b.set_weapon_length(71)
sarranid_axe_b.set_thrust_damage(0, 1)
sarranid_axe_b.set_swing_damage(38, 0)


sarranid_two_handed_axe_a = Item("sarranid_two_handed_axe_a", "Sarranid_Battle_Axe")
sarranid_two_handed_axe_a.add_mesh(ItemMesh("two_handed_battle_axe_g"))
sarranid_two_handed_axe_a.add_flag(ItemType.TWO_HANDED_WEAPON)
sarranid_two_handed_axe_a.add_flag(ItemFlag.IS_TWO_HANDED)
sarranid_two_handed_axe_a.add_flag(ItemFlag.IS_PRIMARY)
sarranid_two_handed_axe_a.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
sarranid_two_handed_axe_a.add_flag(ItemFlag.IS_UNBALANCED)
sarranid_two_handed_axe_a.add_capability(ItemCapability.TWOHANDED_OVERSWING)
sarranid_two_handed_axe_a.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
sarranid_two_handed_axe_a.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
sarranid_two_handed_axe_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sarranid_two_handed_axe_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sarranid_two_handed_axe_a.add_capability(ItemCapability.CARRY_AXE_BACK)
sarranid_two_handed_axe_a.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
sarranid_two_handed_axe_a.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
sarranid_two_handed_axe_a.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
sarranid_two_handed_axe_a.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
sarranid_two_handed_axe_a.add_capability(ItemCapability.FORCE_64_BITS)
sarranid_two_handed_axe_a.set_price(350)
sarranid_two_handed_axe_a.add_modifier(IModBit.RUSTY)
sarranid_two_handed_axe_a.add_modifier(IModBit.CHIPPED)
sarranid_two_handed_axe_a.add_modifier(IModBit.HEAVY)
sarranid_two_handed_axe_a.set_weight(3.0)
sarranid_two_handed_axe_a.set_abundance(100)
sarranid_two_handed_axe_a.set_difficulty(10)
sarranid_two_handed_axe_a.set_hit_points(50176)
sarranid_two_handed_axe_a.set_speed_rating(89)
sarranid_two_handed_axe_a.set_weapon_length(95)
sarranid_two_handed_axe_a.set_thrust_damage(0, 1)
sarranid_two_handed_axe_a.set_swing_damage(49, 0)


sarranid_two_handed_axe_b = Item("sarranid_two_handed_axe_b", "Sarranid_War_Axe")
sarranid_two_handed_axe_b.add_mesh(ItemMesh("two_handed_battle_axe_h"))
sarranid_two_handed_axe_b.add_flag(ItemType.TWO_HANDED_WEAPON)
sarranid_two_handed_axe_b.add_flag(ItemFlag.IS_TWO_HANDED)
sarranid_two_handed_axe_b.add_flag(ItemFlag.IS_PRIMARY)
sarranid_two_handed_axe_b.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
sarranid_two_handed_axe_b.add_flag(ItemFlag.IS_UNBALANCED)
sarranid_two_handed_axe_b.add_capability(ItemCapability.TWOHANDED_OVERSWING)
sarranid_two_handed_axe_b.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
sarranid_two_handed_axe_b.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
sarranid_two_handed_axe_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
sarranid_two_handed_axe_b.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
sarranid_two_handed_axe_b.add_capability(ItemCapability.CARRY_AXE_BACK)
sarranid_two_handed_axe_b.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
sarranid_two_handed_axe_b.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
sarranid_two_handed_axe_b.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
sarranid_two_handed_axe_b.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
sarranid_two_handed_axe_b.add_capability(ItemCapability.FORCE_64_BITS)
sarranid_two_handed_axe_b.set_price(280)
sarranid_two_handed_axe_b.add_modifier(IModBit.RUSTY)
sarranid_two_handed_axe_b.add_modifier(IModBit.CHIPPED)
sarranid_two_handed_axe_b.add_modifier(IModBit.HEAVY)
sarranid_two_handed_axe_b.set_weight(2.5)
sarranid_two_handed_axe_b.set_abundance(100)
sarranid_two_handed_axe_b.set_difficulty(10)
sarranid_two_handed_axe_b.set_hit_points(47104)
sarranid_two_handed_axe_b.set_speed_rating(90)
sarranid_two_handed_axe_b.set_weapon_length(90)
sarranid_two_handed_axe_b.set_thrust_damage(0, 1)
sarranid_two_handed_axe_b.set_swing_damage(46, 0)


scythe = Item("scythe", "Scythe")
scythe.add_mesh(ItemMesh("scythe"))
scythe.add_flag(ItemType.POLEARM)
scythe.add_flag(ItemFlag.IS_MERCHANDISE)
scythe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
scythe.add_flag(ItemFlag.IS_PRIMARY)
scythe.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
scythe.add_flag(ItemFlag.FITS_TO_HEAD)
scythe.add_flag(ItemFlag.OFFSET_LANCE)
scythe.add_capability(ItemCapability.POLEARM_THRUST)
scythe.add_capability(ItemCapability.POLEARM_OVERSWING)
scythe.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
scythe.add_capability(ItemCapability.POLEARM_SLASHLEFT)
scythe.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
scythe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
scythe.add_capability(ItemCapability.CARRY_SPEAR)
scythe.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
scythe.add_capability(ItemCapability.POLEARM_PARRY_UP)
scythe.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
scythe.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
scythe.set_price(43)
scythe.add_modifier(IModBit.CRACKED)
scythe.add_modifier(IModBit.BENT)
scythe.add_modifier(IModBit.BALANCED)
scythe.set_weight(2.0)
scythe.set_abundance(100)
scythe.set_hit_points(30720)
scythe.set_speed_rating(97)
scythe.set_weapon_length(182)
scythe.set_thrust_damage(14, 1)
scythe.set_swing_damage(30, 0)


pitch_fork = Item("pitch_fork", "Pitch_Fork")
pitch_fork.add_mesh(ItemMesh("pitch_fork"))
pitch_fork.add_flag(ItemType.POLEARM)
pitch_fork.add_flag(ItemFlag.IS_MERCHANDISE)
pitch_fork.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
pitch_fork.add_flag(ItemFlag.IS_PRIMARY)
pitch_fork.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
pitch_fork.add_flag(ItemFlag.FITS_TO_HEAD)
pitch_fork.add_flag(ItemFlag.OFFSET_LANCE)
pitch_fork.add_capability(ItemCapability.POLEARM_THRUST)
pitch_fork.add_capability(ItemCapability.POLEARM_OVERSWING)
pitch_fork.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
pitch_fork.add_capability(ItemCapability.POLEARM_SLASHLEFT)
pitch_fork.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
pitch_fork.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
pitch_fork.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
pitch_fork.add_capability(ItemCapability.POLEARM_PARRY_UP)
pitch_fork.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
pitch_fork.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
pitch_fork.set_price(19)
pitch_fork.add_modifier(IModBit.CRACKED)
pitch_fork.add_modifier(IModBit.BENT)
pitch_fork.add_modifier(IModBit.BALANCED)
pitch_fork.set_weight(1.5)
pitch_fork.set_abundance(100)
pitch_fork.set_hit_points(16384)
pitch_fork.set_speed_rating(87)
pitch_fork.set_weapon_length(154)
pitch_fork.set_thrust_damage(22, 1)
pitch_fork.set_swing_damage(16, 2)


military_fork = Item("military_fork", "Military_Fork")
military_fork.add_mesh(ItemMesh("military_fork"))
military_fork.add_flag(ItemType.POLEARM)
military_fork.add_flag(ItemFlag.IS_MERCHANDISE)
military_fork.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
military_fork.add_flag(ItemFlag.IS_PRIMARY)
military_fork.add_flag(ItemFlag.FITS_TO_HEAD)
military_fork.add_flag(ItemFlag.OFFSET_LANCE)
military_fork.add_capability(ItemCapability.POLEARM_THRUST)
military_fork.add_capability(ItemCapability.POLEARM_OVERSWING)
military_fork.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
military_fork.add_capability(ItemCapability.POLEARM_SLASHLEFT)
military_fork.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
military_fork.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
military_fork.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
military_fork.add_capability(ItemCapability.POLEARM_PARRY_UP)
military_fork.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
military_fork.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
military_fork.set_price(153)
military_fork.add_modifier(IModBit.CRACKED)
military_fork.add_modifier(IModBit.BENT)
military_fork.add_modifier(IModBit.BALANCED)
military_fork.set_weight(2.0)
military_fork.set_abundance(100)
military_fork.set_hit_points(15360)
military_fork.set_speed_rating(95)
military_fork.set_weapon_length(135)
military_fork.set_thrust_damage(30, 1)
military_fork.set_swing_damage(15, 2)


battle_fork = Item("battle_fork", "Battle_Fork")
battle_fork.add_mesh(ItemMesh("battle_fork"))
battle_fork.add_flag(ItemType.POLEARM)
battle_fork.add_flag(ItemFlag.IS_MERCHANDISE)
battle_fork.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
battle_fork.add_flag(ItemFlag.IS_PRIMARY)
battle_fork.add_flag(ItemFlag.FITS_TO_HEAD)
battle_fork.add_flag(ItemFlag.OFFSET_LANCE)
battle_fork.add_capability(ItemCapability.POLEARM_THRUST)
battle_fork.add_capability(ItemCapability.POLEARM_OVERSWING)
battle_fork.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
battle_fork.add_capability(ItemCapability.POLEARM_SLASHLEFT)
battle_fork.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
battle_fork.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
battle_fork.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
battle_fork.add_capability(ItemCapability.POLEARM_PARRY_UP)
battle_fork.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
battle_fork.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
battle_fork.set_price(282)
battle_fork.add_modifier(IModBit.CRACKED)
battle_fork.add_modifier(IModBit.BENT)
battle_fork.add_modifier(IModBit.BALANCED)
battle_fork.set_weight(2.0)
battle_fork.set_abundance(100)
battle_fork.set_hit_points(15360)
battle_fork.set_speed_rating(90)
battle_fork.set_weapon_length(144)
battle_fork.set_thrust_damage(35, 1)
battle_fork.set_swing_damage(15, 2)


boar_spear = Item("boar_spear", "Boar_Spear")
boar_spear.add_mesh(ItemMesh("spear"))
boar_spear.add_flag(ItemType.POLEARM)
boar_spear.add_flag(ItemFlag.IS_MERCHANDISE)
boar_spear.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
boar_spear.add_flag(ItemFlag.IS_PRIMARY)
boar_spear.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
boar_spear.add_capability(ItemCapability.POLEARM_THRUST)
boar_spear.add_capability(ItemCapability.POLEARM_OVERSWING)
boar_spear.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
boar_spear.add_capability(ItemCapability.POLEARM_SLASHLEFT)
boar_spear.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
boar_spear.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
boar_spear.add_capability(ItemCapability.CARRY_SPEAR)
boar_spear.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
boar_spear.add_capability(ItemCapability.POLEARM_PARRY_UP)
boar_spear.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
boar_spear.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
boar_spear.set_price(76)
boar_spear.add_modifier(IModBit.CRACKED)
boar_spear.add_modifier(IModBit.BENT)
boar_spear.add_modifier(IModBit.BALANCED)
boar_spear.set_weight(1.5)
boar_spear.set_abundance(100)
boar_spear.set_hit_points(26624)
boar_spear.set_speed_rating(90)
boar_spear.set_weapon_length(157)
boar_spear.set_thrust_damage(23, 1)
boar_spear.set_swing_damage(26, 0)


jousting_lance = Item("jousting_lance", "Jousting_Lance")
jousting_lance.add_mesh(ItemMesh("joust_of_peace"))
jousting_lance.add_flag(ItemType.POLEARM)
jousting_lance.add_flag(ItemFlag.IS_MERCHANDISE)
jousting_lance.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
jousting_lance.add_flag(ItemFlag.IS_PRIMARY)
jousting_lance.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
jousting_lance.add_flag(ItemFlag.COVERS_HEAD)
jousting_lance.add_flag(ItemFlag.IS_COUCHABLE)
jousting_lance.add_capability(ItemCapability.POLEARM_THRUST)
jousting_lance.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
jousting_lance.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
jousting_lance.set_price(158)
jousting_lance.add_modifier(IModBit.CRACKED)
jousting_lance.add_modifier(IModBit.BENT)
jousting_lance.add_modifier(IModBit.BALANCED)
jousting_lance.set_weight(5.0)
jousting_lance.set_abundance(100)
jousting_lance.set_speed_rating(61)
jousting_lance.set_weapon_length(240)
jousting_lance.set_thrust_damage(17, 2)


double_sided_lance = Item("double_sided_lance", "Double_Sided_Lance")
double_sided_lance.add_mesh(ItemMesh("lance_dblhead"))
double_sided_lance.add_flag(ItemType.POLEARM)
double_sided_lance.add_flag(ItemFlag.IS_MERCHANDISE)
double_sided_lance.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
double_sided_lance.add_flag(ItemFlag.IS_PRIMARY)
double_sided_lance.add_flag(ItemFlag.FITS_TO_HEAD)
double_sided_lance.add_flag(ItemFlag.OFFSET_LANCE)
double_sided_lance.add_flag(ItemFlag.COVERS_HEAD)
double_sided_lance.add_flag(ItemFlag.IS_COUCHABLE)
double_sided_lance.add_capability(ItemCapability.POLEARM_THRUST)
double_sided_lance.add_capability(ItemCapability.POLEARM_OVERSWING)
double_sided_lance.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
double_sided_lance.add_capability(ItemCapability.POLEARM_SLASHLEFT)
double_sided_lance.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
double_sided_lance.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
double_sided_lance.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
double_sided_lance.add_capability(ItemCapability.POLEARM_PARRY_UP)
double_sided_lance.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
double_sided_lance.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
double_sided_lance.set_price(261)
double_sided_lance.add_modifier(IModBit.CRACKED)
double_sided_lance.add_modifier(IModBit.BENT)
double_sided_lance.add_modifier(IModBit.BALANCED)
double_sided_lance.set_weight(4.0)
double_sided_lance.set_abundance(100)
double_sided_lance.set_hit_points(25600)
double_sided_lance.set_speed_rating(95)
double_sided_lance.set_weapon_length(128)
double_sided_lance.set_thrust_damage(27, 1)
double_sided_lance.set_swing_damage(25, 0)


glaive = Item("glaive", "Glaive")
glaive.add_mesh(ItemMesh("glaive_b"))
glaive.add_flag(ItemType.POLEARM)
glaive.add_flag(ItemFlag.IS_MERCHANDISE)
glaive.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
glaive.add_flag(ItemFlag.IS_TWO_HANDED)
glaive.add_flag(ItemFlag.IS_PRIMARY)
glaive.add_flag(ItemFlag.FITS_TO_HEAD)
glaive.add_flag(ItemFlag.OFFSET_LANCE)
glaive.add_capability(ItemCapability.POLEARM_THRUST)
glaive.add_capability(ItemCapability.POLEARM_OVERSWING)
glaive.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
glaive.add_capability(ItemCapability.POLEARM_SLASHLEFT)
glaive.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
glaive.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
glaive.add_capability(ItemCapability.CARRY_SPEAR)
glaive.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
glaive.add_capability(ItemCapability.POLEARM_PARRY_UP)
glaive.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
glaive.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
glaive.set_price(352)
glaive.add_modifier(IModBit.CRACKED)
glaive.add_modifier(IModBit.BENT)
glaive.add_modifier(IModBit.BALANCED)
glaive.set_weight(4.5)
glaive.set_abundance(100)
glaive.set_hit_points(39936)
glaive.set_speed_rating(90)
glaive.set_weapon_length(157)
glaive.set_thrust_damage(21, 1)
glaive.set_swing_damage(39, 0)


poleaxe = Item("poleaxe", "Poleaxe")
poleaxe.add_mesh(ItemMesh("pole_ax"))
poleaxe.add_flag(ItemType.POLEARM)
poleaxe.add_flag(ItemFlag.IS_MERCHANDISE)
poleaxe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
poleaxe.add_flag(ItemFlag.IS_TWO_HANDED)
poleaxe.add_flag(ItemFlag.IS_PRIMARY)
poleaxe.add_flag(ItemFlag.FITS_TO_HEAD)
poleaxe.add_flag(ItemFlag.OFFSET_LANCE)
poleaxe.add_capability(ItemCapability.POLEARM_THRUST)
poleaxe.add_capability(ItemCapability.POLEARM_OVERSWING)
poleaxe.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
poleaxe.add_capability(ItemCapability.POLEARM_SLASHLEFT)
poleaxe.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
poleaxe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
poleaxe.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
poleaxe.add_capability(ItemCapability.POLEARM_PARRY_UP)
poleaxe.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
poleaxe.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
poleaxe.set_price(384)
poleaxe.add_modifier(IModBit.CRACKED)
poleaxe.add_modifier(IModBit.BENT)
poleaxe.add_modifier(IModBit.BALANCED)
poleaxe.set_weight(4.5)
poleaxe.set_abundance(100)
poleaxe.set_difficulty(13)
poleaxe.set_hit_points(51200)
poleaxe.set_speed_rating(77)
poleaxe.set_weapon_length(180)
poleaxe.set_thrust_damage(15, 2)
poleaxe.set_swing_damage(50, 0)


polehammer = Item("polehammer", "Polehammer")
polehammer.add_mesh(ItemMesh("pole_hammer"))
polehammer.add_flag(ItemType.POLEARM)
polehammer.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
polehammer.add_flag(ItemFlag.IS_TWO_HANDED)
polehammer.add_flag(ItemFlag.IS_PRIMARY)
polehammer.add_flag(ItemFlag.FITS_TO_HEAD)
polehammer.add_flag(ItemFlag.OFFSET_LANCE)
polehammer.add_capability(ItemCapability.POLEARM_THRUST)
polehammer.add_capability(ItemCapability.POLEARM_OVERSWING)
polehammer.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
polehammer.add_capability(ItemCapability.POLEARM_SLASHLEFT)
polehammer.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
polehammer.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
polehammer.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
polehammer.add_capability(ItemCapability.POLEARM_PARRY_UP)
polehammer.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
polehammer.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
polehammer.set_price(169)
polehammer.add_modifier(IModBit.CRACKED)
polehammer.add_modifier(IModBit.BENT)
polehammer.add_modifier(IModBit.BALANCED)
polehammer.set_weight(7.0)
polehammer.set_abundance(100)
polehammer.set_difficulty(18)
polehammer.set_hit_points(51200)
polehammer.set_speed_rating(50)
polehammer.set_weapon_length(126)
polehammer.set_thrust_damage(35, 2)
polehammer.set_swing_damage(50, 2)


staff = Item("staff", "Staff")
staff.add_mesh(ItemMesh("wooden_staff"))
staff.add_flag(ItemType.POLEARM)
staff.add_flag(ItemFlag.IS_MERCHANDISE)
staff.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
staff.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
staff.add_flag(ItemFlag.IS_PRIMARY)
staff.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
staff.add_flag(ItemFlag.FITS_TO_HEAD)
staff.add_flag(ItemFlag.OFFSET_LANCE)
staff.add_capability(ItemCapability.POLEARM_THRUST)
staff.add_capability(ItemCapability.POLEARM_OVERSWING)
staff.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
staff.add_capability(ItemCapability.POLEARM_SLASHLEFT)
staff.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
staff.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
staff.add_capability(ItemCapability.CARRY_SWORD_BACK)
staff.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
staff.add_capability(ItemCapability.POLEARM_PARRY_UP)
staff.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
staff.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
staff.set_price(36)
staff.add_modifier(IModBit.CRACKED)
staff.add_modifier(IModBit.BENT)
staff.add_modifier(IModBit.BALANCED)
staff.set_weight(1.5)
staff.set_abundance(100)
staff.set_hit_points(18432)
staff.set_speed_rating(100)
staff.set_weapon_length(130)
staff.set_thrust_damage(19, 2)
staff.set_swing_damage(18, 2)


quarter_staff = Item("quarter_staff", "Quarter_Staff")
quarter_staff.add_mesh(ItemMesh("quarter_staff"))
quarter_staff.add_flag(ItemType.POLEARM)
quarter_staff.add_flag(ItemFlag.IS_MERCHANDISE)
quarter_staff.add_flag(ItemFlag.WOODEN_ATTACK_SOUND)
quarter_staff.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
quarter_staff.add_flag(ItemFlag.IS_PRIMARY)
quarter_staff.add_flag(ItemFlag.FITS_TO_HEAD)
quarter_staff.add_flag(ItemFlag.OFFSET_LANCE)
quarter_staff.add_capability(ItemCapability.POLEARM_THRUST)
quarter_staff.add_capability(ItemCapability.POLEARM_OVERSWING)
quarter_staff.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
quarter_staff.add_capability(ItemCapability.POLEARM_SLASHLEFT)
quarter_staff.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
quarter_staff.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
quarter_staff.add_capability(ItemCapability.CARRY_SWORD_BACK)
quarter_staff.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
quarter_staff.add_capability(ItemCapability.POLEARM_PARRY_UP)
quarter_staff.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
quarter_staff.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
quarter_staff.set_price(60)
quarter_staff.add_modifier(IModBit.CRACKED)
quarter_staff.add_modifier(IModBit.BENT)
quarter_staff.add_modifier(IModBit.BALANCED)
quarter_staff.set_weight(2.0)
quarter_staff.set_abundance(100)
quarter_staff.set_hit_points(20480)
quarter_staff.set_speed_rating(104)
quarter_staff.set_weapon_length(140)
quarter_staff.set_thrust_damage(20, 2)
quarter_staff.set_swing_damage(20, 2)


iron_staff = Item("iron_staff", "Iron_Staff")
iron_staff.add_mesh(ItemMesh("iron_staff"))
iron_staff.add_flag(ItemType.POLEARM)
iron_staff.add_flag(ItemFlag.IS_MERCHANDISE)
iron_staff.add_flag(ItemFlag.IS_PRIMARY)
iron_staff.add_flag(ItemFlag.FITS_TO_HEAD)
iron_staff.add_flag(ItemFlag.OFFSET_LANCE)
iron_staff.add_capability(ItemCapability.POLEARM_THRUST)
iron_staff.add_capability(ItemCapability.POLEARM_OVERSWING)
iron_staff.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
iron_staff.add_capability(ItemCapability.POLEARM_SLASHLEFT)
iron_staff.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
iron_staff.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
iron_staff.add_capability(ItemCapability.CARRY_SWORD_BACK)
iron_staff.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
iron_staff.add_capability(ItemCapability.POLEARM_PARRY_UP)
iron_staff.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
iron_staff.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
iron_staff.set_price(202)
iron_staff.add_modifier(IModBit.CRACKED)
iron_staff.add_modifier(IModBit.BENT)
iron_staff.add_modifier(IModBit.BALANCED)
iron_staff.set_weight(2.0)
iron_staff.set_abundance(100)
iron_staff.set_hit_points(25600)
iron_staff.set_speed_rating(97)
iron_staff.set_weapon_length(140)
iron_staff.set_thrust_damage(26, 2)
iron_staff.set_swing_damage(25, 2)


shortened_spear = Item("shortened_spear", "Shortened_Spear")
shortened_spear.add_mesh(ItemMesh("spear_g_1-9m"))
shortened_spear.add_flag(ItemType.POLEARM)
shortened_spear.add_flag(ItemFlag.IS_MERCHANDISE)
shortened_spear.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
shortened_spear.add_flag(ItemFlag.IS_PRIMARY)
shortened_spear.add_flag(ItemFlag.FITS_TO_HEAD)
shortened_spear.add_flag(ItemFlag.OFFSET_LANCE)
shortened_spear.add_capability(ItemCapability.POLEARM_THRUST)
shortened_spear.add_capability(ItemCapability.POLEARM_OVERSWING)
shortened_spear.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
shortened_spear.add_capability(ItemCapability.POLEARM_SLASHLEFT)
shortened_spear.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
shortened_spear.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
shortened_spear.add_capability(ItemCapability.CARRY_SPEAR)
shortened_spear.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
shortened_spear.add_capability(ItemCapability.POLEARM_PARRY_UP)
shortened_spear.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
shortened_spear.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
shortened_spear.set_price(53)
shortened_spear.add_modifier(IModBit.CRACKED)
shortened_spear.add_modifier(IModBit.BENT)
shortened_spear.add_modifier(IModBit.BALANCED)
shortened_spear.set_weight(2.0)
shortened_spear.set_abundance(100)
shortened_spear.set_hit_points(19456)
shortened_spear.set_speed_rating(102)
shortened_spear.set_weapon_length(120)
shortened_spear.set_thrust_damage(25, 1)
shortened_spear.set_swing_damage(19, 2)


spear = Item("spear", "Spear")
spear.add_mesh(ItemMesh("spear_h_2-15m"))
spear.add_flag(ItemType.POLEARM)
spear.add_flag(ItemFlag.IS_MERCHANDISE)
spear.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
spear.add_flag(ItemFlag.IS_PRIMARY)
spear.add_flag(ItemFlag.FITS_TO_HEAD)
spear.add_flag(ItemFlag.OFFSET_LANCE)
spear.add_capability(ItemCapability.POLEARM_THRUST)
spear.add_capability(ItemCapability.POLEARM_OVERSWING)
spear.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
spear.add_capability(ItemCapability.POLEARM_SLASHLEFT)
spear.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
spear.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
spear.add_capability(ItemCapability.CARRY_SPEAR)
spear.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
spear.add_capability(ItemCapability.POLEARM_PARRY_UP)
spear.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
spear.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
spear.set_price(85)
spear.add_modifier(IModBit.CRACKED)
spear.add_modifier(IModBit.BENT)
spear.add_modifier(IModBit.BALANCED)
spear.set_weight(2.25)
spear.set_abundance(100)
spear.set_hit_points(20480)
spear.set_speed_rating(98)
spear.set_weapon_length(135)
spear.set_thrust_damage(26, 1)
spear.set_swing_damage(20, 2)


bamboo_spear = Item("bamboo_spear", "Bamboo_Spear")
bamboo_spear.add_mesh(ItemMesh("arabian_spear_a_3m"))
bamboo_spear.add_flag(ItemType.POLEARM)
bamboo_spear.add_flag(ItemFlag.IS_MERCHANDISE)
bamboo_spear.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
bamboo_spear.add_flag(ItemFlag.IS_PRIMARY)
bamboo_spear.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
bamboo_spear.add_flag(ItemFlag.FITS_TO_HEAD)
bamboo_spear.add_flag(ItemFlag.OFFSET_LANCE)
bamboo_spear.add_capability(ItemCapability.POLEARM_THRUST)
bamboo_spear.add_capability(ItemCapability.POLEARM_OVERSWING)
bamboo_spear.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
bamboo_spear.add_capability(ItemCapability.POLEARM_SLASHLEFT)
bamboo_spear.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
bamboo_spear.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
bamboo_spear.add_capability(ItemCapability.CARRY_SPEAR)
bamboo_spear.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
bamboo_spear.add_capability(ItemCapability.POLEARM_PARRY_UP)
bamboo_spear.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
bamboo_spear.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
bamboo_spear.set_price(80)
bamboo_spear.add_modifier(IModBit.CRACKED)
bamboo_spear.add_modifier(IModBit.BENT)
bamboo_spear.add_modifier(IModBit.BALANCED)
bamboo_spear.set_weight(2.0)
bamboo_spear.set_abundance(100)
bamboo_spear.set_hit_points(15360)
bamboo_spear.set_speed_rating(88)
bamboo_spear.set_weapon_length(200)
bamboo_spear.set_thrust_damage(20, 1)
bamboo_spear.set_swing_damage(15, 2)


war_spear = Item("war_spear", "War_Spear")
war_spear.add_mesh(ItemMesh("spear_i_2-3m"))
war_spear.add_flag(ItemType.POLEARM)
war_spear.add_flag(ItemFlag.IS_MERCHANDISE)
war_spear.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
war_spear.add_flag(ItemFlag.IS_PRIMARY)
war_spear.add_flag(ItemFlag.FITS_TO_HEAD)
war_spear.add_flag(ItemFlag.OFFSET_LANCE)
war_spear.add_capability(ItemCapability.POLEARM_THRUST)
war_spear.add_capability(ItemCapability.POLEARM_OVERSWING)
war_spear.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
war_spear.add_capability(ItemCapability.POLEARM_SLASHLEFT)
war_spear.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
war_spear.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
war_spear.add_capability(ItemCapability.CARRY_SPEAR)
war_spear.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
war_spear.add_capability(ItemCapability.POLEARM_PARRY_UP)
war_spear.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
war_spear.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
war_spear.set_price(140)
war_spear.add_modifier(IModBit.CRACKED)
war_spear.add_modifier(IModBit.BENT)
war_spear.add_modifier(IModBit.BALANCED)
war_spear.set_weight(2.5)
war_spear.set_abundance(100)
war_spear.set_hit_points(20480)
war_spear.set_speed_rating(95)
war_spear.set_weapon_length(150)
war_spear.set_thrust_damage(27, 1)
war_spear.set_swing_damage(20, 2)


military_scythe = Item("military_scythe", "Military_Scythe")
military_scythe.add_mesh(ItemMesh("spear_e_2-5m"))
meshx = ItemMesh("spear_c_2-5m")
meshx.add_modifier(IModBit.CRACKED)
meshx.add_modifier(IModBit.RUSTY)
meshx.add_modifier(IModBit.BENT)
meshx.add_modifier(IModBit.CHIPPED)
meshx.add_modifier(IModBit.TETTERED)
meshx.add_modifier(IModBit.RAGGED)
military_scythe.add_mesh(meshx)
military_scythe.add_flag(ItemType.POLEARM)
military_scythe.add_flag(ItemFlag.IS_MERCHANDISE)
military_scythe.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
military_scythe.add_flag(ItemFlag.IS_PRIMARY)
military_scythe.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
military_scythe.add_flag(ItemFlag.FITS_TO_HEAD)
military_scythe.add_flag(ItemFlag.OFFSET_LANCE)
military_scythe.add_capability(ItemCapability.POLEARM_THRUST)
military_scythe.add_capability(ItemCapability.POLEARM_OVERSWING)
military_scythe.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
military_scythe.add_capability(ItemCapability.POLEARM_SLASHLEFT)
military_scythe.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
military_scythe.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
military_scythe.add_capability(ItemCapability.CARRY_SPEAR)
military_scythe.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
military_scythe.add_capability(ItemCapability.POLEARM_PARRY_UP)
military_scythe.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
military_scythe.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
military_scythe.set_price(155)
military_scythe.add_modifier(IModBit.CRACKED)
military_scythe.add_modifier(IModBit.BENT)
military_scythe.add_modifier(IModBit.BALANCED)
military_scythe.set_weight(2.5)
military_scythe.set_abundance(100)
military_scythe.set_hit_points(36864)
military_scythe.set_speed_rating(90)
military_scythe.set_weapon_length(155)
military_scythe.set_thrust_damage(25, 1)
military_scythe.set_swing_damage(36, 0)


light_lance = Item("light_lance", "Light_Lance")
light_lance.add_mesh(ItemMesh("spear_b_2-75m"))
light_lance.add_flag(ItemType.POLEARM)
light_lance.add_flag(ItemFlag.IS_MERCHANDISE)
light_lance.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
light_lance.add_flag(ItemFlag.IS_PRIMARY)
light_lance.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
light_lance.add_flag(ItemFlag.FITS_TO_HEAD)
light_lance.add_flag(ItemFlag.OFFSET_LANCE)
light_lance.add_flag(ItemFlag.COVERS_HEAD)
light_lance.add_flag(ItemFlag.IS_COUCHABLE)
light_lance.add_capability(ItemCapability.POLEARM_THRUST)
light_lance.add_capability(ItemCapability.POLEARM_OVERSWING)
light_lance.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
light_lance.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
light_lance.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
light_lance.add_capability(ItemCapability.POLEARM_PARRY_UP)
light_lance.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
light_lance.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
light_lance.set_price(180)
light_lance.add_modifier(IModBit.CRACKED)
light_lance.add_modifier(IModBit.BENT)
light_lance.add_modifier(IModBit.BALANCED)
light_lance.set_weight(2.5)
light_lance.set_abundance(100)
light_lance.set_hit_points(16384)
light_lance.set_speed_rating(85)
light_lance.set_weapon_length(175)
light_lance.set_thrust_damage(27, 1)
light_lance.set_swing_damage(16, 2)


lance = Item("lance", "Lance")
lance.add_mesh(ItemMesh("spear_d_2-8m"))
lance.add_flag(ItemType.POLEARM)
lance.add_flag(ItemFlag.IS_MERCHANDISE)
lance.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
lance.add_flag(ItemFlag.IS_PRIMARY)
lance.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
lance.add_flag(ItemFlag.FITS_TO_HEAD)
lance.add_flag(ItemFlag.OFFSET_LANCE)
lance.add_flag(ItemFlag.COVERS_HEAD)
lance.add_flag(ItemFlag.IS_COUCHABLE)
lance.add_capability(ItemCapability.POLEARM_THRUST)
lance.add_capability(ItemCapability.POLEARM_OVERSWING)
lance.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
lance.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
lance.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
lance.add_capability(ItemCapability.POLEARM_PARRY_UP)
lance.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
lance.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
lance.set_price(270)
lance.add_modifier(IModBit.CRACKED)
lance.add_modifier(IModBit.BENT)
lance.add_modifier(IModBit.BALANCED)
lance.set_weight(2.5)
lance.set_abundance(100)
lance.set_hit_points(16384)
lance.set_speed_rating(80)
lance.set_weapon_length(180)
lance.set_thrust_damage(26, 1)
lance.set_swing_damage(16, 2)


heavy_lance = Item("heavy_lance", "Heavy_Lance")
heavy_lance.add_mesh(ItemMesh("spear_f_2-9m"))
heavy_lance.add_flag(ItemType.POLEARM)
heavy_lance.add_flag(ItemFlag.IS_MERCHANDISE)
heavy_lance.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
heavy_lance.add_flag(ItemFlag.IS_PRIMARY)
heavy_lance.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
heavy_lance.add_flag(ItemFlag.FITS_TO_HEAD)
heavy_lance.add_flag(ItemFlag.OFFSET_LANCE)
heavy_lance.add_flag(ItemFlag.COVERS_HEAD)
heavy_lance.add_flag(ItemFlag.IS_COUCHABLE)
heavy_lance.add_capability(ItemCapability.POLEARM_THRUST)
heavy_lance.add_capability(ItemCapability.POLEARM_OVERSWING)
heavy_lance.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
heavy_lance.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
heavy_lance.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
heavy_lance.add_capability(ItemCapability.POLEARM_PARRY_UP)
heavy_lance.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
heavy_lance.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
heavy_lance.set_price(360)
heavy_lance.add_modifier(IModBit.CRACKED)
heavy_lance.add_modifier(IModBit.BENT)
heavy_lance.add_modifier(IModBit.BALANCED)
heavy_lance.set_weight(2.75)
heavy_lance.set_abundance(100)
heavy_lance.set_difficulty(10)
heavy_lance.set_hit_points(16384)
heavy_lance.set_speed_rating(75)
heavy_lance.set_weapon_length(190)
heavy_lance.set_thrust_damage(26, 1)
heavy_lance.set_swing_damage(16, 2)


great_lance = Item("great_lance", "Great_Lance")
great_lance.add_mesh(ItemMesh("heavy_lance"))
great_lance.add_flag(ItemType.POLEARM)
great_lance.add_flag(ItemFlag.IS_MERCHANDISE)
great_lance.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
great_lance.add_flag(ItemFlag.IS_PRIMARY)
great_lance.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
great_lance.add_flag(ItemFlag.COVERS_HEAD)
great_lance.add_flag(ItemFlag.IS_COUCHABLE)
great_lance.add_capability(ItemCapability.POLEARM_THRUST)
great_lance.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
great_lance.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
great_lance.set_price(410)
great_lance.add_modifier(IModBit.CRACKED)
great_lance.add_modifier(IModBit.BENT)
great_lance.add_modifier(IModBit.BALANCED)
great_lance.set_weight(5.0)
great_lance.set_abundance(100)
great_lance.set_difficulty(11)
great_lance.set_speed_rating(55)
great_lance.set_weapon_length(240)
great_lance.set_thrust_damage(21, 1)


pike = Item("pike", "Pike")
pike.add_mesh(ItemMesh("spear_a_3m"))
pike.add_flag(ItemType.POLEARM)
pike.add_flag(ItemFlag.IS_MERCHANDISE)
pike.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
pike.add_flag(ItemFlag.IS_TWO_HANDED)
pike.add_flag(ItemFlag.IS_PRIMARY)
pike.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
pike.add_flag(ItemFlag.CANT_USE_ON_HORSEBACK)
pike.add_capability(ItemCapability.POLEARM_THRUST)
pike.add_capability(ItemCapability.POLEARM_OVERSWING)
pike.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
pike.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
pike.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
pike.add_capability(ItemCapability.POLEARM_PARRY_UP)
pike.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
pike.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
pike.set_price(125)
pike.add_modifier(IModBit.CRACKED)
pike.add_modifier(IModBit.BENT)
pike.add_modifier(IModBit.BALANCED)
pike.set_weight(3.0)
pike.set_abundance(100)
pike.set_hit_points(16384)
pike.set_speed_rating(81)
pike.set_weapon_length(245)
pike.set_thrust_damage(26, 1)
pike.set_swing_damage(16, 2)


ashwood_pike = Item("ashwood_pike", "Ashwood_Pike")
ashwood_pike.add_mesh(ItemMesh("pike"))
ashwood_pike.add_flag(ItemType.POLEARM)
ashwood_pike.add_flag(ItemFlag.IS_MERCHANDISE)
ashwood_pike.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
ashwood_pike.add_flag(ItemFlag.IS_TWO_HANDED)
ashwood_pike.add_flag(ItemFlag.IS_PRIMARY)
ashwood_pike.add_flag(ItemFlag.FITS_TO_HEAD)
ashwood_pike.add_flag(ItemFlag.OFFSET_LANCE)
ashwood_pike.add_capability(ItemCapability.POLEARM_THRUST)
ashwood_pike.add_capability(ItemCapability.POLEARM_OVERSWING)
ashwood_pike.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
ashwood_pike.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
ashwood_pike.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
ashwood_pike.add_capability(ItemCapability.POLEARM_PARRY_UP)
ashwood_pike.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
ashwood_pike.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
ashwood_pike.set_price(205)
ashwood_pike.add_modifier(IModBit.CRACKED)
ashwood_pike.add_modifier(IModBit.BENT)
ashwood_pike.add_modifier(IModBit.BALANCED)
ashwood_pike.set_weight(3.5)
ashwood_pike.set_abundance(100)
ashwood_pike.set_difficulty(9)
ashwood_pike.set_hit_points(19456)
ashwood_pike.set_speed_rating(90)
ashwood_pike.set_weapon_length(170)
ashwood_pike.set_thrust_damage(29, 1)
ashwood_pike.set_swing_damage(19, 2)


awlpike = Item("awlpike", "Awlpike")
awlpike.add_mesh(ItemMesh("awl_pike_b"))
awlpike.add_flag(ItemType.POLEARM)
awlpike.add_flag(ItemFlag.IS_MERCHANDISE)
awlpike.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
awlpike.add_flag(ItemFlag.IS_PRIMARY)
awlpike.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
awlpike.add_flag(ItemFlag.FITS_TO_HEAD)
awlpike.add_flag(ItemFlag.OFFSET_LANCE)
awlpike.add_capability(ItemCapability.POLEARM_THRUST)
awlpike.add_capability(ItemCapability.POLEARM_OVERSWING)
awlpike.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
awlpike.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
awlpike.add_capability(ItemCapability.CARRY_SPEAR)
awlpike.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
awlpike.add_capability(ItemCapability.POLEARM_PARRY_UP)
awlpike.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
awlpike.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
awlpike.set_price(345)
awlpike.add_modifier(IModBit.CRACKED)
awlpike.add_modifier(IModBit.BENT)
awlpike.add_modifier(IModBit.BALANCED)
awlpike.set_weight(2.25)
awlpike.set_abundance(100)
awlpike.set_hit_points(20480)
awlpike.set_speed_rating(92)
awlpike.set_weapon_length(165)
awlpike.set_thrust_damage(33, 1)
awlpike.set_swing_damage(20, 2)


awlpike_long = Item("awlpike_long", "Long_Awlpike")
awlpike_long.add_mesh(ItemMesh("awl_pike_a"))
awlpike_long.add_flag(ItemType.POLEARM)
awlpike_long.add_flag(ItemFlag.IS_MERCHANDISE)
awlpike_long.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
awlpike_long.add_flag(ItemFlag.IS_PRIMARY)
awlpike_long.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
awlpike_long.add_flag(ItemFlag.FITS_TO_HEAD)
awlpike_long.add_flag(ItemFlag.OFFSET_LANCE)
awlpike_long.add_capability(ItemCapability.POLEARM_THRUST)
awlpike_long.add_capability(ItemCapability.POLEARM_OVERSWING)
awlpike_long.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
awlpike_long.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
awlpike_long.add_capability(ItemCapability.CARRY_SPEAR)
awlpike_long.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
awlpike_long.add_capability(ItemCapability.POLEARM_PARRY_UP)
awlpike_long.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
awlpike_long.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
awlpike_long.set_price(385)
awlpike_long.add_modifier(IModBit.CRACKED)
awlpike_long.add_modifier(IModBit.BENT)
awlpike_long.add_modifier(IModBit.BALANCED)
awlpike_long.set_weight(2.25)
awlpike_long.set_abundance(100)
awlpike_long.set_hit_points(20480)
awlpike_long.set_speed_rating(89)
awlpike_long.set_weapon_length(185)
awlpike_long.set_thrust_damage(32, 1)
awlpike_long.set_swing_damage(20, 2)


bec_de_corbin_a = Item("bec_de_corbin_a", "War_Hammer")
bec_de_corbin_a.add_mesh(ItemMesh("bec_de_corbin_a"))
bec_de_corbin_a.add_flag(ItemType.POLEARM)
bec_de_corbin_a.add_flag(ItemFlag.IS_MERCHANDISE)
bec_de_corbin_a.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
bec_de_corbin_a.add_flag(ItemFlag.IS_TWO_HANDED)
bec_de_corbin_a.add_flag(ItemFlag.IS_PRIMARY)
bec_de_corbin_a.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
bec_de_corbin_a.add_flag(ItemFlag.CANT_USE_ON_HORSEBACK)
bec_de_corbin_a.add_capability(ItemCapability.POLEARM_THRUST)
bec_de_corbin_a.add_capability(ItemCapability.POLEARM_OVERSWING)
bec_de_corbin_a.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
bec_de_corbin_a.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
bec_de_corbin_a.add_capability(ItemCapability.CARRY_SPEAR)
bec_de_corbin_a.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
bec_de_corbin_a.add_capability(ItemCapability.POLEARM_PARRY_UP)
bec_de_corbin_a.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
bec_de_corbin_a.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
bec_de_corbin_a.set_price(125)
bec_de_corbin_a.add_modifier(IModBit.CRACKED)
bec_de_corbin_a.add_modifier(IModBit.BENT)
bec_de_corbin_a.add_modifier(IModBit.BALANCED)
bec_de_corbin_a.set_weight(3.0)
bec_de_corbin_a.set_abundance(100)
bec_de_corbin_a.set_hit_points(38912)
bec_de_corbin_a.set_speed_rating(81)
bec_de_corbin_a.set_weapon_length(120)
bec_de_corbin_a.set_thrust_damage(38, 1)
bec_de_corbin_a.set_swing_damage(38, 2)


wooden_shield = Item("wooden_shield", "Wooden_Shield")
wooden_shield.add_mesh(ItemMesh("shield_round_a"))
wooden_shield.add_flag(ItemType.SHIELD)
wooden_shield.add_flag(ItemFlag.IS_MERCHANDISE)
wooden_shield.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
wooden_shield.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
wooden_shield.set_price(42)
wooden_shield.add_modifier(IModBit.CRACKED)
wooden_shield.add_modifier(IModBit.BATTERED)
wooden_shield.add_modifier(IModBit.THICK)
wooden_shield.add_modifier(IModBit.REINFORCED)
wooden_shield.set_weight(2.0)
wooden_shield.set_abundance(100)
wooden_shield.set_body_armor(1)
wooden_shield.set_hit_points(360)
wooden_shield.set_speed_rating(100)
wooden_shield.set_weapon_length(50)


nordic_shield = Item("nordic_shield", "Nordic_Shield")
nordic_shield.add_mesh(ItemMesh("shield_round_b"))
nordic_shield.add_flag(ItemType.SHIELD)
nordic_shield.add_flag(ItemFlag.IS_MERCHANDISE)
nordic_shield.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
nordic_shield.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
nordic_shield.set_price(95)
nordic_shield.add_modifier(IModBit.CRACKED)
nordic_shield.add_modifier(IModBit.BATTERED)
nordic_shield.add_modifier(IModBit.THICK)
nordic_shield.add_modifier(IModBit.REINFORCED)
nordic_shield.set_weight(2.0)
nordic_shield.set_abundance(100)
nordic_shield.set_body_armor(1)
nordic_shield.set_hit_points(440)
nordic_shield.set_speed_rating(100)
nordic_shield.set_weapon_length(50)


fur_covered_shield = Item("fur_covered_shield", "Fur_Covered_Shield")
fur_covered_shield.add_mesh(ItemMesh("shield_kite_m"))
fur_covered_shield.add_flag(ItemType.SHIELD)
fur_covered_shield.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
fur_covered_shield.add_capability(ItemCapability.CARRY_KITE_SHIELD)
fur_covered_shield.set_price(227)
fur_covered_shield.add_modifier(IModBit.CRACKED)
fur_covered_shield.add_modifier(IModBit.BATTERED)
fur_covered_shield.add_modifier(IModBit.THICK)
fur_covered_shield.add_modifier(IModBit.REINFORCED)
fur_covered_shield.set_weight(3.5)
fur_covered_shield.set_abundance(100)
fur_covered_shield.set_body_armor(1)
fur_covered_shield.set_hit_points(600)
fur_covered_shield.set_speed_rating(76)
fur_covered_shield.set_weapon_length(81)


steel_shield = Item("steel_shield", "Steel_Shield")
steel_shield.add_mesh(ItemMesh("shield_dragon"))
steel_shield.add_flag(ItemType.SHIELD)
steel_shield.add_flag(ItemFlag.IS_MERCHANDISE)
steel_shield.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
steel_shield.set_price(697)
steel_shield.add_modifier(IModBit.CRACKED)
steel_shield.add_modifier(IModBit.BATTERED)
steel_shield.add_modifier(IModBit.THICK)
steel_shield.add_modifier(IModBit.REINFORCED)
steel_shield.set_weight(4.0)
steel_shield.set_abundance(100)
steel_shield.set_body_armor(17)
steel_shield.set_hit_points(700)
steel_shield.set_speed_rating(61)
steel_shield.set_weapon_length(40)


plate_covered_round_shield = Item("plate_covered_round_shield", "Plate_Covered_Round_Shield")
plate_covered_round_shield.add_mesh(ItemMesh("shield_round_e"))
plate_covered_round_shield.add_flag(ItemType.SHIELD)
plate_covered_round_shield.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
plate_covered_round_shield.set_price(140)
plate_covered_round_shield.add_modifier(IModBit.CRACKED)
plate_covered_round_shield.add_modifier(IModBit.BATTERED)
plate_covered_round_shield.add_modifier(IModBit.THICK)
plate_covered_round_shield.add_modifier(IModBit.REINFORCED)
plate_covered_round_shield.set_weight(4.0)
plate_covered_round_shield.set_abundance(100)
plate_covered_round_shield.set_body_armor(16)
plate_covered_round_shield.set_hit_points(330)
plate_covered_round_shield.set_speed_rating(90)
plate_covered_round_shield.set_weapon_length(40)


leather_covered_round_shield = Item("leather_covered_round_shield", "Leather_Covered_Round_Shield")
leather_covered_round_shield.add_mesh(ItemMesh("shield_round_d"))
leather_covered_round_shield.add_flag(ItemType.SHIELD)
leather_covered_round_shield.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
leather_covered_round_shield.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
leather_covered_round_shield.set_price(80)
leather_covered_round_shield.add_modifier(IModBit.CRACKED)
leather_covered_round_shield.add_modifier(IModBit.BATTERED)
leather_covered_round_shield.add_modifier(IModBit.THICK)
leather_covered_round_shield.add_modifier(IModBit.REINFORCED)
leather_covered_round_shield.set_weight(2.5)
leather_covered_round_shield.set_abundance(100)
leather_covered_round_shield.set_body_armor(8)
leather_covered_round_shield.set_hit_points(310)
leather_covered_round_shield.set_speed_rating(96)
leather_covered_round_shield.set_weapon_length(40)


hide_covered_round_shield = Item("hide_covered_round_shield", "Hide_Covered_Round_Shield")
hide_covered_round_shield.add_mesh(ItemMesh("shield_round_f"))
hide_covered_round_shield.add_flag(ItemType.SHIELD)
hide_covered_round_shield.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
hide_covered_round_shield.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
hide_covered_round_shield.set_price(40)
hide_covered_round_shield.add_modifier(IModBit.CRACKED)
hide_covered_round_shield.add_modifier(IModBit.BATTERED)
hide_covered_round_shield.add_modifier(IModBit.THICK)
hide_covered_round_shield.add_modifier(IModBit.REINFORCED)
hide_covered_round_shield.set_weight(2.0)
hide_covered_round_shield.set_abundance(100)
hide_covered_round_shield.set_body_armor(3)
hide_covered_round_shield.set_hit_points(260)
hide_covered_round_shield.set_speed_rating(100)
hide_covered_round_shield.set_weapon_length(40)


shield_heater_c = Item("shield_heater_c", "Heater_Shield")
shield_heater_c.add_mesh(ItemMesh("shield_heater_c"))
shield_heater_c.add_flag(ItemType.SHIELD)
shield_heater_c.add_flag(ItemFlag.IS_MERCHANDISE)
shield_heater_c.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
shield_heater_c.add_capability(ItemCapability.CARRY_KITE_SHIELD)
shield_heater_c.set_price(277)
shield_heater_c.add_modifier(IModBit.CRACKED)
shield_heater_c.add_modifier(IModBit.BATTERED)
shield_heater_c.add_modifier(IModBit.THICK)
shield_heater_c.add_modifier(IModBit.REINFORCED)
shield_heater_c.set_weight(3.5)
shield_heater_c.set_abundance(100)
shield_heater_c.set_body_armor(2)
shield_heater_c.set_hit_points(410)
shield_heater_c.set_speed_rating(80)
shield_heater_c.set_weapon_length(50)


norman_shield_1 = Item("norman_shield_1", "Kite_Shield")
norman_shield_1.add_mesh(ItemMesh("norman_shield_1"))
norman_shield_1.add_flag(ItemType.SHIELD)
norman_shield_1.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
norman_shield_1.add_capability(ItemCapability.CARRY_KITE_SHIELD)
norman_shield_1.set_price(118)
norman_shield_1.add_modifier(IModBit.CRACKED)
norman_shield_1.add_modifier(IModBit.BATTERED)
norman_shield_1.add_modifier(IModBit.THICK)
norman_shield_1.add_modifier(IModBit.REINFORCED)
norman_shield_1.set_weight(2.5)
norman_shield_1.set_abundance(100)
norman_shield_1.set_body_armor(1)
norman_shield_1.set_hit_points(480)
norman_shield_1.set_speed_rating(82)
norman_shield_1.set_weapon_length(90)


norman_shield_2 = Item("norman_shield_2", "Kite_Shield")
norman_shield_2.add_mesh(ItemMesh("norman_shield_2"))
norman_shield_2.add_flag(ItemType.SHIELD)
norman_shield_2.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
norman_shield_2.add_capability(ItemCapability.CARRY_KITE_SHIELD)
norman_shield_2.set_price(118)
norman_shield_2.add_modifier(IModBit.CRACKED)
norman_shield_2.add_modifier(IModBit.BATTERED)
norman_shield_2.add_modifier(IModBit.THICK)
norman_shield_2.add_modifier(IModBit.REINFORCED)
norman_shield_2.set_weight(2.5)
norman_shield_2.set_abundance(100)
norman_shield_2.set_body_armor(1)
norman_shield_2.set_hit_points(480)
norman_shield_2.set_speed_rating(82)
norman_shield_2.set_weapon_length(90)


norman_shield_3 = Item("norman_shield_3", "Kite_Shield")
norman_shield_3.add_mesh(ItemMesh("norman_shield_3"))
norman_shield_3.add_flag(ItemType.SHIELD)
norman_shield_3.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
norman_shield_3.add_capability(ItemCapability.CARRY_KITE_SHIELD)
norman_shield_3.set_price(118)
norman_shield_3.add_modifier(IModBit.CRACKED)
norman_shield_3.add_modifier(IModBit.BATTERED)
norman_shield_3.add_modifier(IModBit.THICK)
norman_shield_3.add_modifier(IModBit.REINFORCED)
norman_shield_3.set_weight(2.5)
norman_shield_3.set_abundance(100)
norman_shield_3.set_body_armor(1)
norman_shield_3.set_hit_points(480)
norman_shield_3.set_speed_rating(82)
norman_shield_3.set_weapon_length(90)


norman_shield_4 = Item("norman_shield_4", "Kite_Shield")
norman_shield_4.add_mesh(ItemMesh("norman_shield_4"))
norman_shield_4.add_flag(ItemType.SHIELD)
norman_shield_4.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
norman_shield_4.add_capability(ItemCapability.CARRY_KITE_SHIELD)
norman_shield_4.set_price(118)
norman_shield_4.add_modifier(IModBit.CRACKED)
norman_shield_4.add_modifier(IModBit.BATTERED)
norman_shield_4.add_modifier(IModBit.THICK)
norman_shield_4.add_modifier(IModBit.REINFORCED)
norman_shield_4.set_weight(2.5)
norman_shield_4.set_abundance(100)
norman_shield_4.set_body_armor(1)
norman_shield_4.set_hit_points(480)
norman_shield_4.set_speed_rating(82)
norman_shield_4.set_weapon_length(90)


norman_shield_5 = Item("norman_shield_5", "Kite_Shield")
norman_shield_5.add_mesh(ItemMesh("norman_shield_5"))
norman_shield_5.add_flag(ItemType.SHIELD)
norman_shield_5.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
norman_shield_5.add_capability(ItemCapability.CARRY_KITE_SHIELD)
norman_shield_5.set_price(118)
norman_shield_5.add_modifier(IModBit.CRACKED)
norman_shield_5.add_modifier(IModBit.BATTERED)
norman_shield_5.add_modifier(IModBit.THICK)
norman_shield_5.add_modifier(IModBit.REINFORCED)
norman_shield_5.set_weight(2.5)
norman_shield_5.set_abundance(100)
norman_shield_5.set_body_armor(1)
norman_shield_5.set_hit_points(480)
norman_shield_5.set_speed_rating(82)
norman_shield_5.set_weapon_length(90)


norman_shield_6 = Item("norman_shield_6", "Kite_Shield")
norman_shield_6.add_mesh(ItemMesh("norman_shield_6"))
norman_shield_6.add_flag(ItemType.SHIELD)
norman_shield_6.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
norman_shield_6.add_capability(ItemCapability.CARRY_KITE_SHIELD)
norman_shield_6.set_price(118)
norman_shield_6.add_modifier(IModBit.CRACKED)
norman_shield_6.add_modifier(IModBit.BATTERED)
norman_shield_6.add_modifier(IModBit.THICK)
norman_shield_6.add_modifier(IModBit.REINFORCED)
norman_shield_6.set_weight(2.5)
norman_shield_6.set_abundance(100)
norman_shield_6.set_body_armor(1)
norman_shield_6.set_hit_points(480)
norman_shield_6.set_speed_rating(82)
norman_shield_6.set_weapon_length(90)


norman_shield_7 = Item("norman_shield_7", "Kite_Shield")
norman_shield_7.add_mesh(ItemMesh("norman_shield_7"))
norman_shield_7.add_flag(ItemType.SHIELD)
norman_shield_7.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
norman_shield_7.add_capability(ItemCapability.CARRY_KITE_SHIELD)
norman_shield_7.set_price(118)
norman_shield_7.add_modifier(IModBit.CRACKED)
norman_shield_7.add_modifier(IModBit.BATTERED)
norman_shield_7.add_modifier(IModBit.THICK)
norman_shield_7.add_modifier(IModBit.REINFORCED)
norman_shield_7.set_weight(2.5)
norman_shield_7.set_abundance(100)
norman_shield_7.set_body_armor(1)
norman_shield_7.set_hit_points(480)
norman_shield_7.set_speed_rating(82)
norman_shield_7.set_weapon_length(90)


norman_shield_8 = Item("norman_shield_8", "Kite_Shield")
norman_shield_8.add_mesh(ItemMesh("norman_shield_8"))
norman_shield_8.add_flag(ItemType.SHIELD)
norman_shield_8.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
norman_shield_8.add_capability(ItemCapability.CARRY_KITE_SHIELD)
norman_shield_8.set_price(118)
norman_shield_8.add_modifier(IModBit.CRACKED)
norman_shield_8.add_modifier(IModBit.BATTERED)
norman_shield_8.add_modifier(IModBit.THICK)
norman_shield_8.add_modifier(IModBit.REINFORCED)
norman_shield_8.set_weight(2.5)
norman_shield_8.set_abundance(100)
norman_shield_8.set_body_armor(1)
norman_shield_8.set_hit_points(480)
norman_shield_8.set_speed_rating(82)
norman_shield_8.set_weapon_length(90)


tab_shield_round_a = Item("tab_shield_round_a", "Old_Round_Shield")
tab_shield_round_a.add_mesh(ItemMesh("tableau_shield_round_5"))
tab_shield_round_a.add_flag(ItemType.SHIELD)
tab_shield_round_a.add_flag(ItemFlag.IS_MERCHANDISE)
tab_shield_round_a.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tab_shield_round_a.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
tab_shield_round_a.set_price(26)
tab_shield_round_a.add_modifier(IModBit.CRACKED)
tab_shield_round_a.add_modifier(IModBit.BATTERED)
tab_shield_round_a.add_modifier(IModBit.THICK)
tab_shield_round_a.add_modifier(IModBit.REINFORCED)
tab_shield_round_a.set_weight(2.5)
tab_shield_round_a.set_abundance(100)
tab_shield_round_a.set_body_armor(4)
tab_shield_round_a.set_hit_points(195)
tab_shield_round_a.set_speed_rating(93)
tab_shield_round_a.set_weapon_length(50)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270473 1224979098644774912 1224979098644774913


tab_shield_round_b = Item("tab_shield_round_b", "Plain_Round_Shield")
tab_shield_round_b.add_mesh(ItemMesh("tableau_shield_round_3"))
tab_shield_round_b.add_flag(ItemType.SHIELD)
tab_shield_round_b.add_flag(ItemFlag.IS_MERCHANDISE)
tab_shield_round_b.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tab_shield_round_b.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
tab_shield_round_b.set_price(65)
tab_shield_round_b.add_modifier(IModBit.CRACKED)
tab_shield_round_b.add_modifier(IModBit.BATTERED)
tab_shield_round_b.add_modifier(IModBit.THICK)
tab_shield_round_b.add_modifier(IModBit.REINFORCED)
tab_shield_round_b.set_weight(3.0)
tab_shield_round_b.set_abundance(100)
tab_shield_round_b.set_body_armor(8)
tab_shield_round_b.set_hit_points(260)
tab_shield_round_b.set_speed_rating(90)
tab_shield_round_b.set_weapon_length(50)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270471 1224979098644774912 1224979098644774913


tab_shield_round_c = Item("tab_shield_round_c", "Round_Shield")
tab_shield_round_c.add_mesh(ItemMesh("tableau_shield_round_2"))
tab_shield_round_c.add_flag(ItemType.SHIELD)
tab_shield_round_c.add_flag(ItemFlag.IS_MERCHANDISE)
tab_shield_round_c.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tab_shield_round_c.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
tab_shield_round_c.set_price(105)
tab_shield_round_c.add_modifier(IModBit.CRACKED)
tab_shield_round_c.add_modifier(IModBit.BATTERED)
tab_shield_round_c.add_modifier(IModBit.THICK)
tab_shield_round_c.add_modifier(IModBit.REINFORCED)
tab_shield_round_c.set_weight(3.5)
tab_shield_round_c.set_abundance(100)
tab_shield_round_c.set_body_armor(12)
tab_shield_round_c.set_hit_points(310)
tab_shield_round_c.set_speed_rating(87)
tab_shield_round_c.set_weapon_length(50)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270470 1224979098644774912 1224979098644774913


tab_shield_round_d = Item("tab_shield_round_d", "Heavy_Round_Shield")
tab_shield_round_d.add_mesh(ItemMesh("tableau_shield_round_1"))
tab_shield_round_d.add_flag(ItemType.SHIELD)
tab_shield_round_d.add_flag(ItemFlag.IS_MERCHANDISE)
tab_shield_round_d.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tab_shield_round_d.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
tab_shield_round_d.set_price(210)
tab_shield_round_d.add_modifier(IModBit.CRACKED)
tab_shield_round_d.add_modifier(IModBit.BATTERED)
tab_shield_round_d.add_modifier(IModBit.THICK)
tab_shield_round_d.add_modifier(IModBit.REINFORCED)
tab_shield_round_d.set_weight(4.0)
tab_shield_round_d.set_abundance(100)
tab_shield_round_d.set_body_armor(15)
tab_shield_round_d.set_hit_points(350)
tab_shield_round_d.set_speed_rating(84)
tab_shield_round_d.set_weapon_length(50)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270469 1224979098644774912 1224979098644774913


tab_shield_round_e = Item("tab_shield_round_e", "Huscarl's_Round_Shield")
tab_shield_round_e.add_mesh(ItemMesh("tableau_shield_round_4"))
tab_shield_round_e.add_flag(ItemType.SHIELD)
tab_shield_round_e.add_flag(ItemFlag.IS_MERCHANDISE)
tab_shield_round_e.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
tab_shield_round_e.set_price(430)
tab_shield_round_e.add_modifier(IModBit.CRACKED)
tab_shield_round_e.add_modifier(IModBit.BATTERED)
tab_shield_round_e.add_modifier(IModBit.THICK)
tab_shield_round_e.add_modifier(IModBit.REINFORCED)
tab_shield_round_e.set_weight(4.5)
tab_shield_round_e.set_abundance(100)
tab_shield_round_e.set_body_armor(19)
tab_shield_round_e.set_hit_points(410)
tab_shield_round_e.set_speed_rating(81)
tab_shield_round_e.set_weapon_length(50)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270472 1224979098644774912 1224979098644774913


tab_shield_kite_a = Item("tab_shield_kite_a", "Old_Kite_Shield")
tab_shield_kite_a.add_mesh(ItemMesh("tableau_shield_kite_1"))
tab_shield_kite_a.add_flag(ItemType.SHIELD)
tab_shield_kite_a.add_flag(ItemFlag.IS_MERCHANDISE)
tab_shield_kite_a.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tab_shield_kite_a.add_capability(ItemCapability.CARRY_KITE_SHIELD)
tab_shield_kite_a.set_price(33)
tab_shield_kite_a.add_modifier(IModBit.CRACKED)
tab_shield_kite_a.add_modifier(IModBit.BATTERED)
tab_shield_kite_a.add_modifier(IModBit.THICK)
tab_shield_kite_a.add_modifier(IModBit.REINFORCED)
tab_shield_kite_a.set_weight(2.0)
tab_shield_kite_a.set_abundance(100)
tab_shield_kite_a.set_body_armor(5)
tab_shield_kite_a.set_hit_points(165)
tab_shield_kite_a.set_speed_rating(96)
tab_shield_kite_a.set_missile_speed(70)
tab_shield_kite_a.set_weapon_length(36)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270477 1224979098644774912 1224979098644774913


tab_shield_kite_b = Item("tab_shield_kite_b", "Plain_Kite_Shield")
tab_shield_kite_b.add_mesh(ItemMesh("tableau_shield_kite_3"))
tab_shield_kite_b.add_flag(ItemType.SHIELD)
tab_shield_kite_b.add_flag(ItemFlag.IS_MERCHANDISE)
tab_shield_kite_b.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tab_shield_kite_b.add_capability(ItemCapability.CARRY_KITE_SHIELD)
tab_shield_kite_b.set_price(70)
tab_shield_kite_b.add_modifier(IModBit.CRACKED)
tab_shield_kite_b.add_modifier(IModBit.BATTERED)
tab_shield_kite_b.add_modifier(IModBit.THICK)
tab_shield_kite_b.add_modifier(IModBit.REINFORCED)
tab_shield_kite_b.set_weight(2.5)
tab_shield_kite_b.set_abundance(100)
tab_shield_kite_b.set_body_armor(10)
tab_shield_kite_b.set_hit_points(215)
tab_shield_kite_b.set_speed_rating(93)
tab_shield_kite_b.set_missile_speed(70)
tab_shield_kite_b.set_weapon_length(36)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270479 1224979098644774912 1224979098644774913


tab_shield_kite_c = Item("tab_shield_kite_c", "Kite_Shield")
tab_shield_kite_c.add_mesh(ItemMesh("tableau_shield_kite_2"))
tab_shield_kite_c.add_flag(ItemType.SHIELD)
tab_shield_kite_c.add_flag(ItemFlag.IS_MERCHANDISE)
tab_shield_kite_c.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tab_shield_kite_c.add_capability(ItemCapability.CARRY_KITE_SHIELD)
tab_shield_kite_c.set_price(156)
tab_shield_kite_c.add_modifier(IModBit.CRACKED)
tab_shield_kite_c.add_modifier(IModBit.BATTERED)
tab_shield_kite_c.add_modifier(IModBit.THICK)
tab_shield_kite_c.add_modifier(IModBit.REINFORCED)
tab_shield_kite_c.set_weight(3.0)
tab_shield_kite_c.set_abundance(100)
tab_shield_kite_c.set_body_armor(13)
tab_shield_kite_c.set_hit_points(265)
tab_shield_kite_c.set_speed_rating(90)
tab_shield_kite_c.set_missile_speed(70)
tab_shield_kite_c.set_weapon_length(36)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270478 1224979098644774912 1224979098644774913


tab_shield_kite_d = Item("tab_shield_kite_d", "Heavy_Kite_Shield")
tab_shield_kite_d.add_mesh(ItemMesh("tableau_shield_kite_2"))
tab_shield_kite_d.add_flag(ItemType.SHIELD)
tab_shield_kite_d.add_flag(ItemFlag.IS_MERCHANDISE)
tab_shield_kite_d.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tab_shield_kite_d.add_capability(ItemCapability.CARRY_KITE_SHIELD)
tab_shield_kite_d.set_price(320)
tab_shield_kite_d.add_modifier(IModBit.CRACKED)
tab_shield_kite_d.add_modifier(IModBit.BATTERED)
tab_shield_kite_d.add_modifier(IModBit.THICK)
tab_shield_kite_d.add_modifier(IModBit.REINFORCED)
tab_shield_kite_d.set_weight(3.5)
tab_shield_kite_d.set_abundance(100)
tab_shield_kite_d.set_body_armor(18)
tab_shield_kite_d.set_hit_points(310)
tab_shield_kite_d.set_speed_rating(87)
tab_shield_kite_d.set_missile_speed(70)
tab_shield_kite_d.set_weapon_length(36)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270478 1224979098644774912 1224979098644774913


tab_shield_kite_cav_a = Item("tab_shield_kite_cav_a", "Horseman's_Kite_Shield")
tab_shield_kite_cav_a.add_mesh(ItemMesh("tableau_shield_kite_4"))
tab_shield_kite_cav_a.add_flag(ItemType.SHIELD)
tab_shield_kite_cav_a.add_flag(ItemFlag.IS_MERCHANDISE)
tab_shield_kite_cav_a.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tab_shield_kite_cav_a.add_capability(ItemCapability.CARRY_KITE_SHIELD)
tab_shield_kite_cav_a.set_price(205)
tab_shield_kite_cav_a.add_modifier(IModBit.CRACKED)
tab_shield_kite_cav_a.add_modifier(IModBit.BATTERED)
tab_shield_kite_cav_a.add_modifier(IModBit.THICK)
tab_shield_kite_cav_a.add_modifier(IModBit.REINFORCED)
tab_shield_kite_cav_a.set_weight(2.0)
tab_shield_kite_cav_a.set_abundance(100)
tab_shield_kite_cav_a.set_body_armor(14)
tab_shield_kite_cav_a.set_hit_points(165)
tab_shield_kite_cav_a.set_speed_rating(103)
tab_shield_kite_cav_a.set_missile_speed(50)
tab_shield_kite_cav_a.set_weapon_length(30)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270480 1224979098644774912 1224979098644774913


tab_shield_kite_cav_b = Item("tab_shield_kite_cav_b", "Knightly_Kite_Shield")
tab_shield_kite_cav_b.add_mesh(ItemMesh("tableau_shield_kite_4"))
tab_shield_kite_cav_b.add_flag(ItemType.SHIELD)
tab_shield_kite_cav_b.add_flag(ItemFlag.IS_MERCHANDISE)
tab_shield_kite_cav_b.add_capability(ItemCapability.CARRY_KITE_SHIELD)
tab_shield_kite_cav_b.set_price(360)
tab_shield_kite_cav_b.add_modifier(IModBit.CRACKED)
tab_shield_kite_cav_b.add_modifier(IModBit.BATTERED)
tab_shield_kite_cav_b.add_modifier(IModBit.THICK)
tab_shield_kite_cav_b.add_modifier(IModBit.REINFORCED)
tab_shield_kite_cav_b.set_weight(2.5)
tab_shield_kite_cav_b.set_abundance(100)
tab_shield_kite_cav_b.set_body_armor(23)
tab_shield_kite_cav_b.set_hit_points(225)
tab_shield_kite_cav_b.set_speed_rating(100)
tab_shield_kite_cav_b.set_missile_speed(50)
tab_shield_kite_cav_b.set_weapon_length(30)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270480 1224979098644774912 1224979098644774913


tab_shield_heater_a = Item("tab_shield_heater_a", "Old_Heater_Shield")
tab_shield_heater_a.add_mesh(ItemMesh("tableau_shield_heater_1"))
tab_shield_heater_a.add_flag(ItemType.SHIELD)
tab_shield_heater_a.add_flag(ItemFlag.IS_MERCHANDISE)
tab_shield_heater_a.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tab_shield_heater_a.add_capability(ItemCapability.CARRY_KITE_SHIELD)
tab_shield_heater_a.set_price(36)
tab_shield_heater_a.add_modifier(IModBit.CRACKED)
tab_shield_heater_a.add_modifier(IModBit.BATTERED)
tab_shield_heater_a.add_modifier(IModBit.THICK)
tab_shield_heater_a.add_modifier(IModBit.REINFORCED)
tab_shield_heater_a.set_weight(2.0)
tab_shield_heater_a.set_abundance(100)
tab_shield_heater_a.set_body_armor(6)
tab_shield_heater_a.set_hit_points(160)
tab_shield_heater_a.set_speed_rating(96)
tab_shield_heater_a.set_missile_speed(70)
tab_shield_heater_a.set_weapon_length(36)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270481 1224979098644774912 1224979098644774913


tab_shield_heater_b = Item("tab_shield_heater_b", "Plain_Heater_Shield")
tab_shield_heater_b.add_mesh(ItemMesh("tableau_shield_heater_1"))
tab_shield_heater_b.add_flag(ItemType.SHIELD)
tab_shield_heater_b.add_flag(ItemFlag.IS_MERCHANDISE)
tab_shield_heater_b.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tab_shield_heater_b.add_capability(ItemCapability.CARRY_KITE_SHIELD)
tab_shield_heater_b.set_price(74)
tab_shield_heater_b.add_modifier(IModBit.CRACKED)
tab_shield_heater_b.add_modifier(IModBit.BATTERED)
tab_shield_heater_b.add_modifier(IModBit.THICK)
tab_shield_heater_b.add_modifier(IModBit.REINFORCED)
tab_shield_heater_b.set_weight(2.5)
tab_shield_heater_b.set_abundance(100)
tab_shield_heater_b.set_body_armor(11)
tab_shield_heater_b.set_hit_points(210)
tab_shield_heater_b.set_speed_rating(93)
tab_shield_heater_b.set_missile_speed(70)
tab_shield_heater_b.set_weapon_length(36)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270481 1224979098644774912 1224979098644774913


tab_shield_heater_c = Item("tab_shield_heater_c", "Heater_Shield")
tab_shield_heater_c.add_mesh(ItemMesh("tableau_shield_heater_1"))
tab_shield_heater_c.add_flag(ItemType.SHIELD)
tab_shield_heater_c.add_flag(ItemFlag.IS_MERCHANDISE)
tab_shield_heater_c.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tab_shield_heater_c.add_capability(ItemCapability.CARRY_KITE_SHIELD)
tab_shield_heater_c.set_price(160)
tab_shield_heater_c.add_modifier(IModBit.CRACKED)
tab_shield_heater_c.add_modifier(IModBit.BATTERED)
tab_shield_heater_c.add_modifier(IModBit.THICK)
tab_shield_heater_c.add_modifier(IModBit.REINFORCED)
tab_shield_heater_c.set_weight(3.0)
tab_shield_heater_c.set_abundance(100)
tab_shield_heater_c.set_body_armor(14)
tab_shield_heater_c.set_hit_points(260)
tab_shield_heater_c.set_speed_rating(90)
tab_shield_heater_c.set_missile_speed(70)
tab_shield_heater_c.set_weapon_length(36)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270481 1224979098644774912 1224979098644774913


tab_shield_heater_d = Item("tab_shield_heater_d", "Heavy_Heater_Shield")
tab_shield_heater_d.add_mesh(ItemMesh("tableau_shield_heater_1"))
tab_shield_heater_d.add_flag(ItemType.SHIELD)
tab_shield_heater_d.add_flag(ItemFlag.IS_MERCHANDISE)
tab_shield_heater_d.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tab_shield_heater_d.add_capability(ItemCapability.CARRY_KITE_SHIELD)
tab_shield_heater_d.set_price(332)
tab_shield_heater_d.add_modifier(IModBit.CRACKED)
tab_shield_heater_d.add_modifier(IModBit.BATTERED)
tab_shield_heater_d.add_modifier(IModBit.THICK)
tab_shield_heater_d.add_modifier(IModBit.REINFORCED)
tab_shield_heater_d.set_weight(3.5)
tab_shield_heater_d.set_abundance(100)
tab_shield_heater_d.set_body_armor(19)
tab_shield_heater_d.set_hit_points(305)
tab_shield_heater_d.set_speed_rating(87)
tab_shield_heater_d.set_missile_speed(70)
tab_shield_heater_d.set_weapon_length(36)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270481 1224979098644774912 1224979098644774913


tab_shield_heater_cav_a = Item("tab_shield_heater_cav_a", "Horseman's_Heater_Shield")
tab_shield_heater_cav_a.add_mesh(ItemMesh("tableau_shield_heater_2"))
tab_shield_heater_cav_a.add_flag(ItemType.SHIELD)
tab_shield_heater_cav_a.add_flag(ItemFlag.IS_MERCHANDISE)
tab_shield_heater_cav_a.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tab_shield_heater_cav_a.add_capability(ItemCapability.CARRY_KITE_SHIELD)
tab_shield_heater_cav_a.set_price(229)
tab_shield_heater_cav_a.add_modifier(IModBit.CRACKED)
tab_shield_heater_cav_a.add_modifier(IModBit.BATTERED)
tab_shield_heater_cav_a.add_modifier(IModBit.THICK)
tab_shield_heater_cav_a.add_modifier(IModBit.REINFORCED)
tab_shield_heater_cav_a.set_weight(2.0)
tab_shield_heater_cav_a.set_abundance(100)
tab_shield_heater_cav_a.set_body_armor(16)
tab_shield_heater_cav_a.set_hit_points(160)
tab_shield_heater_cav_a.set_speed_rating(103)
tab_shield_heater_cav_a.set_missile_speed(50)
tab_shield_heater_cav_a.set_weapon_length(30)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270482 1224979098644774912 1224979098644774913


tab_shield_heater_cav_b = Item("tab_shield_heater_cav_b", "Knightly_Heater_Shield")
tab_shield_heater_cav_b.add_mesh(ItemMesh("tableau_shield_heater_2"))
tab_shield_heater_cav_b.add_flag(ItemType.SHIELD)
tab_shield_heater_cav_b.add_flag(ItemFlag.IS_MERCHANDISE)
tab_shield_heater_cav_b.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tab_shield_heater_cav_b.add_capability(ItemCapability.CARRY_KITE_SHIELD)
tab_shield_heater_cav_b.set_price(390)
tab_shield_heater_cav_b.add_modifier(IModBit.CRACKED)
tab_shield_heater_cav_b.add_modifier(IModBit.BATTERED)
tab_shield_heater_cav_b.add_modifier(IModBit.THICK)
tab_shield_heater_cav_b.add_modifier(IModBit.REINFORCED)
tab_shield_heater_cav_b.set_weight(2.5)
tab_shield_heater_cav_b.set_abundance(100)
tab_shield_heater_cav_b.set_body_armor(23)
tab_shield_heater_cav_b.set_hit_points(220)
tab_shield_heater_cav_b.set_speed_rating(100)
tab_shield_heater_cav_b.set_missile_speed(50)
tab_shield_heater_cav_b.set_weapon_length(30)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270482 1224979098644774912 1224979098644774913


tab_shield_pavise_a = Item("tab_shield_pavise_a", "Old_Board_Shield")
tab_shield_pavise_a.add_mesh(ItemMesh("tableau_shield_pavise_2"))
tab_shield_pavise_a.add_flag(ItemType.SHIELD)
tab_shield_pavise_a.add_flag(ItemFlag.IS_MERCHANDISE)
tab_shield_pavise_a.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tab_shield_pavise_a.add_flag(ItemFlag.CANT_USE_ON_HORSEBACK)
tab_shield_pavise_a.add_capability(ItemCapability.CARRY_BOARD_SHIELD)
tab_shield_pavise_a.set_price(60)
tab_shield_pavise_a.add_modifier(IModBit.CRACKED)
tab_shield_pavise_a.add_modifier(IModBit.BATTERED)
tab_shield_pavise_a.add_modifier(IModBit.THICK)
tab_shield_pavise_a.add_modifier(IModBit.REINFORCED)
tab_shield_pavise_a.set_weight(3.5)
tab_shield_pavise_a.set_abundance(100)
tab_shield_pavise_a.set_body_armor(4)
tab_shield_pavise_a.set_hit_points(280)
tab_shield_pavise_a.set_speed_rating(89)
tab_shield_pavise_a.set_missile_speed(100)
tab_shield_pavise_a.set_weapon_length(43)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270484 1224979098644774912 1224979098644774913


tab_shield_pavise_b = Item("tab_shield_pavise_b", "Plain_Board_Shield")
tab_shield_pavise_b.add_mesh(ItemMesh("tableau_shield_pavise_2"))
tab_shield_pavise_b.add_flag(ItemType.SHIELD)
tab_shield_pavise_b.add_flag(ItemFlag.IS_MERCHANDISE)
tab_shield_pavise_b.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tab_shield_pavise_b.add_flag(ItemFlag.CANT_USE_ON_HORSEBACK)
tab_shield_pavise_b.add_capability(ItemCapability.CARRY_BOARD_SHIELD)
tab_shield_pavise_b.set_price(114)
tab_shield_pavise_b.add_modifier(IModBit.CRACKED)
tab_shield_pavise_b.add_modifier(IModBit.BATTERED)
tab_shield_pavise_b.add_modifier(IModBit.THICK)
tab_shield_pavise_b.add_modifier(IModBit.REINFORCED)
tab_shield_pavise_b.set_weight(4.0)
tab_shield_pavise_b.set_abundance(100)
tab_shield_pavise_b.set_body_armor(8)
tab_shield_pavise_b.set_hit_points(360)
tab_shield_pavise_b.set_speed_rating(85)
tab_shield_pavise_b.set_missile_speed(100)
tab_shield_pavise_b.set_weapon_length(43)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270484 1224979098644774912 1224979098644774913


tab_shield_pavise_c = Item("tab_shield_pavise_c", "Board_Shield")
tab_shield_pavise_c.add_mesh(ItemMesh("tableau_shield_pavise_1"))
tab_shield_pavise_c.add_flag(ItemType.SHIELD)
tab_shield_pavise_c.add_flag(ItemFlag.IS_MERCHANDISE)
tab_shield_pavise_c.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tab_shield_pavise_c.add_flag(ItemFlag.CANT_USE_ON_HORSEBACK)
tab_shield_pavise_c.add_capability(ItemCapability.CARRY_BOARD_SHIELD)
tab_shield_pavise_c.set_price(210)
tab_shield_pavise_c.add_modifier(IModBit.CRACKED)
tab_shield_pavise_c.add_modifier(IModBit.BATTERED)
tab_shield_pavise_c.add_modifier(IModBit.THICK)
tab_shield_pavise_c.add_modifier(IModBit.REINFORCED)
tab_shield_pavise_c.set_weight(4.5)
tab_shield_pavise_c.set_abundance(100)
tab_shield_pavise_c.set_body_armor(10)
tab_shield_pavise_c.set_hit_points(430)
tab_shield_pavise_c.set_speed_rating(81)
tab_shield_pavise_c.set_missile_speed(100)
tab_shield_pavise_c.set_weapon_length(43)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270483 1224979098644774912 1224979098644774913


tab_shield_pavise_d = Item("tab_shield_pavise_d", "Heavy_Board_Shield")
tab_shield_pavise_d.add_mesh(ItemMesh("tableau_shield_pavise_1"))
tab_shield_pavise_d.add_flag(ItemType.SHIELD)
tab_shield_pavise_d.add_flag(ItemFlag.IS_MERCHANDISE)
tab_shield_pavise_d.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tab_shield_pavise_d.add_flag(ItemFlag.CANT_USE_ON_HORSEBACK)
tab_shield_pavise_d.add_capability(ItemCapability.CARRY_BOARD_SHIELD)
tab_shield_pavise_d.set_price(370)
tab_shield_pavise_d.add_modifier(IModBit.CRACKED)
tab_shield_pavise_d.add_modifier(IModBit.BATTERED)
tab_shield_pavise_d.add_modifier(IModBit.THICK)
tab_shield_pavise_d.add_modifier(IModBit.REINFORCED)
tab_shield_pavise_d.set_weight(5.0)
tab_shield_pavise_d.set_abundance(100)
tab_shield_pavise_d.set_body_armor(14)
tab_shield_pavise_d.set_hit_points(550)
tab_shield_pavise_d.set_speed_rating(78)
tab_shield_pavise_d.set_missile_speed(100)
tab_shield_pavise_d.set_weapon_length(43)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270483 1224979098644774912 1224979098644774913


tab_shield_small_round_a = Item("tab_shield_small_round_a", "Plain_Cavalry_Shield")
tab_shield_small_round_a.add_mesh(ItemMesh("tableau_shield_small_round_3"))
tab_shield_small_round_a.add_flag(ItemType.SHIELD)
tab_shield_small_round_a.add_flag(ItemFlag.IS_MERCHANDISE)
tab_shield_small_round_a.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tab_shield_small_round_a.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
tab_shield_small_round_a.set_price(96)
tab_shield_small_round_a.add_modifier(IModBit.CRACKED)
tab_shield_small_round_a.add_modifier(IModBit.BATTERED)
tab_shield_small_round_a.add_modifier(IModBit.THICK)
tab_shield_small_round_a.add_modifier(IModBit.REINFORCED)
tab_shield_small_round_a.set_weight(2.0)
tab_shield_small_round_a.set_abundance(100)
tab_shield_small_round_a.set_body_armor(8)
tab_shield_small_round_a.set_hit_points(160)
tab_shield_small_round_a.set_speed_rating(105)
tab_shield_small_round_a.set_weapon_length(40)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270476 1224979098644774912 1224979098644774913


tab_shield_small_round_b = Item("tab_shield_small_round_b", "Round_Cavalry_Shield")
tab_shield_small_round_b.add_mesh(ItemMesh("tableau_shield_small_round_1"))
tab_shield_small_round_b.add_flag(ItemType.SHIELD)
tab_shield_small_round_b.add_flag(ItemFlag.IS_MERCHANDISE)
tab_shield_small_round_b.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
tab_shield_small_round_b.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
tab_shield_small_round_b.set_price(195)
tab_shield_small_round_b.add_modifier(IModBit.CRACKED)
tab_shield_small_round_b.add_modifier(IModBit.BATTERED)
tab_shield_small_round_b.add_modifier(IModBit.THICK)
tab_shield_small_round_b.add_modifier(IModBit.REINFORCED)
tab_shield_small_round_b.set_weight(2.5)
tab_shield_small_round_b.set_abundance(100)
tab_shield_small_round_b.set_body_armor(14)
tab_shield_small_round_b.set_hit_points(200)
tab_shield_small_round_b.set_speed_rating(103)
tab_shield_small_round_b.set_weapon_length(40)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270474 1224979098644774912 1224979098644774913


tab_shield_small_round_c = Item("tab_shield_small_round_c", "Elite_Cavalry_Shield")
tab_shield_small_round_c.add_mesh(ItemMesh("tableau_shield_small_round_2"))
tab_shield_small_round_c.add_flag(ItemType.SHIELD)
tab_shield_small_round_c.add_flag(ItemFlag.IS_MERCHANDISE)
tab_shield_small_round_c.add_capability(ItemCapability.CARRY_ROUND_SHIELD)
tab_shield_small_round_c.set_price(370)
tab_shield_small_round_c.add_modifier(IModBit.CRACKED)
tab_shield_small_round_c.add_modifier(IModBit.BATTERED)
tab_shield_small_round_c.add_modifier(IModBit.THICK)
tab_shield_small_round_c.add_modifier(IModBit.REINFORCED)
tab_shield_small_round_c.set_weight(3.0)
tab_shield_small_round_c.set_abundance(100)
tab_shield_small_round_c.set_body_armor(22)
tab_shield_small_round_c.set_hit_points(250)
tab_shield_small_round_c.set_speed_rating(100)
tab_shield_small_round_c.set_weapon_length(40)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270475 1224979098644774912 1224979098644774913


darts = Item("darts", "Darts")
darts.add_mesh(ItemMesh("dart_b"))
darts.add_mesh(ItemMesh("dart_b_bag", ItemMesh.ixmesh_carry))
darts.add_flag(ItemType.THROWN)
darts.add_flag(ItemFlag.IS_MERCHANDISE)
darts.add_flag(ItemFlag.IS_PRIMARY)
darts.add_capability(ItemCapability.THROW_JAVELIN)
darts.add_capability(ItemCapability.CARRY_QUIVER_RIGHT_VERTICAL)
darts.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
darts.set_price(155)
darts.add_modifier(IModBit.BENT)
darts.add_modifier(IModBit.BALANCED)
darts.add_modifier(IModBit.HEAVY)
darts.add_modifier(IModBit.LARGE_BAG)
darts.set_weight(4.0)
darts.set_abundance(100)
darts.set_difficulty(1)
darts.set_speed_rating(95)
darts.set_missile_speed(28)
darts.set_weapon_length(32)
darts.set_max_ammo(7)
darts.set_thrust_damage(22, 1)


war_darts = Item("war_darts", "War_Darts")
war_darts.add_mesh(ItemMesh("dart_a"))
war_darts.add_mesh(ItemMesh("dart_a_bag", ItemMesh.ixmesh_carry))
war_darts.add_flag(ItemType.THROWN)
war_darts.add_flag(ItemFlag.IS_MERCHANDISE)
war_darts.add_flag(ItemFlag.IS_PRIMARY)
war_darts.add_capability(ItemCapability.THROW_JAVELIN)
war_darts.add_capability(ItemCapability.CARRY_QUIVER_BACK)
war_darts.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
war_darts.set_price(285)
war_darts.add_modifier(IModBit.BENT)
war_darts.add_modifier(IModBit.BALANCED)
war_darts.add_modifier(IModBit.HEAVY)
war_darts.add_modifier(IModBit.LARGE_BAG)
war_darts.set_weight(5.0)
war_darts.set_abundance(100)
war_darts.set_difficulty(1)
war_darts.set_speed_rating(93)
war_darts.set_missile_speed(27)
war_darts.set_weapon_length(45)
war_darts.set_max_ammo(7)
war_darts.set_thrust_damage(25, 1)


javelin = Item("javelin", "Javelins")
javelin.add_mesh(ItemMesh("javelin"))
javelin.add_mesh(ItemMesh("javelins_quiver_new", ItemMesh.ixmesh_carry))
javelin.add_flag(ItemType.THROWN)
javelin.add_flag(ItemFlag.IS_MERCHANDISE)
javelin.add_flag(ItemFlag.IS_PRIMARY)
javelin.add_flag(ItemFlag.IS_CIVILIAN)
javelin.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
javelin.add_capability(ItemCapability.THROW_JAVELIN)
javelin.add_capability(ItemCapability.CARRY_QUIVER_BACK)
javelin.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
javelin.set_price(300)
javelin.add_modifier(IModBit.BENT)
javelin.add_modifier(IModBit.BALANCED)
javelin.add_modifier(IModBit.HEAVY)
javelin.add_modifier(IModBit.LARGE_BAG)
javelin.set_weight(4.0)
javelin.set_abundance(100)
javelin.set_difficulty(1)
javelin.set_speed_rating(91)
javelin.set_missile_speed(25)
javelin.set_weapon_length(75)
javelin.set_max_ammo(5)
javelin.set_thrust_damage(34, 1)


javelin_melee = Item("javelin_melee", "Javelin")
javelin_melee.add_mesh(ItemMesh("javelin"))
javelin_melee.add_flag(ItemType.POLEARM)
javelin_melee.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
javelin_melee.add_flag(ItemFlag.IS_PRIMARY)
javelin_melee.add_capability(ItemCapability.POLEARM_THRUST)
javelin_melee.add_capability(ItemCapability.POLEARM_OVERSWING)
javelin_melee.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
javelin_melee.add_capability(ItemCapability.POLEARM_SLASHLEFT)
javelin_melee.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
javelin_melee.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
javelin_melee.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
javelin_melee.add_capability(ItemCapability.POLEARM_PARRY_UP)
javelin_melee.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
javelin_melee.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
javelin_melee.set_price(300)
javelin_melee.add_modifier(IModBit.CRACKED)
javelin_melee.add_modifier(IModBit.BENT)
javelin_melee.add_modifier(IModBit.BALANCED)
javelin_melee.set_weight(1.0)
javelin_melee.set_abundance(100)
javelin_melee.set_hit_points(12288)
javelin_melee.set_speed_rating(95)
javelin_melee.set_weapon_length(75)
javelin_melee.set_thrust_damage(14, 1)
javelin_melee.set_swing_damage(12, 0)


throwing_spears = Item("throwing_spears", "Throwing_Spears")
throwing_spears.add_mesh(ItemMesh("jarid_new_b"))
throwing_spears.add_mesh(ItemMesh("jarid_new_b_bag", ItemMesh.ixmesh_carry))
throwing_spears.add_flag(ItemType.THROWN)
throwing_spears.add_flag(ItemFlag.IS_MERCHANDISE)
throwing_spears.add_flag(ItemFlag.IS_PRIMARY)
throwing_spears.add_flag(ItemFlag.IS_CIVILIAN)
throwing_spears.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
throwing_spears.add_capability(ItemCapability.THROW_JAVELIN)
throwing_spears.add_capability(ItemCapability.CARRY_QUIVER_BACK)
throwing_spears.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
throwing_spears.set_price(525)
throwing_spears.add_modifier(IModBit.BENT)
throwing_spears.add_modifier(IModBit.BALANCED)
throwing_spears.add_modifier(IModBit.HEAVY)
throwing_spears.add_modifier(IModBit.LARGE_BAG)
throwing_spears.set_weight(3.0)
throwing_spears.set_abundance(100)
throwing_spears.set_difficulty(2)
throwing_spears.set_speed_rating(87)
throwing_spears.set_missile_speed(22)
throwing_spears.set_weapon_length(65)
throwing_spears.set_max_ammo(4)
throwing_spears.set_thrust_damage(44, 1)


throwing_spear_melee = Item("throwing_spear_melee", "Throwing_Spear")
throwing_spear_melee.add_mesh(ItemMesh("jarid_new_b"))
throwing_spear_melee.add_mesh(ItemMesh("javelins_quiver", ItemMesh.ixmesh_carry))
throwing_spear_melee.add_flag(ItemType.POLEARM)
throwing_spear_melee.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
throwing_spear_melee.add_flag(ItemFlag.IS_PRIMARY)
throwing_spear_melee.add_capability(ItemCapability.POLEARM_THRUST)
throwing_spear_melee.add_capability(ItemCapability.POLEARM_OVERSWING)
throwing_spear_melee.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
throwing_spear_melee.add_capability(ItemCapability.POLEARM_SLASHLEFT)
throwing_spear_melee.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
throwing_spear_melee.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
throwing_spear_melee.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
throwing_spear_melee.add_capability(ItemCapability.POLEARM_PARRY_UP)
throwing_spear_melee.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
throwing_spear_melee.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
throwing_spear_melee.set_price(525)
throwing_spear_melee.add_modifier(IModBit.BENT)
throwing_spear_melee.add_modifier(IModBit.BALANCED)
throwing_spear_melee.add_modifier(IModBit.HEAVY)
throwing_spear_melee.add_modifier(IModBit.LARGE_BAG)
throwing_spear_melee.set_weight(1.0)
throwing_spear_melee.set_abundance(100)
throwing_spear_melee.set_difficulty(1)
throwing_spear_melee.set_hit_points(18432)
throwing_spear_melee.set_speed_rating(91)
throwing_spear_melee.set_weapon_length(75)
throwing_spear_melee.set_thrust_damage(23, 1)
throwing_spear_melee.set_swing_damage(18, 0)


jarid = Item("jarid", "Jarids")
jarid.add_mesh(ItemMesh("jarid_new"))
jarid.add_mesh(ItemMesh("jarid_quiver", ItemMesh.ixmesh_carry))
jarid.add_flag(ItemType.THROWN)
jarid.add_flag(ItemFlag.IS_MERCHANDISE)
jarid.add_flag(ItemFlag.IS_PRIMARY)
jarid.add_flag(ItemFlag.IS_CIVILIAN)
jarid.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
jarid.add_capability(ItemCapability.THROW_JAVELIN)
jarid.add_capability(ItemCapability.CARRY_QUIVER_BACK)
jarid.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
jarid.set_price(560)
jarid.add_modifier(IModBit.BENT)
jarid.add_modifier(IModBit.BALANCED)
jarid.add_modifier(IModBit.HEAVY)
jarid.add_modifier(IModBit.LARGE_BAG)
jarid.set_weight(2.75)
jarid.set_abundance(100)
jarid.set_difficulty(2)
jarid.set_speed_rating(89)
jarid.set_missile_speed(24)
jarid.set_weapon_length(65)
jarid.set_max_ammo(4)
jarid.set_thrust_damage(45, 1)


jarid_melee = Item("jarid_melee", "Jarid")
jarid_melee.add_mesh(ItemMesh("jarid_new"))
jarid_melee.add_mesh(ItemMesh("jarid_quiver", ItemMesh.ixmesh_carry))
jarid_melee.add_flag(ItemType.POLEARM)
jarid_melee.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
jarid_melee.add_flag(ItemFlag.IS_PRIMARY)
jarid_melee.add_capability(ItemCapability.POLEARM_THRUST)
jarid_melee.add_capability(ItemCapability.POLEARM_OVERSWING)
jarid_melee.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
jarid_melee.add_capability(ItemCapability.POLEARM_SLASHLEFT)
jarid_melee.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
jarid_melee.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
jarid_melee.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
jarid_melee.add_capability(ItemCapability.POLEARM_PARRY_UP)
jarid_melee.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
jarid_melee.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
jarid_melee.set_price(560)
jarid_melee.add_modifier(IModBit.BENT)
jarid_melee.add_modifier(IModBit.BALANCED)
jarid_melee.add_modifier(IModBit.HEAVY)
jarid_melee.add_modifier(IModBit.LARGE_BAG)
jarid_melee.set_weight(1.0)
jarid_melee.set_abundance(100)
jarid_melee.set_difficulty(2)
jarid_melee.set_hit_points(16384)
jarid_melee.set_speed_rating(93)
jarid_melee.set_weapon_length(65)
jarid_melee.set_thrust_damage(20, 1)
jarid_melee.set_swing_damage(16, 0)


stones = Item("stones", "Stones")
stones.add_mesh(ItemMesh("throwing_stone"))
stones.add_flag(ItemType.THROWN)
stones.add_flag(ItemFlag.IS_MERCHANDISE)
stones.add_flag(ItemFlag.IS_PRIMARY)
stones.add_capability(ItemCapability.THROW_STONE)
stones.set_price(1)
stones.add_modifier(IModBit.LARGE_BAG)
stones.set_weight(4.0)
stones.set_abundance(100)
stones.set_speed_rating(97)
stones.set_missile_speed(30)
stones.set_weapon_length(8)
stones.set_max_ammo(18)
stones.set_thrust_damage(11, 2)


throwing_knives = Item("throwing_knives", "Throwing_Knives")
throwing_knives.add_mesh(ItemMesh("throwing_knife"))
throwing_knives.add_flag(ItemType.THROWN)
throwing_knives.add_flag(ItemFlag.IS_MERCHANDISE)
throwing_knives.add_flag(ItemFlag.IS_PRIMARY)
throwing_knives.add_capability(ItemCapability.THROW_KNIFE)
throwing_knives.set_price(76)
throwing_knives.add_modifier(IModBit.BENT)
throwing_knives.add_modifier(IModBit.BALANCED)
throwing_knives.add_modifier(IModBit.HEAVY)
throwing_knives.add_modifier(IModBit.LARGE_BAG)
throwing_knives.set_weight(2.5)
throwing_knives.set_abundance(100)
throwing_knives.set_speed_rating(121)
throwing_knives.set_missile_speed(25)
throwing_knives.set_max_ammo(14)
throwing_knives.set_thrust_damage(19, 0)


throwing_daggers = Item("throwing_daggers", "Throwing_Daggers")
throwing_daggers.add_mesh(ItemMesh("throwing_dagger"))
throwing_daggers.add_flag(ItemType.THROWN)
throwing_daggers.add_flag(ItemFlag.IS_MERCHANDISE)
throwing_daggers.add_flag(ItemFlag.IS_PRIMARY)
throwing_daggers.add_capability(ItemCapability.THROW_KNIFE)
throwing_daggers.set_price(193)
throwing_daggers.add_modifier(IModBit.BENT)
throwing_daggers.add_modifier(IModBit.BALANCED)
throwing_daggers.add_modifier(IModBit.HEAVY)
throwing_daggers.add_modifier(IModBit.LARGE_BAG)
throwing_daggers.set_weight(2.5)
throwing_daggers.set_abundance(100)
throwing_daggers.set_speed_rating(110)
throwing_daggers.set_missile_speed(24)
throwing_daggers.set_max_ammo(13)
throwing_daggers.set_thrust_damage(25, 0)


light_throwing_axes = Item("light_throwing_axes", "Light_Throwing_Axes")
light_throwing_axes.add_mesh(ItemMesh("francisca"))
light_throwing_axes.add_flag(ItemType.THROWN)
light_throwing_axes.add_flag(ItemFlag.IS_MERCHANDISE)
light_throwing_axes.add_flag(ItemFlag.IS_PRIMARY)
light_throwing_axes.add_flag(ItemFlag.IS_CIVILIAN)
light_throwing_axes.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
light_throwing_axes.add_capability(ItemCapability.THROW_STONE)
light_throwing_axes.add_capability(ItemCapability.THROW_KNIFE)
light_throwing_axes.add_capability(ItemCapability.THROW_AXE)
light_throwing_axes.set_price(360)
light_throwing_axes.add_modifier(IModBit.BENT)
light_throwing_axes.add_modifier(IModBit.BALANCED)
light_throwing_axes.add_modifier(IModBit.LARGE_BAG)
light_throwing_axes.set_weight(5.0)
light_throwing_axes.set_abundance(100)
light_throwing_axes.set_difficulty(2)
light_throwing_axes.set_speed_rating(99)
light_throwing_axes.set_missile_speed(18)
light_throwing_axes.set_weapon_length(53)
light_throwing_axes.set_max_ammo(4)
light_throwing_axes.set_thrust_damage(35, 0)


light_throwing_axes_melee = Item("light_throwing_axes_melee", "Light_Throwing_Axe")
light_throwing_axes_melee.add_mesh(ItemMesh("francisca"))
light_throwing_axes_melee.add_flag(ItemType.ONE_HANDED_WEAPON)
light_throwing_axes_melee.add_flag(ItemFlag.IS_PRIMARY)
light_throwing_axes_melee.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
light_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_OVERSWING)
light_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
light_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
light_throwing_axes_melee.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
light_throwing_axes_melee.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
light_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
light_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
light_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
light_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
light_throwing_axes_melee.add_capability(ItemCapability.FORCE_64_BITS)
light_throwing_axes_melee.set_price(360)
light_throwing_axes_melee.add_modifier(IModBit.BENT)
light_throwing_axes_melee.add_modifier(IModBit.BALANCED)
light_throwing_axes_melee.add_modifier(IModBit.LARGE_BAG)
light_throwing_axes_melee.set_weight(1.0)
light_throwing_axes_melee.set_abundance(100)
light_throwing_axes_melee.set_difficulty(2)
light_throwing_axes_melee.set_hit_points(26624)
light_throwing_axes_melee.set_speed_rating(99)
light_throwing_axes_melee.set_weapon_length(53)
light_throwing_axes_melee.set_swing_damage(26, 0)


throwing_axes = Item("throwing_axes", "Throwing_Axes")
throwing_axes.add_mesh(ItemMesh("throwing_axe_a"))
throwing_axes.add_flag(ItemType.THROWN)
throwing_axes.add_flag(ItemFlag.IS_MERCHANDISE)
throwing_axes.add_flag(ItemFlag.IS_PRIMARY)
throwing_axes.add_flag(ItemFlag.IS_CIVILIAN)
throwing_axes.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
throwing_axes.add_capability(ItemCapability.THROW_STONE)
throwing_axes.add_capability(ItemCapability.THROW_KNIFE)
throwing_axes.add_capability(ItemCapability.THROW_AXE)
throwing_axes.set_price(490)
throwing_axes.add_modifier(IModBit.BENT)
throwing_axes.add_modifier(IModBit.BALANCED)
throwing_axes.add_modifier(IModBit.LARGE_BAG)
throwing_axes.set_weight(5.0)
throwing_axes.set_abundance(100)
throwing_axes.set_difficulty(3)
throwing_axes.set_speed_rating(98)
throwing_axes.set_missile_speed(18)
throwing_axes.set_weapon_length(53)
throwing_axes.set_max_ammo(4)
throwing_axes.set_thrust_damage(39, 0)


throwing_axes_melee = Item("throwing_axes_melee", "Throwing_Axe")
throwing_axes_melee.add_mesh(ItemMesh("throwing_axe_a"))
throwing_axes_melee.add_flag(ItemType.ONE_HANDED_WEAPON)
throwing_axes_melee.add_flag(ItemFlag.IS_PRIMARY)
throwing_axes_melee.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_OVERSWING)
throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
throwing_axes_melee.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
throwing_axes_melee.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
throwing_axes_melee.add_capability(ItemCapability.FORCE_64_BITS)
throwing_axes_melee.set_price(490)
throwing_axes_melee.add_modifier(IModBit.BENT)
throwing_axes_melee.add_modifier(IModBit.BALANCED)
throwing_axes_melee.add_modifier(IModBit.LARGE_BAG)
throwing_axes_melee.set_weight(1.0)
throwing_axes_melee.set_abundance(100)
throwing_axes_melee.set_difficulty(3)
throwing_axes_melee.set_hit_points(29696)
throwing_axes_melee.set_speed_rating(98)
throwing_axes_melee.set_weapon_length(53)
throwing_axes_melee.set_swing_damage(29, 0)


heavy_throwing_axes = Item("heavy_throwing_axes", "Heavy_Throwing_Axes")
heavy_throwing_axes.add_mesh(ItemMesh("throwing_axe_b"))
heavy_throwing_axes.add_flag(ItemType.THROWN)
heavy_throwing_axes.add_flag(ItemFlag.IS_MERCHANDISE)
heavy_throwing_axes.add_flag(ItemFlag.IS_PRIMARY)
heavy_throwing_axes.add_flag(ItemFlag.IS_CIVILIAN)
heavy_throwing_axes.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
heavy_throwing_axes.add_capability(ItemCapability.THROW_STONE)
heavy_throwing_axes.add_capability(ItemCapability.THROW_KNIFE)
heavy_throwing_axes.add_capability(ItemCapability.THROW_AXE)
heavy_throwing_axes.set_price(620)
heavy_throwing_axes.add_modifier(IModBit.BENT)
heavy_throwing_axes.add_modifier(IModBit.BALANCED)
heavy_throwing_axes.add_modifier(IModBit.LARGE_BAG)
heavy_throwing_axes.set_weight(5.0)
heavy_throwing_axes.set_abundance(100)
heavy_throwing_axes.set_difficulty(4)
heavy_throwing_axes.set_speed_rating(97)
heavy_throwing_axes.set_missile_speed(18)
heavy_throwing_axes.set_weapon_length(53)
heavy_throwing_axes.set_max_ammo(4)
heavy_throwing_axes.set_thrust_damage(44, 0)


heavy_throwing_axes_melee = Item("heavy_throwing_axes_melee", "Heavy_Throwing_Axe")
heavy_throwing_axes_melee.add_mesh(ItemMesh("throwing_axe_b"))
heavy_throwing_axes_melee.add_flag(ItemType.ONE_HANDED_WEAPON)
heavy_throwing_axes_melee.add_flag(ItemFlag.IS_PRIMARY)
heavy_throwing_axes_melee.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
heavy_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_OVERSWING)
heavy_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
heavy_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
heavy_throwing_axes_melee.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
heavy_throwing_axes_melee.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
heavy_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
heavy_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
heavy_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
heavy_throwing_axes_melee.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
heavy_throwing_axes_melee.add_capability(ItemCapability.FORCE_64_BITS)
heavy_throwing_axes_melee.set_price(620)
heavy_throwing_axes_melee.add_modifier(IModBit.BENT)
heavy_throwing_axes_melee.add_modifier(IModBit.BALANCED)
heavy_throwing_axes_melee.add_modifier(IModBit.LARGE_BAG)
heavy_throwing_axes_melee.set_weight(1.0)
heavy_throwing_axes_melee.set_abundance(100)
heavy_throwing_axes_melee.set_difficulty(4)
heavy_throwing_axes_melee.set_hit_points(32768)
heavy_throwing_axes_melee.set_speed_rating(97)
heavy_throwing_axes_melee.set_weapon_length(53)
heavy_throwing_axes_melee.set_swing_damage(32, 0)


hunting_bow = Item("hunting_bow", "Hunting_Bow")
hunting_bow.add_mesh(ItemMesh("hunting_bow"))
hunting_bow.add_mesh(ItemMesh("hunting_bow_carry", ItemMesh.ixmesh_carry))
hunting_bow.add_flag(ItemType.BOW)
hunting_bow.add_flag(ItemFlag.IS_MERCHANDISE)
hunting_bow.add_flag(ItemFlag.IS_TWO_HANDED)
hunting_bow.add_flag(ItemFlag.IS_PRIMARY)
hunting_bow.add_capability(ItemCapability.SHOOT_BOW)
hunting_bow.add_capability(ItemCapability.CARRY_BOW_BACK)
hunting_bow.set_price(17)
hunting_bow.add_modifier(IModBit.CRACKED)
hunting_bow.add_modifier(IModBit.BENT)
hunting_bow.add_modifier(IModBit.MASTERWORK)
hunting_bow.add_modifier(IModBit.STRONG)
hunting_bow.set_weight(1.0)
hunting_bow.set_abundance(100)
hunting_bow.set_speed_rating(100)
hunting_bow.set_missile_speed(52)
hunting_bow.set_thrust_damage(15, 1)


short_bow = Item("short_bow", "Short_Bow")
short_bow.add_mesh(ItemMesh("short_bow"))
short_bow.add_mesh(ItemMesh("short_bow_carry", ItemMesh.ixmesh_carry))
short_bow.add_flag(ItemType.BOW)
short_bow.add_flag(ItemFlag.IS_MERCHANDISE)
short_bow.add_flag(ItemFlag.IS_TWO_HANDED)
short_bow.add_flag(ItemFlag.IS_PRIMARY)
short_bow.add_capability(ItemCapability.SHOOT_BOW)
short_bow.add_capability(ItemCapability.CARRY_BOW_BACK)
short_bow.set_price(58)
short_bow.add_modifier(IModBit.CRACKED)
short_bow.add_modifier(IModBit.BENT)
short_bow.add_modifier(IModBit.MASTERWORK)
short_bow.add_modifier(IModBit.STRONG)
short_bow.set_weight(1.0)
short_bow.set_abundance(100)
short_bow.set_difficulty(1)
short_bow.set_speed_rating(97)
short_bow.set_missile_speed(55)
short_bow.set_thrust_damage(18, 1)


nomad_bow = Item("nomad_bow", "Nomad_Bow")
nomad_bow.add_mesh(ItemMesh("nomad_bow"))
nomad_bow.add_mesh(ItemMesh("nomad_bow_case", ItemMesh.ixmesh_carry))
nomad_bow.add_flag(ItemType.BOW)
nomad_bow.add_flag(ItemFlag.IS_MERCHANDISE)
nomad_bow.add_flag(ItemFlag.IS_TWO_HANDED)
nomad_bow.add_flag(ItemFlag.IS_PRIMARY)
nomad_bow.add_capability(ItemCapability.SHOOT_BOW)
nomad_bow.add_capability(ItemCapability.CARRY_BOWCASE_LEFT)
nomad_bow.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
nomad_bow.set_price(164)
nomad_bow.add_modifier(IModBit.CRACKED)
nomad_bow.add_modifier(IModBit.BENT)
nomad_bow.add_modifier(IModBit.MASTERWORK)
nomad_bow.add_modifier(IModBit.STRONG)
nomad_bow.set_weight(1.25)
nomad_bow.set_abundance(100)
nomad_bow.set_difficulty(2)
nomad_bow.set_speed_rating(94)
nomad_bow.set_missile_speed(56)
nomad_bow.set_thrust_damage(20, 1)


long_bow = Item("long_bow", "Long_Bow")
long_bow.add_mesh(ItemMesh("long_bow"))
long_bow.add_mesh(ItemMesh("long_bow_carry", ItemMesh.ixmesh_carry))
long_bow.add_flag(ItemType.BOW)
long_bow.add_flag(ItemFlag.IS_MERCHANDISE)
long_bow.add_flag(ItemFlag.IS_TWO_HANDED)
long_bow.add_flag(ItemFlag.IS_PRIMARY)
long_bow.add_capability(ItemCapability.SHOOT_BOW)
long_bow.add_capability(ItemCapability.CARRY_BOW_BACK)
long_bow.set_price(145)
long_bow.add_modifier(IModBit.CRACKED)
long_bow.add_modifier(IModBit.BENT)
long_bow.add_modifier(IModBit.MASTERWORK)
long_bow.add_modifier(IModBit.STRONG)
long_bow.set_weight(1.75)
long_bow.set_abundance(100)
long_bow.set_difficulty(3)
long_bow.set_speed_rating(79)
long_bow.set_missile_speed(56)
long_bow.set_thrust_damage(22, 1)


khergit_bow = Item("khergit_bow", "Khergit_Bow")
khergit_bow.add_mesh(ItemMesh("khergit_bow"))
khergit_bow.add_mesh(ItemMesh("khergit_bow_case", ItemMesh.ixmesh_carry))
khergit_bow.add_flag(ItemType.BOW)
khergit_bow.add_flag(ItemFlag.IS_MERCHANDISE)
khergit_bow.add_flag(ItemFlag.IS_TWO_HANDED)
khergit_bow.add_flag(ItemFlag.IS_PRIMARY)
khergit_bow.add_capability(ItemCapability.SHOOT_BOW)
khergit_bow.add_capability(ItemCapability.CARRY_BOWCASE_LEFT)
khergit_bow.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
khergit_bow.set_price(269)
khergit_bow.add_modifier(IModBit.CRACKED)
khergit_bow.add_modifier(IModBit.BENT)
khergit_bow.add_modifier(IModBit.MASTERWORK)
khergit_bow.add_modifier(IModBit.STRONG)
khergit_bow.set_weight(1.25)
khergit_bow.set_abundance(100)
khergit_bow.set_difficulty(3)
khergit_bow.set_speed_rating(90)
khergit_bow.set_missile_speed(57)
khergit_bow.set_thrust_damage(21, 1)


strong_bow = Item("strong_bow", "Strong_Bow")
strong_bow.add_mesh(ItemMesh("strong_bow"))
strong_bow.add_mesh(ItemMesh("strong_bow_case", ItemMesh.ixmesh_carry))
strong_bow.add_flag(ItemType.BOW)
strong_bow.add_flag(ItemFlag.IS_MERCHANDISE)
strong_bow.add_flag(ItemFlag.IS_TWO_HANDED)
strong_bow.add_flag(ItemFlag.IS_PRIMARY)
strong_bow.add_capability(ItemCapability.SHOOT_BOW)
strong_bow.add_capability(ItemCapability.CARRY_BOWCASE_LEFT)
strong_bow.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
strong_bow.set_price(437)
strong_bow.add_modifier(IModBit.CRACKED)
strong_bow.add_modifier(IModBit.BENT)
strong_bow.add_modifier(IModBit.MASTERWORK)
strong_bow.set_weight(1.25)
strong_bow.set_abundance(100)
strong_bow.set_difficulty(3)
strong_bow.set_speed_rating(88)
strong_bow.set_missile_speed(58)
strong_bow.set_thrust_damage(23, 1)


war_bow = Item("war_bow", "War_Bow")
war_bow.add_mesh(ItemMesh("war_bow"))
war_bow.add_mesh(ItemMesh("war_bow_carry", ItemMesh.ixmesh_carry))
war_bow.add_flag(ItemType.BOW)
war_bow.add_flag(ItemFlag.IS_MERCHANDISE)
war_bow.add_flag(ItemFlag.IS_TWO_HANDED)
war_bow.add_flag(ItemFlag.IS_PRIMARY)
war_bow.add_capability(ItemCapability.SHOOT_BOW)
war_bow.add_capability(ItemCapability.CARRY_BOW_BACK)
war_bow.set_price(728)
war_bow.add_modifier(IModBit.CRACKED)
war_bow.add_modifier(IModBit.BENT)
war_bow.add_modifier(IModBit.MASTERWORK)
war_bow.add_modifier(IModBit.STRONG)
war_bow.set_weight(1.5)
war_bow.set_abundance(100)
war_bow.set_difficulty(4)
war_bow.set_speed_rating(84)
war_bow.set_missile_speed(59)
war_bow.set_thrust_damage(25, 1)


hunting_crossbow = Item("hunting_crossbow", "Hunting_Crossbow")
hunting_crossbow.add_mesh(ItemMesh("crossbow_a"))
hunting_crossbow.add_flag(ItemType.CROSSBOW)
hunting_crossbow.add_flag(ItemFlag.IS_MERCHANDISE)
hunting_crossbow.add_flag(ItemFlag.IS_TWO_HANDED)
hunting_crossbow.add_flag(ItemFlag.IS_PRIMARY)
hunting_crossbow.add_capability(ItemCapability.SHOOT_CROSSBOW)
hunting_crossbow.add_capability(ItemCapability.CARRY_CROSSBOW_BACK)
hunting_crossbow.set_price(22)
hunting_crossbow.add_modifier(IModBit.CRACKED)
hunting_crossbow.add_modifier(IModBit.BENT)
hunting_crossbow.add_modifier(IModBit.MASTERWORK)
hunting_crossbow.set_weight(2.25)
hunting_crossbow.set_abundance(100)
hunting_crossbow.set_speed_rating(47)
hunting_crossbow.set_missile_speed(50)
hunting_crossbow.set_max_ammo(1)
hunting_crossbow.set_thrust_damage(37, 1)


light_crossbow = Item("light_crossbow", "Light_Crossbow")
light_crossbow.add_mesh(ItemMesh("crossbow_b"))
light_crossbow.add_flag(ItemType.CROSSBOW)
light_crossbow.add_flag(ItemFlag.IS_MERCHANDISE)
light_crossbow.add_flag(ItemFlag.IS_TWO_HANDED)
light_crossbow.add_flag(ItemFlag.IS_PRIMARY)
light_crossbow.add_capability(ItemCapability.SHOOT_CROSSBOW)
light_crossbow.add_capability(ItemCapability.CARRY_CROSSBOW_BACK)
light_crossbow.set_price(67)
light_crossbow.add_modifier(IModBit.CRACKED)
light_crossbow.add_modifier(IModBit.BENT)
light_crossbow.add_modifier(IModBit.MASTERWORK)
light_crossbow.set_weight(2.5)
light_crossbow.set_abundance(100)
light_crossbow.set_difficulty(8)
light_crossbow.set_speed_rating(45)
light_crossbow.set_missile_speed(59)
light_crossbow.set_max_ammo(1)
light_crossbow.set_thrust_damage(44, 1)


crossbow = Item("crossbow", "Crossbow")
crossbow.add_mesh(ItemMesh("crossbow_a"))
crossbow.add_flag(ItemType.CROSSBOW)
crossbow.add_flag(ItemFlag.IS_MERCHANDISE)
crossbow.add_flag(ItemFlag.CANT_RELOAD_ON_HORSEBACK)
crossbow.add_flag(ItemFlag.IS_TWO_HANDED)
crossbow.add_flag(ItemFlag.IS_PRIMARY)
crossbow.add_capability(ItemCapability.SHOOT_CROSSBOW)
crossbow.add_capability(ItemCapability.CARRY_CROSSBOW_BACK)
crossbow.set_price(182)
crossbow.add_modifier(IModBit.CRACKED)
crossbow.add_modifier(IModBit.BENT)
crossbow.add_modifier(IModBit.MASTERWORK)
crossbow.set_weight(3.0)
crossbow.set_abundance(100)
crossbow.set_difficulty(8)
crossbow.set_speed_rating(43)
crossbow.set_missile_speed(66)
crossbow.set_max_ammo(1)
crossbow.set_thrust_damage(49, 1)


heavy_crossbow = Item("heavy_crossbow", "Heavy_Crossbow")
heavy_crossbow.add_mesh(ItemMesh("crossbow_c"))
heavy_crossbow.add_flag(ItemType.CROSSBOW)
heavy_crossbow.add_flag(ItemFlag.IS_MERCHANDISE)
heavy_crossbow.add_flag(ItemFlag.CANT_RELOAD_ON_HORSEBACK)
heavy_crossbow.add_flag(ItemFlag.IS_TWO_HANDED)
heavy_crossbow.add_flag(ItemFlag.IS_PRIMARY)
heavy_crossbow.add_capability(ItemCapability.SHOOT_CROSSBOW)
heavy_crossbow.add_capability(ItemCapability.CARRY_CROSSBOW_BACK)
heavy_crossbow.set_price(349)
heavy_crossbow.add_modifier(IModBit.CRACKED)
heavy_crossbow.add_modifier(IModBit.BENT)
heavy_crossbow.add_modifier(IModBit.MASTERWORK)
heavy_crossbow.set_weight(3.5)
heavy_crossbow.set_abundance(100)
heavy_crossbow.set_difficulty(9)
heavy_crossbow.set_speed_rating(41)
heavy_crossbow.set_missile_speed(68)
heavy_crossbow.set_max_ammo(1)
heavy_crossbow.set_thrust_damage(58, 1)


sniper_crossbow = Item("sniper_crossbow", "Siege_Crossbow")
sniper_crossbow.add_mesh(ItemMesh("crossbow_c"))
sniper_crossbow.add_flag(ItemType.CROSSBOW)
sniper_crossbow.add_flag(ItemFlag.IS_MERCHANDISE)
sniper_crossbow.add_flag(ItemFlag.CANT_RELOAD_ON_HORSEBACK)
sniper_crossbow.add_flag(ItemFlag.IS_TWO_HANDED)
sniper_crossbow.add_flag(ItemFlag.IS_PRIMARY)
sniper_crossbow.add_capability(ItemCapability.SHOOT_CROSSBOW)
sniper_crossbow.add_capability(ItemCapability.CARRY_CROSSBOW_BACK)
sniper_crossbow.set_price(683)
sniper_crossbow.add_modifier(IModBit.CRACKED)
sniper_crossbow.add_modifier(IModBit.BENT)
sniper_crossbow.add_modifier(IModBit.MASTERWORK)
sniper_crossbow.set_weight(3.75)
sniper_crossbow.set_abundance(100)
sniper_crossbow.set_difficulty(10)
sniper_crossbow.set_speed_rating(37)
sniper_crossbow.set_missile_speed(70)
sniper_crossbow.set_max_ammo(1)
sniper_crossbow.set_thrust_damage(63, 1)


flintlock_pistol = Item("flintlock_pistol", "Flintlock_Pistol")
flintlock_pistol.add_mesh(ItemMesh("flintlock_pistol"))
flintlock_pistol.add_flag(ItemType.PISTOL)
flintlock_pistol.add_flag(ItemFlag.IS_MERCHANDISE)
flintlock_pistol.add_flag(ItemFlag.IS_PRIMARY)
flintlock_pistol.add_capability(ItemCapability.THROW_STONE)
flintlock_pistol.add_capability(ItemCapability.THROW_KNIFE)
flintlock_pistol.add_capability(ItemCapability.THROW_AXE)
flintlock_pistol.add_capability(ItemCapability.THROW_JAVELIN)
flintlock_pistol.add_capability(ItemCapability.SHOOT_PISTOL)
flintlock_pistol.add_capability(ItemCapability.RELOAD_PISTOL)
flintlock_pistol.set_price(230)
flintlock_pistol.set_weight(1.5)
flintlock_pistol.set_abundance(100)
flintlock_pistol.set_leg_armor(65)
flintlock_pistol.set_speed_rating(38)
flintlock_pistol.set_missile_speed(160)
flintlock_pistol.set_max_ammo(1)
flintlock_pistol.set_thrust_damage(45, 1)
# -51.000000  4 600 1 1152921504606847102 720 2 1 27 721 2 1 36 1969 3 1008806316530991133 1 15


torch = Item("torch", "Torch")
torch.add_mesh(ItemMesh("club"))
torch.add_flag(ItemType.ONE_HANDED_WEAPON)
torch.add_flag(ItemFlag.IS_PRIMARY)
torch.add_capability(ItemCapability.ONEHANDED_OVERSWING)
torch.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
torch.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
torch.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
torch.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
torch.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
torch.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
torch.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
torch.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
torch.add_capability(ItemCapability.FORCE_64_BITS)
torch.set_price(11)
torch.set_weight(2.5)
torch.set_abundance(100)
torch.set_hit_points(11264)
torch.set_speed_rating(95)
torch.set_weapon_length(95)
torch.set_thrust_damage(0, 1)
torch.set_swing_damage(11, 2)
# -50.000000  5 1955 3 0 60 0 1965 1 1008806316530991114 1965 1 1008806316530991117 1950 3 150 130 70 1960 2 10 30


lyre = Item("lyre", "Lyre")
lyre.add_mesh(ItemMesh("lyre"))
lyre.add_flag(ItemType.SHIELD)
lyre.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
lyre.add_flag(ItemFlag.IS_CIVILIAN)
lyre.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
lyre.add_capability(ItemCapability.CARRY_BOW_BACK)
lyre.set_price(118)
lyre.set_weight(2.5)
lyre.set_abundance(100)
lyre.set_body_armor(1)
lyre.set_hit_points(480)
lyre.set_speed_rating(82)
lyre.set_weapon_length(90)


lute = Item("lute", "Lute")
lute.add_mesh(ItemMesh("lute"))
lute.add_flag(ItemType.SHIELD)
lute.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
lute.add_flag(ItemFlag.IS_CIVILIAN)
lute.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
lute.add_capability(ItemCapability.CARRY_BOW_BACK)
lute.set_price(118)
lute.set_weight(2.5)
lute.set_abundance(100)
lute.set_body_armor(1)
lute.set_hit_points(480)
lute.set_speed_rating(82)
lute.set_weapon_length(90)


strange_armor = Item("strange_armor", "Strange_Armor")
strange_armor.add_mesh(ItemMesh("samurai_armor"))
strange_armor.add_flag(ItemType.BODY_ARMOR)
strange_armor.add_flag(ItemFlag.COVERS_LEGS)
strange_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
strange_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
strange_armor.set_price(1259)
strange_armor.add_modifier(IModBit.RUSTY)
strange_armor.add_modifier(IModBit.BATTERED)
strange_armor.add_modifier(IModBit.CRUDE)
strange_armor.add_modifier(IModBit.THICK)
strange_armor.add_modifier(IModBit.REINFORCED)
strange_armor.add_modifier(IModBit.LORDLY)
strange_armor.set_weight(18.0)
strange_armor.set_abundance(100)
strange_armor.set_body_armor(38)
strange_armor.set_leg_armor(19)
strange_armor.set_difficulty(7)


strange_boots = Item("strange_boots", "Strange_Boots")
strange_boots.add_mesh(ItemMesh("samurai_boots"))
strange_boots.add_flag(ItemType.FOOT_ARMOR)
strange_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
strange_boots.set_price(465)
strange_boots.add_modifier(IModBit.TETTERED)
strange_boots.add_modifier(IModBit.RAGGED)
strange_boots.add_modifier(IModBit.STURDY)
strange_boots.add_modifier(IModBit.THICK)
strange_boots.add_modifier(IModBit.HARDENED)
strange_boots.set_weight(1.0)
strange_boots.set_abundance(100)
strange_boots.set_leg_armor(21)


strange_helmet = Item("strange_helmet", "Strange_Helmet")
strange_helmet.add_mesh(ItemMesh("samurai_helmet"))
strange_helmet.add_flag(ItemType.HEAD_ARMOR)
strange_helmet.set_price(824)
strange_helmet.add_modifier(IModBit.CRACKED)
strange_helmet.add_modifier(IModBit.RUSTY)
strange_helmet.add_modifier(IModBit.BATTERED)
strange_helmet.add_modifier(IModBit.CRUDE)
strange_helmet.add_modifier(IModBit.THICK)
strange_helmet.add_modifier(IModBit.REINFORCED)
strange_helmet.add_modifier(IModBit.LORDLY)
strange_helmet.set_weight(2.0)
strange_helmet.set_abundance(100)
strange_helmet.set_head_armor(44)
strange_helmet.set_difficulty(7)


strange_sword = Item("strange_sword", "Strange_Sword")
strange_sword.add_mesh(ItemMesh("katana"))
strange_sword.add_mesh(ItemMesh("katana_scabbard", ItemMesh.ixmesh_carry))
strange_sword.add_flag(ItemType.TWO_HANDED_WEAPON)
strange_sword.add_flag(ItemFlag.IS_PRIMARY)
strange_sword.add_capability(ItemCapability.ONEHANDED_TRUST)
strange_sword.add_capability(ItemCapability.ONEHANDED_OVERSWING)
strange_sword.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
strange_sword.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
strange_sword.add_capability(ItemCapability.TWOHANDED_THRUST)
strange_sword.add_capability(ItemCapability.TWOHANDED_OVERSWING)
strange_sword.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
strange_sword.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
strange_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
strange_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
strange_sword.add_capability(ItemCapability.CARRY_KATANA)
strange_sword.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
strange_sword.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
strange_sword.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
strange_sword.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
strange_sword.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
strange_sword.add_capability(ItemCapability.FORCE_64_BITS)
strange_sword.set_price(679)
strange_sword.add_modifier(IModBit.RUSTY)
strange_sword.add_modifier(IModBit.CHIPPED)
strange_sword.add_modifier(IModBit.BALANCED)
strange_sword.add_modifier(IModBit.TEMPERED)
strange_sword.set_weight(2.0)
strange_sword.set_abundance(100)
strange_sword.set_difficulty(9)
strange_sword.set_hit_points(32768)
strange_sword.set_speed_rating(108)
strange_sword.set_weapon_length(95)
strange_sword.set_thrust_damage(18, 1)
strange_sword.set_swing_damage(32, 0)


strange_great_sword = Item("strange_great_sword", "Strange_Great_Sword")
strange_great_sword.add_mesh(ItemMesh("no_dachi"))
strange_great_sword.add_mesh(ItemMesh("no_dachi_scabbard", ItemMesh.ixmesh_carry))
strange_great_sword.add_flag(ItemType.TWO_HANDED_WEAPON)
strange_great_sword.add_flag(ItemFlag.IS_TWO_HANDED)
strange_great_sword.add_flag(ItemFlag.IS_PRIMARY)
strange_great_sword.add_capability(ItemCapability.TWOHANDED_OVERSWING)
strange_great_sword.add_capability(ItemCapability.TWOHANDED_SLASHRIGHT)
strange_great_sword.add_capability(ItemCapability.TWOHANDED_SLASHLEFT)
strange_great_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
strange_great_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
strange_great_sword.add_capability(ItemCapability.CARRY_SWORD_BACK)
strange_great_sword.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
strange_great_sword.add_capability(ItemCapability.TWOHANDED_PARRY_FORWARD)
strange_great_sword.add_capability(ItemCapability.TWOHANDED_PARRY_UP)
strange_great_sword.add_capability(ItemCapability.TWOHANDED_PARRY_RIGHT)
strange_great_sword.add_capability(ItemCapability.TWOHANDED_PARRY_LEFT)
strange_great_sword.add_capability(ItemCapability.FORCE_64_BITS)
strange_great_sword.set_price(920)
strange_great_sword.add_modifier(IModBit.RUSTY)
strange_great_sword.add_modifier(IModBit.CHIPPED)
strange_great_sword.add_modifier(IModBit.HEAVY)
strange_great_sword.set_weight(3.5)
strange_great_sword.set_abundance(100)
strange_great_sword.set_difficulty(11)
strange_great_sword.set_hit_points(38912)
strange_great_sword.set_speed_rating(92)
strange_great_sword.set_weapon_length(125)
strange_great_sword.set_thrust_damage(0, 1)
strange_great_sword.set_swing_damage(38, 0)


strange_short_sword = Item("strange_short_sword", "Strange_Short_Sword")
strange_short_sword.add_mesh(ItemMesh("wakizashi"))
strange_short_sword.add_mesh(ItemMesh("wakizashi_scabbard", ItemMesh.ixmesh_carry))
strange_short_sword.add_flag(ItemType.ONE_HANDED_WEAPON)
strange_short_sword.add_flag(ItemFlag.IS_PRIMARY)
strange_short_sword.add_capability(ItemCapability.ONEHANDED_TRUST)
strange_short_sword.add_capability(ItemCapability.ONEHANDED_OVERSWING)
strange_short_sword.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
strange_short_sword.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
strange_short_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
strange_short_sword.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
strange_short_sword.add_capability(ItemCapability.CARRY_WAKIZASHI)
strange_short_sword.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
strange_short_sword.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
strange_short_sword.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
strange_short_sword.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
strange_short_sword.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
strange_short_sword.add_capability(ItemCapability.FORCE_64_BITS)
strange_short_sword.set_price(321)
strange_short_sword.add_modifier(IModBit.RUSTY)
strange_short_sword.add_modifier(IModBit.CHIPPED)
strange_short_sword.add_modifier(IModBit.BALANCED)
strange_short_sword.add_modifier(IModBit.TEMPERED)
strange_short_sword.set_weight(1.25)
strange_short_sword.set_abundance(100)
strange_short_sword.set_hit_points(25600)
strange_short_sword.set_speed_rating(108)
strange_short_sword.set_weapon_length(65)
strange_short_sword.set_thrust_damage(19, 1)
strange_short_sword.set_swing_damage(25, 0)


court_dress = Item("court_dress", "Court_Dress")
court_dress.add_mesh(ItemMesh("court_dress"))
court_dress.add_flag(ItemType.BODY_ARMOR)
court_dress.add_flag(ItemFlag.COVERS_LEGS)
court_dress.add_flag(ItemFlag.DOESNT_COVER_HAIR)
court_dress.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
court_dress.add_flag(ItemFlag.IS_CIVILIAN)
court_dress.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
court_dress.set_price(348)
court_dress.add_modifier(IModBit.TETTERED)
court_dress.add_modifier(IModBit.RAGGED)
court_dress.add_modifier(IModBit.STURDY)
court_dress.add_modifier(IModBit.THICK)
court_dress.add_modifier(IModBit.HARDENED)
court_dress.set_weight(4.0)
court_dress.set_abundance(100)
court_dress.set_body_armor(14)
court_dress.set_leg_armor(4)


rich_outfit = Item("rich_outfit", "Rich_Outfit")
rich_outfit.add_mesh(ItemMesh("merchant_outf"))
rich_outfit.add_flag(ItemType.BODY_ARMOR)
rich_outfit.add_flag(ItemFlag.COVERS_LEGS)
rich_outfit.add_flag(ItemFlag.DOESNT_COVER_HAIR)
rich_outfit.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
rich_outfit.add_flag(ItemFlag.IS_CIVILIAN)
rich_outfit.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
rich_outfit.set_price(348)
rich_outfit.add_modifier(IModBit.TETTERED)
rich_outfit.add_modifier(IModBit.RAGGED)
rich_outfit.add_modifier(IModBit.STURDY)
rich_outfit.add_modifier(IModBit.THICK)
rich_outfit.add_modifier(IModBit.HARDENED)
rich_outfit.set_weight(4.0)
rich_outfit.set_abundance(100)
rich_outfit.set_body_armor(16)
rich_outfit.set_leg_armor(4)


khergit_guard_armor = Item("khergit_guard_armor", "Khergit_Guard_Armor")
khergit_guard_armor.add_mesh(ItemMesh("lamellar_armor_a"))
khergit_guard_armor.add_flag(ItemType.BODY_ARMOR)
khergit_guard_armor.add_flag(ItemFlag.COVERS_LEGS)
khergit_guard_armor.add_flag(ItemFlag.DOESNT_COVER_HAIR)
khergit_guard_armor.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
khergit_guard_armor.set_price(3048)
khergit_guard_armor.add_modifier(IModBit.RUSTY)
khergit_guard_armor.add_modifier(IModBit.BATTERED)
khergit_guard_armor.add_modifier(IModBit.CRUDE)
khergit_guard_armor.add_modifier(IModBit.THICK)
khergit_guard_armor.add_modifier(IModBit.REINFORCED)
khergit_guard_armor.add_modifier(IModBit.LORDLY)
khergit_guard_armor.set_weight(25.0)
khergit_guard_armor.set_abundance(100)
khergit_guard_armor.set_body_armor(50)
khergit_guard_armor.set_leg_armor(18)


felt_steppe_cap = Item("felt_steppe_cap", "Felt_Steppe_Cap")
felt_steppe_cap.add_mesh(ItemMesh("felt_steppe_cap"))
felt_steppe_cap.add_flag(ItemType.HEAD_ARMOR)
felt_steppe_cap.set_price(237)
felt_steppe_cap.add_modifier(IModBit.TETTERED)
felt_steppe_cap.add_modifier(IModBit.RAGGED)
felt_steppe_cap.add_modifier(IModBit.STURDY)
felt_steppe_cap.add_modifier(IModBit.THICK)
felt_steppe_cap.add_modifier(IModBit.HARDENED)
felt_steppe_cap.set_weight(2.0)
felt_steppe_cap.set_abundance(100)
felt_steppe_cap.set_head_armor(16)


khergit_war_helmet = Item("khergit_war_helmet", "Khergit_War_Helmet")
khergit_war_helmet.add_mesh(ItemMesh("tattered_steppe_cap_a_new"))
khergit_war_helmet.add_flag(ItemType.HEAD_ARMOR)
khergit_war_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
khergit_war_helmet.set_price(200)
khergit_war_helmet.add_modifier(IModBit.TETTERED)
khergit_war_helmet.add_modifier(IModBit.RAGGED)
khergit_war_helmet.add_modifier(IModBit.STURDY)
khergit_war_helmet.add_modifier(IModBit.THICK)
khergit_war_helmet.add_modifier(IModBit.HARDENED)
khergit_war_helmet.set_weight(2.0)
khergit_war_helmet.set_abundance(100)
khergit_war_helmet.set_head_armor(31)


khergit_helmet = Item("khergit_helmet", "Khergit_Helmet")
khergit_helmet.add_mesh(ItemMesh("khergit_guard_helmet"))
khergit_helmet.add_flag(ItemType.HEAD_ARMOR)
khergit_helmet.set_price(361)
khergit_helmet.add_modifier(IModBit.TETTERED)
khergit_helmet.add_modifier(IModBit.RAGGED)
khergit_helmet.add_modifier(IModBit.STURDY)
khergit_helmet.add_modifier(IModBit.THICK)
khergit_helmet.add_modifier(IModBit.HARDENED)
khergit_helmet.set_weight(2.0)
khergit_helmet.set_abundance(100)
khergit_helmet.set_head_armor(33)


khergit_guard_boots = Item("khergit_guard_boots", "Khergit_Guard_Boots")
khergit_guard_boots.add_mesh(ItemMesh("lamellar_boots_a"))
khergit_guard_boots.add_flag(ItemType.FOOT_ARMOR)
khergit_guard_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
khergit_guard_boots.set_price(254)
khergit_guard_boots.add_modifier(IModBit.TETTERED)
khergit_guard_boots.add_modifier(IModBit.RAGGED)
khergit_guard_boots.add_modifier(IModBit.STURDY)
khergit_guard_boots.add_modifier(IModBit.THICK)
khergit_guard_boots.add_modifier(IModBit.HARDENED)
khergit_guard_boots.set_weight(1.0)
khergit_guard_boots.set_abundance(100)
khergit_guard_boots.set_leg_armor(20)


khergit_guard_helmet = Item("khergit_guard_helmet", "Khergit_Guard_Helmet")
khergit_guard_helmet.add_mesh(ItemMesh("lamellar_helmet_a"))
khergit_guard_helmet.add_flag(ItemType.HEAD_ARMOR)
khergit_guard_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
khergit_guard_helmet.set_price(433)
khergit_guard_helmet.add_modifier(IModBit.TETTERED)
khergit_guard_helmet.add_modifier(IModBit.RAGGED)
khergit_guard_helmet.add_modifier(IModBit.STURDY)
khergit_guard_helmet.add_modifier(IModBit.THICK)
khergit_guard_helmet.add_modifier(IModBit.HARDENED)
khergit_guard_helmet.set_weight(2.0)
khergit_guard_helmet.set_abundance(100)
khergit_guard_helmet.set_head_armor(40)


khergit_cavalry_helmet = Item("khergit_cavalry_helmet", "Khergit_Cavalry_Helmet")
khergit_cavalry_helmet.add_mesh(ItemMesh("lamellar_helmet_b"))
khergit_cavalry_helmet.add_flag(ItemType.HEAD_ARMOR)
khergit_cavalry_helmet.add_flag(ItemFlag.IS_MERCHANDISE)
khergit_cavalry_helmet.set_price(333)
khergit_cavalry_helmet.add_modifier(IModBit.TETTERED)
khergit_cavalry_helmet.add_modifier(IModBit.RAGGED)
khergit_cavalry_helmet.add_modifier(IModBit.STURDY)
khergit_cavalry_helmet.add_modifier(IModBit.THICK)
khergit_cavalry_helmet.add_modifier(IModBit.HARDENED)
khergit_cavalry_helmet.set_weight(2.0)
khergit_cavalry_helmet.set_abundance(100)
khergit_cavalry_helmet.set_head_armor(36)


black_hood = Item("black_hood", "Black_Hood")
black_hood.add_mesh(ItemMesh("hood_black"))
black_hood.add_flag(ItemType.HEAD_ARMOR)
black_hood.add_flag(ItemFlag.IS_MERCHANDISE)
black_hood.set_price(193)
black_hood.add_modifier(IModBit.TETTERED)
black_hood.add_modifier(IModBit.RAGGED)
black_hood.add_modifier(IModBit.STURDY)
black_hood.add_modifier(IModBit.THICK)
black_hood.add_modifier(IModBit.HARDENED)
black_hood.set_weight(2.0)
black_hood.set_abundance(100)
black_hood.set_head_armor(18)


light_leather = Item("light_leather", "Light_Leather")
light_leather.add_mesh(ItemMesh("light_leather"))
light_leather.add_flag(ItemType.BODY_ARMOR)
light_leather.add_flag(ItemFlag.IS_MERCHANDISE)
light_leather.add_flag(ItemFlag.COVERS_LEGS)
light_leather.add_flag(ItemFlag.DOESNT_COVER_HAIR)
light_leather.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
light_leather.set_price(352)
light_leather.add_modifier(IModBit.RUSTY)
light_leather.add_modifier(IModBit.BATTERED)
light_leather.add_modifier(IModBit.CRUDE)
light_leather.add_modifier(IModBit.THICK)
light_leather.add_modifier(IModBit.REINFORCED)
light_leather.add_modifier(IModBit.LORDLY)
light_leather.set_weight(5.0)
light_leather.set_abundance(100)
light_leather.set_body_armor(26)
light_leather.set_leg_armor(7)


light_leather_boots = Item("light_leather_boots", "Light_Leather_Boots")
light_leather_boots.add_mesh(ItemMesh("light_leather_boots"))
light_leather_boots.add_flag(ItemType.FOOT_ARMOR)
light_leather_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
light_leather_boots.add_flag(ItemFlag.IS_MERCHANDISE)
light_leather_boots.set_price(91)
light_leather_boots.add_modifier(IModBit.TETTERED)
light_leather_boots.add_modifier(IModBit.RAGGED)
light_leather_boots.add_modifier(IModBit.STURDY)
light_leather_boots.add_modifier(IModBit.THICK)
light_leather_boots.add_modifier(IModBit.HARDENED)
light_leather_boots.set_weight(1.0)
light_leather_boots.set_abundance(100)
light_leather_boots.set_leg_armor(15)


mail_and_plate = Item("mail_and_plate", "Mail_and_Plate")
mail_and_plate.add_mesh(ItemMesh("mail_and_plate"))
mail_and_plate.add_flag(ItemType.BODY_ARMOR)
mail_and_plate.add_flag(ItemFlag.COVERS_LEGS)
mail_and_plate.add_flag(ItemFlag.DOESNT_COVER_HAIR)
mail_and_plate.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
mail_and_plate.set_price(593)
mail_and_plate.add_modifier(IModBit.RUSTY)
mail_and_plate.add_modifier(IModBit.BATTERED)
mail_and_plate.add_modifier(IModBit.CRUDE)
mail_and_plate.add_modifier(IModBit.THICK)
mail_and_plate.add_modifier(IModBit.REINFORCED)
mail_and_plate.add_modifier(IModBit.LORDLY)
mail_and_plate.set_weight(16.0)
mail_and_plate.set_abundance(100)
mail_and_plate.set_body_armor(34)
mail_and_plate.set_leg_armor(12)


light_mail_and_plate = Item("light_mail_and_plate", "Light_Mail_and_Plate")
light_mail_and_plate.add_mesh(ItemMesh("light_mail_and_plate"))
light_mail_and_plate.add_flag(ItemType.BODY_ARMOR)
light_mail_and_plate.add_flag(ItemFlag.COVERS_LEGS)
light_mail_and_plate.add_flag(ItemFlag.DOESNT_COVER_HAIR)
light_mail_and_plate.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
light_mail_and_plate.set_price(532)
light_mail_and_plate.add_modifier(IModBit.RUSTY)
light_mail_and_plate.add_modifier(IModBit.BATTERED)
light_mail_and_plate.add_modifier(IModBit.CRUDE)
light_mail_and_plate.add_modifier(IModBit.THICK)
light_mail_and_plate.add_modifier(IModBit.REINFORCED)
light_mail_and_plate.add_modifier(IModBit.LORDLY)
light_mail_and_plate.set_weight(10.0)
light_mail_and_plate.set_abundance(100)
light_mail_and_plate.set_body_armor(32)
light_mail_and_plate.set_leg_armor(12)


byzantion_helmet_a = Item("byzantion_helmet_a", "Byzantion_Helmet")
byzantion_helmet_a.add_mesh(ItemMesh("byzantion_helmet_a"))
byzantion_helmet_a.add_flag(ItemType.HEAD_ARMOR)
byzantion_helmet_a.set_price(278)
byzantion_helmet_a.add_modifier(IModBit.TETTERED)
byzantion_helmet_a.add_modifier(IModBit.RAGGED)
byzantion_helmet_a.add_modifier(IModBit.STURDY)
byzantion_helmet_a.add_modifier(IModBit.THICK)
byzantion_helmet_a.add_modifier(IModBit.HARDENED)
byzantion_helmet_a.set_weight(2.0)
byzantion_helmet_a.set_abundance(100)
byzantion_helmet_a.set_head_armor(20)


magyar_helmet_a = Item("magyar_helmet_a", "Magyar_Helmet")
magyar_helmet_a.add_mesh(ItemMesh("magyar_helmet_a"))
magyar_helmet_a.add_flag(ItemType.HEAD_ARMOR)
magyar_helmet_a.set_price(278)
magyar_helmet_a.add_modifier(IModBit.TETTERED)
magyar_helmet_a.add_modifier(IModBit.RAGGED)
magyar_helmet_a.add_modifier(IModBit.STURDY)
magyar_helmet_a.add_modifier(IModBit.THICK)
magyar_helmet_a.add_modifier(IModBit.HARDENED)
magyar_helmet_a.set_weight(2.0)
magyar_helmet_a.set_abundance(100)
magyar_helmet_a.set_head_armor(20)


rus_helmet_a = Item("rus_helmet_a", "Rus_Helmet")
rus_helmet_a.add_mesh(ItemMesh("rus_helmet_a"))
rus_helmet_a.add_flag(ItemType.HEAD_ARMOR)
rus_helmet_a.set_price(278)
rus_helmet_a.add_modifier(IModBit.TETTERED)
rus_helmet_a.add_modifier(IModBit.RAGGED)
rus_helmet_a.add_modifier(IModBit.STURDY)
rus_helmet_a.add_modifier(IModBit.THICK)
rus_helmet_a.add_modifier(IModBit.HARDENED)
rus_helmet_a.set_weight(2.0)
rus_helmet_a.set_abundance(100)
rus_helmet_a.set_head_armor(20)


sipahi_helmet_a = Item("sipahi_helmet_a", "Sipahi_Helmet")
sipahi_helmet_a.add_mesh(ItemMesh("sipahi_helmet_a"))
sipahi_helmet_a.add_flag(ItemType.HEAD_ARMOR)
sipahi_helmet_a.set_price(278)
sipahi_helmet_a.add_modifier(IModBit.TETTERED)
sipahi_helmet_a.add_modifier(IModBit.RAGGED)
sipahi_helmet_a.add_modifier(IModBit.STURDY)
sipahi_helmet_a.add_modifier(IModBit.THICK)
sipahi_helmet_a.add_modifier(IModBit.HARDENED)
sipahi_helmet_a.set_weight(2.0)
sipahi_helmet_a.set_abundance(100)
sipahi_helmet_a.set_head_armor(20)


shahi = Item("shahi", "Shahi")
shahi.add_mesh(ItemMesh("shahi"))
shahi.add_flag(ItemType.HEAD_ARMOR)
shahi.set_price(278)
shahi.add_modifier(IModBit.TETTERED)
shahi.add_modifier(IModBit.RAGGED)
shahi.add_modifier(IModBit.STURDY)
shahi.add_modifier(IModBit.THICK)
shahi.add_modifier(IModBit.HARDENED)
shahi.set_weight(2.0)
shahi.set_abundance(100)
shahi.set_head_armor(20)


rabati = Item("rabati", "Rabati")
rabati.add_mesh(ItemMesh("rabati"))
rabati.add_flag(ItemType.HEAD_ARMOR)
rabati.set_price(278)
rabati.add_modifier(IModBit.TETTERED)
rabati.add_modifier(IModBit.RAGGED)
rabati.add_modifier(IModBit.STURDY)
rabati.add_modifier(IModBit.THICK)
rabati.add_modifier(IModBit.HARDENED)
rabati.set_weight(2.0)
rabati.set_abundance(100)
rabati.set_head_armor(20)


tunic_with_green_cape = Item("tunic_with_green_cape", "Tunic_with_Green_Cape")
tunic_with_green_cape.add_mesh(ItemMesh("peasant_man_a"))
tunic_with_green_cape.add_flag(ItemType.BODY_ARMOR)
tunic_with_green_cape.add_flag(ItemFlag.IS_MERCHANDISE)
tunic_with_green_cape.add_flag(ItemFlag.COVERS_LEGS)
tunic_with_green_cape.add_flag(ItemFlag.DOESNT_COVER_HAIR)
tunic_with_green_cape.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
tunic_with_green_cape.add_flag(ItemFlag.IS_CIVILIAN)
tunic_with_green_cape.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
tunic_with_green_cape.set_price(6)
tunic_with_green_cape.add_modifier(IModBit.TETTERED)
tunic_with_green_cape.add_modifier(IModBit.RAGGED)
tunic_with_green_cape.add_modifier(IModBit.STURDY)
tunic_with_green_cape.add_modifier(IModBit.THICK)
tunic_with_green_cape.add_modifier(IModBit.HARDENED)
tunic_with_green_cape.set_weight(1.0)
tunic_with_green_cape.set_abundance(100)
tunic_with_green_cape.set_body_armor(6)
tunic_with_green_cape.set_leg_armor(2)


keys = Item("keys", "Ring_of_Keys")
keys.add_mesh(ItemMesh("throwing_axe_a"))
keys.add_flag(ItemType.ONE_HANDED_WEAPON)
keys.add_flag(ItemFlag.IS_PRIMARY)
keys.add_flag(ItemFlag.HAS_BONUS_AGAINST_SHIELD)
keys.add_capability(ItemCapability.ONEHANDED_OVERSWING)
keys.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
keys.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
keys.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
keys.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
keys.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
keys.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
keys.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
keys.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
keys.add_capability(ItemCapability.FORCE_64_BITS)
keys.set_price(240)
keys.add_modifier(IModBit.BENT)
keys.add_modifier(IModBit.BALANCED)
keys.add_modifier(IModBit.HEAVY)
keys.add_modifier(IModBit.LARGE_BAG)
keys.set_weight(5.0)
keys.set_abundance(100)
keys.set_hit_points(29696)
keys.set_speed_rating(98)
keys.set_weapon_length(53)
keys.set_max_ammo(5)
keys.set_swing_damage(29, 0)


bride_dress = Item("bride_dress", "Bride_Dress")
bride_dress.add_mesh(ItemMesh("bride_dress"))
bride_dress.add_flag(ItemType.BODY_ARMOR)
bride_dress.add_flag(ItemFlag.COVERS_LEGS)
bride_dress.add_flag(ItemFlag.DOESNT_COVER_HAIR)
bride_dress.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
bride_dress.add_flag(ItemFlag.IS_CIVILIAN)
bride_dress.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
bride_dress.set_price(500)
bride_dress.add_modifier(IModBit.TETTERED)
bride_dress.add_modifier(IModBit.RAGGED)
bride_dress.add_modifier(IModBit.STURDY)
bride_dress.add_modifier(IModBit.THICK)
bride_dress.add_modifier(IModBit.HARDENED)
bride_dress.set_weight(3.0)
bride_dress.set_abundance(100)
bride_dress.set_body_armor(10)
bride_dress.set_leg_armor(10)


bride_crown = Item("bride_crown", "Crown_of_Flowers")
bride_crown.add_mesh(ItemMesh("bride_crown"))
bride_crown.add_flag(ItemType.HEAD_ARMOR)
bride_crown.add_flag(ItemFlag.ATTACH_ARMATURE)
bride_crown.add_flag(ItemFlag.COVERS_LEGS)
bride_crown.add_flag(ItemFlag.DOESNT_COVER_HAIR)
bride_crown.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
bride_crown.add_flag(ItemFlag.IS_CIVILIAN)
bride_crown.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
bride_crown.set_price(1)
bride_crown.add_modifier(IModBit.TETTERED)
bride_crown.add_modifier(IModBit.RAGGED)
bride_crown.add_modifier(IModBit.STURDY)
bride_crown.add_modifier(IModBit.THICK)
bride_crown.add_modifier(IModBit.HARDENED)
bride_crown.set_weight(0.5)
bride_crown.set_abundance(100)
bride_crown.set_head_armor(4)


bride_shoes = Item("bride_shoes", "Bride_Shoes")
bride_shoes.add_mesh(ItemMesh("bride_shoes"))
bride_shoes.add_flag(ItemType.FOOT_ARMOR)
bride_shoes.add_flag(ItemFlag.ATTACH_ARMATURE)
bride_shoes.add_flag(ItemFlag.IS_CIVILIAN)
bride_shoes.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
bride_shoes.set_price(30)
bride_shoes.add_modifier(IModBit.TETTERED)
bride_shoes.add_modifier(IModBit.RAGGED)
bride_shoes.add_modifier(IModBit.STURDY)
bride_shoes.add_modifier(IModBit.THICK)
bride_shoes.add_modifier(IModBit.HARDENED)
bride_shoes.set_weight(1.0)
bride_shoes.set_abundance(100)
bride_shoes.set_leg_armor(8)


practice_bow_2 = Item("practice_bow_2", "Practice_Bow")
practice_bow_2.add_mesh(ItemMesh("hunting_bow"))
practice_bow_2.add_mesh(ItemMesh("hunting_bow_carry", ItemMesh.ixmesh_carry))
practice_bow_2.add_flag(ItemType.BOW)
practice_bow_2.add_flag(ItemFlag.IS_TWO_HANDED)
practice_bow_2.add_flag(ItemFlag.IS_PRIMARY)
practice_bow_2.add_capability(ItemCapability.SHOOT_BOW)
practice_bow_2.add_capability(ItemCapability.CARRY_BOW_BACK)
practice_bow_2.add_modifier(IModBit.CRACKED)
practice_bow_2.add_modifier(IModBit.BENT)
practice_bow_2.add_modifier(IModBit.MASTERWORK)
practice_bow_2.add_modifier(IModBit.STRONG)
practice_bow_2.set_weight(1.5)
practice_bow_2.set_abundance(100)
practice_bow_2.set_speed_rating(90)
practice_bow_2.set_missile_speed(40)
practice_bow_2.set_thrust_damage(21, 2)


practice_arrows_2 = Item("practice_arrows_2", "Practice_Arrows")
practice_arrows_2.add_mesh(ItemMesh("arena_arrow"))
practice_arrows_2.add_mesh(ItemMesh("flying_missile", ItemMesh.ixmesh_flying_ammo))
practice_arrows_2.add_mesh(ItemMesh("quiver", ItemMesh.ixmesh_carry))
practice_arrows_2.add_flag(ItemType.ARROWS)
practice_arrows_2.add_capability(ItemCapability.CARRY_QUIVER_BACK)
practice_arrows_2.add_modifier(IModBit.BENT)
practice_arrows_2.add_modifier(IModBit.LARGE_BAG)
practice_arrows_2.set_weight(1.5)
practice_arrows_2.set_abundance(100)
practice_arrows_2.set_weapon_length(95)
practice_arrows_2.set_max_ammo(80)


plate_boots = Item("plate_boots", "Plate_Boots")
plate_boots.add_mesh(ItemMesh("plate_boots"))
plate_boots.add_flag(ItemType.FOOT_ARMOR)
plate_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
plate_boots.add_flag(ItemFlag.IS_MERCHANDISE)
plate_boots.set_price(1770)
plate_boots.add_modifier(IModBit.CRACKED)
plate_boots.add_modifier(IModBit.RUSTY)
plate_boots.add_modifier(IModBit.BATTERED)
plate_boots.add_modifier(IModBit.CRUDE)
plate_boots.add_modifier(IModBit.THICK)
plate_boots.add_modifier(IModBit.REINFORCED)
plate_boots.add_modifier(IModBit.LORDLY)
plate_boots.set_weight(3.5)
plate_boots.set_abundance(100)
plate_boots.set_leg_armor(33)
plate_boots.set_difficulty(9)


heraldic_mail_with_surcoat_for_tableau = Item("heraldic_mail_with_surcoat_for_tableau", "{!}Heraldic_Mail_with_Surcoat")
heraldic_mail_with_surcoat_for_tableau.add_mesh(ItemMesh("heraldic_armor_new_a"))
heraldic_mail_with_surcoat_for_tableau.add_flag(ItemType.BODY_ARMOR)
heraldic_mail_with_surcoat_for_tableau.add_flag(ItemFlag.COVERS_LEGS)
heraldic_mail_with_surcoat_for_tableau.add_flag(ItemFlag.DOESNT_COVER_HAIR)
heraldic_mail_with_surcoat_for_tableau.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
heraldic_mail_with_surcoat_for_tableau.set_price(1)
heraldic_mail_with_surcoat_for_tableau.add_modifier(IModBit.RUSTY)
heraldic_mail_with_surcoat_for_tableau.add_modifier(IModBit.BATTERED)
heraldic_mail_with_surcoat_for_tableau.add_modifier(IModBit.CRUDE)
heraldic_mail_with_surcoat_for_tableau.add_modifier(IModBit.THICK)
heraldic_mail_with_surcoat_for_tableau.add_modifier(IModBit.REINFORCED)
heraldic_mail_with_surcoat_for_tableau.add_modifier(IModBit.LORDLY)
heraldic_mail_with_surcoat_for_tableau.set_weight(22.0)
heraldic_mail_with_surcoat_for_tableau.set_abundance(100)
heraldic_mail_with_surcoat_for_tableau.set_body_armor(1)
heraldic_mail_with_surcoat_for_tableau.set_leg_armor(1)
# -50.000000  3 2071 1 1224979098644774912 2072 1 1224979098644774913 1 4 936748722493063579 1729382256910270485 1224979098644774912 1224979098644774913


mail_boots_for_tableau = Item("mail_boots_for_tableau", "Mail_Boots")
mail_boots_for_tableau.add_mesh(ItemMesh("mail_boots_a"))
mail_boots_for_tableau.add_flag(ItemType.FOOT_ARMOR)
mail_boots_for_tableau.add_flag(ItemFlag.ATTACH_ARMATURE)
mail_boots_for_tableau.set_price(1)
mail_boots_for_tableau.add_modifier(IModBit.RUSTY)
mail_boots_for_tableau.add_modifier(IModBit.BATTERED)
mail_boots_for_tableau.add_modifier(IModBit.CRUDE)
mail_boots_for_tableau.add_modifier(IModBit.THICK)
mail_boots_for_tableau.add_modifier(IModBit.REINFORCED)
mail_boots_for_tableau.add_modifier(IModBit.LORDLY)
mail_boots_for_tableau.set_weight(3.0)
mail_boots_for_tableau.set_abundance(100)
mail_boots_for_tableau.set_leg_armor(1)


warhorse_sarranid = Item("warhorse_sarranid", "Sarranian_War_Horse")
warhorse_sarranid.add_mesh(ItemMesh("warhorse_sarranid"))
warhorse_sarranid.add_flag(ItemType.HORSE)
warhorse_sarranid.add_flag(ItemFlag.IS_MERCHANDISE)
warhorse_sarranid.set_price(1811)
warhorse_sarranid.add_modifier(IModBit.HEAVY)
warhorse_sarranid.add_modifier(IModBit.LAME)
warhorse_sarranid.add_modifier(IModBit.SWAYBACKED)
warhorse_sarranid.add_modifier(IModBit.STUBBORN)
warhorse_sarranid.add_modifier(IModBit.SPIRITED)
warhorse_sarranid.add_modifier(IModBit.CHAMPION)
warhorse_sarranid.set_abundance(40)
warhorse_sarranid.set_body_armor(58)
warhorse_sarranid.set_difficulty(4)
warhorse_sarranid.set_hit_points(165)
warhorse_sarranid.set_speed_rating(44)
warhorse_sarranid.set_missile_speed(40)
warhorse_sarranid.set_weapon_length(112)
warhorse_sarranid.set_thrust_damage(32, 0)
warhorse_sarranid.allow_in_faction(fac.kingdom_6)


warhorse_steppe = Item("warhorse_steppe", "Steppe_Charger")
warhorse_steppe.add_mesh(ItemMesh("warhorse_steppe"))
warhorse_steppe.add_flag(ItemType.HORSE)
warhorse_steppe.add_flag(ItemFlag.IS_MERCHANDISE)
warhorse_steppe.set_price(1400)
warhorse_steppe.add_modifier(IModBit.HEAVY)
warhorse_steppe.add_modifier(IModBit.LAME)
warhorse_steppe.add_modifier(IModBit.SWAYBACKED)
warhorse_steppe.add_modifier(IModBit.STUBBORN)
warhorse_steppe.add_modifier(IModBit.SPIRITED)
warhorse_steppe.add_modifier(IModBit.CHAMPION)
warhorse_steppe.set_abundance(45)
warhorse_steppe.set_body_armor(40)
warhorse_steppe.set_difficulty(4)
warhorse_steppe.set_hit_points(150)
warhorse_steppe.set_speed_rating(50)
warhorse_steppe.set_missile_speed(40)
warhorse_steppe.set_weapon_length(112)
warhorse_steppe.set_thrust_damage(28, 0)
warhorse_steppe.allow_in_faction(fac.kingdom_3)
warhorse_steppe.allow_in_faction(fac.kingdom_2)


items_end = Item("items_end", "Items_End")
items_end.add_mesh(ItemMesh("shield_round_a"))
items_end.set_price(1)
items_end.set_abundance(100)


javelin_bow = Item("javelin_bow", "Javelin_Bow")
javelin_bow.add_mesh(ItemMesh("war_bow"))
javelin_bow.add_mesh(ItemMesh("war_bow_carry", ItemMesh.ixmesh_carry))
javelin_bow.add_flag(ItemType.BOW)
javelin_bow.add_flag(ItemFlag.IS_TWO_HANDED)
javelin_bow.add_flag(ItemFlag.IS_PRIMARY)
javelin_bow.add_capability(ItemCapability.SHOOT_BOW)
javelin_bow.add_capability(ItemCapability.CARRY_BOW_BACK)
javelin_bow.set_weight(1.5)
javelin_bow.set_abundance(100)
javelin_bow.set_speed_rating(84)
javelin_bow.set_missile_speed(59)
javelin_bow.set_thrust_damage(25, 1)
# -51.000000  1 600 1 1152921504606847017


knockdown_mace = Item("knockdown_mace", "Knockdown_Mace")
knockdown_mace.add_mesh(ItemMesh("flanged_mace"))
knockdown_mace.add_flag(ItemType.ONE_HANDED_WEAPON)
knockdown_mace.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
knockdown_mace.add_flag(ItemFlag.IS_PRIMARY)
knockdown_mace.add_flag(ItemFlag.CAN_KNOCK_DOWN)
knockdown_mace.add_capability(ItemCapability.ONEHANDED_OVERSWING)
knockdown_mace.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
knockdown_mace.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
knockdown_mace.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
knockdown_mace.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
knockdown_mace.add_capability(ItemCapability.CARRY_MACE_LEFT_HIP)
knockdown_mace.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
knockdown_mace.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
knockdown_mace.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
knockdown_mace.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
knockdown_mace.add_capability(ItemCapability.FORCE_64_BITS)
knockdown_mace.add_modifier(IModBit.RUSTY)
knockdown_mace.add_modifier(IModBit.CHIPPED)
knockdown_mace.add_modifier(IModBit.HEAVY)
knockdown_mace.set_weight(3.5)
knockdown_mace.set_abundance(100)
knockdown_mace.set_hit_points(24576)
knockdown_mace.set_speed_rating(103)
knockdown_mace.set_weapon_length(70)
knockdown_mace.set_thrust_damage(0, 1)
knockdown_mace.set_swing_damage(24, 2)


blood_drain_throwing_knives = Item("blood_drain_throwing_knives", "Blood_Drain_Throwing_Knives")
blood_drain_throwing_knives.add_mesh(ItemMesh("throwing_knife"))
blood_drain_throwing_knives.add_flag(ItemType.THROWN)
blood_drain_throwing_knives.add_flag(ItemFlag.IS_PRIMARY)
blood_drain_throwing_knives.add_capability(ItemCapability.THROW_KNIFE)
blood_drain_throwing_knives.add_modifier(IModBit.BENT)
blood_drain_throwing_knives.add_modifier(IModBit.BALANCED)
blood_drain_throwing_knives.add_modifier(IModBit.HEAVY)
blood_drain_throwing_knives.add_modifier(IModBit.LARGE_BAG)
blood_drain_throwing_knives.set_weight(2.5)
blood_drain_throwing_knives.set_abundance(100)
blood_drain_throwing_knives.set_speed_rating(121)
blood_drain_throwing_knives.set_missile_speed(25)
blood_drain_throwing_knives.set_max_ammo(5)
blood_drain_throwing_knives.set_thrust_damage(25, 1)


doom_javelins = Item("doom_javelins", "Doom_Javelins")
doom_javelins.add_mesh(ItemMesh("jarid_new_b"))
doom_javelins.add_mesh(ItemMesh("jarid_new_b_bag", ItemMesh.ixmesh_carry))
doom_javelins.add_flag(ItemType.THROWN)
doom_javelins.add_flag(ItemFlag.IS_PRIMARY)
doom_javelins.add_capability(ItemCapability.THROW_JAVELIN)
doom_javelins.add_capability(ItemCapability.CARRY_QUIVER_BACK)
doom_javelins.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
doom_javelins.add_modifier(IModBit.BENT)
doom_javelins.add_modifier(IModBit.BALANCED)
doom_javelins.add_modifier(IModBit.HEAVY)
doom_javelins.add_modifier(IModBit.LARGE_BAG)
doom_javelins.set_weight(3.0)
doom_javelins.set_abundance(100)
doom_javelins.set_speed_rating(87)
doom_javelins.set_missile_speed(22)
doom_javelins.set_weapon_length(65)
doom_javelins.set_max_ammo(2)
doom_javelins.set_thrust_damage(44, 1)


disarming_throwing_axe = Item("disarming_throwing_axe", "Disarming_Throwing_Axe")
disarming_throwing_axe.add_mesh(ItemMesh("throwing_axe_a"))
disarming_throwing_axe.add_flag(ItemType.THROWN)
disarming_throwing_axe.add_flag(ItemFlag.IS_PRIMARY)
disarming_throwing_axe.add_capability(ItemCapability.THROW_STONE)
disarming_throwing_axe.add_capability(ItemCapability.THROW_KNIFE)
disarming_throwing_axe.add_capability(ItemCapability.THROW_AXE)
disarming_throwing_axe.add_modifier(IModBit.BENT)
disarming_throwing_axe.add_modifier(IModBit.BALANCED)
disarming_throwing_axe.add_modifier(IModBit.LARGE_BAG)
disarming_throwing_axe.set_weight(1.0)
disarming_throwing_axe.set_abundance(100)
disarming_throwing_axe.set_speed_rating(98)
disarming_throwing_axe.set_missile_speed(18)
disarming_throwing_axe.set_weapon_length(53)
disarming_throwing_axe.set_max_ammo(1)
disarming_throwing_axe.set_thrust_damage(10, 0)


instakill_knife = Item("instakill_knife", "Instakill_Knife")
instakill_knife.add_mesh(ItemMesh("peasant_knife_new"))
instakill_knife.add_flag(ItemType.ONE_HANDED_WEAPON)
instakill_knife.add_flag(ItemFlag.NO_PARRY)
instakill_knife.add_flag(ItemFlag.IS_TWO_HANDED)
instakill_knife.add_flag(ItemFlag.IS_PRIMARY)
instakill_knife.add_flag(ItemFlag.IS_SECONDARY)
instakill_knife.add_capability(ItemCapability.ONEHANDED_TRUST)
instakill_knife.add_capability(ItemCapability.ONEHANDED_OVERSWING)
instakill_knife.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
instakill_knife.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
instakill_knife.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
instakill_knife.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
instakill_knife.add_capability(ItemCapability.CARRY_DAGGER_FRONT_LEFT)
instakill_knife.add_capability(ItemCapability.FORCE_64_BITS)
instakill_knife.add_modifier(IModBit.RUSTY)
instakill_knife.add_modifier(IModBit.CHIPPED)
instakill_knife.add_modifier(IModBit.BALANCED)
instakill_knife.add_modifier(IModBit.TEMPERED)
instakill_knife.set_weight(0.5)
instakill_knife.set_abundance(100)
instakill_knife.set_hit_points(21504)
instakill_knife.set_speed_rating(101)
instakill_knife.set_weapon_length(40)
instakill_knife.set_thrust_damage(13, 1)
instakill_knife.set_swing_damage(21, 0)


backstabber = Item("backstabber", "Backstabber")
backstabber.add_mesh(ItemMesh("sword_viking_a_small"))
backstabber.add_mesh(ItemMesh("sword_viking_a_small_scabbard", ItemMesh.ixmesh_carry))
backstabber.add_flag(ItemType.ONE_HANDED_WEAPON)
backstabber.add_flag(ItemFlag.IS_PRIMARY)
backstabber.add_capability(ItemCapability.ONEHANDED_TRUST)
backstabber.add_capability(ItemCapability.ONEHANDED_OVERSWING)
backstabber.add_capability(ItemCapability.ONEHANDED_SLASHRIGHT)
backstabber.add_capability(ItemCapability.ONEHANDED_SLASHLEFT)
backstabber.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHRIGHT)
backstabber.add_capability(ItemCapability.HORSEBACK_ONEHANDED_SLASHLEFT)
backstabber.add_capability(ItemCapability.CARRY_SWORD_LEFT_HIP)
backstabber.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
backstabber.add_capability(ItemCapability.ONEHANDED_PARRY_FORWARD)
backstabber.add_capability(ItemCapability.ONEHANDED_PARRY_UP)
backstabber.add_capability(ItemCapability.ONEHANDED_PARRY_RIGHT)
backstabber.add_capability(ItemCapability.ONEHANDED_PARRY_LEFT)
backstabber.add_capability(ItemCapability.FORCE_64_BITS)
backstabber.add_modifier(IModBit.RUSTY)
backstabber.add_modifier(IModBit.CHIPPED)
backstabber.add_modifier(IModBit.BALANCED)
backstabber.add_modifier(IModBit.TEMPERED)
backstabber.add_modifier(IModBit.MASTERWORK)
backstabber.set_weight(1.25)
backstabber.set_abundance(100)
backstabber.set_hit_points(20480)
backstabber.set_speed_rating(103)
backstabber.set_weapon_length(86)
backstabber.set_thrust_damage(13, 1)
backstabber.set_swing_damage(20, 0)


weak_beserker_dart = Item("weak_beserker_dart", "Weak_Beserker_Dart")
weak_beserker_dart.add_mesh(ItemMesh("dart_b"))
weak_beserker_dart.add_mesh(ItemMesh("dart_b_bag", ItemMesh.ixmesh_carry))
weak_beserker_dart.add_flag(ItemType.THROWN)
weak_beserker_dart.add_flag(ItemFlag.IS_PRIMARY)
weak_beserker_dart.add_capability(ItemCapability.THROW_JAVELIN)
weak_beserker_dart.add_capability(ItemCapability.CARRY_QUIVER_RIGHT_VERTICAL)
weak_beserker_dart.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
weak_beserker_dart.add_modifier(IModBit.BENT)
weak_beserker_dart.add_modifier(IModBit.BALANCED)
weak_beserker_dart.add_modifier(IModBit.HEAVY)
weak_beserker_dart.add_modifier(IModBit.LARGE_BAG)
weak_beserker_dart.set_weight(4.0)
weak_beserker_dart.set_abundance(100)
weak_beserker_dart.set_speed_rating(95)
weak_beserker_dart.set_missile_speed(28)
weak_beserker_dart.set_weapon_length(32)
weak_beserker_dart.set_max_ammo(1)
weak_beserker_dart.set_thrust_damage(5, 1)


team_change_dart = Item("team_change_dart", "Team_Change_Dart")
team_change_dart.add_mesh(ItemMesh("dart_a"))
team_change_dart.add_mesh(ItemMesh("dart_a_bag", ItemMesh.ixmesh_carry))
team_change_dart.add_flag(ItemType.THROWN)
team_change_dart.add_flag(ItemFlag.IS_PRIMARY)
team_change_dart.add_capability(ItemCapability.THROW_JAVELIN)
team_change_dart.add_capability(ItemCapability.CARRY_QUIVER_BACK)
team_change_dart.add_capability(ItemCapability.SHOW_HOLSTER_WHEN_DRAWN)
team_change_dart.add_modifier(IModBit.BENT)
team_change_dart.add_modifier(IModBit.BALANCED)
team_change_dart.add_modifier(IModBit.HEAVY)
team_change_dart.add_modifier(IModBit.LARGE_BAG)
team_change_dart.set_weight(5.0)
team_change_dart.set_abundance(100)
team_change_dart.set_speed_rating(93)
team_change_dart.set_missile_speed(27)
team_change_dart.set_weapon_length(45)
team_change_dart.set_max_ammo(1)
team_change_dart.set_thrust_damage(5, 1)


awesome_spear = Item("awesome_spear", "Awesome_Spear")
awesome_spear.add_mesh(ItemMesh("spear"))
awesome_spear.add_flag(ItemType.POLEARM)
awesome_spear.add_flag(ItemFlag.WOODEN_PARRY_SOUND)
awesome_spear.add_flag(ItemFlag.IS_PRIMARY)
awesome_spear.add_flag(ItemFlag.PENALTY_WITH_SHIELD)
awesome_spear.add_capability(ItemCapability.POLEARM_THRUST)
awesome_spear.add_capability(ItemCapability.POLEARM_OVERSWING)
awesome_spear.add_capability(ItemCapability.POLEARM_SLASHRIGHT)
awesome_spear.add_capability(ItemCapability.POLEARM_SLASHLEFT)
awesome_spear.add_capability(ItemCapability.ONEHANDED_LANCE_THRUST)
awesome_spear.add_capability(ItemCapability.HORSEBACK_ONEHANDED_LANCE_THRUST)
awesome_spear.add_capability(ItemCapability.CARRY_SPEAR)
awesome_spear.add_capability(ItemCapability.POLEARM_PARRY_FORWARD)
awesome_spear.add_capability(ItemCapability.POLEARM_PARRY_UP)
awesome_spear.add_capability(ItemCapability.POLEARM_PARRY_RIGHT)
awesome_spear.add_capability(ItemCapability.POLEARM_PARRY_LEFT)
awesome_spear.add_modifier(IModBit.CRACKED)
awesome_spear.add_modifier(IModBit.BENT)
awesome_spear.add_modifier(IModBit.BALANCED)
awesome_spear.set_weight(1.5)
awesome_spear.set_abundance(100)
awesome_spear.set_hit_points(41984)
awesome_spear.set_speed_rating(110)
awesome_spear.set_weapon_length(157)
awesome_spear.set_thrust_damage(33, 1)
awesome_spear.set_swing_damage(41, 0)


running_boots = Item("running_boots", "Running_Boots")
running_boots.add_mesh(ItemMesh("samurai_boots"))
running_boots.add_flag(ItemType.FOOT_ARMOR)
running_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
running_boots.add_modifier(IModBit.TETTERED)
running_boots.add_modifier(IModBit.RAGGED)
running_boots.add_modifier(IModBit.STURDY)
running_boots.add_modifier(IModBit.THICK)
running_boots.add_modifier(IModBit.HARDENED)
running_boots.set_weight(1.0)
running_boots.set_abundance(100)
running_boots.set_leg_armor(21)


power_gloves = Item("power_gloves", "Power_Gloves")
power_gloves.add_mesh(ItemMesh("scale_gauntlets_a_L"))
power_gloves.add_flag(ItemType.HAND_ARMOR)
power_gloves.add_modifier(IModBit.RUSTY)
power_gloves.add_modifier(IModBit.BATTERED)
power_gloves.add_modifier(IModBit.CRUDE)
power_gloves.add_modifier(IModBit.THICK)
power_gloves.add_modifier(IModBit.REINFORCED)
power_gloves.add_modifier(IModBit.LORDLY)
power_gloves.set_weight(0.75)
power_gloves.set_abundance(100)
power_gloves.set_body_armor(6)


invulnerable_helmet = Item("invulnerable_helmet", "Invulnerable_Helmet")
invulnerable_helmet.add_mesh(ItemMesh("maciejowski_helmet_new"))
invulnerable_helmet.add_flag(ItemType.HEAD_ARMOR)
invulnerable_helmet.add_flag(ItemFlag.COVERS_HEAD)
invulnerable_helmet.add_flag(ItemFlag.IS_COUCHABLE)
invulnerable_helmet.set_price(1240)
invulnerable_helmet.add_modifier(IModBit.CRACKED)
invulnerable_helmet.add_modifier(IModBit.RUSTY)
invulnerable_helmet.add_modifier(IModBit.BATTERED)
invulnerable_helmet.add_modifier(IModBit.CRUDE)
invulnerable_helmet.add_modifier(IModBit.THICK)
invulnerable_helmet.add_modifier(IModBit.REINFORCED)
invulnerable_helmet.add_modifier(IModBit.LORDLY)
invulnerable_helmet.set_weight(2.75)
invulnerable_helmet.set_abundance(100)
invulnerable_helmet.set_head_armor(63)


kicking_boots = Item("kicking_boots", "Kicking_Boots")
kicking_boots.add_mesh(ItemMesh("sarranid_camel_boots"))
kicking_boots.add_flag(ItemType.FOOT_ARMOR)
kicking_boots.add_flag(ItemFlag.ATTACH_ARMATURE)
kicking_boots.add_flag(ItemFlag.IS_CIVILIAN)
kicking_boots.add_flag(ItemFlag.NEXT_ITEM_AS_MELEE)
kicking_boots.add_modifier(IModBit.CRACKED)
kicking_boots.add_modifier(IModBit.RUSTY)
kicking_boots.add_modifier(IModBit.BATTERED)
kicking_boots.add_modifier(IModBit.CRUDE)
kicking_boots.add_modifier(IModBit.THICK)
kicking_boots.add_modifier(IModBit.REINFORCED)
kicking_boots.add_modifier(IModBit.LORDLY)
kicking_boots.set_weight(3.0)
kicking_boots.set_abundance(100)
kicking_boots.set_leg_armor(20)


restore_health_armour = Item("restore_health_armour", "Restore_Health_Armour")
restore_health_armour.add_mesh(ItemMesh("samurai_armor"))
restore_health_armour.add_flag(ItemType.BODY_ARMOR)
restore_health_armour.add_flag(ItemFlag.COVERS_LEGS)
restore_health_armour.add_flag(ItemFlag.DOESNT_COVER_HAIR)
restore_health_armour.add_flag(ItemFlag.CAN_PENETRATE_SHIELD)
restore_health_armour.add_modifier(IModBit.RUSTY)
restore_health_armour.add_modifier(IModBit.BATTERED)
restore_health_armour.add_modifier(IModBit.CRUDE)
restore_health_armour.add_modifier(IModBit.THICK)
restore_health_armour.add_modifier(IModBit.REINFORCED)
restore_health_armour.add_modifier(IModBit.LORDLY)
restore_health_armour.set_weight(12.0)
restore_health_armour.set_abundance(100)
restore_health_armour.set_body_armor(27)
restore_health_armour.set_leg_armor(11)


javelin_bow_ammo = Item("javelin_bow_ammo", "Shooting_Javelins")
javelin_bow_ammo.add_mesh(ItemMesh("javelin_bow_ammo"))
javelin_bow_ammo.add_mesh(ItemMesh("javelins_quiver_new", ItemMesh.ixmesh_carry))
javelin_bow_ammo.add_flag(ItemType.ARROWS)
javelin_bow_ammo.add_flag(ItemFlag.IS_DEFAULT_AMMO)
javelin_bow_ammo.add_capability(ItemCapability.CARRY_QUIVER_BACK)
javelin_bow_ammo.set_weight(4.0)
javelin_bow_ammo.set_abundance(100)
javelin_bow_ammo.set_weapon_length(75)
javelin_bow_ammo.set_max_ammo(15)
javelin_bow_ammo.set_thrust_damage(34, 1)


ccoop_new_items_end = Item("ccoop_new_items_end", "Items_End")
ccoop_new_items_end.add_mesh(ItemMesh("shield_round_a"))
ccoop_new_items_end.set_price(1)
ccoop_new_items_end.set_abundance(100)


